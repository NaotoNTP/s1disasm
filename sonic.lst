00000000                            ;  =========================================================================
00000000                            ; |           Sonic the Hedgehog Disassembly for Sega Mega Drive            |
00000000                            ;  =========================================================================
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx, Stealth and Esrael L.G. Neto
00000000                            

00000000                            ; ===========================================================================
00000000                            

00000000                            	include	"Constants.asm"
00000000                            ; ---------------------------------------------------------------------------
00000000                            ; Constants
00000000                            ; ---------------------------------------------------------------------------
00000000                            

00000000                            blah	equs	"blah"
00000000 626C 6168                  	dc.b	"\blah"
00000004                            

00000004                            blep	substr	2,4,"blah"
00000004 6C61 68                    	dc.b	"\blep"
00000007                            

00000007                            	pushp	"qmle"
00000007                            	pushp	"blah"
00000007                            

00000007                            	popp	
00000007 6C61 68                    	dc.b	"\blep"
0000000A                            

0000000A                            	popp	blep
0000000A 626C 6168                  	dc.b	"\blep"
0000000E                            

0000000E =00006978                  Size_of_SegaPCM:		equ $6978
0000000E                            

0000000E                            ; VDP addressses
0000000E =00C00000                  vdp_data_port:		equ $C00000
0000000E =00C00004                  vdp_control_port:	equ $C00004
0000000E =00C00008                  vdp_counter:		equ $C00008
0000000E                            

0000000E =00C00011                  psg_input:		equ $C00011
0000000E                            

0000000E                            ; Z80 addresses
0000000E =00A00000                  z80_ram:		equ $A00000	; start of Z80 RAM
0000000E =00A000EA                  z80_dac3_pitch:		equ $A000EA
0000000E =00A01FFD                  z80_dac_status:		equ $A01FFD
0000000E =00A01FFF                  z80_dac_sample:		equ $A01FFF
0000000E =00A02000                  z80_ram_end:		equ $A02000	; end of non-reserved Z80 RAM
0000000E =00A10001                  z80_version:		equ $A10001
0000000E =00A10002                  z80_port_1_data:	equ $A10002
0000000E =00A10008                  z80_port_1_control:	equ $A10008
0000000E =00A1000A                  z80_port_2_control:	equ $A1000A
0000000E =00A1000C                  z80_expansion_control:	equ $A1000C
0000000E =00A11100                  z80_bus_request:	equ $A11100
0000000E =00A11200                  z80_reset:		equ $A11200
0000000E =00A04000                  ym2612_a0:		equ $A04000
0000000E =00A04001                  ym2612_d0:		equ $A04001
0000000E =00A04002                  ym2612_a1:		equ $A04002
0000000E =00A04003                  ym2612_d1:		equ $A04003
0000000E                            

0000000E =00A14000                  security_addr:		equ $A14000
0000000E                            

0000000E                            ; Sound driver constants
0000000E =00000000                  TrackPlaybackControl:	equ 0		; All tracks
0000000E =00000001                  TrackVoiceControl:	equ 1		; All tracks
0000000E =00000002                  TrackTempoDivider:	equ 2		; All tracks
0000000E =00000004                  TrackDataPointer:	equ 4		; All tracks (4 bytes)
0000000E =00000008                  TrackTranspose:		equ 8		; FM/PSG only (sometimes written to as a word, to include TrackVolume)
0000000E =00000009                  TrackVolume:		equ 9		; FM/PSG only
0000000E =0000000A                  TrackAMSFMSPan:		equ $A		; FM/DAC only
0000000E =0000000B                  TrackVoiceIndex:	equ $B		; FM/PSG only
0000000E =0000000C                  TrackVolEnvIndex:	equ $C		; PSG only
0000000E =0000000D                  TrackStackPointer:	equ $D		; All tracks
0000000E =0000000E                  TrackDurationTimeout:	equ $E		; All tracks
0000000E =0000000F                  TrackSavedDuration:	equ $F		; All tracks
0000000E =00000010                  TrackSavedDAC:		equ $10		; DAC only
0000000E =00000010                  TrackFreq:		equ $10		; FM/PSG only (2 bytes)
0000000E =00000012                  TrackNoteTimeout:	equ $12		; FM/PSG only
0000000E =00000013                  TrackNoteTimeoutMaster: equ $13		; FM/PSG only
0000000E =00000014                  TrackModulationPtr:	equ $14		; FM/PSG only (4 bytes)
0000000E =00000018                  TrackModulationWait:	equ $18		; FM/PSG only
0000000E =00000019                  TrackModulationSpeed:	equ $19		; FM/PSG only
0000000E =0000001A                  TrackModulationDelta:	equ $1A		; FM/PSG only
0000000E =0000001B                  TrackModulationSteps:	equ $1B		; FM/PSG only
0000000E =0000001C                  TrackModulationVal:	equ $1C		; FM/PSG only (2 bytes)
0000000E =0000001E                  TrackDetune:		equ $1E		; FM/PSG only
0000000E =0000001F                  TrackPSGNoise:		equ $1F		; PSG only
0000000E =0000001F                  TrackFeedbackAlgo:	equ $1F		; FM only
0000000E =00000020                  TrackVoicePtr:		equ $20		; FM SFX only (4 bytes)
0000000E =00000024                  TrackLoopCounters:	equ $24		; All tracks (multiple bytes)
0000000E                            TrackGoSubStack:	equ TrackSz	; All tracks (multiple bytes. This constant won't get to be used because of an optimisation that just uses TrackSz)
0000000E                            

0000000E =00000030                  TrackSz:	equ $30
0000000E                            

0000000E                            ; VRAM data
0000000E =0000C000                  vram_fg:	equ $C000	; foreground namespace
0000000E =0000E000                  vram_bg:	equ $E000	; background namespace
0000000E =0000F000                  vram_sonic:	equ $F000	; Sonic graphics
0000000E =0000F800                  vram_sprites:	equ $F800	; sprite table
0000000E =0000FC00                  vram_hscroll:	equ $FC00	; horizontal scroll table
0000000E                            

0000000E                            ; Game modes
0000000E                            id_Sega:	equ ptr_GM_Sega-GameModeArray	; $00
0000000E                            id_Title:	equ ptr_GM_Title-GameModeArray	; $04
0000000E                            id_Demo:	equ ptr_GM_Demo-GameModeArray	; $08
0000000E                            id_Level:	equ ptr_GM_Level-GameModeArray	; $0C
0000000E                            id_Special:	equ ptr_GM_Special-GameModeArray; $10
0000000E                            id_Continue:	equ ptr_GM_Cont-GameModeArray	; $14
0000000E                            id_Ending:	equ ptr_GM_Ending-GameModeArray	; $18
0000000E                            id_Credits:	equ ptr_GM_Credits-GameModeArray; $1C
0000000E                            

0000000E                            ; Levels
0000000E =00000000                  id_GHZ:		equ 0
0000000E =00000001                  id_LZ:		equ 1
0000000E =00000002                  id_MZ:		equ 2
0000000E =00000003                  id_SLZ:		equ 3
0000000E =00000004                  id_SYZ:		equ 4
0000000E =00000005                  id_SBZ:		equ 5
0000000E =00000006                  id_EndZ:	equ 6
0000000E =00000007                  id_SS:		equ 7
0000000E                            

0000000E                            ; Colours
0000000E =00000000                  cBlack:		equ $000		; colour black
0000000E =00000EEE                  cWhite:		equ $EEE		; colour white
0000000E =00000E00                  cBlue:		equ $E00		; colour blue
0000000E =000000E0                  cGreen:		equ $0E0		; colour green
0000000E =0000000E                  cRed:		equ $00E		; colour red
0000000E =000000EE                  cYellow:	equ cGreen+cRed		; colour yellow
0000000E =00000EE0                  cAqua:		equ cGreen+cBlue	; colour aqua
0000000E =00000E0E                  cMagenta:	equ cBlue+cRed		; colour magenta
0000000E                            

0000000E                            ; Joypad input
0000000E =00000080                  btnStart:	equ %10000000 ; Start button	($80)
0000000E =00000040                  btnA:		equ %01000000 ; A		($40)
0000000E =00000020                  btnC:		equ %00100000 ; C		($20)
0000000E =00000010                  btnB:		equ %00010000 ; B		($10)
0000000E =00000008                  btnR:		equ %00001000 ; Right		($08)
0000000E =00000004                  btnL:		equ %00000100 ; Left		($04)
0000000E =00000002                  btnDn:		equ %00000010 ; Down		($02)
0000000E =00000001                  btnUp:		equ %00000001 ; Up		($01)
0000000E =0000000F                  btnDir:		equ %00001111 ; Any direction	($0F)
0000000E =00000070                  btnABC:		equ %01110000 ; A, B or C	($70)
0000000E =00000007                  bitStart:	equ 7
0000000E =00000006                  bitA:		equ 6
0000000E =00000005                  bitC:		equ 5
0000000E =00000004                  bitB:		equ 4
0000000E =00000003                  bitR:		equ 3
0000000E =00000002                  bitL:		equ 2
0000000E =00000001                  bitDn:		equ 1
0000000E =00000000                  bitUp:		equ 0
0000000E                            

0000000E                            ; Object variables
0000000E =00000001                  obRender:	equ 1	; bitfield for x/y flip, display mode
0000000E =00000002                  obGfx:		equ 2	; palette line & VRAM setting (2 bytes)
0000000E =00000004                  obMap:		equ 4	; mappings address (4 bytes)
0000000E =00000008                  obX:		equ 8	; x-axis position (2-4 bytes)
0000000E =0000000A                  obScreenY:	equ $A	; y-axis position for screen-fixed items (2 bytes)
0000000E =0000000C                  obY:		equ $C	; y-axis position (2-4 bytes)
0000000E =00000010                  obVelX:		equ $10	; x-axis velocity (2 bytes)
0000000E =00000012                  obVelY:		equ $12	; y-axis velocity (2 bytes)
0000000E =00000014                  obInertia:	equ $14	; potential speed (2 bytes)
0000000E =00000016                  obHeight:	equ $16	; height/2
0000000E =00000017                  obWidth:	equ $17	; width/2
0000000E =00000018                  obPriority:	equ $18	; sprite stack priority -- 0 is front
0000000E =00000019                  obActWid:	equ $19	; action width
0000000E =0000001A                  obFrame:	equ $1A	; current frame displayed
0000000E =0000001B                  obAniFrame:	equ $1B	; current frame in animation script
0000000E =0000001C                  obAnim:		equ $1C	; current animation
0000000E =0000001D                  obNextAni:	equ $1D	; next animation
0000000E =0000001E                  obTimeFrame:	equ $1E	; time to next frame
0000000E =0000001F                  obDelayAni:	equ $1F	; time to delay animation
0000000E =00000020                  obColType:	equ $20	; collision response type
0000000E =00000021                  obColProp:	equ $21	; collision extra property
0000000E =00000022                  obStatus:	equ $22	; orientation or mode
0000000E =00000023                  obRespawnNo:	equ $23	; respawn list index number
0000000E =00000024                  obRoutine:	equ $24	; routine number
0000000E =00000025                  ob2ndRout:	equ $25	; secondary routine number
0000000E =00000026                  obAngle:	equ $26	; angle
0000000E =00000028                  obSubtype:	equ $28	; object subtype
0000000E =00000025                  obSolid:	equ ob2ndRout ; solid status flag
0000000E                            

0000000E                            ; Object variables used by Sonic
0000000E =00000030                  flashtime:	equ $30	; time between flashes after getting hit
0000000E =00000032                  invtime:	equ $32	; time left for invincibility
0000000E =00000034                  shoetime:	equ $34	; time left for speed shoes
0000000E =0000003D                  standonobject:	equ $3D	; object Sonic stands on
0000000E                            

0000000E                            ; Object variables (Sonic 2 disassembly nomenclature)
0000000E =00000001                  render_flags:	equ 1	; bitfield for x/y flip, display mode
0000000E =00000002                  art_tile:	equ 2	; palette line & VRAM setting (2 bytes)
0000000E =00000004                  mappings:	equ 4	; mappings address (4 bytes)
0000000E =00000008                  x_pos:		equ 8	; x-axis position (2-4 bytes)
0000000E =0000000C                  y_pos:		equ $C	; y-axis position (2-4 bytes)
0000000E =00000010                  x_vel:		equ $10	; x-axis velocity (2 bytes)
0000000E =00000012                  y_vel:		equ $12	; y-axis velocity (2 bytes)
0000000E =00000016                  y_radius:	equ $16	; height/2
0000000E =00000017                  x_radius:	equ $17	; width/2
0000000E =00000018                  priority:	equ $18	; sprite stack priority -- 0 is front
0000000E =00000019                  width_pixels:	equ $19	; action width
0000000E =0000001A                  mapping_frame:	equ $1A	; current frame displayed
0000000E =0000001B                  anim_frame:	equ $1B	; current frame in animation script
0000000E =0000001C                  anim:		equ $1C	; current animation
0000000E =0000001D                  next_anim:	equ $1D	; next animation
0000000E =0000001E                  anim_frame_duration: equ $1E ; time to next frame
0000000E =00000020                  collision_flags: equ $20 ; collision response type
0000000E =00000021                  collision_property: equ $21 ; collision extra property
0000000E =00000022                  status:		equ $22	; orientation or mode
0000000E =00000023                  respawn_index:	equ $23	; respawn list index number
0000000E =00000024                  routine:	equ $24	; routine number
0000000E =00000025                  routine_secondary: equ $25 ; secondary routine number
0000000E =00000026                  angle:		equ $26	; angle
0000000E =00000028                  subtype:	equ $28	; object subtype
0000000E                            

0000000E                            ; Animation flags
0000000E =000000FF                  afEnd:		equ $FF	; return to beginning of animation
0000000E =000000FE                  afBack:		equ $FE	; go back (specified number) bytes
0000000E =000000FD                  afChange:	equ $FD	; run specified animation
0000000E =000000FC                  afRoutine:	equ $FC	; increment routine counter
0000000E =000000FB                  afReset:	equ $FB	; reset animation and 2nd object routine counter
0000000E =000000FA                  af2ndRoutine:	equ $FA	; increment 2nd routine counter
0000000E                            

0000000E                            ; Background music
0000000E =00000081                  bgm__First:	equ $81
0000000E                            bgm_GHZ:	equ ((ptr_mus81-MusicIndex)/4)+bgm__First
0000000E                            bgm_LZ:		equ ((ptr_mus82-MusicIndex)/4)+bgm__First
0000000E                            bgm_MZ:		equ ((ptr_mus83-MusicIndex)/4)+bgm__First
0000000E                            bgm_SLZ:	equ ((ptr_mus84-MusicIndex)/4)+bgm__First
0000000E                            bgm_SYZ:	equ ((ptr_mus85-MusicIndex)/4)+bgm__First
0000000E                            bgm_SBZ:	equ ((ptr_mus86-MusicIndex)/4)+bgm__First
0000000E                            bgm_Invincible:	equ ((ptr_mus87-MusicIndex)/4)+bgm__First
0000000E                            bgm_ExtraLife:	equ ((ptr_mus88-MusicIndex)/4)+bgm__First
0000000E                            bgm_SS:		equ ((ptr_mus89-MusicIndex)/4)+bgm__First
0000000E                            bgm_Title:	equ ((ptr_mus8A-MusicIndex)/4)+bgm__First
0000000E                            bgm_Ending:	equ ((ptr_mus8B-MusicIndex)/4)+bgm__First
0000000E                            bgm_Boss:	equ ((ptr_mus8C-MusicIndex)/4)+bgm__First
0000000E                            bgm_FZ:		equ ((ptr_mus8D-MusicIndex)/4)+bgm__First
0000000E                            bgm_GotThrough:	equ ((ptr_mus8E-MusicIndex)/4)+bgm__First
0000000E                            bgm_GameOver:	equ ((ptr_mus8F-MusicIndex)/4)+bgm__First
0000000E                            bgm_Continue:	equ ((ptr_mus90-MusicIndex)/4)+bgm__First
0000000E                            bgm_Credits:	equ ((ptr_mus91-MusicIndex)/4)+bgm__First
0000000E                            bgm_Drowning:	equ ((ptr_mus92-MusicIndex)/4)+bgm__First
0000000E                            bgm_Emerald:	equ ((ptr_mus93-MusicIndex)/4)+bgm__First
0000000E                            bgm__Last:	equ ((ptr_musend-MusicIndex-4)/4)+bgm__First
0000000E                            

0000000E                            ; Sound effects
0000000E =000000A0                  sfx__First:	equ $A0
0000000E                            sfx_Jump:	equ ((ptr_sndA0-SoundIndex)/4)+sfx__First
0000000E                            sfx_Lamppost:	equ ((ptr_sndA1-SoundIndex)/4)+sfx__First
0000000E                            sfx_A2:		equ ((ptr_sndA2-SoundIndex)/4)+sfx__First
0000000E                            sfx_Death:	equ ((ptr_sndA3-SoundIndex)/4)+sfx__First
0000000E                            sfx_Skid:	equ ((ptr_sndA4-SoundIndex)/4)+sfx__First
0000000E                            sfx_A5:		equ ((ptr_sndA5-SoundIndex)/4)+sfx__First
0000000E                            sfx_HitSpikes:	equ ((ptr_sndA6-SoundIndex)/4)+sfx__First
0000000E                            sfx_Push:	equ ((ptr_sndA7-SoundIndex)/4)+sfx__First
0000000E                            sfx_SSGoal:	equ ((ptr_sndA8-SoundIndex)/4)+sfx__First
0000000E                            sfx_SSItem:	equ ((ptr_sndA9-SoundIndex)/4)+sfx__First
0000000E                            sfx_Splash:	equ ((ptr_sndAA-SoundIndex)/4)+sfx__First
0000000E                            sfx_AB:		equ ((ptr_sndAB-SoundIndex)/4)+sfx__First
0000000E                            sfx_HitBoss:	equ ((ptr_sndAC-SoundIndex)/4)+sfx__First
0000000E                            sfx_Bubble:	equ ((ptr_sndAD-SoundIndex)/4)+sfx__First
0000000E                            sfx_Fireball:	equ ((ptr_sndAE-SoundIndex)/4)+sfx__First
0000000E                            sfx_Shield:	equ ((ptr_sndAF-SoundIndex)/4)+sfx__First
0000000E                            sfx_Saw:	equ ((ptr_sndB0-SoundIndex)/4)+sfx__First
0000000E                            sfx_Electric:	equ ((ptr_sndB1-SoundIndex)/4)+sfx__First
0000000E                            sfx_Drown:	equ ((ptr_sndB2-SoundIndex)/4)+sfx__First
0000000E                            sfx_Flamethrower: equ ((ptr_sndB3-SoundIndex)/4)+sfx__First
0000000E                            sfx_Bumper:	equ ((ptr_sndB4-SoundIndex)/4)+sfx__First
0000000E                            sfx_Ring:	equ ((ptr_sndB5-SoundIndex)/4)+sfx__First
0000000E                            sfx_SpikesMove:	equ ((ptr_sndB6-SoundIndex)/4)+sfx__First
0000000E                            sfx_Rumbling:	equ ((ptr_sndB7-SoundIndex)/4)+sfx__First
0000000E                            sfx_B8:		equ ((ptr_sndB8-SoundIndex)/4)+sfx__First
0000000E                            sfx_Collapse:	equ ((ptr_sndB9-SoundIndex)/4)+sfx__First
0000000E                            sfx_SSGlass:	equ ((ptr_sndBA-SoundIndex)/4)+sfx__First
0000000E                            sfx_Door:	equ ((ptr_sndBB-SoundIndex)/4)+sfx__First
0000000E                            sfx_Teleport:	equ ((ptr_sndBC-SoundIndex)/4)+sfx__First
0000000E                            sfx_ChainStomp:	equ ((ptr_sndBD-SoundIndex)/4)+sfx__First
0000000E                            sfx_Roll:	equ ((ptr_sndBE-SoundIndex)/4)+sfx__First
0000000E                            sfx_Continue:	equ ((ptr_sndBF-SoundIndex)/4)+sfx__First
0000000E                            sfx_Basaran:	equ ((ptr_sndC0-SoundIndex)/4)+sfx__First
0000000E                            sfx_BreakItem:	equ ((ptr_sndC1-SoundIndex)/4)+sfx__First
0000000E                            sfx_Warning:	equ ((ptr_sndC2-SoundIndex)/4)+sfx__First
0000000E                            sfx_GiantRing:	equ ((ptr_sndC3-SoundIndex)/4)+sfx__First
0000000E                            sfx_Bomb:	equ ((ptr_sndC4-SoundIndex)/4)+sfx__First
0000000E                            sfx_Cash:	equ ((ptr_sndC5-SoundIndex)/4)+sfx__First
0000000E                            sfx_RingLoss:	equ ((ptr_sndC6-SoundIndex)/4)+sfx__First
0000000E                            sfx_ChainRise:	equ ((ptr_sndC7-SoundIndex)/4)+sfx__First
0000000E                            sfx_Burning:	equ ((ptr_sndC8-SoundIndex)/4)+sfx__First
0000000E                            sfx_Bonus:	equ ((ptr_sndC9-SoundIndex)/4)+sfx__First
0000000E                            sfx_EnterSS:	equ ((ptr_sndCA-SoundIndex)/4)+sfx__First
0000000E                            sfx_WallSmash:	equ ((ptr_sndCB-SoundIndex)/4)+sfx__First
0000000E                            sfx_Spring:	equ ((ptr_sndCC-SoundIndex)/4)+sfx__First
0000000E                            sfx_Switch:	equ ((ptr_sndCD-SoundIndex)/4)+sfx__First
0000000E                            sfx_RingLeft:	equ ((ptr_sndCE-SoundIndex)/4)+sfx__First
0000000E                            sfx_Signpost:	equ ((ptr_sndCF-SoundIndex)/4)+sfx__First
0000000E                            sfx__Last:	equ ((ptr_sndend-SoundIndex-4)/4)+sfx__First
0000000E                            

0000000E                            ; Special sound effects
0000000E =000000D0                  spec__First:	equ $D0
0000000E                            sfx_Waterfall:	equ ((ptr_sndD0-SpecSoundIndex)/4)+spec__First
0000000E                            spec__Last:	equ ((ptr_specend-SpecSoundIndex-4)/4)+spec__First
0000000E                            

0000000E =000000E0                  flg__First:	equ $E0
0000000E                            bgm_Fade:	equ ((ptr_flgE0-Sound_ExIndex)/4)+flg__First
0000000E                            sfx_Sega:	equ ((ptr_flgE1-Sound_ExIndex)/4)+flg__First
0000000E                            bgm_Speedup:	equ ((ptr_flgE2-Sound_ExIndex)/4)+flg__First
0000000E                            bgm_Slowdown:	equ ((ptr_flgE3-Sound_ExIndex)/4)+flg__First
0000000E                            bgm_Stop:	equ ((ptr_flgE4-Sound_ExIndex)/4)+flg__First
0000000E                            flg__Last:	equ ((ptr_flgend-Sound_ExIndex-4)/4)+flg__First
0000000E                            

0000000E                            ; Sonic frame IDs
0000000E =00000000                  fr_Null:	equ 0
0000000E =00000001                  fr_Stand:	equ 1
0000000E =00000002                  fr_Wait1:	equ 2
0000000E =00000003                  fr_Wait2:	equ 3
0000000E =00000004                  fr_Wait3:	equ 4
0000000E =00000005                  fr_LookUp:	equ 5
0000000E =00000006                  fr_Walk11:	equ 6
0000000E =00000007                  fr_Walk12:	equ 7
0000000E =00000008                  fr_Walk13:	equ 8
0000000E =00000009                  fr_Walk14:	equ 9
0000000E =0000000A                  fr_Walk15:	equ $A
0000000E =0000000B                  fr_Walk16:	equ $B
0000000E =0000000C                  fr_Walk21:	equ $C
0000000E =0000000D                  fr_Walk22:	equ $D
0000000E =0000000E                  fr_Walk23:	equ $E
0000000E =0000000F                  fr_Walk24:	equ $F
0000000E =00000010                  fr_Walk25:	equ $10
0000000E =00000011                  fr_Walk26:	equ $11
0000000E =00000012                  fr_Walk31:	equ $12
0000000E =00000013                  fr_Walk32:	equ $13
0000000E =00000014                  fr_Walk33:	equ $14
0000000E =00000015                  fr_Walk34:	equ $15
0000000E =00000016                  fr_Walk35:	equ $16
0000000E =00000017                  fr_Walk36:	equ $17
0000000E =00000018                  fr_Walk41:	equ $18
0000000E =00000019                  fr_Walk42:	equ $19
0000000E =0000001A                  fr_Walk43:	equ $1A
0000000E =0000001B                  fr_Walk44:	equ $1B
0000000E =0000001C                  fr_Walk45:	equ $1C
0000000E =0000001D                  fr_Walk46:	equ $1D
0000000E =0000001E                  fr_Run11:	equ $1E
0000000E =0000001F                  fr_Run12:	equ $1F
0000000E =00000020                  fr_Run13:	equ $20
0000000E =00000021                  fr_Run14:	equ $21
0000000E =00000022                  fr_Run21:	equ $22
0000000E =00000023                  fr_Run22:	equ $23
0000000E =00000024                  fr_Run23:	equ $24
0000000E =00000025                  fr_Run24:	equ $25
0000000E =00000026                  fr_Run31:	equ $26
0000000E =00000027                  fr_Run32:	equ $27
0000000E =00000028                  fr_Run33:	equ $28
0000000E =00000029                  fr_Run34:	equ $29
0000000E =0000002A                  fr_Run41:	equ $2A
0000000E =0000002B                  fr_Run42:	equ $2B
0000000E =0000002C                  fr_Run43:	equ $2C
0000000E =0000002D                  fr_Run44:	equ $2D
0000000E =0000002E                  fr_Roll1:	equ $2E
0000000E =0000002F                  fr_Roll2:	equ $2F
0000000E =00000030                  fr_Roll3:	equ $30
0000000E =00000031                  fr_Roll4:	equ $31
0000000E =00000032                  fr_Roll5:	equ $32
0000000E =00000033                  fr_Warp1:	equ $33
0000000E =00000034                  fr_Warp2:	equ $34
0000000E =00000035                  fr_Warp3:	equ $35
0000000E =00000036                  fr_Warp4:	equ $36
0000000E =00000037                  fr_Stop1:	equ $37
0000000E =00000038                  fr_Stop2:	equ $38
0000000E =00000039                  fr_Duck:	equ $39
0000000E =0000003A                  fr_Balance1:	equ $3A
0000000E =0000003B                  fr_Balance2:	equ $3B
0000000E =0000003C                  fr_Float1:	equ $3C
0000000E =0000003D                  fr_Float2:	equ $3D
0000000E =0000003E                  fr_Float3:	equ $3E
0000000E =0000003F                  fr_Float4:	equ $3F
0000000E =00000040                  fr_Spring:	equ $40
0000000E =00000041                  fr_Hang1:	equ $41
0000000E =00000042                  fr_Hang2:	equ $42
0000000E =00000043                  fr_Leap1:	equ $43
0000000E =00000044                  fr_Leap2:	equ $44
0000000E =00000045                  fr_Push1:	equ $45
0000000E =00000046                  fr_Push2:	equ $46
0000000E =00000047                  fr_Push3:	equ $47
0000000E =00000048                  fr_Push4:	equ $48
0000000E =00000049                  fr_Surf:	equ $49
0000000E =0000004A                  fr_BubStand:	equ $4A
0000000E =0000004B                  fr_Burnt:	equ $4B
0000000E =0000004C                  fr_Drown:	equ $4C
0000000E =0000004D                  fr_Death:	equ $4D
0000000E =0000004E                  fr_Shrink1:	equ $4E
0000000E =0000004F                  fr_Shrink2:	equ $4F
0000000E =00000050                  fr_Shrink3:	equ $50
0000000E =00000051                  fr_Shrink4:	equ $51
0000000E =00000052                  fr_Shrink5:	equ $52
0000000E =00000053                  fr_Float5:	equ $53
0000000E =00000054                  fr_Float6:	equ $54
0000000E =00000055                  fr_Injury:	equ $55
0000000E =00000056                  fr_GetAir:	equ $56
0000000E =00000057                  fr_WaterSlide:	equ $57
0000000E =00000057                  fr_WaterSlide:	equ $57
0000000E                            	include	"Variables.asm"
0000000E                            ; Variables (v) and Flags (f)
0000000E                            

0000000E =FFFFFC00                  v_regbuffer:	equ $FFFFFC00	; stores registers d0-a7 during an error event ($40 bytes)
0000000E =FFFFFC40                  v_spbuffer:	equ $FFFFFC40	; stores most recent sp address (4 bytes)
0000000E =FFFFFC44                  v_errortype:	equ $FFFFFC44	; error type
0000000E                            

0000000E =00FF0000                  v_256x256:	equ   $FF0000	; 256x256 tile mappings ($A400 bytes)
0000000E =FFFFA400                  v_lvllayout:	equ $FFFFA400	; level and background layouts ($400 bytes)
0000000E =FFFFA800                  v_bgscroll_buffer:	equ	$FFFFA800	; background scroll buffer ($200 bytes)
0000000E =FFFFAA00                  v_ngfx_buffer:	equ $FFFFAA00	; Nemesis graphics decompression buffer ($200 bytes)
0000000E =FFFFAC00                  v_spritequeue:	equ $FFFFAC00	; sprite display queue, in order of priority ($400 bytes)
0000000E =FFFFB000                  v_16x16:		equ $FFFFB000	; 16x16 tile mappings
0000000E                            

0000000E =FFFFC800                  v_sgfx_buffer:	equ $FFFFC800	; buffered Sonic graphics ($17 cells) ($2E0 bytes)
0000000E =FFFFCB00                  v_tracksonic:	equ $FFFFCB00	; position tracking data for Sonic ($100 bytes)
0000000E =FFFFCC00                  v_hscrolltablebuffer:	equ $FFFFCC00	; scrolling table data (actually $380 bytes, but $400 is reserved for it)
0000000E                            

0000000E =FFFFD000                  v_objspace:	equ $FFFFD000	; object variable space ($40 bytes per object) ($2000 bytes)
0000000E                            

0000000E                            ; Title screen objects
0000000E =FFFFD080                  v_sonicteam	= v_objspace+$80	; object variable space for the "SONIC TEAM PRESENTS" text ($40 bytes)
0000000E =FFFFD040                  v_titlesonic	= v_objspace+$40	; object variable space for Sonic in the title screen ($40 bytes)
0000000E =FFFFD080                  v_pressstart	= v_objspace+$80	; object variable space for the "PRESS START BUTTON" text ($40 bytes)
0000000E =FFFFD0C0                  v_titletm	= v_objspace+$C0	; object variable space for the trademark symbol ($40 bytes)
0000000E =FFFFD100                  v_ttlsonichide	= v_objspace+$100	; object variable space for hiding part of Sonic ($40 bytes)
0000000E                            

0000000E                            ; Level objects
0000000E =FFFFD000                  v_player	= v_objspace		; object variable space for Sonic ($40 bytes)
0000000E =FFFFD040                  v_hud		= v_objspace+$40	; object variable space for the HUD ($40 bytes)
0000000E                            

0000000E =FFFFD080                  v_titlecard	= v_objspace+$80	; object variable space for the title card ($100 bytes)
0000000E =FFFFD080                  v_ttlcardname	= v_titlecard		; object variable space for the title card zone name text ($40 bytes)
0000000E =FFFFD0C0                  v_ttlcardzone	= v_titlecard+$40	; object variable space for the title card "ZONE" text ($40 bytes)
0000000E =FFFFD100                  v_ttlcardact	= v_titlecard+$80	; object variable space for the title card act text ($40 bytes)
0000000E =FFFFD140                  v_ttlcardoval	= v_titlecard+$C0	; object variable space for the title card oval ($40 bytes)
0000000E                            

0000000E =FFFFD080                  v_gameovertext1	= v_objspace+$80	; object variable space for the "GAME"/"TIME" in "GAME OVER"/"TIME OVER" text ($40 bytes)
0000000E =FFFFD0C0                  v_gameovertext2	= v_objspace+$C0	; object variable space for the "OVER" in "GAME OVER"/"TIME OVER" text ($40 bytes)
0000000E                            

0000000E =FFFFD180                  v_shieldobj	= v_objspace+$180	; object variable space for the shield ($40 bytes)
0000000E =FFFFD200                  v_starsobj1	= v_objspace+$200	; object variable space for the invincibility stars #1 ($40 bytes)
0000000E =FFFFD240                  v_starsobj2	= v_objspace+$240	; object variable space for the invincibility stars #2 ($40 bytes)
0000000E =FFFFD280                  v_starsobj3	= v_objspace+$280	; object variable space for the invincibility stars #3 ($40 bytes)
0000000E =FFFFD2C0                  v_starsobj4	= v_objspace+$2C0	; object variable space for the invincibility stars #4 ($40 bytes)
0000000E                            

0000000E =FFFFD300                  v_splash	= v_objspace+$300	; object variable space for the water splash ($40 bytes)
0000000E =FFFFD340                  v_sonicbubbles	= v_objspace+$340	; object variable space for the bubbles that come out of Sonic's mouth/drown countdown ($40 bytes)
0000000E =FFFFD780                  v_watersurface1	= v_objspace+$780	; object variable space for the water surface #1 ($40 bytes)
0000000E =FFFFD7C0                  v_watersurface2	= v_objspace+$7C0	; object variable space for the water surface #1 ($40 bytes)
0000000E                            

0000000E =FFFFD5C0                  v_endcard	= v_objspace+$5C0	; object variable space for the level results card ($1C0 bytes)
0000000E =FFFFD5C0                  v_endcardsonic	= v_endcard		; object variable space for the level results card "SONIC HAS" text ($40 bytes)
0000000E =FFFFD600                  v_endcardpassed	= v_endcard+$40		; object variable space for the level results card "PASSED" text ($40 bytes)
0000000E =FFFFD640                  v_endcardact	= v_endcard+$80		; object variable space for the level results card act text ($40 bytes)
0000000E =FFFFD680                  v_endcardscore	= v_endcard+$C0		; object variable space for the level results card score tally ($40 bytes)
0000000E =FFFFD6C0                  v_endcardtime	= v_endcard+$100	; object variable space for the level results card time bonus tally ($40 bytes)
0000000E =FFFFD700                  v_endcardring	= v_endcard+$140	; object variable space for the level results card ring bonus tally ($40 bytes)
0000000E =FFFFD740                  v_endcardoval	= v_endcard+$180	; object variable space for the level results card oval ($40 bytes)
0000000E                            

0000000E =FFFFD800                  v_lvlobjspace	= v_objspace+$800	; level object variable space ($1800 bytes)
0000000E =FFFFF000                  v_lvlobjend	= v_lvlobjspace+$1800
0000000E                            

0000000E                            ; Special Stage objects
0000000E =FFFFD5C0                  v_ssrescard	= v_objspace+$5C0	; object variable space for the Special Stage results card ($140 bytes)
0000000E =FFFFD5C0                  v_ssrestext	= v_ssrescard		; object variable space for the Special Stage results card text ($40 bytes)
0000000E =FFFFD600                  v_ssresscore	= v_ssrescard+$40	; object variable space for the Special Stage results card score tally ($40 bytes)
0000000E =FFFFD640                  v_ssresring	= v_ssrescard+$80	; object variable space for the Special Stage results card ring bonus tally ($40 bytes)
0000000E =FFFFD680                  v_ssresoval	= v_ssrescard+$C0	; object variable space for the Special Stage results card oval ($40 bytes)
0000000E =FFFFD6C0                  v_ssrescontinue	= v_ssrescard+$100	; object variable space for the Special Stage results card continue icon ($40 bytes)
0000000E =FFFFD800                  v_ssresemeralds	= v_objspace+$800	; object variable space for the emeralds in the Special Stage results ($180 bytes)
0000000E                            

0000000E                            ; Continue screen objects
0000000E =FFFFD040                  v_continuetext	= v_objspace+$40	; object variable space for the continue screen text ($40 bytes)
0000000E =FFFFD080                  v_continuelight	= v_objspace+$80	; object variable space for the continue screen light spot ($40 bytes)
0000000E =FFFFD0C0                  v_continueicon	= v_objspace+$C0	; object variable space for the continue screen icon ($40 bytes)
0000000E                            

0000000E                            ; Ending objects
0000000E =FFFFD400                  v_endemeralds	= v_objspace+$400	; object variable space for the emeralds in the ending ($180 bytes)
0000000E =FFFFD400                  v_endlogo	= v_objspace+$400	; object variable space for the logo in the ending ($40 bytes)
0000000E                            

0000000E                            ; Credits objects
0000000E =FFFFD080                  v_credits	= v_objspace+$80	; object variable space for the credits text ($40 bytes)
0000000E =FFFFD080                  v_endeggman	= v_objspace+$80	; object variable space for Eggman after the credits ($40 bytes)
0000000E =FFFFD0C0                  v_tryagain	= v_objspace+$C0	; object variable space for the "TRY AGAIN" text ($40 bytes)
0000000E =FFFFD800                  v_eggmanchaos	= v_objspace+$800	; object variable space for the emeralds juggled by Eggman ($180 bytes)
0000000E                            

0000000E =FFFFF000                  v_snddriver_ram:	equ $FFFFF000 ; start of RAM for the sound driver data ($5C0 bytes)
0000000E                            

0000000E                            ; =================================================================================
0000000E                            ; From here on, until otherwise stated, all offsets are relative to v_snddriver_ram
0000000E                            ; =================================================================================
0000000E =00000000                  v_startofvariables:	equ $000
0000000E =00000000                  v_sndprio:		equ $000	; sound priority (priority of new music/SFX must be higher or equal to this value or it won't play; bit 7 of priority being set prevents this value from changing)
0000000E =00000001                  v_main_tempo_timeout:	equ $001	; Counts down to zero; when zero, resets to next value and delays song by 1 frame
0000000E =00000002                  v_main_tempo:		equ $002	; Used for music only
0000000E =00000003                  f_pausemusic:		equ $003	; flag set to stop music when paused
0000000E =00000004                  v_fadeout_counter:	equ $004
0000000E                            

0000000E =00000006                  v_fadeout_delay:	equ $006
0000000E =00000007                  v_communication_byte:	equ $007	; used in Ristar to sync with a boss' attacks; unused here
0000000E =00000008                  f_updating_dac:		equ $008	; $80 if updating DAC, $00 otherwise
0000000E =00000009                  v_sound_id:		equ $009	; sound or music copied from below
0000000E =0000000A                  v_soundqueue0:		equ $00A	; sound or music to play
0000000E =0000000B                  v_soundqueue1:		equ $00B	; special sound to play
0000000E =0000000C                  v_soundqueue2:		equ $00C	; unused sound to play
0000000E                            

0000000E =0000000E                  f_voice_selector:	equ $00E	; $00 = use music voice pointer; $40 = use special voice pointer; $80 = use track voice pointer
0000000E                            

0000000E =00000018                  v_voice_ptr:		equ $018	; voice data pointer (4 bytes)
0000000E                            

0000000E =00000020                  v_special_voice_ptr:	equ $020	; voice data pointer for special SFX ($D0-$DF) (4 bytes)
0000000E                            

0000000E =00000024                  f_fadein_flag:		equ $024	; Flag for fade in
0000000E =00000025                  v_fadein_delay:		equ $025
0000000E =00000026                  v_fadein_counter:	equ $026	; Timer for fade in/out
0000000E =00000027                  f_1up_playing:		equ $027	; flag indicating 1-up song is playing
0000000E =00000028                  v_tempo_mod:		equ $028	; music - tempo modifier
0000000E =00000029                  v_speeduptempo:		equ $029	; music - tempo modifier with speed shoes
0000000E =0000002A                  f_speedup:		equ $02A	; flag indicating whether speed shoes tempo is on ($80) or off ($00)
0000000E =0000002B                  v_ring_speaker:		equ $02B	; which speaker the "ring" sound is played in (00 = right; 01 = left)
0000000E =0000002C                  f_push_playing:		equ $02C	; if set, prevents further push sounds from playing
0000000E                            

0000000E =00000040                  v_music_track_ram:	equ $040	; Start of music RAM
0000000E                            

0000000E =00000040                  v_music_fmdac_tracks:	equ v_music_track_ram+TrackSz*0
0000000E =00000040                  v_music_dac_track:	equ v_music_fmdac_tracks+TrackSz*0
0000000E =00000070                  v_music_fm_tracks:	equ v_music_fmdac_tracks+TrackSz*1
0000000E =00000070                  v_music_fm1_track:	equ v_music_fm_tracks+TrackSz*0
0000000E =000000A0                  v_music_fm2_track:	equ v_music_fm_tracks+TrackSz*1
0000000E =000000D0                  v_music_fm3_track:	equ v_music_fm_tracks+TrackSz*2
0000000E =00000100                  v_music_fm4_track:	equ v_music_fm_tracks+TrackSz*3
0000000E =00000130                  v_music_fm5_track:	equ v_music_fm_tracks+TrackSz*4
0000000E =00000160                  v_music_fm6_track:	equ v_music_fm_tracks+TrackSz*5
0000000E =00000190                  v_music_fm_tracks_end:	equ v_music_fm_tracks+TrackSz*6
0000000E =00000190                  v_music_fmdac_tracks_end:	equ v_music_fm_tracks_end
0000000E =00000190                  v_music_psg_tracks:	equ v_music_fmdac_tracks_end
0000000E =00000190                  v_music_psg1_track:	equ v_music_psg_tracks+TrackSz*0
0000000E =000001C0                  v_music_psg2_track:	equ v_music_psg_tracks+TrackSz*1
0000000E =000001F0                  v_music_psg3_track:	equ v_music_psg_tracks+TrackSz*2
0000000E =00000220                  v_music_psg_tracks_end:	equ v_music_psg_tracks+TrackSz*3
0000000E =00000220                  v_music_track_ram_end:	equ v_music_psg_tracks_end
0000000E                            

0000000E =00000220                  v_sfx_track_ram:	equ v_music_track_ram_end	; Start of SFX RAM, straight after the end of music RAM
0000000E                            

0000000E =00000220                  v_sfx_fm_tracks:	equ v_sfx_track_ram+TrackSz*0
0000000E =00000220                  v_sfx_fm3_track:	equ v_sfx_fm_tracks+TrackSz*0
0000000E =00000250                  v_sfx_fm4_track:	equ v_sfx_fm_tracks+TrackSz*1
0000000E =00000280                  v_sfx_fm5_track:	equ v_sfx_fm_tracks+TrackSz*2
0000000E =000002B0                  v_sfx_fm_tracks_end:	equ v_sfx_fm_tracks+TrackSz*3
0000000E =000002B0                  v_sfx_psg_tracks:	equ v_sfx_fm_tracks_end
0000000E =000002B0                  v_sfx_psg1_track:	equ v_sfx_psg_tracks+TrackSz*0
0000000E =000002E0                  v_sfx_psg2_track:	equ v_sfx_psg_tracks+TrackSz*1
0000000E =00000310                  v_sfx_psg3_track:	equ v_sfx_psg_tracks+TrackSz*2
0000000E =00000340                  v_sfx_psg_tracks_end:	equ v_sfx_psg_tracks+TrackSz*3
0000000E =00000340                  v_sfx_track_ram_end:	equ v_sfx_psg_tracks_end
0000000E                            

0000000E =00000340                  v_spcsfx_track_ram:	equ v_sfx_track_ram_end	; Start of special SFX RAM, straight after the end of SFX RAM
0000000E                            

0000000E =00000340                  v_spcsfx_fm4_track:	equ v_spcsfx_track_ram+TrackSz*0
0000000E =00000370                  v_spcsfx_psg3_track:	equ v_spcsfx_track_ram+TrackSz*1
0000000E =000003A0                  v_spcsfx_track_ram_end:	equ v_spcsfx_track_ram+TrackSz*2
0000000E                            

0000000E =000003A0                  v_1up_ram_copy:		equ v_spcsfx_track_ram_end
0000000E                            

0000000E                            ; =================================================================================
0000000E                            ; From here on, no longer relative to sound driver RAM
0000000E                            ; =================================================================================
0000000E                            

0000000E =FFFFF600                  v_gamemode:	equ $FFFFF600	; game mode (00=Sega; 04=Title; 08=Demo; 0C=Level; 10=SS; 14=Cont; 18=End; 1C=Credit; +8C=PreLevel)
0000000E =FFFFF602                  v_jpadhold2:	equ $FFFFF602	; joypad input - held, duplicate
0000000E =FFFFF603                  v_jpadpress2:	equ $FFFFF603	; joypad input - pressed, duplicate
0000000E =FFFFF604                  v_jpadhold1:	equ $FFFFF604	; joypad input - held
0000000E =FFFFF605                  v_jpadpress1:	equ $FFFFF605	; joypad input - pressed
0000000E                            

0000000E =FFFFF60C                  v_vdp_buffer1:	equ $FFFFF60C	; VDP instruction buffer (2 bytes)
0000000E                            

0000000E =FFFFF614                  v_demolength:	equ $FFFFF614	; the length of a demo in frames (2 bytes)
0000000E =FFFFF616                  v_scrposy_vdp:	equ $FFFFF616	; screen position y (VDP) (2 bytes)
0000000E =FFFFF618                  v_bgscrposy_vdp:	equ $FFFFF618	; background screen position y (VDP) (2 bytes)
0000000E =FFFFF61A                  v_scrposx_vdp:	equ $FFFFF61A	; screen position x (VDP) (2 bytes)
0000000E =FFFFF61C                  v_bgscrposx_vdp:	equ $FFFFF61C	; background screen position x (VDP) (2 bytes)
0000000E =FFFFF61E                  v_bg3scrposy_vdp:	equ $FFFFF61E	; (2 bytes)
0000000E =FFFFF620                  v_bg3scrposx_vdp:	equ $FFFFF620	; (2 bytes)
0000000E                            

0000000E =FFFFF624                  v_hbla_hreg:	equ $FFFFF624	; VDP H.interrupt register buffer (8Axx) (2 bytes)
0000000E =FFFFF625                  v_hbla_line:	equ $FFFFF625	; screen line where water starts and palette is changed by HBlank
0000000E =FFFFF626                  v_pfade_start:	equ $FFFFF626	; palette fading - start position in bytes
0000000E =FFFFF627                  v_pfade_size:	equ $FFFFF627	; palette fading - number of colours
0000000E =FFFFF62A                  v_vbla_routine:	equ $FFFFF62A	; VBlank - routine counter
0000000E =FFFFF62C                  v_spritecount:	equ $FFFFF62C	; number of sprites on-screen
0000000E =FFFFF632                  v_pcyc_num:	equ $FFFFF632	; palette cycling - current reference number (2 bytes)
0000000E =FFFFF634                  v_pcyc_time:	equ $FFFFF634	; palette cycling - time until the next change (2 bytes)
0000000E =FFFFF636                  v_random:	equ $FFFFF636	; pseudo random number buffer (4 bytes)
0000000E =FFFFF63A                  f_pause:		equ $FFFFF63A	; flag set to pause the game (2 bytes)
0000000E =FFFFF640                  v_vdp_buffer2:	equ $FFFFF640	; VDP instruction buffer (2 bytes)
0000000E =FFFFF644                  f_hbla_pal:	equ $FFFFF644	; flag set to change palette during HBlank (0000 = no; 0001 = change) (2 bytes)
0000000E =FFFFF646                  v_waterpos1:	equ $FFFFF646	; water height, actual (2 bytes)
0000000E =FFFFF648                  v_waterpos2:	equ $FFFFF648	; water height, ignoring sway (2 bytes)
0000000E =FFFFF64A                  v_waterpos3:	equ $FFFFF64A	; water height, next target (2 bytes)
0000000E =FFFFF64C                  f_water:		equ $FFFFF64C	; flag set for water
0000000E =FFFFF64D                  v_wtr_routine:	equ $FFFFF64D	; water event - routine counter
0000000E =FFFFF64E                  f_wtr_state:	equ $FFFFF64E	; water palette state when water is above/below the screen (00 = partly/all dry; 01 = all underwater)
0000000E                            

0000000E =FFFFF650                  v_pal_buffer:	equ $FFFFF650	; palette data buffer (used for palette cycling) ($30 bytes)
0000000E =FFFFF680                  v_plc_buffer:	equ $FFFFF680	; pattern load cues buffer (maximum $10 PLCs) ($60 bytes)
0000000E =FFFFF6E0                  v_ptrnemcode:	equ $FFFFF6E0	; pointer for nemesis decompression code ($1502 or $150C) (4 bytes)
0000000E                            

0000000E =FFFFF6F8                  f_plc_execute:	equ $FFFFF6F8	; flag set for pattern load cue execution (2 bytes)
0000000E                            

0000000E =FFFFF700                  v_screenposx:	equ $FFFFF700	; screen position x (2 bytes)
0000000E =FFFFF704                  v_screenposy:	equ $FFFFF704	; screen position y (2 bytes)
0000000E =FFFFF708                  v_bgscreenposx:	equ $FFFFF708	; background screen position x (2 bytes)
0000000E =FFFFF70C                  v_bgscreenposy:	equ $FFFFF70C	; background screen position y (2 bytes)
0000000E =FFFFF710                  v_bg2screenposx:	equ $FFFFF710	; 2 bytes
0000000E =FFFFF714                  v_bg2screenposy:	equ $FFFFF714	; 2 bytes
0000000E =FFFFF718                  v_bg3screenposx:	equ $FFFFF718	; 2 bytes
0000000E =FFFFF71C                  v_bg3screenposy:	equ $FFFFF71C	; 2 bytes
0000000E                            

0000000E =FFFFF720                  v_limitleft1:	equ $FFFFF720	; left level boundary (2 bytes)
0000000E =FFFFF722                  v_limitright1:	equ $FFFFF722	; right level boundary (2 bytes)
0000000E =FFFFF724                  v_limittop1:	equ $FFFFF724	; top level boundary (2 bytes)
0000000E =FFFFF726                  v_limitbtm1:	equ $FFFFF726	; bottom level boundary (2 bytes)
0000000E =FFFFF728                  v_limitleft2:	equ $FFFFF728	; left level boundary (2 bytes)
0000000E =FFFFF72A                  v_limitright2:	equ $FFFFF72A	; right level boundary (2 bytes)
0000000E =FFFFF72C                  v_limittop2:	equ $FFFFF72C	; top level boundary (2 bytes)
0000000E =FFFFF72E                  v_limitbtm2:	equ $FFFFF72E	; bottom level boundary (2 bytes)
0000000E                            

0000000E =FFFFF732                  v_limitleft3:	equ $FFFFF732	; left level boundary, at the end of an act (2 bytes)
0000000E                            

0000000E =FFFFF73A                  v_scrshiftx:	equ $FFFFF73A	; x-screen shift (new - last) * $100
0000000E =FFFFF73C                  v_scrshifty:	equ $FFFFF73C	; y-screen shift (new - last) * $100
0000000E                            

0000000E =FFFFF73E                  v_lookshift:	equ $FFFFF73E	; screen shift when Sonic looks up/down (2 bytes)
0000000E =FFFFF742                  v_dle_routine:	equ $FFFFF742	; dynamic level event - routine counter
0000000E =FFFFF744                  f_nobgscroll:	equ $FFFFF744	; flag set to cancel background scrolling
0000000E                            

0000000E =FFFFF74A                  v_fg_xblock:	equ	$FFFFF74A	; foreground x-block parity (for redraw)
0000000E =FFFFF74B                  v_fg_yblock:	equ	$FFFFF74B	; foreground y-block parity (for redraw)
0000000E =FFFFF74C                  v_bg1_xblock:	equ	$FFFFF74C	; background x-block parity (for redraw)
0000000E =FFFFF74D                  v_bg1_yblock:	equ	$FFFFF74D	; background y-block parity (for redraw)
0000000E =FFFFF74E                  v_bg2_xblock:	equ	$FFFFF74E	; secondary background x-block parity (for redraw)
0000000E =FFFFF74F                  v_bg2_yblock:	equ	$FFFFF74F	; secondary background y-block parity (unused)
0000000E =FFFFF750                  v_bg3_xblock:	equ	$FFFFF750	; teritary background x-block parity (for redraw)
0000000E =FFFFF751                  v_bg3_yblock:	equ	$FFFFF751	; teritary background y-block parity (unused)
0000000E                            

0000000E =FFFFF754                  v_fg_scroll_flags:	equ $FFFFF754	; screen redraw flags for foreground
0000000E =FFFFF756                  v_bg1_scroll_flags:	equ $FFFFF756	; screen redraw flags for background 1
0000000E =FFFFF758                  v_bg2_scroll_flags:	equ $FFFFF758	; screen redraw flags for background 2
0000000E =FFFFF75A                  v_bg3_scroll_flags:	equ $FFFFF75A	; screen redraw flags for background 3
0000000E =FFFFF75C                  f_bgscrollvert:	equ $FFFFF75C	; flag for vertical background scrolling
0000000E =FFFFF760                  v_sonspeedmax:	equ $FFFFF760	; Sonic's maximum speed (2 bytes)
0000000E =FFFFF762                  v_sonspeedacc:	equ $FFFFF762	; Sonic's acceleration (2 bytes)
0000000E =FFFFF764                  v_sonspeeddec:	equ $FFFFF764	; Sonic's deceleration (2 bytes)
0000000E =FFFFF766                  v_sonframenum:	equ $FFFFF766	; frame to display for Sonic
0000000E =FFFFF767                  f_sonframechg:	equ $FFFFF767	; flag set to update Sonic's sprite frame
0000000E =FFFFF768                  v_anglebuffer:	equ $FFFFF768	; angle of collision block that Sonic or object is standing on
0000000E                            

0000000E =FFFFF76C                  v_opl_routine:	equ $FFFFF76C	; ObjPosLoad - routine counter
0000000E =FFFFF76E                  v_opl_screen:	equ $FFFFF76E	; ObjPosLoad - screen variable
0000000E =FFFFF770                  v_opl_data:	equ $FFFFF770	; ObjPosLoad - data buffer ($10 bytes)
0000000E                            

0000000E =FFFFF780                  v_ssangle:	equ $FFFFF780	; Special Stage angle (2 bytes)
0000000E =FFFFF782                  v_ssrotate:	equ $FFFFF782	; Special Stage rotation speed (2 bytes)
0000000E =FFFFF790                  v_btnpushtime1:	equ $FFFFF790	; button push duration - in level (2 bytes)
0000000E =FFFFF792                  v_btnpushtime2:	equ $FFFFF792	; button push duration - in demo (2 bytes)
0000000E =FFFFF794                  v_palchgspeed:	equ $FFFFF794	; palette fade/transition speed (0 is fastest) (2 bytes)
0000000E =FFFFF796                  v_collindex:	equ $FFFFF796	; ROM address for collision index of current level (4 bytes)
0000000E =FFFFF79A                  v_palss_num:	equ $FFFFF79A	; palette cycling in Special Stage - reference number (2 bytes)
0000000E =FFFFF79C                  v_palss_time:	equ $FFFFF79C	; palette cycling in Special Stage - time until next change (2 bytes)
0000000E                            

0000000E =FFFFF7A4                  v_obj31ypos:	equ $FFFFF7A4	; y-position of object 31 (MZ stomper) (2 bytes)
0000000E =FFFFF7A7                  v_bossstatus:	equ $FFFFF7A7	; status of boss and prison capsule (01 = boss defeated; 02 = prison opened)
0000000E =FFFFF7A8                  v_trackpos:	equ $FFFFF7A8	; position tracking reference number (2 bytes)
0000000E =FFFFF7A9                  v_trackbyte:	equ $FFFFF7A9	; low byte for position tracking
0000000E =FFFFF7AA                  f_lockscreen:	equ $FFFFF7AA	; flag set to lock screen during bosses
0000000E =FFFFF7AC                  v_256loop1:	equ $FFFFF7AC	; 256x256 level tile which contains a loop (GHZ/SLZ)
0000000E =FFFFF7AD                  v_256loop2:	equ $FFFFF7AD	; 256x256 level tile which contains a loop (GHZ/SLZ)
0000000E =FFFFF7AE                  v_256roll1:	equ $FFFFF7AE	; 256x256 level tile which contains a roll tunnel (GHZ)
0000000E =FFFFF7AF                  v_256roll2:	equ $FFFFF7AF	; 256x256 level tile which contains a roll tunnel (GHZ)
0000000E =FFFFF7B0                  v_lani0_frame:	equ $FFFFF7B0	; level graphics animation 0 - current frame
0000000E =FFFFF7B1                  v_lani0_time:	equ $FFFFF7B1	; level graphics animation 0 - time until next frame
0000000E =FFFFF7B2                  v_lani1_frame:	equ $FFFFF7B2	; level graphics animation 1 - current frame
0000000E =FFFFF7B3                  v_lani1_time:	equ $FFFFF7B3	; level graphics animation 1 - time until next frame
0000000E =FFFFF7B4                  v_lani2_frame:	equ $FFFFF7B4	; level graphics animation 2 - current frame
0000000E =FFFFF7B5                  v_lani2_time:	equ $FFFFF7B5	; level graphics animation 2 - time until next frame
0000000E =FFFFF7B6                  v_lani3_frame:	equ $FFFFF7B6	; level graphics animation 3 - current frame
0000000E =FFFFF7B7                  v_lani3_time:	equ $FFFFF7B7	; level graphics animation 3 - time until next frame
0000000E =FFFFF7B8                  v_lani4_frame:	equ $FFFFF7B8	; level graphics animation 4 - current frame
0000000E =FFFFF7B9                  v_lani4_time:	equ $FFFFF7B9	; level graphics animation 4 - time until next frame
0000000E =FFFFF7BA                  v_lani5_frame:	equ $FFFFF7BA	; level graphics animation 5 - current frame
0000000E =FFFFF7BB                  v_lani5_time:	equ $FFFFF7BB	; level graphics animation 5 - time until next frame
0000000E =FFFFF7BE                  v_gfxbigring:	equ $FFFFF7BE	; settings for giant ring graphics loading (2 bytes)
0000000E =FFFFF7C0                  f_conveyrev:	equ $FFFFF7C0	; flag set to reverse conveyor belts in LZ/SBZ
0000000E =FFFFF7C1                  v_obj63:	equ $FFFFF7C1	; object 63 (LZ/SBZ platforms) variables (6 bytes)
0000000E =FFFFF7C7                  f_wtunnelmode:	equ $FFFFF7C7	; LZ water tunnel mode
0000000E =FFFFF7C8                  f_playerctrl:	equ $FFFFF7C8	; Player control override flags (object ineraction, control enable)
0000000E =FFFFF7C9                  f_wtunnelallow:	equ $FFFFF7C9	; LZ water tunnels (00 = enabled; 01 = disabled)
0000000E =FFFFF7CA                  f_slidemode:	equ $FFFFF7CA	; LZ water slide mode
0000000E =FFFFF7CB                  v_obj6B:	equ $FFFFF7CB	; object 6B (SBZ stomper) variable
0000000E =FFFFF7CC                  f_lockctrl:	equ $FFFFF7CC	; flag set to lock controls during ending sequence
0000000E =FFFFF7CD                  f_bigring:	equ $FFFFF7CD	; flag set when Sonic collects the giant ring
0000000E =FFFFF7D0                  v_itembonus:	equ $FFFFF7D0	; item bonus from broken enemies, blocks etc. (2 bytes)
0000000E =FFFFF7D2                  v_timebonus:	equ $FFFFF7D2	; time bonus at the end of an act (2 bytes)
0000000E =FFFFF7D4                  v_ringbonus:	equ $FFFFF7D4	; ring bonus at the end of an act (2 bytes)
0000000E =FFFFF7D6                  f_endactbonus:	equ $FFFFF7D6	; time/ring bonus update flag at the end of an act
0000000E =FFFFF7D7                  v_sonicend:	equ $FFFFF7D7	; routine counter for Sonic in the ending sequence
0000000E =FFFFF7D8                  v_lz_deform:	equ $FFFFF7D8	; LZ deformtaion offset, in units of $80 (2 bytes)
0000000E =FFFFF7E0                  f_switch:	equ $FFFFF7E0	; flags set when Sonic stands on a switch ($10 bytes)
0000000E =FFFFF7F0                  v_scroll_block_1_size:	equ $FFFFF7F0	; (2 bytes)
0000000E =FFFFF7F2                  v_scroll_block_2_size:	equ $FFFFF7F2	; unused (2 bytes)
0000000E =FFFFF7F4                  v_scroll_block_3_size:	equ $FFFFF7F4	; unused (2 bytes)
0000000E =FFFFF7F6                  v_scroll_block_4_size:	equ $FFFFF7F6	; unused (2 bytes)
0000000E                            

0000000E =FFFFF800                  v_spritetablebuffer:	equ $FFFFF800 ; sprite table ($280 bytes, last $80 bytes are overwritten by v_pal_water_dup)
0000000E =FFFFFA00                  v_pal_water_dup:	equ $FFFFFA00 ; duplicate underwater palette, used for transitions ($80 bytes)
0000000E =FFFFFA80                  v_pal_water:	equ $FFFFFA80	; main underwater palette ($80 bytes)
0000000E =FFFFFB00                  v_pal_dry:	equ $FFFFFB00	; main palette ($80 bytes)
0000000E =FFFFFB80                  v_pal_dry_dup:	equ $FFFFFB80	; duplicate palette, used for transitions ($80 bytes)
0000000E =FFFFFC00                  v_objstate:	equ $FFFFFC00	; object state list ($200 bytes)
0000000E                            

0000000E                            

0000000E =FFFFFE00                  v_systemstack:	equ $FFFFFE00
0000000E =FFFFFE02                  f_restart:	equ $FFFFFE02	; restart level flag (2 bytes)
0000000E =FFFFFE04                  v_framecount:	equ $FFFFFE04	; frame counter (adds 1 every frame) (2 bytes)
0000000E =FFFFFE05                  v_framebyte:	equ v_framecount+1; low byte for frame counter
0000000E =FFFFFE06                  v_debugitem:	equ $FFFFFE06	; debug item currently selected (NOT the object number of the item)
0000000E =FFFFFE08                  v_debuguse:	equ $FFFFFE08	; debug mode use & routine counter (when Sonic is a ring/item) (2 bytes)
0000000E =FFFFFE0A                  v_debugxspeed:	equ $FFFFFE0A	; debug mode - horizontal speed
0000000E =FFFFFE0B                  v_debugyspeed:	equ $FFFFFE0B	; debug mode - vertical speed
0000000E =FFFFFE0C                  v_vbla_count:	equ $FFFFFE0C	; vertical interrupt counter (adds 1 every VBlank) (4 bytes)
0000000E =FFFFFE0E                  v_vbla_word:	equ v_vbla_count+2 ; low word for vertical interrupt counter (2 bytes)
0000000E =FFFFFE0F                  v_vbla_byte:	equ v_vbla_word+1	; low byte for vertical interrupt counter
0000000E =FFFFFE10                  v_zone:		equ $FFFFFE10	; current zone number
0000000E =FFFFFE11                  v_act:		equ $FFFFFE11	; current act number
0000000E =FFFFFE12                  v_lives:		equ $FFFFFE12	; number of lives
0000000E =FFFFFE14                  v_air:		equ $FFFFFE14	; air remaining while underwater (2 bytes)
0000000E =FFFFFE15                  v_airbyte:	equ v_air+1	; low byte for air
0000000E =FFFFFE16                  v_lastspecial:	equ $FFFFFE16	; last special stage number
0000000E =FFFFFE18                  v_continues:	equ $FFFFFE18	; number of continues
0000000E =FFFFFE1A                  f_timeover:	equ $FFFFFE1A	; time over flag
0000000E =FFFFFE1B                  v_lifecount:	equ $FFFFFE1B	; lives counter value (for actual number, see "v_lives")
0000000E =FFFFFE1C                  f_lifecount:	equ $FFFFFE1C	; lives counter update flag
0000000E =FFFFFE1D                  f_ringcount:	equ $FFFFFE1D	; ring counter update flag
0000000E =FFFFFE1E                  f_timecount:	equ $FFFFFE1E	; time counter update flag
0000000E =FFFFFE1F                  f_scorecount:	equ $FFFFFE1F	; score counter update flag
0000000E =FFFFFE20                  v_rings:		equ $FFFFFE20	; rings (2 bytes)
0000000E =FFFFFE21                  v_ringbyte:	equ v_rings+1	; low byte for rings
0000000E =FFFFFE22                  v_time:		equ $FFFFFE22	; time (4 bytes)
0000000E =FFFFFE23                  v_timemin:	equ $FFFFFE23	; time - minutes
0000000E =FFFFFE24                  v_timesec:	equ $FFFFFE24	; time - seconds
0000000E =FFFFFE25                  v_timecent:	equ $FFFFFE25	; time - centiseconds
0000000E =FFFFFE26                  v_score:		equ $FFFFFE26	; score (4 bytes)
0000000E =FFFFFE2C                  v_shield:	equ $FFFFFE2C	; shield status (00 = no; 01 = yes)
0000000E =FFFFFE2D                  v_invinc:	equ $FFFFFE2D	; invinciblity status (00 = no; 01 = yes)
0000000E =FFFFFE2E                  v_shoes:		equ $FFFFFE2E	; speed shoes status (00 = no; 01 = yes)
0000000E =FFFFFE30                  v_lastlamp:	equ $FFFFFE30	; number of the last lamppost you hit
0000000E =FFFFFE32                  v_lamp_xpos:	equ v_lastlamp+2	; x-axis for Sonic to respawn at lamppost (2 bytes)
0000000E =FFFFFE34                  v_lamp_ypos:	equ v_lastlamp+4	; y-axis for Sonic to respawn at lamppost (2 bytes)
0000000E =FFFFFE36                  v_lamp_rings:	equ v_lastlamp+6	; rings stored at lamppost (2 bytes)
0000000E =FFFFFE38                  v_lamp_time:	equ v_lastlamp+8	; time stored at lamppost (2 bytes)
0000000E =FFFFFE3C                  v_lamp_dle:	equ v_lastlamp+$C	; dynamic level event routine counter at lamppost
0000000E =FFFFFE3E                  v_lamp_limitbtm:	equ v_lastlamp+$E	; level bottom boundary at lamppost (2 bytes)
0000000E =FFFFFE40                  v_lamp_scrx:	equ v_lastlamp+$10 ; x-axis screen at lamppost (2 bytes)
0000000E =FFFFFE42                  v_lamp_scry:	equ v_lastlamp+$12 ; y-axis screen at lamppost (2 bytes)
0000000E                            

0000000E =FFFFFE50                  v_lamp_wtrpos:	equ v_lastlamp+$20 ; water position at lamppost (2 bytes)
0000000E =FFFFFE52                  v_lamp_wtrrout:	equ v_lastlamp+$22 ; water routine at lamppost
0000000E =FFFFFE53                  v_lamp_wtrstat:	equ v_lastlamp+$23 ; water state at lamppost
0000000E =FFFFFE54                  v_lamp_lives:	equ v_lastlamp+$24 ; lives counter at lamppost
0000000E =FFFFFE57                  v_emeralds:	equ $FFFFFE57	; number of chaos emeralds
0000000E =FFFFFE58                  v_emldlist:	equ $FFFFFE58	; which individual emeralds you have (00 = no; 01 = yes) (6 bytes)
0000000E =FFFFFE5E                  v_oscillate:	equ $FFFFFE5E	; values which oscillate - for swinging platforms, et al ($42 bytes)
0000000E =FFFFFEC0                  v_ani0_time:	equ $FFFFFEC0	; synchronised sprite animation 0 - time until next frame (used for synchronised animations)
0000000E =FFFFFEC1                  v_ani0_frame:	equ $FFFFFEC1	; synchronised sprite animation 0 - current frame
0000000E =FFFFFEC2                  v_ani1_time:	equ $FFFFFEC2	; synchronised sprite animation 1 - time until next frame
0000000E =FFFFFEC3                  v_ani1_frame:	equ $FFFFFEC3	; synchronised sprite animation 1 - current frame
0000000E =FFFFFEC4                  v_ani2_time:	equ $FFFFFEC4	; synchronised sprite animation 2 - time until next frame
0000000E =FFFFFEC5                  v_ani2_frame:	equ $FFFFFEC5	; synchronised sprite animation 2 - current frame
0000000E =FFFFFEC6                  v_ani3_time:	equ $FFFFFEC6	; synchronised sprite animation 3 - time until next frame
0000000E =FFFFFEC7                  v_ani3_frame:	equ $FFFFFEC7	; synchronised sprite animation 3 - current frame
0000000E =FFFFFEC8                  v_ani3_buf:	equ $FFFFFEC8	; synchronised sprite animation 3 - info buffer (2 bytes)
0000000E =FFFFFEF0                  v_limittopdb:	equ $FFFFFEF0	; level upper boundary, buffered for debug mode (2 bytes)
0000000E =FFFFFEF2                  v_limitbtmdb:	equ $FFFFFEF2	; level bottom boundary, buffered for debug mode (2 bytes)
0000000E                            

0000000E =FFFFFF10                  v_screenposx_dup:	equ $FFFFFF10	; screen position x (duplicate) (2 bytes)
0000000E =FFFFFF14                  v_screenposy_dup:	equ $FFFFFF14	; screen position y (duplicate) (2 bytes)
0000000E =FFFFFF18                  v_bgscreenposx_dup:	equ $FFFFFF18	; background screen position x (duplicate) (2 bytes)
0000000E =FFFFFF1C                  v_bgscreenposy_dup:	equ $FFFFFF1C	; background screen position y (duplicate) (2 bytes)
0000000E =FFFFFF20                  v_bg2screenposx_dup:	equ $FFFFFF20	; 2 bytes
0000000E =FFFFFF24                  v_bg2screenposy_dup:	equ $FFFFFF24	; 2 bytes
0000000E =FFFFFF28                  v_bg3screenposx_dup:	equ $FFFFFF28	; 2 bytes
0000000E =FFFFFF2C                  v_bg3screenposy_dup:	equ $FFFFFF2C	; 2 bytes
0000000E =FFFFFF30                  v_fg_scroll_flags_dup:	equ $FFFFFF30
0000000E =FFFFFF32                  v_bg1_scroll_flags_dup:	equ $FFFFFF32
0000000E =FFFFFF34                  v_bg2_scroll_flags_dup:	equ $FFFFFF34
0000000E =FFFFFF36                  v_bg3_scroll_flags_dup:	equ $FFFFFF36
0000000E                            

0000000E =FFFFFF80                  v_levseldelay:	equ $FFFFFF80	; level select - time until change when up/down is held (2 bytes)
0000000E =FFFFFF82                  v_levselitem:	equ $FFFFFF82	; level select - item selected (2 bytes)
0000000E =FFFFFF84                  v_levselsound:	equ $FFFFFF84	; level select - sound selected (2 bytes)
0000000E =FFFFFFC0                  v_scorecopy:	equ $FFFFFFC0	; score, duplicate (4 bytes)
0000000E =FFFFFFC0                  v_scorelife:	equ $FFFFFFC0	; points required for an extra life (4 bytes) (JP1 only)
0000000E =FFFFFFE0                  f_levselcheat:	equ $FFFFFFE0	; level select cheat flag
0000000E =FFFFFFE1                  f_slomocheat:	equ $FFFFFFE1	; slow motion & frame advance cheat flag
0000000E =FFFFFFE2                  f_debugcheat:	equ $FFFFFFE2	; debug mode cheat flag
0000000E =FFFFFFE3                  f_creditscheat:	equ $FFFFFFE3	; hidden credits & press start cheat flag
0000000E =FFFFFFE4                  v_title_dcount:	equ $FFFFFFE4	; number of times the d-pad is pressed on title screen (2 bytes)
0000000E =FFFFFFE6                  v_title_ccount:	equ $FFFFFFE6	; number of times C is pressed on title screen (2 bytes)
0000000E                            

0000000E =FFFFFFF0                  f_demo:		equ $FFFFFFF0	; demo mode flag (0 = no; 1 = yes; $8001 = ending) (2 bytes)
0000000E =FFFFFFF2                  v_demonum:	equ $FFFFFFF2	; demo level number (not the same as the level number) (2 bytes)
0000000E =FFFFFFF4                  v_creditsnum:	equ $FFFFFFF4	; credits index number (2 bytes)
0000000E =FFFFFFF8                  v_megadrive:	equ $FFFFFFF8	; Megadrive machine type
0000000E =FFFFFFFA                  f_debugmode:	equ $FFFFFFFA	; debug mode flag (sometimes 2 bytes)
0000000E =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
0000000E =FFFFFFFC                  v_init:		equ $FFFFFFFC	; 'init' text string (4 bytes)
0000000E                            	include	"Macros.asm"
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; Align and pad
0000000E                            ; input: length to align to, value to use as padding (default is 0)
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            align:	macro
0000000E                            	if (narg=1)
0000000E                            	dcb.b (\1-(*%\1))%\1,0
0000000E                            	else
0000000E                            	dcb.b (\1-(*%\1))%\1,\2
0000000E                            	endc
0000000E                            	endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; Set a VRAM address via the VDP control port.
0000000E                            ; input: 16-bit VRAM address, control port (default is ($C00004).l)
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            locVRAM:	macro loc,controlport
0000000E                            		if (narg=1)
0000000E                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),(vdp_control_port).l
0000000E                            		else
0000000E                            		move.l	#($40000000+((loc&$3FFF)<<16)+((loc&$C000)>>14)),\controlport
0000000E                            		endc
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; DMA copy data from 68K (ROM/RAM) to the VRAM
0000000E                            ; input: source, length, destination
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            writeVRAM:	macro source,length,destination
0000000E                            		lea	(vdp_control_port).l,a5
0000000E                            		move.l	#$94000000+(((length>>1)&$FF00)<<8)+$9300+((length>>1)&$FF),(a5)
0000000E                            		move.l	#$96000000+(((source>>1)&$FF00)<<8)+$9500+((source>>1)&$FF),(a5)
0000000E                            		move.w	#$9700+((((source>>1)&$FF0000)>>16)&$7F),(a5)
0000000E                            		move.w	#$4000+(destination&$3FFF),(a5)
0000000E                            		move.w	#$80+((destination&$C000)>>14),(v_vdp_buffer2).w
0000000E                            		move.w	(v_vdp_buffer2).w,(a5)
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; DMA copy data from 68K (ROM/RAM) to the CRAM
0000000E                            ; input: source, length, destination
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            writeCRAM:	macro source,length,destination
0000000E                            		lea	(vdp_control_port).l,a5
0000000E                            		move.l	#$94000000+(((length>>1)&$FF00)<<8)+$9300+((length>>1)&$FF),(a5)
0000000E                            		move.l	#$96000000+(((source>>1)&$FF00)<<8)+$9500+((source>>1)&$FF),(a5)
0000000E                            		move.w	#$9700+((((source>>1)&$FF0000)>>16)&$7F),(a5)
0000000E                            		move.w	#$C000+(destination&$3FFF),(a5)
0000000E                            		move.w	#$80+((destination&$C000)>>14),(v_vdp_buffer2).w
0000000E                            		move.w	(v_vdp_buffer2).w,(a5)
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; DMA fill VRAM with a value
0000000E                            ; input: value, length, destination
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            fillVRAM:	macro value,length,loc
0000000E                            		lea	(vdp_control_port).l,a5
0000000E                            		move.w	#$8F01,(a5)
0000000E                            		move.l	#$94000000+((length&$FF00)<<8)+$9300+(length&$FF),(a5)
0000000E                            		move.w	#$9780,(a5)
0000000E                            		move.l	#$40000080+((loc&$3FFF)<<16)+((loc&$C000)>>14),(a5)
0000000E                            		move.w	#value,(vdp_data_port).l
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; Copy a tilemap from 68K (ROM/RAM) to the VRAM without using DMA
0000000E                            ; input: source, destination, width [cells], height [cells]
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            copyTilemap:	macro source,destination,width,height
0000000E                            		lea	(source).l,a1
0000000E                            		locVRAM	\destination,d0
0000000E                            		moveq	#width,d1
0000000E                            		moveq	#height,d2
0000000E                            		bsr.w	TilemapToVRAM
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; stop the Z80
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            stopZ80:	macro
0000000E                            		move.w	#$100,(z80_bus_request).l
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; wait for Z80 to stop
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            waitZ80:	macro
0000000E                            	@wait:	btst	#0,(z80_bus_request).l
0000000E                            		bne.s	@wait
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; reset the Z80
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            resetZ80:	macro
0000000E                            		move.w	#$100,(z80_reset).l
0000000E                            		endm
0000000E                            

0000000E                            resetZ80a:	macro
0000000E                            		move.w	#0,(z80_reset).l
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; start the Z80
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            startZ80:	macro
0000000E                            		move.w	#0,(z80_bus_request).l
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; disable interrupts
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            disable_ints:	macro
0000000E                            		move	#$2700,sr
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; enable interrupts
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            enable_ints:	macro
0000000E                            		move	#$2300,sr
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; long conditional jumps
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            jhi:		macro loc
0000000E                            		bls.s	@nojump
0000000E                            		jmp	loc
0000000E                            	@nojump:
0000000E                            		endm
0000000E                            

0000000E                            jcc:		macro loc
0000000E                            		bcs.s	@nojump
0000000E                            		jmp	loc
0000000E                            	@nojump:
0000000E                            		endm
0000000E                            

0000000E                            jhs:		macro loc
0000000E                            		jcc	loc
0000000E                            		endm
0000000E                            

0000000E                            jls:		macro loc
0000000E                            		bhi.s	@nojump
0000000E                            		jmp	loc
0000000E                            	@nojump:
0000000E                            		endm
0000000E                            

0000000E                            jcs:		macro loc
0000000E                            		bcc.s	@nojump
0000000E                            		jmp	loc
0000000E                            	@nojump:
0000000E                            		endm
0000000E                            

0000000E                            jlo:		macro loc
0000000E                            		jcs	loc
0000000E                            		endm
0000000E                            

0000000E                            jeq:		macro loc
0000000E                            		bne.s	@nojump
0000000E                            		jmp	loc
0000000E                            	@nojump:
0000000E                            		endm
0000000E                            

0000000E                            jne:		macro loc
0000000E                            		beq.s	@nojump
0000000E                            		jmp	loc
0000000E                            	@nojump:
0000000E                            		endm
0000000E                            

0000000E                            jgt:		macro loc
0000000E                            		ble.s	@nojump
0000000E                            		jmp	loc
0000000E                            	@nojump:
0000000E                            		endm
0000000E                            

0000000E                            jge:		macro loc
0000000E                            		blt.s	@nojump
0000000E                            		jmp	loc
0000000E                            	@nojump:
0000000E                            		endm
0000000E                            

0000000E                            jle:		macro loc
0000000E                            		bgt.s	@nojump
0000000E                            		jmp	loc
0000000E                            	@nojump:
0000000E                            		endm
0000000E                            

0000000E                            jlt:		macro loc
0000000E                            		bge.s	@nojump
0000000E                            		jmp	loc
0000000E                            	@nojump:
0000000E                            		endm
0000000E                            

0000000E                            jpl:		macro loc
0000000E                            		bmi.s	@nojump
0000000E                            		jmp	loc
0000000E                            	@nojump:
0000000E                            		endm
0000000E                            

0000000E                            jmi:		macro loc
0000000E                            		bpl.s	@nojump
0000000E                            		jmp	loc
0000000E                            	@nojump:
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; check if object moves out of range
0000000E                            ; input: location to jump to if out of range, x-axis pos (obX(a0) by default)
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            out_of_range:	macro exit,pos
0000000E                            		if (narg=2)
0000000E                            		move.w	pos,d0		; get object position (if specified as not obX)
0000000E                            		else
0000000E                            		move.w	obX(a0),d0	; get object position
0000000E                            		endc
0000000E                            		andi.w	#$FF80,d0	; round down to nearest $80
0000000E                            		move.w	(v_screenposx).w,d1 ; get screen position
0000000E                            		subi.w	#128,d1
0000000E                            		andi.w	#$FF80,d1
0000000E                            		sub.w	d1,d0		; approx distance between object and screen
0000000E                            		cmpi.w	#128+320+192,d0
0000000E                            		bhi.\0	exit
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; bankswitch between SRAM and ROM
0000000E                            ; (remember to enable SRAM in the header first!)
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            gotoSRAM:	macro
0000000E                            		move.b	#1,($A130F1).l
0000000E                            		endm
0000000E                            

0000000E                            gotoROM:	macro
0000000E                            		move.b	#0,($A130F1).l
0000000E                            		endm
0000000E                            

0000000E                            ; ---------------------------------------------------------------------------
0000000E                            ; compare the size of an index with ZoneCount constant
0000000E                            ; (should be used immediately after the index)
0000000E                            ; input: index address, element size
0000000E                            ; ---------------------------------------------------------------------------
0000000E                            

0000000E                            zonewarning:	macro loc,elementsize
0000000E                            	@end:
0000000E                            		if (@end-loc)-(ZoneCount*elementsize)<>0
0000000E                            		inform 1,"Size of \loc ($%h) does not match ZoneCount ($\#ZoneCount).",(@end-loc)/elementsize
0000000E                            		endc
0000000E                            		endm
0000000E                            		endm
0000000E                            

0000000E =00000000                  EnableSRAM:	equ 0	; change to 1 to enable SRAM
0000000E =00000001                  BackupSRAM:	equ 1
0000000E =00000003                  AddressSRAM:	equ 3	; 0 = odd+even; 2 = even only; 3 = odd only
0000000E                            

0000000E                            ; Change to 0 to build the original version of the game, dubbed REV00
0000000E                            ; Change to 1 to build the later vesion, dubbed REV01, which includes various bugfixes and enhancements
0000000E                            ; Change to 2 to build the version from Sonic Mega Collection, dubbed REVXB, which fixes the infamous "spike bug"
0000000E =00000001                  Revision:	equ 1
0000000E                            

0000000E =00000006                  ZoneCount:	equ 6	; discrete zones are: GHZ, MZ, SYZ, LZ, SLZ, and SBZ
0000000E                            

0000000E                            ; ===========================================================================
0000000E                            

0000000E                            StartOfRom:
0000000E 00FF FE00                  Vectors:	dc.l v_systemstack&$FFFFFF	; Initial stack pointer value
00000012 0000 0000                  		dc.l EntryPoint			; Start of program
00000016 0000 0000                  		dc.l BusError			; Bus error
0000001A 0000 0000                  		dc.l AddressError		; Address error (4)
0000001E 0000 0000                  		dc.l IllegalInstr		; Illegal instruction
00000022 0000 0000                  		dc.l ZeroDivide			; Division by zero
00000026 0000 0000                  		dc.l ChkInstr			; CHK exception
0000002A 0000 0000                  		dc.l TrapvInstr			; TRAPV exception (8)
0000002E 0000 0000                  		dc.l PrivilegeViol		; Privilege violation
00000032 0000 0000                  		dc.l Trace				; TRACE exception
00000036 0000 0000                  		dc.l Line1010Emu		; Line-A emulator
0000003A 0000 0000                  		dc.l Line1111Emu		; Line-F emulator (12)
0000003E 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000042 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000046 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000004A 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (16)
0000004E 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000052 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000056 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000005A 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (20)
0000005E 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000062 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
00000066 0000 0000                  		dc.l ErrorExcept		; Unused (reserved)
0000006A 0000 0000                  		dc.l ErrorExcept		; Unused (reserved) (24)
0000006E 0000 0000                  		dc.l ErrorExcept		; Spurious exception
00000072 0000 0000                  		dc.l ErrorTrap			; IRQ level 1
00000076 0000 0000                  		dc.l ErrorTrap			; IRQ level 2
0000007A 0000 0000                  		dc.l ErrorTrap			; IRQ level 3 (28)
0000007E 0000 0000                  		dc.l HBlank				; IRQ level 4 (horizontal retrace interrupt)
00000082 0000 0000                  		dc.l ErrorTrap			; IRQ level 5
00000086 0000 0000                  		dc.l VBlank				; IRQ level 6 (vertical retrace interrupt)
0000008A 0000 0000                  		dc.l ErrorTrap			; IRQ level 7 (32)
0000008E 0000 0000                  		dc.l ErrorTrap			; TRAP #00 exception
00000092 0000 0000                  		dc.l ErrorTrap			; TRAP #01 exception
00000096 0000 0000                  		dc.l ErrorTrap			; TRAP #02 exception
0000009A 0000 0000                  		dc.l ErrorTrap			; TRAP #03 exception (36)
0000009E 0000 0000                  		dc.l ErrorTrap			; TRAP #04 exception
000000A2 0000 0000                  		dc.l ErrorTrap			; TRAP #05 exception
000000A6 0000 0000                  		dc.l ErrorTrap			; TRAP #06 exception
000000AA 0000 0000                  		dc.l ErrorTrap			; TRAP #07 exception (40)
000000AE 0000 0000                  		dc.l ErrorTrap			; TRAP #08 exception
000000B2 0000 0000                  		dc.l ErrorTrap			; TRAP #09 exception
000000B6 0000 0000                  		dc.l ErrorTrap			; TRAP #10 exception
000000BA 0000 0000                  		dc.l ErrorTrap			; TRAP #11 exception (44)
000000BE 0000 0000                  		dc.l ErrorTrap			; TRAP #12 exception
000000C2 0000 0000                  		dc.l ErrorTrap			; TRAP #13 exception
000000C6 0000 0000                  		dc.l ErrorTrap			; TRAP #14 exception
000000CA 0000 0000                  		dc.l ErrorTrap			; TRAP #15 exception (48)
000000CE 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D2 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000D6 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DA 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000DE 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E2 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000E6 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000EA 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000EE 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000F2 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000F6 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000FA 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
000000FE 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
00000102 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
00000106 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
0000010A 0000 0000                  		dc.l ErrorTrap			; Unused (reserved)
0000010E 5345 4741 204D 4547 4120+  		dc.b "SEGA MEGA DRIVE " ; Hardware system ID (Console name)
0000011E 2843 2953 4547 4120 3139+  		dc.b "(C)SEGA 1991.APR" ; Copyright holder and release date (generally year)
0000012E 534F 4E49 4320 5448 4520+  		dc.b "SONIC THE               HEDGEHOG                " ; Domestic name
0000015E 534F 4E49 4320 5448 4520+  		dc.b "SONIC THE               HEDGEHOG                " ; International name
0000018E 474D 2030 3030 3034 3034+  			dc.b "GM 00004049-01" ; Serial/version number (Rev non-0)
0000019C                            Checksum:
0000019C AFC7                       		dc.w $AFC7
0000019E 4A20 2020 2020 2020 2020+  		dc.b "J               " ; I/O support
000001AE 0000 000E                  		dc.l StartOfRom		; Start address of ROM
000001B2 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; End address of ROM
000001B6 00FF 0000                  		dc.l $FF0000		; Start address of RAM
000001BA 00FF FFFF                  		dc.l $FFFFFF		; End address of RAM
000001BE 2020 2020                  		dc.l $20202020
000001C2 2020 2020                  		dc.l $20202020		; SRAM start ($200001)
000001C6 2020 2020                  		dc.l $20202020		; SRAM end ($20xxxx)
000001CA 2020 2020 2020 2020 2020+  		dc.b "                                                    " ; Notes (unused, anything can be put in this space, but it has to be 52 bytes.)
000001FE 4A55 4520 2020 2020 2020+  		dc.b "JUE             " ; Region (Country code)
0000020E                            EndOfHeader:
0000020E                            

0000020E                            ; ===========================================================================
0000020E                            ; Crash/Freeze the 68000. Unlike Sonic 2, Sonic 1 uses the 68000 for playing music, so it stops too
0000020E                            

0000020E                            ErrorTrap:
0000020E 4E71                       		nop	
00000210 4E71                       		nop	
00000212 60FA                       		bra.s	ErrorTrap
00000214                            ; ===========================================================================
00000214                            

00000214                            EntryPoint:
00000214 4AB9 00A1 0008             		tst.l	(z80_port_1_control).l ; test port A & B control registers
0000021A 6600                       		bne.s	PortA_Ok
0000021C 4A79 00A1 000C             		tst.w	(z80_expansion_control).l ; test port C control register
00000222                            

00000222                            PortA_Ok:
00000222 6600                       		bne.s	SkipSetup ; Skip the VDP and Z80 setup code if port A, B or C is ok...?
00000224 4BFA 0000                  		lea	SetupValues(pc),a5	; Load setup values array address.
00000228 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000022C 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000230 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version (from $A10001)
00000234 0200 000F                  		andi.b	#$F,d0
00000238 6700                       		beq.s	SkipSecurity	; If the console has no TMSS, skip the security stuff.
0000023A 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1) ; move "SEGA" to TMSS register ($A14000)
00000242                            

00000242                            SkipSecurity:
00000242 3014                       		move.w	(a4),d0	; clear write-pending flag in VDP to prevent issues if the 68k has been reset in the middle of writing a command long word to the VDP.
00000244 7000                       		moveq	#0,d0	; clear d0
00000246 2C40                       		movea.l	d0,a6	; clear a6
00000248 4E66                       		move.l	a6,usp	; set usp to $0
0000024A                            

0000024A 7217                       		moveq	#$17,d1
0000024C                            VDPInitLoop:
0000024C 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
0000024E 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000250 DA47                       		add.w	d7,d5		; next register
00000252 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000256                            		
00000256 289D                       		move.l	(a5)+,(a4)
00000258 3680                       		move.w	d0,(a3)		; clear	the VRAM
0000025A 3287                       		move.w	d7,(a1)		; stop the Z80
0000025C 3487                       		move.w	d7,(a2)		; reset	the Z80
0000025E                            

0000025E                            WaitForZ80:
0000025E 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000260 66FC                       		bne.s	WaitForZ80	; if not, branch
00000262                            

00000262 7425                       		moveq	#$25,d2
00000264                            Z80InitLoop:
00000264 10DD                       		move.b	(a5)+,(a0)+
00000266 51CA FFFC                  		dbf	d2,Z80InitLoop
0000026A                            		
0000026A 3480                       		move.w	d0,(a2)
0000026C 3280                       		move.w	d0,(a1)		; start	the Z80
0000026E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000270                            

00000270                            ClrRAMLoop:
00000270 2D00                       		move.l	d0,-(a6)	; clear 4 bytes of RAM
00000272 51CE FFFC                  		dbf	d6,ClrRAMLoop	; repeat until the entire RAM is clear
00000276 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment mode
00000278 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000027A                            

0000027A 761F                       		moveq	#$1F,d3	; set repeat times
0000027C                            ClrCRAMLoop:
0000027C 2680                       		move.l	d0,(a3)	; clear 2 palettes
0000027E 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; repeat until the entire CRAM is clear
00000282 289D                       		move.l	(a5)+,(a4)	; set VDP to VSRAM write
00000284                            

00000284 7813                       		moveq	#$13,d4
00000286                            ClrVSRAMLoop:
00000286 2680                       		move.l	d0,(a3)	; clear 4 bytes of VSRAM.
00000288 51CC FFFC                  		dbf	d4,ClrVSRAMLoop	; repeat until the entire VSRAM is clear
0000028C 7A03                       		moveq	#3,d5
0000028E                            

0000028E                            PSGInitLoop:
0000028E 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000292 51CD FFFA                  		dbf	d5,PSGInitLoop	; repeat for other channels
00000296 3480                       		move.w	d0,(a2)
00000298 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear all registers
0000029C 46FC 2700                  		disable_ints
000002A0                            

000002A0                            SkipSetup:
000002A0 6000                       		bra.s	GameProgram	; begin game
000002A2                            

000002A2                            ; ===========================================================================
000002A2 8000                       SetupValues:	dc.w $8000		; VDP register start number
000002A4 3FFF                       		dc.w $3FFF		; size of RAM/4
000002A6 0100                       		dc.w $100		; VDP register diff
000002A8                            

000002A8 00A0 0000                  		dc.l z80_ram		; start	of Z80 RAM
000002AC 00A1 1100                  		dc.l z80_bus_request	; Z80 bus request
000002B0 00A1 1200                  		dc.l z80_reset		; Z80 reset
000002B4 00C0 0000                  		dc.l vdp_data_port	; VDP data
000002B8 00C0 0004                  		dc.l vdp_control_port	; VDP control
000002BC                            

000002BC 04                         		dc.b 4			; VDP $80 - 8-colour mode
000002BD 14                         		dc.b $14		; VDP $81 - Megadrive mode, DMA enable
000002BE 30                         		dc.b ($C000>>10)	; VDP $82 - foreground nametable address
000002BF 3C                         		dc.b ($F000>>10)	; VDP $83 - window nametable address
000002C0 07                         		dc.b ($E000>>13)	; VDP $84 - background nametable address
000002C1 6C                         		dc.b ($D800>>9)		; VDP $85 - sprite table address
000002C2 00                         		dc.b 0			; VDP $86 - unused
000002C3 00                         		dc.b 0			; VDP $87 - background colour
000002C4 00                         		dc.b 0			; VDP $88 - unused
000002C5 00                         		dc.b 0			; VDP $89 - unused
000002C6 FF                         		dc.b 255		; VDP $8A - HBlank register
000002C7 00                         		dc.b 0			; VDP $8B - full screen scroll
000002C8 81                         		dc.b $81		; VDP $8C - 40 cell display
000002C9 37                         		dc.b ($DC00>>10)	; VDP $8D - hscroll table address
000002CA 00                         		dc.b 0			; VDP $8E - unused
000002CB 01                         		dc.b 1			; VDP $8F - VDP increment
000002CC 01                         		dc.b 1			; VDP $90 - 64 cell hscroll size
000002CD 00                         		dc.b 0			; VDP $91 - window h position
000002CE 00                         		dc.b 0			; VDP $92 - window v position
000002CF FFFF                       		dc.w $FFFF		; VDP $93/94 - DMA length
000002D1 0000                       		dc.w 0			; VDP $95/96 - DMA source
000002D3 80                         		dc.b $80		; VDP $97 - DMA fill VRAM
000002D4 4000 0080                  		dc.l $40000080		; VRAM address 0
000002D8                            

000002D8 AF                         		dc.b $AF		; xor	a
000002D9 01D9 1F                    		dc.b $01, $D9, $1F	; ld	bc,1fd9h
000002DC 1127 00                    		dc.b $11, $27, $00	; ld	de,0027h
000002DF 2126 00                    		dc.b $21, $26, $00	; ld	hl,0026h
000002E2 F9                         		dc.b $F9		; ld	sp,hl
000002E3 77                         		dc.b $77		; ld	(hl),a
000002E4 EDB0                       		dc.b $ED, $B0		; ldir
000002E6 DDE1                       		dc.b $DD, $E1		; pop	ix
000002E8 FDE1                       		dc.b $FD, $E1		; pop	iy
000002EA ED47                       		dc.b $ED, $47		; ld	i,a
000002EC ED4F                       		dc.b $ED, $4F		; ld	r,a
000002EE D1                         		dc.b $D1		; pop	de
000002EF E1                         		dc.b $E1		; pop	hl
000002F0 F1                         		dc.b $F1		; pop	af
000002F1 08                         		dc.b $08		; ex	af,af'
000002F2 D9                         		dc.b $D9		; exx
000002F3 C1                         		dc.b $C1		; pop	bc
000002F4 D1                         		dc.b $D1		; pop	de
000002F5 E1                         		dc.b $E1		; pop	hl
000002F6 F1                         		dc.b $F1		; pop	af
000002F7 F9                         		dc.b $F9		; ld	sp,hl
000002F8 F3                         		dc.b $F3		; di
000002F9 ED56                       		dc.b $ED, $56		; im1
000002FB 36E9                       		dc.b $36, $E9		; ld	(hl),e9h
000002FD E9                         		dc.b $E9		; jp	(hl)
000002FE                            

000002FE 8104                       		dc.w $8104		; VDP display mode
00000300 8F02                       		dc.w $8F02		; VDP increment
00000302 C000 0000                  		dc.l $C0000000		; CRAM write mode
00000306 4000 0010                  		dc.l $40000010		; VSRAM address 0
0000030A                            

0000030A 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
0000030E                            ; ===========================================================================
0000030E                            

0000030E                            GameProgram:
0000030E 4A79 00C0 0004             		tst.w	(vdp_control_port).l
00000314 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000031C 6700                       		beq.s	CheckSumCheck
0000031E 0CB8 696E 6974 FFFC        		cmpi.l	#'init',(v_init).w ; has checksum routine already run?
00000326 6700 0000                  		beq.w	GameInit	; if yes, branch
0000032A                            

0000032A                            CheckSumCheck:
0000032A 207C 0000 020E             		movea.l	#EndOfHeader,a0	; start	checking bytes after the header	($200)
00000330 227C 0000 01B2             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000336 2011                       		move.l	(a1),d0
00000338 7200                       		moveq	#0,d1
0000033A                            

0000033A                            	@loop:
0000033A D258                       		add.w	(a0)+,d1
0000033C B088                       		cmp.l	a0,d0
0000033E 64FA                       		bhs.s	@loop
00000340 227C 0000 019C             		movea.l	#Checksum,a1	; read the checksum
00000346 B251                       		cmp.w	(a1),d1		; compare checksum in header to ROM
00000348 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000034C                            

0000034C                            	CheckSumOk:
0000034C 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000350 7E00                       		moveq	#0,d7
00000352 3C3C 007F                  		move.w	#$7F,d6
00000356                            	@clearRAM:
00000356 2CC7                       		move.l	d7,(a6)+
00000358 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($FE00-$FFFF)
0000035C                            

0000035C 1039 00A1 0001             		move.b	(z80_version).l,d0
00000362 0200 00C0                  		andi.b	#$C0,d0
00000366 11C0 FFF8                  		move.b	d0,(v_megadrive).w ; get region setting
0000036A 21FC 696E 6974 FFFC        		move.l	#'init',(v_init).w ; set flag so checksum won't run again
00000372                            

00000372                            GameInit:
00000372 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000378 7E00                       		moveq	#0,d7
0000037A 3C3C 3F7F                  		move.w	#$3F7F,d6
0000037E                            	@clearRAM:
0000037E 2CC7                       		move.l	d7,(a6)+
00000380 51CE FFFC                  		dbf	d6,@clearRAM	; clear RAM ($0000-$FDFF)
00000384                            

00000384 6100 0000                  		bsr.w	VDPSetupGame
00000388 6100 0000                  		bsr.w	SoundDriverLoad
0000038C 6100 0000                  		bsr.w	JoypadInit
00000390 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set Game Mode to Sega Screen
00000396                            

00000396                            MainGameLoop:
00000396 1038 F600                  		move.b	(v_gamemode).w,d0 ; load Game Mode
0000039A 0240 001C                  		andi.w	#$1C,d0	; limit Game Mode value to $1C max (change to a maximum of 7C to add more game modes)
0000039E 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003A2 60F2                       		bra.s	MainGameLoop	; loop indefinitely
000003A4                            ; ===========================================================================
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            ; Main game mode array
000003A4                            ; ---------------------------------------------------------------------------
000003A4                            

000003A4                            GameModeArray:
000003A4                            

000003A4 6000 0000                  ptr_GM_Sega:	bra.w	GM_Sega		; Sega Screen ($00)
000003A8                            

000003A8 6000 0000                  ptr_GM_Title:	bra.w	GM_Title	; Title	Screen ($04)
000003AC                            

000003AC 6000 0000                  ptr_GM_Demo:	bra.w	GM_Level	; Demo Mode ($08)
000003B0                            

000003B0 6000 0000                  ptr_GM_Level:	bra.w	GM_Level	; Normal Level ($0C)
000003B4                            

000003B4 6000 0000                  ptr_GM_Special:	bra.w	GM_Special	; Special Stage	($10)
000003B8                            

000003B8 6000 0000                  ptr_GM_Cont:	bra.w	GM_Continue	; Continue Screen ($14)
000003BC                            

000003BC 6000 0000                  ptr_GM_Ending:	bra.w	GM_Ending	; End of game sequence ($18)
000003C0                            

000003C0 6000 0000                  ptr_GM_Credits:	bra.w	GM_Credits	; Credits ($1C)
000003C4                            

000003C4 4E75                       		rts	
000003C6                            ; ===========================================================================
000003C6                            

000003C6                            CheckSumError:
000003C6 6100 0000                  		bsr.w	VDPSetupGame
000003CA 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
000003D4 7E3F                       		moveq	#$3F,d7
000003D6                            

000003D6                            	@fillred:
000003D6 33FC 000E 00C0 0000        		move.w	#cRed,(vdp_data_port).l ; fill palette with red
000003DE 51CF FFF6                  		dbf	d7,@fillred	; repeat $3F more times
000003E2                            

000003E2                            	@endlessloop:
000003E2 60FE                       		bra.s	@endlessloop
000003E4                            ; ===========================================================================
000003E4                            

000003E4                            BusError:
000003E4 11FC 0002 FC44             		move.b	#2,(v_errortype).w
000003EA 6000                       		bra.s	loc_43A
000003EC                            

000003EC                            AddressError:
000003EC 11FC 0004 FC44             		move.b	#4,(v_errortype).w
000003F2 6000                       		bra.s	loc_43A
000003F4                            

000003F4                            IllegalInstr:
000003F4 11FC 0006 FC44             		move.b	#6,(v_errortype).w
000003FA 54AF 0002                  		addq.l	#2,2(sp)
000003FE 6000                       		bra.s	loc_462
00000400                            

00000400                            ZeroDivide:
00000400 11FC 0008 FC44             		move.b	#8,(v_errortype).w
00000406 6000                       		bra.s	loc_462
00000408                            

00000408                            ChkInstr:
00000408 11FC 000A FC44             		move.b	#$A,(v_errortype).w
0000040E 6000                       		bra.s	loc_462
00000410                            

00000410                            TrapvInstr:
00000410 11FC 000C FC44             		move.b	#$C,(v_errortype).w
00000416 6000                       		bra.s	loc_462
00000418                            

00000418                            PrivilegeViol:
00000418 11FC 000E FC44             		move.b	#$E,(v_errortype).w
0000041E 6000                       		bra.s	loc_462
00000420                            

00000420                            Trace:
00000420 11FC 0010 FC44             		move.b	#$10,(v_errortype).w
00000426 6000                       		bra.s	loc_462
00000428                            

00000428                            Line1010Emu:
00000428 11FC 0012 FC44             		move.b	#$12,(v_errortype).w
0000042E 54AF 0002                  		addq.l	#2,2(sp)
00000432 6000                       		bra.s	loc_462
00000434                            

00000434                            Line1111Emu:
00000434 11FC 0014 FC44             		move.b	#$14,(v_errortype).w
0000043A 54AF 0002                  		addq.l	#2,2(sp)
0000043E 6000                       		bra.s	loc_462
00000440                            

00000440                            ErrorExcept:
00000440 11FC 0000 FC44             		move.b	#0,(v_errortype).w
00000446 6000                       		bra.s	loc_462
00000448                            ; ===========================================================================
00000448                            

00000448                            loc_43A:
00000448 46FC 2700                  		disable_ints
0000044C 544F                       		addq.w	#2,sp
0000044E 21DF FC40                  		move.l	(sp)+,(v_spbuffer).w
00000452 544F                       		addq.w	#2,sp
00000454 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000045A 6100 0000                  		bsr.w	ShowErrorMessage
0000045E 202F 0002                  		move.l	2(sp),d0
00000462 6100 0000                  		bsr.w	ShowErrorValue
00000466 2038 FC40                  		move.l	(v_spbuffer).w,d0
0000046A 6100 0000                  		bsr.w	ShowErrorValue
0000046E 6000                       		bra.s	loc_478
00000470                            ; ===========================================================================
00000470                            

00000470                            loc_462:
00000470 46FC 2700                  		disable_ints
00000474 48F8 FFFF FC00             		movem.l	d0-a7,(v_regbuffer).w
0000047A 6100 0000                  		bsr.w	ShowErrorMessage
0000047E 202F 0002                  		move.l	2(sp),d0
00000482 6100 0000                  		bsr.w	ShowErrorValue
00000486                            

00000486                            loc_478:
00000486 6100 0000                  		bsr.w	ErrorWaitForC
0000048A 4CF8 FFFF FC00             		movem.l	(v_regbuffer).w,d0-a7
00000490 46FC 2300                  		enable_ints
00000494 4E73                       		rte	
00000496                            

00000496                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000496                            

00000496                            

00000496                            ShowErrorMessage:
00000496 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000004A6 41F9 0000 0000             		lea	(Art_Text).l,a0
000004AC 323C 027F                  		move.w	#$27F,d1
000004B0                            	@loadgfx:
000004B0 3C98                       		move.w	(a0)+,(a6)
000004B2 51C9 FFFC                  		dbf	d1,@loadgfx
000004B6                            

000004B6 7000                       		moveq	#0,d0		; clear	d0
000004B8 1038 FC44                  		move.b	(v_errortype).w,d0 ; load error code
000004BC 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004C0 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004CE 7212                       		moveq	#$12,d1		; number of characters (minus 1)
000004D0                            

000004D0                            	@showchars:
000004D0 7000                       		moveq	#0,d0
000004D2 1018                       		move.b	(a0)+,d0
000004D4 0640 0790                  		addi.w	#$790,d0
000004D8 3C80                       		move.w	d0,(a6)
000004DA 51C9 FFF4                  		dbf	d1,@showchars	; repeat for number of characters
000004DE 4E75                       		rts	
000004E0                            ; End of function ShowErrorMessage
000004E0                            

000004E0                            ; ===========================================================================
000004E0 0000 0000                  ErrorText:	dc.w @exception-ErrorText, @bus-ErrorText
000004E4 0000 0000                  		dc.w @address-ErrorText, @illinstruct-ErrorText
000004E8 0000 0000                  		dc.w @zerodivide-ErrorText, @chkinstruct-ErrorText
000004EC 0000 0000                  		dc.w @trapv-ErrorText, @privilege-ErrorText
000004F0 0000 0000                  		dc.w @trace-ErrorText, @line1010-ErrorText
000004F4 0000                       		dc.w @line1111-ErrorText
000004F6 4552 524F 5220 4558 4345+  @exception:	dc.b "ERROR EXCEPTION    "
00000509 4255 5320 4552 524F 5220+  @bus:		dc.b "BUS ERROR          "
0000051C 4144 4452 4553 5320 4552+  @address:	dc.b "ADDRESS ERROR      "
0000052F 494C 4C45 4741 4C20 494E+  @illinstruct:	dc.b "ILLEGAL INSTRUCTION"
00000542 4045 524F 2044 4956 4944+  @zerodivide:	dc.b "@ERO DIVIDE        "
00000555 4348 4B20 494E 5354 5255+  @chkinstruct:	dc.b "CHK INSTRUCTION    "
00000568 5452 4150 5620 494E 5354+  @trapv:		dc.b "TRAPV INSTRUCTION  "
0000057B 5052 4956 494C 4547 4520+  @privilege:	dc.b "PRIVILEGE VIOLATION"
0000058E 5452 4143 4520 2020 2020+  @trace:		dc.b "TRACE              "
000005A1 4C49 4E45 2031 3031 3020+  @line1010:	dc.b "LINE 1010 EMULATOR "
000005B4 4C49 4E45 2031 3131 3120+  @line1111:	dc.b "LINE 1111 EMULATOR "
000005C8 00                         		even
000005C8                            

000005C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005C8                            

000005C8                            

000005C8                            ShowErrorValue:
000005C8 3CBC 07CA                  		move.w	#$7CA,(a6)	; display "$" symbol
000005CC 7407                       		moveq	#7,d2
000005CE                            

000005CE                            	@loop:
000005CE E998                       		rol.l	#4,d0
000005D0 6100                       		bsr.s	@shownumber	; display 8 numbers
000005D2 51CA FFFA                  		dbf	d2,@loop
000005D6 4E75                       		rts	
000005D8                            ; End of function ShowErrorValue
000005D8                            

000005D8                            

000005D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005D8                            

000005D8                            

000005D8                            @shownumber:
000005D8 3200                       		move.w	d0,d1
000005DA 0241 000F                  		andi.w	#$F,d1
000005DE 0C41 000A                  		cmpi.w	#$A,d1
000005E2 6500                       		blo.s	@chars0to9
000005E4 5E41                       		addq.w	#7,d1		; add 7 for characters A-F
000005E6                            

000005E6                            	@chars0to9:
000005E6 0641 07C0                  		addi.w	#$7C0,d1
000005EA 3C81                       		move.w	d1,(a6)
000005EC 4E75                       		rts	
000005EE                            ; End of function sub_5CA
000005EE                            

000005EE                            

000005EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005EE                            

000005EE                            

000005EE                            ErrorWaitForC:
000005EE 6100 0000                  		bsr.w	ReadJoypads
000005F2 0C38 0020 F605             		cmpi.b	#btnC,(v_jpadpress1).w ; is button C pressed?
000005F8 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005FC 4E75                       		rts	
000005FE                            ; End of function ErrorWaitForC
000005FE                            

000005FE                            ; ===========================================================================
000005FE                            

000005FE                            Art_Text:	incbin	"artunc\menutext.bin" ; text used in level select and debug mode
00000B1E                            		even
00000B1E                            

00000B1E                            ; ===========================================================================
00000B1E                            ; ---------------------------------------------------------------------------
00000B1E                            ; Vertical interrupt
00000B1E                            ; ---------------------------------------------------------------------------
00000B1E                            

00000B1E                            VBlank:
00000B1E 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000B22 4A38 F62A                  		tst.b	(v_vbla_routine).w
00000B26 6700                       		beq.s	VBla_00
00000B28 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000B2E 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
00000B38 23F8 F616 00C0 0000        		move.l	(v_scrposy_vdp).w,(vdp_data_port).l ; send screen y-axis pos. to VSRAM
00000B40 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000B46 6700                       		beq.s	@notPAL		; if not, branch
00000B48                            

00000B48 303C 0700                  		move.w	#$700,d0
00000B4C                            	@waitPAL:
00000B4C 51C8 FFFE                  		dbf	d0,@waitPAL ; wait here in a loop doing nothing for a while...
00000B50                            

00000B50                            	@notPAL:
00000B50 1038 F62A                  		move.b	(v_vbla_routine).w,d0
00000B54 11FC 0000 F62A             		move.b	#0,(v_vbla_routine).w
00000B5A 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w
00000B60 0240 003E                  		andi.w	#$3E,d0
00000B64 303B 0000                  		move.w	VBla_Index(pc,d0.w),d0
00000B68 4EBB 0000                  		jsr	VBla_Index(pc,d0.w)
00000B6C                            

00000B6C                            VBla_Music:
00000B6C 4EB9 0000 0000             		jsr	(UpdateMusic).l
00000B72                            

00000B72                            VBla_Exit:
00000B72 52B8 FE0C                  		addq.l	#1,(v_vbla_count).w
00000B76 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B7A 4E73                       		rte	
00000B7C                            ; ===========================================================================
00000B7C 0000 0000                  VBla_Index:	dc.w VBla_00-VBla_Index, VBla_02-VBla_Index
00000B80 0000 0000                  		dc.w VBla_04-VBla_Index, VBla_06-VBla_Index
00000B84 0000 0000                  		dc.w VBla_08-VBla_Index, VBla_0A-VBla_Index
00000B88 0000 0000                  		dc.w VBla_0C-VBla_Index, VBla_0E-VBla_Index
00000B8C 0000 0000                  		dc.w VBla_10-VBla_Index, VBla_12-VBla_Index
00000B90 0000 0000                  		dc.w VBla_14-VBla_Index, VBla_16-VBla_Index
00000B94 0000                       		dc.w VBla_0C-VBla_Index
00000B96                            ; ===========================================================================
00000B96                            

00000B96                            VBla_00:
00000B96 0C38 0000 F600             		cmpi.b	#$80+id_Level,(v_gamemode).w
00000B9C 6700                       		beq.s	@islevel
00000B9E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w ; is game on a level?
00000BA4 6600 FFC6                  		bne.w	VBla_Music	; if not, branch
00000BA8                            

00000BA8                            	@islevel:
00000BA8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ ?
00000BAE 6600 FFBC                  		bne.w	VBla_Music	; if not, branch
00000BB2                            

00000BB2 3039 00C0 0004             		move.w	(vdp_control_port).l,d0
00000BB8 0838 0006 FFF8             		btst	#6,(v_megadrive).w ; is Megadrive PAL?
00000BBE 6700                       		beq.s	@notPAL		; if not, branch
00000BC0                            

00000BC0 303C 0700                  		move.w	#$700,d0
00000BC4                            	@waitPAL:
00000BC4 51C8 FFFE                  		dbf	d0,@waitPAL
00000BC8                            

00000BC8                            	@notPAL:
00000BC8 31FC 0001 F644             		move.w	#1,(f_hbla_pal).w ; set HBlank flag
00000BCE 33FC 0100 00A1 1100        		stopZ80
00000BD6 0839 0000 00A1 1100 66F6   		waitZ80
00000BE0 4A38 F64E                  		tst.b	(f_wtr_state).w	; is water above top of screen?
00000BE4 6600                       		bne.s	@waterabove 	; if yes, branch
00000BE6                            

00000BE6 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000C0A 6000                       		bra.s	@waterbelow
00000C0C                            

00000C0C                            @waterabove:
00000C0C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000C30                            

00000C30                            	@waterbelow:
00000C30 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000C34 33FC 0000 00A1 1100        		startZ80
00000C3C 6000 FF2E                  		bra.w	VBla_Music
00000C40                            ; ===========================================================================
00000C40                            

00000C40                            VBla_02:
00000C40 6100 0000                  		bsr.w	sub_106E
00000C44                            

00000C44                            VBla_14:
00000C44 4A78 F614                  		tst.w	(v_demolength).w
00000C48 6700 0000                  		beq.w	@end
00000C4C 5378 F614                  		subq.w	#1,(v_demolength).w
00000C50                            

00000C50                            	@end:
00000C50 4E75                       		rts	
00000C52                            ; ===========================================================================
00000C52                            

00000C52                            VBla_04:
00000C52 6100 0000                  		bsr.w	sub_106E
00000C56 6100 0000                  		bsr.w	LoadTilesAsYouMove_BGOnly
00000C5A 6100 0000                  		bsr.w	sub_1642
00000C5E 4A78 F614                  		tst.w	(v_demolength).w
00000C62 6700 0000                  		beq.w	@end
00000C66 5378 F614                  		subq.w	#1,(v_demolength).w
00000C6A                            

00000C6A                            	@end:
00000C6A 4E75                       		rts	
00000C6C                            ; ===========================================================================
00000C6C                            

00000C6C                            VBla_06:
00000C6C 6100 0000                  		bsr.w	sub_106E
00000C70 4E75                       		rts	
00000C72                            ; ===========================================================================
00000C72                            

00000C72                            VBla_10:
00000C72 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game on special stage?
00000C78 6700 0000                  		beq.w	VBla_0A		; if yes, branch
00000C7C                            

00000C7C                            VBla_08:
00000C7C 33FC 0100 00A1 1100        		stopZ80
00000C84 0839 0000 00A1 1100 66F6   		waitZ80
00000C8E 6100 0000                  		bsr.w	ReadJoypads
00000C92 4A38 F64E                  		tst.b	(f_wtr_state).w
00000C96 6600                       		bne.s	@waterabove
00000C98                            

00000C98 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000CBC 6000                       		bra.s	@waterbelow
00000CBE                            

00000CBE                            @waterabove:
00000CBE 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000CE2                            

00000CE2                            	@waterbelow:
00000CE2 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000CE6                            

00000CE6 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000D0A 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000D2E 4A38 F767                  		tst.b	(f_sonframechg).w ; has Sonic's sprite changed?
00000D32 6700                       		beq.s	@nochg		; if not, branch
00000D34                            

00000D34 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_sgfx_buffer,$2E0,vram_sonic ; load new Sonic gfx
00000D58 11FC 0000 F767             		move.b	#0,(f_sonframechg).w
00000D5E                            

00000D5E                            	@nochg:
00000D5E 33FC 0000 00A1 1100        		startZ80
00000D66 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000D6C 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000D72 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000D78 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000D7E 0C38 0060 F625             		cmpi.b	#96,(v_hbla_line).w
00000D84 6400                       		bhs.s	Demo_Time
00000D86 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D8C 588F                       		addq.l	#4,sp
00000D8E 6000 FDE2                  		bra.w	VBla_Exit
00000D92                            

00000D92                            ; ---------------------------------------------------------------------------
00000D92                            ; Subroutine to	run a demo for an amount of time
00000D92                            ; ---------------------------------------------------------------------------
00000D92                            

00000D92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D92                            

00000D92                            

00000D92                            Demo_Time:
00000D92 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D96 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000D9C 4EB9 0000 0000             		jsr	(HUD_Update).l
00000DA2 6100 0000                  		bsr.w	ProcessDPLC2
00000DA6 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00000DAA 6700 0000                  		beq.w	@end		; if not, branch
00000DAE 5378 F614                  		subq.w	#1,(v_demolength).w ; subtract 1 from time left
00000DB2                            

00000DB2                            	@end:
00000DB2 4E75                       		rts	
00000DB4                            ; End of function Demo_Time
00000DB4                            

00000DB4                            ; ===========================================================================
00000DB4                            

00000DB4                            VBla_0A:
00000DB4 33FC 0100 00A1 1100        		stopZ80
00000DBC 0839 0000 00A1 1100 66F6   		waitZ80
00000DC6 6100 0000                  		bsr.w	ReadJoypads
00000DCA 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000DEE 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000E12 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000E36 33FC 0000 00A1 1100        		startZ80
00000E3E 6100 0000                  		bsr.w	PalCycle_SS
00000E42 4A38 F767                  		tst.b	(f_sonframechg).w ; has Sonic's sprite changed?
00000E46 6700                       		beq.s	@nochg		; if not, branch
00000E48                            

00000E48 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_sgfx_buffer,$2E0,vram_sonic ; load new Sonic gfx
00000E6C 11FC 0000 F767             		move.b	#0,(f_sonframechg).w
00000E72                            

00000E72                            	@nochg:
00000E72 4A78 F614                  		tst.w	(v_demolength).w	; is there time left on the demo?
00000E76 6700 0000                  		beq.w	@end	; if not, return
00000E7A 5378 F614                  		subq.w	#1,(v_demolength).w	; subtract 1 from time left in demo
00000E7E                            

00000E7E                            	@end:
00000E7E 4E75                       		rts	
00000E80                            ; ===========================================================================
00000E80                            

00000E80                            VBla_0C:
00000E80 33FC 0100 00A1 1100        		stopZ80
00000E88 0839 0000 00A1 1100 66F6   		waitZ80
00000E92 6100 0000                  		bsr.w	ReadJoypads
00000E96 4A38 F64E                  		tst.b	(f_wtr_state).w
00000E9A 6600                       		bne.s	@waterabove
00000E9C                            

00000E9C 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000EC0 6000                       		bra.s	@waterbelow
00000EC2                            

00000EC2                            @waterabove:
00000EC2 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
00000EE6                            

00000EE6                            	@waterbelow:
00000EE6 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000EEA 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00000F0E 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00000F32 4A38 F767                  		tst.b	(f_sonframechg).w
00000F36 6700                       		beq.s	@nochg
00000F38 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_sgfx_buffer,$2E0,vram_sonic
00000F5C 11FC 0000 F767             		move.b	#0,(f_sonframechg).w
00000F62                            

00000F62                            	@nochg:
00000F62 33FC 0000 00A1 1100        		startZ80
00000F6A 4CF8 00FF F700             		movem.l	(v_screenposx).w,d0-d7
00000F70 48F8 00FF FF10             		movem.l	d0-d7,(v_screenposx_dup).w
00000F76 4CF8 0003 F754             		movem.l	(v_fg_scroll_flags).w,d0-d1
00000F7C 48F8 0003 FF30             		movem.l	d0-d1,(v_fg_scroll_flags_dup).w
00000F82 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F86 4EB9 0000 0000             		jsr	(AnimateLevelGfx).l
00000F8C 4EB9 0000 0000             		jsr	(HUD_Update).l
00000F92 6100 0000                  		bsr.w	sub_1642
00000F96 4E75                       		rts	
00000F98                            ; ===========================================================================
00000F98                            

00000F98                            VBla_0E:
00000F98 6100 0000                  		bsr.w	sub_106E
00000F9C 5238 F628                  		addq.b	#1,($FFFFF628).w
00000FA0 11FC 000E F62A             		move.b	#$E,(v_vbla_routine).w
00000FA6 4E75                       		rts	
00000FA8                            ; ===========================================================================
00000FA8                            

00000FA8                            VBla_12:
00000FA8 6100 0000                  		bsr.w	sub_106E
00000FAC 3AB8 F624                  		move.w	(v_hbla_hreg).w,(a5)
00000FB0 6000 0000                  		bra.w	sub_1642
00000FB4                            ; ===========================================================================
00000FB4                            

00000FB4                            VBla_16:
00000FB4 33FC 0100 00A1 1100        		stopZ80
00000FBC 0839 0000 00A1 1100 66F6   		waitZ80
00000FC6 6100 0000                  		bsr.w	ReadJoypads
00000FCA 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
00000FEE 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001012 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
00001036 33FC 0000 00A1 1100        		startZ80
0000103E 4A38 F767                  		tst.b	(f_sonframechg).w
00001042 6700                       		beq.s	@nochg
00001044 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_sgfx_buffer,$2E0,vram_sonic
00001068 11FC 0000 F767             		move.b	#0,(f_sonframechg).w
0000106E                            

0000106E                            	@nochg:
0000106E 4A78 F614                  		tst.w	(v_demolength).w
00001072 6700 0000                  		beq.w	@end
00001076 5378 F614                  		subq.w	#1,(v_demolength).w
0000107A                            

0000107A                            	@end:
0000107A 4E75                       		rts	
0000107C                            

0000107C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000107C                            

0000107C                            

0000107C                            sub_106E:
0000107C 33FC 0100 00A1 1100        		stopZ80
00001084 0839 0000 00A1 1100 66F6   		waitZ80
0000108E 6100 0000                  		bsr.w	ReadJoypads
00001092 4A38 F64E                  		tst.b	(f_wtr_state).w ; is water above top of screen?
00001096 6600                       		bne.s	@waterabove	; if yes, branch
00001098 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_dry,$80,0
000010BC 6000                       		bra.s	@waterbelow
000010BE                            

000010BE                            	@waterabove:
000010BE 4BF9 00C0 0004 2ABC 9400+  		writeCRAM	v_pal_water,$80,0
000010E2                            

000010E2                            	@waterbelow:
000010E2 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_spritetablebuffer,$280,vram_sprites
00001106 4BF9 00C0 0004 2ABC 9401+  		writeVRAM	v_hscrolltablebuffer,$380,vram_hscroll
0000112A 33FC 0000 00A1 1100        		startZ80
00001132 4E75                       		rts	
00001134                            ; End of function sub_106E
00001134                            

00001134                            ; ---------------------------------------------------------------------------
00001134                            ; Horizontal interrupt
00001134                            ; ---------------------------------------------------------------------------
00001134                            

00001134                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001134                            

00001134                            

00001134                            HBlank:
00001134 46FC 2700                  		disable_ints
00001138 4A78 F644                  		tst.w	(f_hbla_pal).w	; is palette set to change?
0000113C 6700                       		beq.s	@nochg		; if not, branch
0000113E 31FC 0000 F644             		move.w	#0,(f_hbla_pal).w
00001144 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001148 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000114E 41F8 FA80                  		lea	(v_pal_water).w,a0 ; get palette from RAM
00001152 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000115A 2298                       		move.l	(a0)+,(a1)	; move palette to CRAM
0000115C 2298                       		move.l	(a0)+,(a1)
0000115E 2298                       		move.l	(a0)+,(a1)
00001160 2298                       		move.l	(a0)+,(a1)
00001162 2298                       		move.l	(a0)+,(a1)
00001164 2298                       		move.l	(a0)+,(a1)
00001166 2298                       		move.l	(a0)+,(a1)
00001168 2298                       		move.l	(a0)+,(a1)
0000116A 2298                       		move.l	(a0)+,(a1)
0000116C 2298                       		move.l	(a0)+,(a1)
0000116E 2298                       		move.l	(a0)+,(a1)
00001170 2298                       		move.l	(a0)+,(a1)
00001172 2298                       		move.l	(a0)+,(a1)
00001174 2298                       		move.l	(a0)+,(a1)
00001176 2298                       		move.l	(a0)+,(a1)
00001178 2298                       		move.l	(a0)+,(a1)
0000117A 2298                       		move.l	(a0)+,(a1)
0000117C 2298                       		move.l	(a0)+,(a1)
0000117E 2298                       		move.l	(a0)+,(a1)
00001180 2298                       		move.l	(a0)+,(a1)
00001182 2298                       		move.l	(a0)+,(a1)
00001184 2298                       		move.l	(a0)+,(a1)
00001186 2298                       		move.l	(a0)+,(a1)
00001188 2298                       		move.l	(a0)+,(a1)
0000118A 2298                       		move.l	(a0)+,(a1)
0000118C 2298                       		move.l	(a0)+,(a1)
0000118E 2298                       		move.l	(a0)+,(a1)
00001190 2298                       		move.l	(a0)+,(a1)
00001192 2298                       		move.l	(a0)+,(a1)
00001194 2298                       		move.l	(a0)+,(a1)
00001196 2298                       		move.l	(a0)+,(a1)
00001198 2298                       		move.l	(a0)+,(a1)
0000119A 337C 8ADF 0004             		move.w	#$8A00+223,4(a1) ; reset HBlank register
000011A0 4CDF 0300                  		movem.l	(sp)+,a0-a1
000011A4 4A38 F64F                  		tst.b	($FFFFF64F).w
000011A8 6600                       		bne.s	loc_119E
000011AA                            

000011AA                            	@nochg:
000011AA 4E73                       		rte	
000011AC                            ; ===========================================================================
000011AC                            

000011AC                            loc_119E:
000011AC 4238 F64F                  		clr.b	($FFFFF64F).w
000011B0 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000011B4 6100 FBDC                  		bsr.w	Demo_Time
000011B8 4EB9 0000 0000             		jsr	(UpdateMusic).l
000011BE 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000011C2 4E73                       		rte	
000011C4                            ; End of function HBlank
000011C4                            

000011C4                            ; ---------------------------------------------------------------------------
000011C4                            ; Subroutine to	initialise joypads
000011C4                            ; ---------------------------------------------------------------------------
000011C4                            

000011C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011C4                            

000011C4                            

000011C4                            JoypadInit:
000011C4 33FC 0100 00A1 1100        		stopZ80
000011CC 0839 0000 00A1 1100 66F6   		waitZ80
000011D6 7040                       		moveq	#$40,d0
000011D8 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000011DE 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000011E4 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (expansion/extra)
000011EA 33FC 0000 00A1 1100        		startZ80
000011F2 4E75                       		rts	
000011F4                            ; End of function JoypadInit
000011F4                            

000011F4                            ; ---------------------------------------------------------------------------
000011F4                            ; Subroutine to	read joypad input, and send it to the RAM
000011F4                            ; ---------------------------------------------------------------------------
000011F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011F4                            

000011F4                            

000011F4                            ReadJoypads:
000011F4 41F8 F604                  		lea	(v_jpadhold1).w,a0 ; address where joypad states are written
000011F8 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000011FE 6100                       		bsr.s	@read		; do the first joypad
00001200 5449                       		addq.w	#2,a1		; do the second	joypad
00001202                            

00001202                            	@read:
00001202 12BC 0000                  		move.b	#0,(a1)
00001206 4E71                       		nop	
00001208 4E71                       		nop	
0000120A 1011                       		move.b	(a1),d0
0000120C E508                       		lsl.b	#2,d0
0000120E 0200 00C0                  		andi.b	#$C0,d0
00001212 12BC 0040                  		move.b	#$40,(a1)
00001216 4E71                       		nop	
00001218 4E71                       		nop	
0000121A 1211                       		move.b	(a1),d1
0000121C 0201 003F                  		andi.b	#$3F,d1
00001220 8001                       		or.b	d1,d0
00001222 4600                       		not.b	d0
00001224 1210                       		move.b	(a0),d1
00001226 B101                       		eor.b	d0,d1
00001228 10C0                       		move.b	d0,(a0)+
0000122A C200                       		and.b	d0,d1
0000122C 10C1                       		move.b	d1,(a0)+
0000122E 4E75                       		rts	
00001230                            ; End of function ReadJoypads
00001230                            

00001230                            

00001230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001230                            

00001230                            

00001230                            VDPSetupGame:
00001230 41F9 00C0 0004             		lea	(vdp_control_port).l,a0
00001236 43F9 00C0 0000             		lea	(vdp_data_port).l,a1
0000123C 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001242 7E12                       		moveq	#$12,d7
00001244                            

00001244                            	@setreg:
00001244 309A                       		move.w	(a2)+,(a0)
00001246 51CF FFFC                  		dbf	d7,@setreg	; set the VDP registers
0000124A                            

0000124A 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001250 31C0 F60C                  		move.w	d0,(v_vdp_buffer1).w
00001254 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w	; H-INT every 224th scanline
0000125A 7000                       		moveq	#0,d0
0000125C 23FC C000 0000 00C0 0004   		move.l	#$C0000000,(vdp_control_port).l ; set VDP to CRAM write
00001266 3E3C 003F                  		move.w	#$3F,d7
0000126A                            

0000126A                            	@clrCRAM:
0000126A 3280                       		move.w	d0,(a1)
0000126C 51CF FFFC                  		dbf	d7,@clrCRAM	; clear	the CRAM
00001270                            

00001270 42B8 F616                  		clr.l	(v_scrposy_vdp).w
00001274 42B8 F61A                  		clr.l	(v_scrposx_vdp).w
00001278 2F01                       		move.l	d1,-(sp)
0000127A 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFFF,0
0000129C                            

0000129C                            	@waitforDMA:
0000129C 3215                       		move.w	(a5),d1
0000129E 0801 0001                  		btst	#1,d1		; is DMA (fillVRAM) still running?
000012A2 66F8                       		bne.s	@waitforDMA	; if yes, branch
000012A4                            

000012A4 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment size
000012A8 221F                       		move.l	(sp)+,d1
000012AA 4E75                       		rts	
000012AC                            ; End of function VDPSetupGame
000012AC                            

000012AC                            ; ===========================================================================
000012AC 8004                       VDPSetupArray:	dc.w $8004		; 8-colour mode
000012AE 8134                       		dc.w $8134		; enable V.interrupts, enable DMA
000012B0 8230                       		dc.w $8200+(vram_fg>>10) ; set foreground nametable address
000012B2 8328                       		dc.w $8300+($A000>>10)	; set window nametable address
000012B4 8407                       		dc.w $8400+(vram_bg>>13) ; set background nametable address
000012B6 857C                       		dc.w $8500+(vram_sprites>>9) ; set sprite table address
000012B8 8600                       		dc.w $8600		; unused
000012BA 8700                       		dc.w $8700		; set background colour (palette entry 0)
000012BC 8800                       		dc.w $8800		; unused
000012BE 8900                       		dc.w $8900		; unused
000012C0 8A00                       		dc.w $8A00		; default H.interrupt register
000012C2 8B00                       		dc.w $8B00		; full-screen vertical scrolling
000012C4 8C81                       		dc.w $8C81		; 40-cell display mode
000012C6 8D3F                       		dc.w $8D00+(vram_hscroll>>10) ; set background hscroll address
000012C8 8E00                       		dc.w $8E00		; unused
000012CA 8F02                       		dc.w $8F02		; set VDP increment size
000012CC 9001                       		dc.w $9001		; 64-cell hscroll size
000012CE 9100                       		dc.w $9100		; window horizontal position
000012D0 9200                       		dc.w $9200		; window vertical position
000012D2                            

000012D2                            ; ---------------------------------------------------------------------------
000012D2                            ; Subroutine to	clear the screen
000012D2                            ; ---------------------------------------------------------------------------
000012D2                            

000012D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012D2                            

000012D2                            

000012D2                            ClearScreen:
000012D2 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_fg ; clear foreground namespace
000012F4                            

000012F4                            	@wait1:
000012F4 3215                       		move.w	(a5),d1
000012F6 0801 0001                  		btst	#1,d1
000012FA 66F8                       		bne.s	@wait1
000012FC                            

000012FC 3ABC 8F02                  		move.w	#$8F02,(a5)
00001300 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$FFF,vram_bg ; clear background namespace
00001322                            

00001322                            	@wait2:
00001322 3215                       		move.w	(a5),d1
00001324 0801 0001                  		btst	#1,d1
00001328 66F8                       		bne.s	@wait2
0000132A                            

0000132A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000132E 42B8 F616                  		clr.l	(v_scrposy_vdp).w
00001332 42B8 F61A                  		clr.l	(v_scrposx_vdp).w
00001336                            

00001336 43F8 F800                  		lea	(v_spritetablebuffer).w,a1
0000133A 7000                       		moveq	#0,d0
0000133C 323C 00A0                  		move.w	#($280/4),d1	; This should be ($280/4)-1, leading to a slight bug (first bit of v_pal_water is cleared)
00001340                            

00001340                            	@clearsprites:
00001340 22C0                       		move.l	d0,(a1)+
00001342 51C9 FFFC                  		dbf	d1,@clearsprites ; clear sprite table (in RAM)
00001346                            

00001346 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000134A 7000                       		moveq	#0,d0
0000134C 323C 0100                  		move.w	#($400/4),d1	; This should be ($400/4)-1, leading to a slight bug (first bit of the Sonic object's RAM is cleared)
00001350                            

00001350                            	@clearhscroll:
00001350 22C0                       		move.l	d0,(a1)+
00001352 51C9 FFFC                  		dbf	d1,@clearhscroll ; clear hscroll table (in RAM)
00001356 4E75                       		rts	
00001358                            ; End of function ClearScreen
00001358                            

00001358                            ; ---------------------------------------------------------------------------
00001358                            ; Subroutine to	load the sound driver
00001358                            ; ---------------------------------------------------------------------------
00001358                            

00001358                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001358                            

00001358                            

00001358                            SoundDriverLoad:
00001358 4E71                       		nop	
0000135A 33FC 0100 00A1 1100        		stopZ80
00001362 33FC 0100 00A1 1200        		resetZ80
0000136A 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001370 43F9 00A0 0000             		lea	(z80_ram).l,a1	; target Z80 RAM
00001376 6100 0000                  		bsr.w	KosDec		; decompress
0000137A 33FC 0000 00A1 1200        		resetZ80a
00001382 4E71                       		nop	
00001384 4E71                       		nop	
00001386 4E71                       		nop	
00001388 4E71                       		nop	
0000138A 33FC 0100 00A1 1200        		resetZ80
00001392 33FC 0000 00A1 1100        		startZ80
0000139A 4E75                       		rts	
0000139C                            ; End of function SoundDriverLoad
0000139C                            

0000139C                            		include	"_incObj\sub PlaySound.asm"
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            ; Subroutine to	play a music track
0000139C                            

0000139C                            ; input:
0000139C                            ;	d0 = track to play
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            

0000139C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000139C                            

0000139C                            

0000139C                            PlaySound:
0000139C 11C0 F00A                  		move.b	d0,(v_snddriver_ram+v_soundqueue0).w
000013A0 4E75                       		rts	
000013A2                            ; End of function PlaySound
000013A2                            

000013A2                            ; ---------------------------------------------------------------------------
000013A2                            ; Subroutine to	play a sound effect
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            

000013A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013A2                            

000013A2                            

000013A2                            PlaySound_Special:
000013A2 11C0 F00B                  		move.b	d0,(v_snddriver_ram+v_soundqueue1).w
000013A6 4E75                       		rts	
000013A8                            ; End of function PlaySound_Special
000013A8                            

000013A8                            ; ===========================================================================
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            ; Unused sound/music subroutine
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            

000013A8                            PlaySound_Unused:
000013A8 11C0 F00C                  		move.b	d0,(v_snddriver_ram+v_soundqueue2).w
000013AC 4E75                       		rts	
000013AC 4E75                       		rts	
000013AE                            		include	"_inc\PauseGame.asm"
000013AE                            ; ---------------------------------------------------------------------------
000013AE                            ; Subroutine to	pause the game
000013AE                            ; ---------------------------------------------------------------------------
000013AE                            

000013AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013AE                            

000013AE                            

000013AE                            PauseGame:
000013AE 4E71                       		nop	
000013B0 4A38 FE12                  		tst.b	(v_lives).w	; do you have any lives	left?
000013B4 6700                       		beq.s	Unpause		; if not, branch
000013B6 4A78 F63A                  		tst.w	(f_pause).w	; is game already paused?
000013BA 6600                       		bne.s	Pause_StopGame	; if yes, branch
000013BC 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
000013C2 6700                       		beq.s	Pause_DoNothing	; if not, branch
000013C4                            

000013C4                            Pause_StopGame:
000013C4 31FC 0001 F63A             		move.w	#1,(f_pause).w	; freeze time
000013CA 11FC 0001 F003             		move.b	#1,(v_snddriver_ram+f_pausemusic).w ; pause music
000013D0                            

000013D0                            Pause_Loop:
000013D0 11FC 0010 F62A             		move.b	#$10,(v_vbla_routine).w
000013D6 6100 0000                  		bsr.w	WaitForVBla
000013DA 4A38 FFE1                  		tst.b	(f_slomocheat).w ; is slow-motion cheat on?
000013DE 6700                       		beq.s	Pause_ChkStart	; if not, branch
000013E0 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
000013E6 6700                       		beq.s	Pause_ChkBC	; if not, branch
000013E8 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; set game mode to 4 (title screen)
000013EE 4E71                       		nop	
000013F0 6000                       		bra.s	Pause_EndMusic
000013F2                            ; ===========================================================================
000013F2                            

000013F2                            Pause_ChkBC:
000013F2 0838 0004 F604             		btst	#bitB,(v_jpadhold1).w ; is button B pressed?
000013F8 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013FA 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
00001400 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001402                            

00001402                            Pause_ChkStart:
00001402 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
00001408 67C6                       		beq.s	Pause_Loop	; if not, branch
0000140A                            

0000140A                            Pause_EndMusic:
0000140A 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; unpause the music
00001410                            

00001410                            Unpause:
00001410 31FC 0000 F63A             		move.w	#0,(f_pause).w	; unpause the game
00001416                            

00001416                            Pause_DoNothing:
00001416 4E75                       		rts	
00001418                            ; ===========================================================================
00001418                            

00001418                            Pause_SlowMo:
00001418 31FC 0001 F63A             		move.w	#1,(f_pause).w
0000141E 11FC 0080 F003             		move.b	#$80,(v_snddriver_ram+f_pausemusic).w	; Unpause the music
00001424 4E75                       		rts	
00001426                            ; End of function PauseGame
00001426                            ; End of function PauseGame
00001426                            

00001426                            ; ---------------------------------------------------------------------------
00001426                            ; Subroutine to	copy a tile map from RAM to VRAM namespace
00001426                            

00001426                            ; input:
00001426                            ;	a1 = tile map address
00001426                            ;	d0 = VRAM address
00001426                            ;	d1 = width (cells)
00001426                            ;	d2 = height (cells)
00001426                            ; ---------------------------------------------------------------------------
00001426                            

00001426                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001426                            

00001426                            

00001426                            TilemapToVRAM:
00001426 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000142C 283C 0080 0000             		move.l	#$800000,d4
00001432                            

00001432                            	Tilemap_Line:
00001432 2D40 0004                  		move.l	d0,4(a6)	; move d0 to VDP_control_port
00001436 3601                       		move.w	d1,d3
00001438                            

00001438                            	Tilemap_Cell:
00001438 3C99                       		move.w	(a1)+,(a6)	; write value to namespace
0000143A 51CB FFFC                  		dbf	d3,Tilemap_Cell	; next tile
0000143E D084                       		add.l	d4,d0		; goto next line
00001440 51CA FFF0                  		dbf	d2,Tilemap_Line	; next line
00001444 4E75                       		rts	
00001446                            ; End of function TilemapToVRAM
00001446                            

00001446                            		include	"_inc\Nemesis Decompression.asm"
00001446                            ; ---------------------------------------------------------------------------
00001446                            ; Nemesis decompression	subroutine, decompresses art directly to VRAM
00001446                            ; Inputs:
00001446                            ; a0 = art address
00001446                            

00001446                            ; For format explanation see http://info.sonicretro.org/Nemesis_compression
00001446                            ; ---------------------------------------------------------------------------
00001446                            

00001446                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001446                            

00001446                            ; Nemesis decompression to VRAM
00001446                            NemDec:
00001446 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000144A 47F9 0000 0000             		lea	(NemPCD_WriteRowToVDP).l,a3	; write all data to the same location
00001450 49F9 00C0 0000             		lea	(vdp_data_port).l,a4	; specifically, to the VDP data port
00001456 6000                       		bra.s	NemDecMain
00001458                            

00001458                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
00001458                            

00001458                            ; Nemesis decompression subroutine, decompresses art to RAM
00001458                            ; Inputs:
00001458                            ; a0 = art address
00001458                            ; a4 = destination RAM address
00001458                            NemDecToRAM:
00001458 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000145C 47F9 0000 0000             		lea	(NemPCD_WriteRowToRAM).l,a3 ; advance to the next location after each write
00001462                            

00001462                            NemDecMain:
00001462 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00001466 3418                       		move.w	(a0)+,d2	; get number of patterns
00001468 E34A                       		lsl.w	#1,d2
0000146A 6400                       		bcc.s	loc_146A	; branch if the sign bit isn't set
0000146C D6FC 0000                  		adda.w	#NemPCD_WriteRowToVDP_XOR-NemPCD_WriteRowToVDP,a3	; otherwise the file uses XOR mode
00001470                            

00001470                            loc_146A:
00001470 E54A                       		lsl.w	#2,d2	; get number of 8-pixel rows in the uncompressed data
00001472 3A42                       		movea.w	d2,a5	; and store it in a5 because there aren't any spare data registers
00001474 7608                       		moveq	#8,d3	; 8 pixels in a pattern row
00001476 7400                       		moveq	#0,d2
00001478 7800                       		moveq	#0,d4
0000147A 6100 0000                  		bsr.w	NemDec_BuildCodeTable
0000147E 1A18                       		move.b	(a0)+,d5	; get first byte of compressed data
00001480 E145                       		asl.w	#8,d5	; shift up by a byte
00001482 1A18                       		move.b	(a0)+,d5	; get second byte of compressed data
00001484 3C3C 0010                  		move.w	#$10,d6	; set initial shift value
00001488 6100                       		bsr.s	NemDec_ProcessCompressedData
0000148A 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
0000148E 4E75                       		rts	
00001490                            ; End of function NemDec
00001490                            

00001490                            ; ---------------------------------------------------------------------------
00001490                            ; Part of the Nemesis decompressor, processes the actual compressed data
00001490                            ; ---------------------------------------------------------------------------
00001490                            

00001490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001490                            

00001490                            

00001490                            NemDec_ProcessCompressedData:
00001490 3E06                       		move.w	d6,d7
00001492 5147                       		subq.w	#8,d7	; get shift value
00001494 3205                       		move.w	d5,d1
00001496 EE69                       		lsr.w	d7,d1	; shift so that high bit of the code is in bit position 7
00001498 0C01 00FC                  		cmpi.b	#%11111100,d1	; are the high 6 bits set?
0000149C 6400                       		bcc.s	NemPCD_InlineData	; if they are, it signifies inline data
0000149E 0241 00FF                  		andi.w	#$FF,d1
000014A2 D241                       		add.w	d1,d1
000014A4 1031 1000                  		move.b	(a1,d1.w),d0	; get the length of the code in bits
000014A8 4880                       		ext.w	d0
000014AA 9C40                       		sub.w	d0,d6	; subtract from shift value so that the next code is read next time around
000014AC 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
000014B0 6400                       		bcc.s	loc_14B2	; if not, branch
000014B2 5046                       		addq.w	#8,d6
000014B4 E145                       		asl.w	#8,d5
000014B6 1A18                       		move.b	(a0)+,d5	; read next byte
000014B8                            

000014B8                            loc_14B2:
000014B8 1231 1001                  		move.b	1(a1,d1.w),d1
000014BC 3001                       		move.w	d1,d0
000014BE 0241 000F                  		andi.w	#$F,d1	; get palette index for pixel
000014C2 0240 00F0                  		andi.w	#$F0,d0
000014C6                            

000014C6                            NemPCD_ProcessCompressedData:
000014C6 E848                       		lsr.w	#4,d0	; get repeat count
000014C8                            

000014C8                            NemPCD_WritePixel:
000014C8 E98C                       		lsl.l	#4,d4	; shift up by a nybble
000014CA 8801                       		or.b	d1,d4	; write pixel
000014CC 5343                       		subq.w	#1,d3	; has an entire 8-pixel row been written?
000014CE 6600                       		bne.s	NemPCD_WritePixel_Loop	; if not, loop
000014D0 4ED3                       		jmp	(a3)	; otherwise, write the row to its destination, by doing a dynamic jump to NemPCD_WriteRowToVDP, NemDec_WriteAndAdvance, NemPCD_WriteRowToVDP_XOR, or NemDec_WriteAndAdvance_XOR
000014D2                            ; End of function NemDec_ProcessCompressedData
000014D2                            

000014D2                            

000014D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014D2                            

000014D2                            

000014D2                            NemPCD_NewRow:
000014D2 7800                       		moveq	#0,d4	; reset row
000014D4 7608                       		moveq	#8,d3	; reset nybble counter
000014D6                            

000014D6                            NemPCD_WritePixel_Loop:
000014D6 51C8 FFF0                  		dbf	d0,NemPCD_WritePixel
000014DA 60B4                       		bra.s	NemDec_ProcessCompressedData
000014DC                            ; ===========================================================================
000014DC                            

000014DC                            NemPCD_InlineData:
000014DC 5D46                       		subq.w	#6,d6	; 6 bits needed to signal inline data
000014DE 0C46 0009                  		cmpi.w	#9,d6
000014E2 6400                       		bcc.s	loc_14E4
000014E4 5046                       		addq.w	#8,d6
000014E6 E145                       		asl.w	#8,d5
000014E8 1A18                       		move.b	(a0)+,d5
000014EA                            

000014EA                            loc_14E4:
000014EA 5F46                       		subq.w	#7,d6	; and 7 bits needed for the inline data itself
000014EC 3205                       		move.w	d5,d1
000014EE EC69                       		lsr.w	d6,d1	; shift so that low bit of the code is in bit position 0
000014F0 3001                       		move.w	d1,d0
000014F2 0241 000F                  		andi.w	#$F,d1	; get palette index for pixel
000014F6 0240 0070                  		andi.w	#$70,d0	; high nybble is repeat count for pixel
000014FA 0C46 0009                  		cmpi.w	#9,d6
000014FE 64C6                       		bcc.s	NemPCD_ProcessCompressedData
00001500 5046                       		addq.w	#8,d6
00001502 E145                       		asl.w	#8,d5
00001504 1A18                       		move.b	(a0)+,d5
00001506 60BE                       		bra.s	NemPCD_ProcessCompressedData
00001508                            ; End of function NemPCD_NewRow
00001508                            

00001508                            ; ===========================================================================
00001508                            

00001508                            NemPCD_WriteRowToVDP:
00001508 2884                       		move.l	d4,(a4)	; write 8-pixel row
0000150A 534D                       		subq.w	#1,a5
0000150C 380D                       		move.w	a5,d4	; have all the 8-pixel rows been written?
0000150E 66C2                       		bne.s	NemPCD_NewRow	; if not, branch
00001510 4E75                       		rts		; otherwise the decompression is finished
00001512                            ; ===========================================================================
00001512                            NemPCD_WriteRowToVDP_XOR:
00001512 B982                       		eor.l	d4,d2	; XOR the previous row by the current row
00001514 2882                       		move.l	d2,(a4)	; and write the result
00001516 534D                       		subq.w	#1,a5
00001518 380D                       		move.w	a5,d4
0000151A 66B6                       		bne.s	NemPCD_NewRow
0000151C 4E75                       		rts	
0000151E                            ; ===========================================================================
0000151E                            

0000151E                            NemPCD_WriteRowToRAM:
0000151E 28C4                       		move.l	d4,(a4)+
00001520 534D                       		subq.w	#1,a5
00001522 380D                       		move.w	a5,d4
00001524 66AC                       		bne.s	NemPCD_NewRow
00001526 4E75                       		rts	
00001528                            ; ===========================================================================
00001528                            NemPCD_WriteRowToRAM_XOR:
00001528 B982                       		eor.l	d4,d2
0000152A 28C2                       		move.l	d2,(a4)+
0000152C 534D                       		subq.w	#1,a5
0000152E 380D                       		move.w	a5,d4
00001530 66A0                       		bne.s	NemPCD_NewRow
00001532 4E75                       		rts	
00001534                            

00001534                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001534                            ; ---------------------------------------------------------------------------
00001534                            ; Part of the Nemesis decompressor, builds the code table (in RAM)
00001534                            ; ---------------------------------------------------------------------------
00001534                            

00001534                            

00001534                            NemDec_BuildCodeTable:
00001534 1018                       		move.b	(a0)+,d0	; read first byte
00001536                            

00001536                            NemBCT_ChkEnd:
00001536 0C00 00FF                  		cmpi.b	#$FF,d0	; has the end of the code table description been reached?
0000153A 6600                       		bne.s	NemBCT_NewPALIndex	; if not, branch
0000153C 4E75                       		rts	; otherwise, this subroutine's work is done
0000153E                            ; ===========================================================================
0000153E                            

0000153E                            NemBCT_NewPALIndex:
0000153E 3E00                       		move.w	d0,d7
00001540                            

00001540                            NemBCT_Loop:
00001540 1018                       		move.b	(a0)+,d0	; read next byte
00001542 0C00 0080                  		cmpi.b	#$80,d0	; sign bit being set signifies a new palette index
00001546 64EE                       		bcc.s	NemBCT_ChkEnd	; a bmi could have been used instead of a compare and bcc
00001548                            		
00001548 1200                       		move.b	d0,d1
0000154A 0247 000F                  		andi.w	#$F,d7	; get palette index
0000154E 0241 0070                  		andi.w	#$70,d1	; get repeat count for palette index
00001552 8E41                       		or.w	d1,d7	; combine the two
00001554 0240 000F                  		andi.w	#$F,d0	; get the length of the code in bits
00001558 1200                       		move.b	d0,d1
0000155A E149                       		lsl.w	#8,d1
0000155C 8E41                       		or.w	d1,d7	; combine with palette index and repeat count to form code table entry
0000155E 7208                       		moveq	#8,d1
00001560 9240                       		sub.w	d0,d1	; is the code 8 bits long?
00001562 6600                       		bne.s	NemBCT_ShortCode	; if not, a bit of extra processing is needed
00001564 1018                       		move.b	(a0)+,d0	; get code
00001566 D040                       		add.w	d0,d0	; each code gets a word-sized entry in the table
00001568 3387 0000                  		move.w	d7,(a1,d0.w)	; store the entry for the code
0000156C 60D2                       		bra.s	NemBCT_Loop	; repeat
0000156E                            ; ===========================================================================
0000156E                            

0000156E                            ; the Nemesis decompressor uses prefix-free codes (no valid code is a prefix of a longer code)
0000156E                            ; e.g. if 10 is a valid 2-bit code, 110 is a valid 3-bit code but 100 isn't
0000156E                            ; also, when the actual compressed data is processed the high bit of each code is in bit position 7
0000156E                            ; so the code needs to be bit-shifted appropriately over here before being used as a code table index
0000156E                            ; additionally, the code needs multiple entries in the table because no masking is done during compressed data processing
0000156E                            ; so if 11000 is a valid code then all indices of the form 11000XXX need to have the same entry
0000156E                            NemBCT_ShortCode:
0000156E 1018                       		move.b	(a0)+,d0	; get code
00001570 E368                       		lsl.w	d1,d0	; get index into code table
00001572 D040                       		add.w	d0,d0	; shift so that high bit is in bit position 7
00001574 7A01                       		moveq	#1,d5
00001576 E36D                       		lsl.w	d1,d5
00001578 5345                       		subq.w	#1,d5	; d5 = 2^d1 - 1
0000157A                            

0000157A                            NemBCT_ShortCode_Loop:
0000157A 3387 0000                  		move.w	d7,(a1,d0.w)	; store entry
0000157E 5440                       		addq.w	#2,d0	; increment index
00001580 51CD FFF8                  		dbf	d5,NemBCT_ShortCode_Loop	; repeat for required number of entries
00001584 60BA                       		bra.s	NemBCT_Loop
00001586                            ; End of function NemDec_BuildCodeTable
00001586                            ; End of function NemDec_BuildCodeTable
00001586                            

00001586                            

00001586                            ; ---------------------------------------------------------------------------
00001586                            ; Subroutine to load pattern load cues (aka to queue pattern load requests)
00001586                            ; ---------------------------------------------------------------------------
00001586                            

00001586                            ; ARGUMENTS
00001586                            ; d0 = index of PLC list
00001586                            ; ---------------------------------------------------------------------------
00001586                            

00001586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001586                            

00001586                            ; LoadPLC:
00001586                            AddPLC:
00001586 48E7 0060                  		movem.l	a1-a2,-(sp)
0000158A 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001590 D040                       		add.w	d0,d0
00001592 3031 0000                  		move.w	(a1,d0.w),d0
00001596 43F1 0000                  		lea	(a1,d0.w),a1		; jump to relevant PLC
0000159A 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space
0000159E                            

0000159E                            	@findspace:
0000159E 4A92                       		tst.l	(a2)		; is space available in RAM?
000015A0 6700                       		beq.s	@copytoRAM	; if yes, branch
000015A2 5C4A                       		addq.w	#6,a2		; if not, try next space
000015A4 60F8                       		bra.s	@findspace
000015A6                            ; ===========================================================================
000015A6                            

000015A6                            @copytoRAM:
000015A6 3019                       		move.w	(a1)+,d0	; get length of PLC
000015A8 6B00                       		bmi.s	@skip
000015AA                            

000015AA                            	@loop:
000015AA 24D9                       		move.l	(a1)+,(a2)+
000015AC 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
000015AE 51C8 FFFA                  		dbf	d0,@loop	; repeat for length of PLC
000015B2                            

000015B2                            	@skip:
000015B2 4CDF 0600                  		movem.l	(sp)+,a1-a2 ; a1=object
000015B6 4E75                       		rts	
000015B8                            ; End of function AddPLC
000015B8                            

000015B8                            

000015B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B8                            ; Queue pattern load requests, but clear the PLQ first
000015B8                            

000015B8                            ; ARGUMENTS
000015B8                            ; d0 = index of PLC list (see ArtLoadCues)
000015B8                            

000015B8                            ; NOTICE: This subroutine does not check for buffer overruns. The programmer
000015B8                            ;	  (or hacker) is responsible for making sure that no more than
000015B8                            ;	  16 load requests are copied into the buffer.
000015B8                            ;	  _________DO NOT PUT MORE THAN 16 LOAD REQUESTS IN A LIST!__________
000015B8                            ;         (or if you change the size of Plc_Buffer, the limit becomes (Plc_Buffer_Only_End-Plc_Buffer)/6)
000015B8                            

000015B8                            ; LoadPLC2:
000015B8                            NewPLC:
000015B8 48E7 0060                  		movem.l	a1-a2,-(sp)
000015BC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015C2 D040                       		add.w	d0,d0
000015C4 3031 0000                  		move.w	(a1,d0.w),d0
000015C8 43F1 0000                  		lea	(a1,d0.w),a1	; jump to relevant PLC
000015CC 6100                       		bsr.s	ClearPLC	; erase any data in PLC buffer space
000015CE 45F8 F680                  		lea	(v_plc_buffer).w,a2
000015D2 3019                       		move.w	(a1)+,d0	; get length of PLC
000015D4 6B00                       		bmi.s	@skip		; if it's negative, skip the next loop
000015D6                            

000015D6                            	@loop:
000015D6 24D9                       		move.l	(a1)+,(a2)+
000015D8 34D9                       		move.w	(a1)+,(a2)+	; copy PLC to RAM
000015DA 51C8 FFFA                  		dbf	d0,@loop		; repeat for length of PLC
000015DE                            

000015DE                            	@skip:
000015DE 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015E2 4E75                       		rts	
000015E4                            ; End of function NewPLC
000015E4                            

000015E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015E4                            

000015E4                            ; ---------------------------------------------------------------------------
000015E4                            ; Subroutine to	clear the pattern load cues
000015E4                            ; ---------------------------------------------------------------------------
000015E4                            

000015E4                            ; Clear the pattern load queue ($FFF680 - $FFF700)
000015E4                            

000015E4                            

000015E4                            ClearPLC:
000015E4 45F8 F680                  		lea	(v_plc_buffer).w,a2 ; PLC buffer space in RAM
000015E8 701F                       		moveq	#$1F,d0	; bytesToLcnt(v_plc_buffer_end-v_plc_buffer)
000015EA                            

000015EA                            	@loop:
000015EA 429A                       		clr.l	(a2)+
000015EC 51C8 FFFC                  		dbf	d0,@loop
000015F0 4E75                       		rts	
000015F2                            ; End of function ClearPLC
000015F2                            

000015F2                            ; ---------------------------------------------------------------------------
000015F2                            ; Subroutine to	use graphics listed in a pattern load cue
000015F2                            ; ---------------------------------------------------------------------------
000015F2                            

000015F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015F2                            

000015F2                            

000015F2                            RunPLC:
000015F2 4AB8 F680                  		tst.l	(v_plc_buffer).w
000015F6 6700                       		beq.s	Rplc_Exit
000015F8 4A78 F6F8                  		tst.w	(f_plc_execute).w
000015FC 6600                       		bne.s	Rplc_Exit
000015FE 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001602 47F9 0000 1508             		lea	(NemPCD_WriteRowToVDP).l,a3
00001608 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
0000160C 3418                       		move.w	(a0)+,d2
0000160E 6A00                       		bpl.s	loc_160E
00001610 D6FC 000A                  		adda.w	#$A,a3
00001614                            

00001614                            loc_160E:
00001614 0242 7FFF                  		andi.w	#$7FFF,d2
00001618 31C2 F6F8                  		move.w	d2,(f_plc_execute).w
0000161C 6100 FF16                  		bsr.w	NemDec_BuildCodeTable
00001620 1A18                       		move.b	(a0)+,d5
00001622 E145                       		asl.w	#8,d5
00001624 1A18                       		move.b	(a0)+,d5
00001626 7C10                       		moveq	#$10,d6
00001628 7000                       		moveq	#0,d0
0000162A 21C8 F680                  		move.l	a0,(v_plc_buffer).w
0000162E 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
00001632 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001636 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000163A 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000163E 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001642 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001646                            

00001646                            Rplc_Exit:
00001646 4E75                       		rts	
00001648                            ; End of function RunPLC
00001648                            

00001648                            

00001648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001648                            

00001648                            

00001648                            sub_1642:
00001648 4A78 F6F8                  		tst.w	(f_plc_execute).w
0000164C 6700 0000                  		beq.w	locret_16DA
00001650 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001656 7000                       		moveq	#0,d0
00001658 3038 F684                  		move.w	($FFFFF684).w,d0
0000165C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001662 6000                       		bra.s	loc_1676
00001664                            ; End of function sub_1642
00001664                            

00001664                            

00001664                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001664                            

00001664                            

00001664                            ; sub_165E:
00001664                            ProcessDPLC2:
00001664 4A78 F6F8                  		tst.w	(f_plc_execute).w
00001668 6700                       		beq.s	locret_16DA
0000166A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001670 7000                       		moveq	#0,d0
00001672 3038 F684                  		move.w	($FFFFF684).w,d0
00001676 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
0000167C                            

0000167C                            loc_1676:
0000167C 49F9 00C0 0004             		lea	(vdp_control_port).l,a4
00001682 E588                       		lsl.l	#2,d0
00001684 E448                       		lsr.w	#2,d0
00001686 0040 4000                  		ori.w	#$4000,d0
0000168A 4840                       		swap	d0
0000168C 2880                       		move.l	d0,(a4)
0000168E 594C                       		subq.w	#4,a4
00001690 2078 F680                  		movea.l	(v_plc_buffer).w,a0
00001694 2678 F6E0                  		movea.l	(v_ptrnemcode).w,a3
00001698 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
0000169C 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000016A0 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000016A4 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016A8 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016AC 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
000016B0                            

000016B0                            loc_16AA:
000016B0 3A7C 0008                  		movea.w	#8,a5
000016B4 6100 FE1C                  		bsr.w	NemPCD_NewRow
000016B8 5378 F6F8                  		subq.w	#1,(f_plc_execute).w
000016BC 6700                       		beq.s	loc_16DC
000016BE 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016C2 66EC                       		bne.s	loc_16AA
000016C4 21C8 F680                  		move.l	a0,(v_plc_buffer).w
000016C8 21CB F6E0                  		move.l	a3,(v_ptrnemcode).w
000016CC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016D0 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016D4 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016D8 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016DC 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016E0                            

000016E0                            locret_16DA:
000016E0 4E75                       		rts	
000016E2                            ; ===========================================================================
000016E2                            

000016E2                            loc_16DC:
000016E2 41F8 F680                  		lea	(v_plc_buffer).w,a0
000016E6 7015                       		moveq	#$15,d0
000016E8                            

000016E8                            loc_16E2:
000016E8 20E8 0006                  		move.l	6(a0),(a0)+
000016EC 51C8 FFFA                  		dbf	d0,loc_16E2
000016F0 4E75                       		rts	
000016F2                            ; End of function ProcessDPLC2
000016F2                            

000016F2                            ; ---------------------------------------------------------------------------
000016F2                            ; Subroutine to	execute	the pattern load cue
000016F2                            ; ---------------------------------------------------------------------------
000016F2                            

000016F2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016F2                            

000016F2                            

000016F2                            QuickPLC:
000016F2 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016F8 D040                       		add.w	d0,d0
000016FA 3031 0000                  		move.w	(a1,d0.w),d0
000016FE 43F1 0000                  		lea	(a1,d0.w),a1
00001702 3219                       		move.w	(a1)+,d1	; get length of PLC
00001704                            

00001704                            	Qplc_Loop:
00001704 2059                       		movea.l	(a1)+,a0	; get art pointer
00001706 7000                       		moveq	#0,d0
00001708 3019                       		move.w	(a1)+,d0	; get VRAM address
0000170A E588                       		lsl.l	#2,d0
0000170C E448                       		lsr.w	#2,d0
0000170E 0040 4000                  		ori.w	#$4000,d0
00001712 4840                       		swap	d0
00001714 23C0 00C0 0004             		move.l	d0,(vdp_control_port).l ; converted VRAM address to VDP format
0000171A 6100 FD2A                  		bsr.w	NemDec		; decompress
0000171E 51C9 FFE4                  		dbf	d1,Qplc_Loop	; repeat for length of PLC
00001722 4E75                       		rts	
00001724                            ; End of function QuickPLC
00001724                            

00001724                            		include	"_inc\Enigma Decompression.asm"
00001724                            ; ---------------------------------------------------------------------------
00001724                            ; Enigma decompression algorithm
00001724                            

00001724                            ; input:
00001724                            ;	d0 = starting art tile (added to each 8x8 before writing to destination)
00001724                            ;	a0 = source address
00001724                            ;	a1 = destination address
00001724                            

00001724                            ; usage:
00001724                            ;	lea	(source).l,a0
00001724                            ;	lea	(destination).l,a1
00001724                            ;	move.w	#arttile,d0
00001724                            ;	bsr.w	EniDec
00001724                            

00001724                            ; See http://www.segaretro.org/Enigma_compression for format description
00001724                            ; ---------------------------------------------------------------------------
00001724                            

00001724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001724                            

00001724                            

00001724                            EniDec:
00001724 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001728 3640                       		movea.w	d0,a3		; store starting art tile
0000172A 1018                       		move.b	(a0)+,d0
0000172C 4880                       		ext.w	d0
0000172E 3A40                       		movea.w	d0,a5		; store number of bits in inline copy value
00001730 1818                       		move.b	(a0)+,d4
00001732 E70C                       		lsl.b	#3,d4		; store PCCVH flags bitfield
00001734 3458                       		movea.w	(a0)+,a2
00001736 D4CB                       		adda.w	a3,a2		; store incremental copy word
00001738 3858                       		movea.w	(a0)+,a4
0000173A D8CB                       		adda.w	a3,a4		; store literal copy word
0000173C 1A18                       		move.b	(a0)+,d5
0000173E E145                       		asl.w	#8,d5
00001740 1A18                       		move.b	(a0)+,d5	; get first word in format list
00001742 7C10                       		moveq	#16,d6		; initial shift value
00001744                            ; loc_173E:
00001744                            Eni_Loop:
00001744 7007                       		moveq	#7,d0		; assume a format list entry is 7 bits
00001746 3E06                       		move.w	d6,d7
00001748 9E40                       		sub.w	d0,d7
0000174A 3205                       		move.w	d5,d1
0000174C EE69                       		lsr.w	d7,d1
0000174E 0241 007F                  		andi.w	#$7F,d1		; get format list entry
00001752 3401                       		move.w	d1,d2		; and copy it
00001754 0C41 0040                  		cmpi.w	#$40,d1		; is the high bit of the entry set?
00001758 6400                       		bhs.s	@sevenbitentry
0000175A 7006                       		moveq	#6,d0		; if it isn't, the entry is actually 6 bits
0000175C E24A                       		lsr.w	#1,d2
0000175E                            ; loc_1758:
0000175E                            @sevenbitentry:
0000175E 6100 0000                  		bsr.w	EniDec_FetchByte
00001762 0242 000F                  		andi.w	#$F,d2		; get repeat count
00001766 E849                       		lsr.w	#4,d1
00001768 D241                       		add.w	d1,d1
0000176A 4EFB 1000                  		jmp	EniDec_Index(pc,d1.w)
0000176E                            ; End of function EniDec
0000176E                            

0000176E                            ; ===========================================================================
0000176E                            ; loc_1768:
0000176E                            EniDec_00:
0000176E 32CA                       @loop:		move.w	a2,(a1)+	; copy incremental copy word
00001770 524A                       		addq.w	#1,a2		; increment it
00001772 51CA FFFA                  		dbf	d2,@loop	; repeat
00001776 60CC                       		bra.s	Eni_Loop
00001778                            ; ===========================================================================
00001778                            ; loc_1772:
00001778                            EniDec_01:
00001778 32CC                       @loop:		move.w	a4,(a1)+	; copy literal copy word
0000177A 51CA FFFC                  		dbf	d2,@loop	; repeat
0000177E 60C4                       		bra.s	Eni_Loop
00001780                            ; ===========================================================================
00001780                            ; loc_177A:
00001780                            EniDec_100:
00001780 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001784                            ; loc_177E:
00001784 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001786 51CA FFFC                  		dbf	d2,@loop	; repeat
0000178A                            

0000178A 60B8                       		bra.s	Eni_Loop
0000178C                            ; ===========================================================================
0000178C                            ; loc_1786:
0000178C                            EniDec_101:
0000178C 6100 0000                  		bsr.w	EniDec_FetchInlineValue
00001790                            ; loc_178A:
00001790 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
00001792 5241                       		addq.w	#1,d1		; increment
00001794 51CA FFFA                  		dbf	d2,@loop	; repeat
00001798                            

00001798 60AA                       		bra.s	Eni_Loop
0000179A                            ; ===========================================================================
0000179A                            ; loc_1794:
0000179A                            EniDec_110:
0000179A 6100 0000                  		bsr.w	EniDec_FetchInlineValue
0000179E                            ; loc_1798:
0000179E 32C1                       @loop:		move.w	d1,(a1)+	; copy inline value
000017A0 5341                       		subq.w	#1,d1		; decrement
000017A2 51CA FFFA                  		dbf	d2,@loop	; repeat
000017A6                            

000017A6 609C                       		bra.s	Eni_Loop
000017A8                            ; ===========================================================================
000017A8                            ; loc_17A2:
000017A8                            EniDec_111:
000017A8 0C42 000F                  		cmpi.w	#$F,d2
000017AC 6700                       		beq.s	EniDec_Done
000017AE                            ; loc_17A8:
000017AE 6100 0000                  @loop:		bsr.w	EniDec_FetchInlineValue	; fetch new inline value
000017B2 32C1                       		move.w	d1,(a1)+	; copy it
000017B4 51CA FFF8                  		dbf	d2,@loop	; and repeat
000017B8                            

000017B8 608A                       		bra.s	Eni_Loop
000017BA                            ; ===========================================================================
000017BA                            ; loc_17B4:
000017BA                            EniDec_Index:
000017BA 60B2                       		bra.s	EniDec_00
000017BC 60B0                       		bra.s	EniDec_00
000017BE 60B8                       		bra.s	EniDec_01
000017C0 60B6                       		bra.s	EniDec_01
000017C2 60BC                       		bra.s	EniDec_100
000017C4 60C6                       		bra.s	EniDec_101
000017C6 60D2                       		bra.s	EniDec_110
000017C8 60DE                       		bra.s	EniDec_111
000017CA                            ; ===========================================================================
000017CA                            ; loc_17C4:
000017CA                            EniDec_Done:
000017CA 5348                       		subq.w	#1,a0		; go back by one byte
000017CC 0C46 0010                  		cmpi.w	#16,d6		; were we going to start on a completely new byte?
000017D0 6600                       		bne.s	@notnewbyte	; if not, branch
000017D2 5348                       		subq.w	#1,a0		; and another one if needed
000017D4                            ; loc_17CE:
000017D4                            @notnewbyte:
000017D4 3008                       		move.w	a0,d0
000017D6 E248                       		lsr.w	#1,d0		; are we on an odd byte?
000017D8 6400                       		bcc.s	@evenbyte	; if not, branch
000017DA 5248                       		addq.w	#1,a0		; ensure we're on an even byte
000017DC                            ; loc_17D6:
000017DC                            @evenbyte:
000017DC 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017E0 4E75                       		rts	
000017E2                            

000017E2                            ; ---------------------------------------------------------------------------
000017E2                            ; Part of the Enigma decompressor
000017E2                            ; Fetches an inline copy value and stores it in d1
000017E2                            ; ---------------------------------------------------------------------------
000017E2                            

000017E2                            ; =============== S U B R O U T I N E =======================================
000017E2                            

000017E2                            ; loc_17DC:
000017E2                            EniDec_FetchInlineValue:
000017E2 360B                       		move.w	a3,d3		; copy starting art tile
000017E4 1204                       		move.b	d4,d1		; copy PCCVH bitfield
000017E6 D201                       		add.b	d1,d1		; is the priority bit set?
000017E8 6400                       		bcc.s	@skippriority	; if not, branch
000017EA 5346                       		subq.w	#1,d6
000017EC 0D05                       		btst	d6,d5		; is the priority bit set in the inline render flags?
000017EE 6700                       		beq.s	@skippriority	; if not, branch
000017F0 0043 8000                  		ori.w	#$8000,d3	; otherwise set priority bit in art tile
000017F4                            ; loc_17EE:
000017F4                            @skippriority:
000017F4 D201                       		add.b	d1,d1		; is the high palette line bit set?
000017F6 6400                       		bcc.s	@skiphighpal	; if not, branch
000017F8 5346                       		subq.w	#1,d6
000017FA 0D05                       		btst	d6,d5
000017FC 6700                       		beq.s	@skiphighpal
000017FE 0643 4000                  		addi.w	#$4000,d3	; set second palette line bit
00001802                            ; loc_17FC:
00001802                            @skiphighpal:
00001802 D201                       		add.b	d1,d1		; is the low palette line bit set?
00001804 6400                       		bcc.s	@skiplowpal	; if not, branch
00001806 5346                       		subq.w	#1,d6
00001808 0D05                       		btst	d6,d5
0000180A 6700                       		beq.s	@skiplowpal
0000180C 0643 2000                  		addi.w	#$2000,d3	; set first palette line bit
00001810                            ; loc_180A:
00001810                            @skiplowpal:
00001810 D201                       		add.b	d1,d1		; is the vertical flip flag set?
00001812 6400                       		bcc.s	@skipyflip	; if not, branch
00001814 5346                       		subq.w	#1,d6
00001816 0D05                       		btst	d6,d5
00001818 6700                       		beq.s	@skipyflip
0000181A 0043 1000                  		ori.w	#$1000,d3	; set Y-flip bit
0000181E                            ; loc_1818:
0000181E                            @skipyflip:
0000181E D201                       		add.b	d1,d1		; is the horizontal flip flag set?
00001820 6400                       		bcc.s	@skipxflip	; if not, branch
00001822 5346                       		subq.w	#1,d6
00001824 0D05                       		btst	d6,d5
00001826 6700                       		beq.s	@skipxflip
00001828 0043 0800                  		ori.w	#$800,d3	; set X-flip bit
0000182C                            ; loc_1826:
0000182C                            @skipxflip:
0000182C 3205                       		move.w	d5,d1
0000182E 3E06                       		move.w	d6,d7
00001830 9E4D                       		sub.w	a5,d7		; subtract length in bits of inline copy value
00001832 6400                       		bcc.s	@enoughbits	; branch if a new word doesn't need to be read
00001834 3C07                       		move.w	d7,d6
00001836 0646 0010                  		addi.w	#16,d6
0000183A 4447                       		neg.w	d7		; calculate bit deficit
0000183C EF69                       		lsl.w	d7,d1		; and make space for that many bits
0000183E 1A10                       		move.b	(a0),d5		; get next byte
00001840 EF3D                       		rol.b	d7,d5		; and rotate the required bits into the lowest positions
00001842 DE47                       		add.w	d7,d7
00001844 CA7B 7000                  		and.w	EniDec_Masks-2(pc,d7.w),d5
00001848 D245                       		add.w	d5,d1		; combine upper bits with lower bits
0000184A                            ; loc_1844:
0000184A                            @maskvalue:
0000184A 300D                       		move.w	a5,d0		; get length in bits of inline copy value
0000184C D040                       		add.w	d0,d0
0000184E C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; mask value appropriately
00001852 D243                       		add.w	d3,d1		; add starting art tile
00001854 1A18                       		move.b	(a0)+,d5
00001856 E14D                       		lsl.w	#8,d5
00001858 1A18                       		move.b	(a0)+,d5	; get next word
0000185A 4E75                       		rts	
0000185C                            ; ===========================================================================
0000185C                            ; loc_1856:
0000185C                            @enoughbits:
0000185C 6700                       		beq.s	@justenough	; if the word has been exactly exhausted, branch
0000185E EE69                       		lsr.w	d7,d1	; get inline copy value
00001860 300D                       		move.w	a5,d0
00001862 D040                       		add.w	d0,d0
00001864 C27B 0000                  		and.w	EniDec_Masks-2(pc,d0.w),d1	; and mask it appropriately
00001868 D243                       		add.w	d3,d1	; add starting art tile
0000186A 300D                       		move.w	a5,d0
0000186C 6000                       		bra.s	EniDec_FetchByte
0000186E                            ; ===========================================================================
0000186E                            ; loc_1868:
0000186E                            @justenough:
0000186E 7C10                       		moveq	#16,d6	; reset shift value
00001870 60D8                       		bra.s	@maskvalue
00001872                            ; ===========================================================================
00001872                            ; word_186C:
00001872                            EniDec_Masks:
00001872 0001 0003 0007 000F        		dc.w	 1,    3,    7,   $F
0000187A 001F 003F 007F 00FF        		dc.w   $1F,  $3F,  $7F,  $FF
00001882 01FF 03FF 07FF 0FFF        		dc.w  $1FF, $3FF, $7FF, $FFF
0000188A 1FFF 3FFF 7FFF FFFF        		dc.w $1FFF,$3FFF,$7FFF,$FFFF
00001892                            

00001892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001892                            

00001892                            ; sub_188C:
00001892                            EniDec_FetchByte:
00001892 9C40                       		sub.w	d0,d6	; subtract length of current entry from shift value so that next entry is read next time around
00001894 0C46 0009                  		cmpi.w	#9,d6	; does a new byte need to be read?
00001898 6400                       		bhs.s	@locret	; if not, branch
0000189A 5046                       		addq.w	#8,d6
0000189C E145                       		asl.w	#8,d5
0000189E 1A18                       		move.b	(a0)+,d5
000018A0                            @locret:
000018A0 4E75                       		rts	
000018A2                            ; End of function EniDec_FetchByte
000018A2                            ; End of function EniDec_FetchByte
000018A2                            		include	"_inc\Kosinski Decompression.asm"
000018A2                            ; ---------------------------------------------------------------------------
000018A2                            ; Kosinski decompression algorithm
000018A2                            

000018A2                            ; input:
000018A2                            ;	a0 = source address
000018A2                            ;	a1 = destination address
000018A2                            

000018A2                            ; usage:
000018A2                            ;	lea	(source).l,a0
000018A2                            ;	lea	(destination).l,a1
000018A2                            ;	bsr.w	KosDec
000018A2                            ; ---------------------------------------------------------------------------
000018A2                            

000018A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000018A2                            

000018A2                            

000018A2                            KosDec:
000018A2                            

000018A2 558F                       		subq.l	#2,sp	; make space for 2 bytes on the stack
000018A4 1F58 0001                  		move.b	(a0)+,1(sp)
000018A8 1E98                       		move.b	(a0)+,(sp)
000018AA 3A17                       		move.w	(sp),d5	; get first description field
000018AC 780F                       		moveq	#$F,d4	; set to loop for 16 bits
000018AE                            

000018AE                            Kos_Loop:
000018AE E24D                       		lsr.w	#1,d5	; shift bit into the c flag
000018B0 40C6                       		move	sr,d6
000018B2 51CC 0000                  		dbf	d4,@chkbit
000018B6 1F58 0001                  		move.b	(a0)+,1(sp)
000018BA 1E98                       		move.b	(a0)+,(sp)
000018BC 3A17                       		move.w	(sp),d5
000018BE 780F                       		moveq	#$F,d4
000018C0                            

000018C0                            	@chkbit:
000018C0 44C6                       		move	d6,ccr	; was the bit set?
000018C2 6400                       		bcc.s	Kos_RLE	; if not, branch
000018C4                            

000018C4 12D8                       		move.b	(a0)+,(a1)+ ; copy byte as-is
000018C6 60E6                       		bra.s	Kos_Loop
000018C8                            ; ===========================================================================
000018C8                            

000018C8                            Kos_RLE:
000018C8 7600                       		moveq	#0,d3
000018CA E24D                       		lsr.w	#1,d5	; get next bit
000018CC 40C6                       		move	sr,d6
000018CE 51CC 0000                  		dbf	d4,@chkbit
000018D2 1F58 0001                  		move.b	(a0)+,1(sp)
000018D6 1E98                       		move.b	(a0)+,(sp)
000018D8 3A17                       		move.w	(sp),d5
000018DA 780F                       		moveq	#$F,d4
000018DC                            

000018DC                            	@chkbit:
000018DC 44C6                       		move	d6,ccr	; was the bit set?
000018DE 6500                       		bcs.s	Kos_SeparateRLE ; if yes, branch
000018E0                            

000018E0 E24D                       		lsr.w	#1,d5	; shift bit into the x flag
000018E2 51CC 0000                  		dbf	d4,@loop1
000018E6 1F58 0001                  		move.b	(a0)+,1(sp)
000018EA 1E98                       		move.b	(a0)+,(sp)
000018EC 3A17                       		move.w	(sp),d5
000018EE 780F                       		moveq	#$F,d4
000018F0                            

000018F0                            	@loop1:
000018F0 E353                       		roxl.w	#1,d3	; get high repeat count bit
000018F2 E24D                       		lsr.w	#1,d5
000018F4 51CC 0000                  		dbf	d4,@loop2
000018F8 1F58 0001                  		move.b	(a0)+,1(sp)
000018FC 1E98                       		move.b	(a0)+,(sp)
000018FE 3A17                       		move.w	(sp),d5
00001900 780F                       		moveq	#$F,d4
00001902                            

00001902                            	@loop2:
00001902 E353                       		roxl.w	#1,d3	; get low repeat count bit
00001904 5243                       		addq.w	#1,d3	; increment repeat count
00001906 74FF                       		moveq	#-1,d2
00001908 1418                       		move.b	(a0)+,d2 ; calculate offset
0000190A 6000                       		bra.s	Kos_RLELoop
0000190C                            ; ===========================================================================
0000190C                            

0000190C                            Kos_SeparateRLE:
0000190C 1018                       		move.b	(a0)+,d0 ; get first byte
0000190E 1218                       		move.b	(a0)+,d1 ; get second byte
00001910 74FF                       		moveq	#-1,d2
00001912 1401                       		move.b	d1,d2
00001914 EB4A                       		lsl.w	#5,d2
00001916 1400                       		move.b	d0,d2	; calculate offset
00001918 0241 0007                  		andi.w	#7,d1	; does a third byte need to be read?
0000191C 6700                       		beq.s	Kos_SeparateRLE2 ; if yes, branch
0000191E 1601                       		move.b	d1,d3	; copy repeat count
00001920 5243                       		addq.w	#1,d3	; increment
00001922                            

00001922                            Kos_RLELoop:
00001922 1031 2000                  		move.b	(a1,d2.w),d0 ; copy appropriate byte
00001926 12C0                       		move.b	d0,(a1)+ ; repeat
00001928 51CB FFF8                  		dbf	d3,Kos_RLELoop
0000192C 6080                       		bra.s	Kos_Loop
0000192E                            ; ===========================================================================
0000192E                            

0000192E                            Kos_SeparateRLE2:
0000192E 1218                       		move.b	(a0)+,d1
00001930 6700                       		beq.s	Kos_Done ; 0 indicates end of compressed data
00001932 0C01 0001                  		cmpi.b	#1,d1
00001936 6700 FF76                  		beq.w	Kos_Loop ; 1 indicates new description to be read
0000193A 1601                       		move.b	d1,d3	; otherwise, copy repeat count
0000193C 60E4                       		bra.s	Kos_RLELoop
0000193E                            ; ===========================================================================
0000193E                            

0000193E                            Kos_Done:
0000193E 548F                       		addq.l	#2,sp	; restore stack pointer
00001940 4E75                       		rts	
00001942                            ; End of function KosDec
00001942                            ; End of function KosDec
00001942                            

00001942                            		include	"_inc\PaletteCycle.asm"
00001942                            ; ---------------------------------------------------------------------------
00001942                            ; Palette cycling routine loading subroutine
00001942                            ; ---------------------------------------------------------------------------
00001942                            

00001942                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001942                            

00001942                            

00001942                            PaletteCycle:
00001942 7400                       		moveq	#0,d2
00001944 7000                       		moveq	#0,d0
00001946 1038 FE10                  		move.b	(v_zone).w,d0	; get level number
0000194A D040                       		add.w	d0,d0
0000194C 303B 0000                  		move.w	PCycle_Index(pc,d0.w),d0
00001950 4EFB 0000                  		jmp	PCycle_Index(pc,d0.w) ; jump to relevant palette routine
00001954                            ; End of function PaletteCycle
00001954                            

00001954                            ; ===========================================================================
00001954                            ; ---------------------------------------------------------------------------
00001954                            ; Palette cycling routines
00001954                            ; ---------------------------------------------------------------------------
00001954 0000                       PCycle_Index:	dc.w PCycle_GHZ-PCycle_Index
00001956 0000                       		dc.w PCycle_LZ-PCycle_Index
00001958 0000                       		dc.w PCycle_MZ-PCycle_Index
0000195A 0000                       		dc.w PalCycle_SLZ-PCycle_Index
0000195C 0000                       		dc.w PalCycle_SYZ-PCycle_Index
0000195E 0000                       		dc.w PalCycle_SBZ-PCycle_Index
00001960 0000                       		dc.w PCycle_GHZ-PCycle_Index	; Ending
00001962                            

00001962                            

00001962                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001962                            

00001962                            

00001962                            PCycle_Title:
00001962 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001968 6000                       		bra.s	PCycGHZ_Go
0000196A                            ; ===========================================================================
0000196A                            

0000196A                            PCycle_GHZ:
0000196A 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001970                            

00001970                            PCycGHZ_Go:
00001970 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
00001974 6A00                       		bpl.s	PCycGHZ_Skip	; if time remains, branch
00001976                            

00001976 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w ; reset timer to 5 frames
0000197C 3038 F632                  		move.w	(v_pcyc_num).w,d0 ; get cycle number
00001980 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
00001984 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
00001988 E748                       		lsl.w	#3,d0
0000198A 43F8 FB50                  		lea	(v_pal_dry+$50).w,a1
0000198E 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001992 22B0 0004                  		move.l	4(a0,d0.w),(a1)	; copy palette data to RAM
00001996                            

00001996                            PCycGHZ_Skip:
00001996 4E75                       		rts	
00001998                            ; End of function PCycle_GHZ
00001998                            

00001998                            

00001998                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001998                            

00001998                            

00001998                            PCycle_LZ:
00001998                            ; Waterfalls
00001998 5378 F634                  		subq.w	#1,(v_pcyc_time).w ; decrement timer
0000199C 6A00                       		bpl.s	PCycLZ_Skip1	; if time remains, branch
0000199E                            

0000199E 31FC 0002 F634             		move.w	#2,(v_pcyc_time).w ; reset timer to 2 frames
000019A4 3038 F632                  		move.w	(v_pcyc_num).w,d0
000019A8 5278 F632                  		addq.w	#1,(v_pcyc_num).w ; increment cycle number
000019AC 0240 0003                  		andi.w	#3,d0		; if cycle > 3, reset to 0
000019B0 E748                       		lsl.w	#3,d0
000019B2 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019B8 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; check if level is SBZ3
000019BE 6600                       		bne.s	PCycLZ_NotSBZ3
000019C0 41F9 0000 0000             		lea	(Pal_SBZ3Cyc).l,a0 ; load SBZ3	palette instead
000019C6                            

000019C6                            	PCycLZ_NotSBZ3:
000019C6 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
000019CA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019CE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019D2 43F8 FAD6                  		lea	(v_pal_water+$56).w,a1
000019D6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019DA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019DE                            

000019DE                            PCycLZ_Skip1:
000019DE                            ; Conveyor belts
000019DE 3038 FE04                  		move.w	(v_framecount).w,d0
000019E2 0240 0007                  		andi.w	#7,d0
000019E6 103B 0000                  		move.b	PCycLZ_Seq(pc,d0.w),d0 ; get byte from palette sequence
000019EA 6700                       		beq.s	PCycLZ_Skip2	; if byte is 0, branch
000019EC 7201                       		moveq	#1,d1
000019EE 4A38 F7C0                  		tst.b	(f_conveyrev).w	; have conveyor belts been reversed?
000019F2 6700                       		beq.s	PCycLZ_NoRev	; if not, branch
000019F4 4441                       		neg.w	d1
000019F6                            

000019F6                            	PCycLZ_NoRev:
000019F6 3038 F650                  		move.w	(v_pal_buffer).w,d0
000019FA 0240 0003                  		andi.w	#3,d0
000019FE D041                       		add.w	d1,d0
00001A00 0C40 0003                  		cmpi.w	#3,d0
00001A04 6500                       		bcs.s	loc_1A0A
00001A06 3200                       		move.w	d0,d1
00001A08 7000                       		moveq	#0,d0
00001A0A 4A41                       		tst.w	d1
00001A0C 6A00                       		bpl.s	loc_1A0A
00001A0E 7002                       		moveq	#2,d0
00001A10                            

00001A10                            loc_1A0A:
00001A10 31C0 F650                  		move.w	d0,(v_pal_buffer).w
00001A14 D040                       		add.w	d0,d0
00001A16 3200                       		move.w	d0,d1
00001A18 D040                       		add.w	d0,d0
00001A1A D041                       		add.w	d1,d0
00001A1C 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A22 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001A26 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A2A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A2E 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A34 43F8 FAF6                  		lea	(v_pal_water+$76).w,a1
00001A38 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A3C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A40                            

00001A40                            PCycLZ_Skip2:
00001A40 4E75                       		rts	
00001A42                            ; End of function PCycle_LZ
00001A42                            

00001A42                            ; ===========================================================================
00001A42 0100 0001 0000 0100        PCycLZ_Seq:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A4A                            ; ===========================================================================
00001A4A                            

00001A4A                            PCycle_MZ:
00001A4A 4E75                       		rts	
00001A4C                            

00001A4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A4C                            

00001A4C                            

00001A4C                            PalCycle_SLZ:
00001A4C 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001A50 6A00                       		bpl.s	locret_1A80
00001A52 31FC 0007 F634             		move.w	#7,(v_pcyc_time).w
00001A58 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001A5C 5240                       		addq.w	#1,d0
00001A5E 0C40 0006                  		cmpi.w	#6,d0
00001A62 6500                       		bcs.s	loc_1A60
00001A64 7000                       		moveq	#0,d0
00001A66                            

00001A66                            loc_1A60:
00001A66 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001A6A 3200                       		move.w	d0,d1
00001A6C D241                       		add.w	d1,d1
00001A6E D041                       		add.w	d1,d0
00001A70 D040                       		add.w	d0,d0
00001A72 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001A78 43F8 FB56                  		lea	(v_pal_dry+$56).w,a1
00001A7C 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001A80 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001A86                            

00001A86                            locret_1A80:
00001A86 4E75                       		rts	
00001A88                            ; End of function PalCycle_SLZ
00001A88                            

00001A88                            

00001A88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A88                            

00001A88                            

00001A88                            PalCycle_SYZ:
00001A88 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001A8C 6A00                       		bpl.s	locret_1AC6
00001A8E 31FC 0005 F634             		move.w	#5,(v_pcyc_time).w
00001A94 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001A98 5278 F632                  		addq.w	#1,(v_pcyc_num).w
00001A9C 0240 0003                  		andi.w	#3,d0
00001AA0 E548                       		lsl.w	#2,d0
00001AA2 3200                       		move.w	d0,d1
00001AA4 D040                       		add.w	d0,d0
00001AA6 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001AAC 43F8 FB6E                  		lea	(v_pal_dry+$6E).w,a1
00001AB0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AB4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AB8 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001ABE 43F8 FB76                  		lea	(v_pal_dry+$76).w,a1
00001AC2 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001AC6 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001ACC                            

00001ACC                            locret_1AC6:
00001ACC 4E75                       		rts	
00001ACE                            ; End of function PalCycle_SYZ
00001ACE                            

00001ACE                            

00001ACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ACE                            

00001ACE                            

00001ACE                            PalCycle_SBZ:
00001ACE 45F9 0000 0000             		lea	(Pal_SBZCycList1).l,a2
00001AD4 4A38 FE11                  		tst.b	(v_act).w
00001AD8 6700                       		beq.s	loc_1ADA
00001ADA 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001AE0                            

00001AE0                            loc_1ADA:
00001AE0 43F8 F650                  		lea	(v_pal_buffer).w,a1
00001AE4 321A                       		move.w	(a2)+,d1
00001AE6                            

00001AE6                            loc_1AE0:
00001AE6 5311                       		subq.b	#1,(a1)
00001AE8 6B00                       		bmi.s	loc_1AEA
00001AEA 5489                       		addq.l	#2,a1
00001AEC 5C8A                       		addq.l	#6,a2
00001AEE 6000                       		bra.s	loc_1B06
00001AF0                            ; ===========================================================================
00001AF0                            

00001AF0                            loc_1AEA:
00001AF0 12DA                       		move.b	(a2)+,(a1)+
00001AF2 1011                       		move.b	(a1),d0
00001AF4 5200                       		addq.b	#1,d0
00001AF6 B01A                       		cmp.b	(a2)+,d0
00001AF8 6500                       		bcs.s	loc_1AF6
00001AFA 7000                       		moveq	#0,d0
00001AFC                            

00001AFC                            loc_1AF6:
00001AFC 12C0                       		move.b	d0,(a1)+
00001AFE 0240 000F                  		andi.w	#$F,d0
00001B02 D040                       		add.w	d0,d0
00001B04 305A                       		movea.w	(a2)+,a0
00001B06 365A                       		movea.w	(a2)+,a3
00001B08 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B0C                            

00001B0C                            loc_1B06:
00001B0C 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B10 5378 F634                  		subq.w	#1,(v_pcyc_time).w
00001B14 6A00                       		bpl.s	locret_1B64
00001B16 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B1C 31FC 0001 F634             		move.w	#1,(v_pcyc_time).w
00001B22 4A38 FE11                  		tst.b	(v_act).w
00001B26 6700                       		beq.s	loc_1B2E
00001B28 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B2E 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00001B34                            

00001B34                            loc_1B2E:
00001B34 72FF                       		moveq	#-1,d1
00001B36 4A38 F7C0                  		tst.b	(f_conveyrev).w
00001B3A 6700                       		beq.s	loc_1B38
00001B3C 4441                       		neg.w	d1
00001B3E                            

00001B3E                            loc_1B38:
00001B3E 3038 F632                  		move.w	(v_pcyc_num).w,d0
00001B42 0240 0003                  		andi.w	#3,d0
00001B46 D041                       		add.w	d1,d0
00001B48 0C40 0003                  		cmpi.w	#3,d0
00001B4C 6500                       		bcs.s	loc_1B52
00001B4E 3200                       		move.w	d0,d1
00001B50 7000                       		moveq	#0,d0
00001B52 4A41                       		tst.w	d1
00001B54 6A00                       		bpl.s	loc_1B52
00001B56 7002                       		moveq	#2,d0
00001B58                            

00001B58                            loc_1B52:
00001B58 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00001B5C D040                       		add.w	d0,d0
00001B5E 43F8 FB58                  		lea	(v_pal_dry+$58).w,a1
00001B62 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B66 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B6A                            

00001B6A                            locret_1B64:
00001B6A 4E75                       		rts	
00001B6C                            ; End of function PalCycle_SBZ
00001B6C                            ; End of function PalCycle_SBZ
00001B6C                            

00001B6C                            Pal_TitleCyc:	incbin	"palette\Cycle - Title Screen Water.bin"
00001B8C                            Pal_GHZCyc:	incbin	"palette\Cycle - GHZ.bin"
00001BAC                            Pal_LZCyc1:	incbin	"palette\Cycle - LZ Waterfall.bin"
00001BCC                            Pal_LZCyc2:	incbin	"palette\Cycle - LZ Conveyor Belt.bin"
00001BDE                            Pal_LZCyc3:	incbin	"palette\Cycle - LZ Conveyor Belt Underwater.bin"
00001BF0                            Pal_SBZ3Cyc:	incbin	"palette\Cycle - SBZ3 Waterfall.bin"
00001C10                            Pal_MZCyc:	incbin	"palette\Cycle - MZ (Unused).bin"
00001C58                            Pal_SLZCyc:	incbin	"palette\Cycle - SLZ.bin"
00001C7C                            Pal_SYZCyc1:	incbin	"palette\Cycle - SYZ1.bin"
00001C9C                            Pal_SYZCyc2:	incbin	"palette\Cycle - SYZ2.bin"
00001CAC                            

00001CAC                            		include	"_inc\SBZ Palette Scripts.asm"
00001CAC                            ; ---------------------------------------------------------------------------
00001CAC                            ; Scrap Brain Zone palette cycling script
00001CAC                            ; ---------------------------------------------------------------------------
00001CAC                            

00001CAC                            mSBZp:	macro duration,colours,paladdress,ramaddress
00001CAC                            	dc.b duration, colours
00001CAC                            	dc.w paladdress, ramaddress
00001CAC                            	endm
00001CAC                            

00001CAC                            ; duration in frames, number of colours, palette address, RAM address
00001CAC                            

00001CAC                            Pal_SBZCycList1:
00001CAC 0000                       	dc.w ((end_SBZCycList1-Pal_SBZCycList1-2)/6)-1
00001CAE 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001CB4 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001CBA 0E08 0000 FB6E             	mSBZp	$E,8,Pal_SBZCyc3,v_pal_dry+$6E
00001CC0 0B08 0000 FB70             	mSBZp	$B,8,Pal_SBZCyc5,v_pal_dry+$70
00001CC6 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001CCC 1C10 0000 FB7E             	mSBZp	$1C,$10,Pal_SBZCyc7,v_pal_dry+$7E
00001CD2 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00001CD8 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00001CDE 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00001CE4                            end_SBZCycList1:
00001CE4                            	even
00001CE4                            

00001CE4                            Pal_SBZCycList2:
00001CE4 0000                       	dc.w ((end_SBZCycList2-Pal_SBZCycList2-2)/6)-1
00001CE6 0708 0000 FB50             	mSBZp	7,8,Pal_SBZCyc1,v_pal_dry+$50
00001CEC 0D08 0000 FB52             	mSBZp	$D,8,Pal_SBZCyc2,v_pal_dry+$52
00001CF2 0908 0000 FB70             	mSBZp	9,8,Pal_SBZCyc9,v_pal_dry+$70
00001CF8 0708 0000 FB72             	mSBZp	7,8,Pal_SBZCyc6,v_pal_dry+$72
00001CFE 0303 0000 FB78             	mSBZp	3,3,Pal_SBZCyc8,v_pal_dry+$78
00001D04 0303 0000 FB7A             	mSBZp	3,3,Pal_SBZCyc8+2,v_pal_dry+$7A
00001D0A 0303 0000 FB7C             	mSBZp	3,3,Pal_SBZCyc8+4,v_pal_dry+$7C
00001D10                            end_SBZCycList2:
00001D10                            	even
00001D10                            	even
00001D10                            

00001D10                            Pal_SBZCyc1:	incbin	"palette\Cycle - SBZ 1.bin"
00001D20                            Pal_SBZCyc2:	incbin	"palette\Cycle - SBZ 2.bin"
00001D30                            Pal_SBZCyc3:	incbin	"palette\Cycle - SBZ 3.bin"
00001D40                            Pal_SBZCyc4:	incbin	"palette\Cycle - SBZ 4.bin"
00001D4C                            Pal_SBZCyc5:	incbin	"palette\Cycle - SBZ 5.bin"
00001D5C                            Pal_SBZCyc6:	incbin	"palette\Cycle - SBZ 6.bin"
00001D6C                            Pal_SBZCyc7:	incbin	"palette\Cycle - SBZ 7.bin"
00001D8C                            Pal_SBZCyc8:	incbin	"palette\Cycle - SBZ 8.bin"
00001D96                            Pal_SBZCyc9:	incbin	"palette\Cycle - SBZ 9.bin"
00001DA6                            Pal_SBZCyc10:	incbin	"palette\Cycle - SBZ 10.bin"
00001DB2                            ; ---------------------------------------------------------------------------
00001DB2                            ; Subroutine to	fade in from black
00001DB2                            ; ---------------------------------------------------------------------------
00001DB2                            

00001DB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DB2                            

00001DB2                            

00001DB2                            PaletteFadeIn:
00001DB2 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; set start position = 0; size = $40
00001DB8                            

00001DB8                            PalFadeIn_Alt:				; start position and size are already set
00001DB8 7000                       		moveq	#0,d0
00001DBA 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001DBE 1038 F626                  		move.b	(v_pfade_start).w,d0
00001DC2 D0C0                       		adda.w	d0,a0
00001DC4 7200                       		moveq	#cBlack,d1
00001DC6 1038 F627                  		move.b	(v_pfade_size).w,d0
00001DCA                            

00001DCA                            	@fill:
00001DCA 30C1                       		move.w	d1,(a0)+
00001DCC 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with black
00001DD0                            

00001DD0 383C 0015                  		move.w	#$15,d4
00001DD4                            

00001DD4                            	@mainloop:
00001DD4 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001DDA 6100 0000                  		bsr.w	WaitForVBla
00001DDE 6100                       		bsr.s	FadeIn_FromBlack
00001DE0 6100 F810                  		bsr.w	RunPLC
00001DE4 51CC FFEE                  		dbf	d4,@mainloop
00001DE8 4E75                       		rts	
00001DEA                            ; End of function PaletteFadeIn
00001DEA                            

00001DEA                            

00001DEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DEA                            

00001DEA                            

00001DEA                            FadeIn_FromBlack:
00001DEA 7000                       		moveq	#0,d0
00001DEC 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001DF0 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00001DF4 1038 F626                  		move.b	(v_pfade_start).w,d0
00001DF8 D0C0                       		adda.w	d0,a0
00001DFA D2C0                       		adda.w	d0,a1
00001DFC 1038 F627                  		move.b	(v_pfade_size).w,d0
00001E00                            

00001E00                            	@addcolour:
00001E00 6100                       		bsr.s	FadeIn_AddColour ; increase colour
00001E02 51C8 FFFC                  		dbf	d0,@addcolour	; repeat for size of palette
00001E06                            

00001E06 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00001E0C 6600                       		bne.s	@exit		; if not, branch
00001E0E                            

00001E0E 7000                       		moveq	#0,d0
00001E10 41F8 FA80                  		lea	(v_pal_water).w,a0
00001E14 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00001E18 1038 F626                  		move.b	(v_pfade_start).w,d0
00001E1C D0C0                       		adda.w	d0,a0
00001E1E D2C0                       		adda.w	d0,a1
00001E20 1038 F627                  		move.b	(v_pfade_size).w,d0
00001E24                            

00001E24                            	@addcolour2:
00001E24 6100                       		bsr.s	FadeIn_AddColour ; increase colour again
00001E26 51C8 FFFC                  		dbf	d0,@addcolour2 ; repeat
00001E2A                            

00001E2A                            @exit:
00001E2A 4E75                       		rts	
00001E2C                            ; End of function FadeIn_FromBlack
00001E2C                            

00001E2C                            

00001E2C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E2C                            

00001E2C                            

00001E2C                            FadeIn_AddColour:
00001E2C                            @addblue:
00001E2C 3419                       		move.w	(a1)+,d2
00001E2E 3610                       		move.w	(a0),d3
00001E30 B642                       		cmp.w	d2,d3		; is colour already at threshold level?
00001E32 6700                       		beq.s	@next		; if yes, branch
00001E34 3203                       		move.w	d3,d1
00001E36 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E3A B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E3C 6200                       		bhi.s	@addgreen	; if yes, branch
00001E3E 30C1                       		move.w	d1,(a0)+	; update palette
00001E40 4E75                       		rts	
00001E42                            ; ===========================================================================
00001E42                            

00001E42                            @addgreen:
00001E42 3203                       		move.w	d3,d1
00001E44 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E48 B242                       		cmp.w	d2,d1
00001E4A 6200                       		bhi.s	@addred
00001E4C 30C1                       		move.w	d1,(a0)+	; update palette
00001E4E 4E75                       		rts	
00001E50                            ; ===========================================================================
00001E50                            

00001E50                            @addred:
00001E50 5458                       		addq.w	#2,(a0)+	; increase red value
00001E52 4E75                       		rts	
00001E54                            ; ===========================================================================
00001E54                            

00001E54                            @next:
00001E54 5448                       		addq.w	#2,a0		; next colour
00001E56 4E75                       		rts	
00001E58                            ; End of function FadeIn_AddColour
00001E58                            

00001E58                            

00001E58                            ; ---------------------------------------------------------------------------
00001E58                            ; Subroutine to fade out to black
00001E58                            ; ---------------------------------------------------------------------------
00001E58                            

00001E58                            

00001E58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E58                            

00001E58                            

00001E58                            PaletteFadeOut:
00001E58 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00001E5E 383C 0015                  		move.w	#$15,d4
00001E62                            

00001E62                            	@mainloop:
00001E62 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001E68 6100 0000                  		bsr.w	WaitForVBla
00001E6C 6100                       		bsr.s	FadeOut_ToBlack
00001E6E 6100 F782                  		bsr.w	RunPLC
00001E72 51CC FFEE                  		dbf	d4,@mainloop
00001E76 4E75                       		rts	
00001E78                            ; End of function PaletteFadeOut
00001E78                            

00001E78                            

00001E78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E78                            

00001E78                            

00001E78                            FadeOut_ToBlack:
00001E78 7000                       		moveq	#0,d0
00001E7A 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001E7E 1038 F626                  		move.b	(v_pfade_start).w,d0
00001E82 D0C0                       		adda.w	d0,a0
00001E84 1038 F627                  		move.b	(v_pfade_size).w,d0
00001E88                            

00001E88                            	@decolour:
00001E88 6100                       		bsr.s	FadeOut_DecColour ; decrease colour
00001E8A 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00001E8E                            

00001E8E 7000                       		moveq	#0,d0
00001E90 41F8 FA80                  		lea	(v_pal_water).w,a0
00001E94 1038 F626                  		move.b	(v_pfade_start).w,d0
00001E98 D0C0                       		adda.w	d0,a0
00001E9A 1038 F627                  		move.b	(v_pfade_size).w,d0
00001E9E                            

00001E9E                            	@decolour2:
00001E9E 6100                       		bsr.s	FadeOut_DecColour
00001EA0 51C8 FFFC                  		dbf	d0,@decolour2
00001EA4 4E75                       		rts	
00001EA6                            ; End of function FadeOut_ToBlack
00001EA6                            

00001EA6                            

00001EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EA6                            

00001EA6                            

00001EA6                            FadeOut_DecColour:
00001EA6                            @dered:
00001EA6 3410                       		move.w	(a0),d2
00001EA8 6700                       		beq.s	@next
00001EAA 3202                       		move.w	d2,d1
00001EAC 0241 000E                  		andi.w	#$E,d1
00001EB0 6700                       		beq.s	@degreen
00001EB2 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EB4 4E75                       		rts	
00001EB6                            ; ===========================================================================
00001EB6                            

00001EB6                            @degreen:
00001EB6 3202                       		move.w	d2,d1
00001EB8 0241 00E0                  		andi.w	#$E0,d1
00001EBC 6700                       		beq.s	@deblue
00001EBE 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001EC2 4E75                       		rts	
00001EC4                            ; ===========================================================================
00001EC4                            

00001EC4                            @deblue:
00001EC4 3202                       		move.w	d2,d1
00001EC6 0241 0E00                  		andi.w	#$E00,d1
00001ECA 6700                       		beq.s	@next
00001ECC 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001ED0 4E75                       		rts	
00001ED2                            ; ===========================================================================
00001ED2                            

00001ED2                            @next:
00001ED2 5448                       		addq.w	#2,a0
00001ED4 4E75                       		rts	
00001ED6                            ; End of function FadeOut_DecColour
00001ED6                            

00001ED6                            ; ---------------------------------------------------------------------------
00001ED6                            ; Subroutine to	fade in from white (Special Stage)
00001ED6                            ; ---------------------------------------------------------------------------
00001ED6                            

00001ED6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED6                            

00001ED6                            

00001ED6                            PaletteWhiteIn:
00001ED6 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00001EDC 7000                       		moveq	#0,d0
00001EDE 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001EE2 1038 F626                  		move.b	(v_pfade_start).w,d0
00001EE6 D0C0                       		adda.w	d0,a0
00001EE8 323C 0EEE                  		move.w	#cWhite,d1
00001EEC 1038 F627                  		move.b	(v_pfade_size).w,d0
00001EF0                            

00001EF0                            	@fill:
00001EF0 30C1                       		move.w	d1,(a0)+
00001EF2 51C8 FFFC                  		dbf	d0,@fill 	; fill palette with white
00001EF6                            

00001EF6 383C 0015                  		move.w	#$15,d4
00001EFA                            

00001EFA                            	@mainloop:
00001EFA 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001F00 6100 0000                  		bsr.w	WaitForVBla
00001F04 6100                       		bsr.s	WhiteIn_FromWhite
00001F06 6100 F6EA                  		bsr.w	RunPLC
00001F0A 51CC FFEE                  		dbf	d4,@mainloop
00001F0E 4E75                       		rts	
00001F10                            ; End of function PaletteWhiteIn
00001F10                            

00001F10                            

00001F10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F10                            

00001F10                            

00001F10                            WhiteIn_FromWhite:
00001F10 7000                       		moveq	#0,d0
00001F12 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001F16 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00001F1A 1038 F626                  		move.b	(v_pfade_start).w,d0
00001F1E D0C0                       		adda.w	d0,a0
00001F20 D2C0                       		adda.w	d0,a1
00001F22 1038 F627                  		move.b	(v_pfade_size).w,d0
00001F26                            

00001F26                            	@decolour:
00001F26 6100                       		bsr.s	WhiteIn_DecColour ; decrease colour
00001F28 51C8 FFFC                  		dbf	d0,@decolour	; repeat for size of palette
00001F2C                            

00001F2C 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w	; is level Labyrinth?
00001F32 6600                       		bne.s	@exit		; if not, branch
00001F34 7000                       		moveq	#0,d0
00001F36 41F8 FA80                  		lea	(v_pal_water).w,a0
00001F3A 43F8 FA00                  		lea	(v_pal_water_dup).w,a1
00001F3E 1038 F626                  		move.b	(v_pfade_start).w,d0
00001F42 D0C0                       		adda.w	d0,a0
00001F44 D2C0                       		adda.w	d0,a1
00001F46 1038 F627                  		move.b	(v_pfade_size).w,d0
00001F4A                            

00001F4A                            	@decolour2:
00001F4A 6100                       		bsr.s	WhiteIn_DecColour
00001F4C 51C8 FFFC                  		dbf	d0,@decolour2
00001F50                            

00001F50                            	@exit:
00001F50 4E75                       		rts	
00001F52                            ; End of function WhiteIn_FromWhite
00001F52                            

00001F52                            

00001F52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F52                            

00001F52                            

00001F52                            WhiteIn_DecColour:
00001F52                            @deblue:
00001F52 3419                       		move.w	(a1)+,d2
00001F54 3610                       		move.w	(a0),d3
00001F56 B642                       		cmp.w	d2,d3
00001F58 6700                       		beq.s	@next
00001F5A 3203                       		move.w	d3,d1
00001F5C 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F60 6500                       		blo.s	@degreen
00001F62 B242                       		cmp.w	d2,d1
00001F64 6500                       		blo.s	@degreen
00001F66 30C1                       		move.w	d1,(a0)+
00001F68 4E75                       		rts	
00001F6A                            ; ===========================================================================
00001F6A                            

00001F6A                            @degreen:
00001F6A 3203                       		move.w	d3,d1
00001F6C 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F70 6500                       		blo.s	@dered
00001F72 B242                       		cmp.w	d2,d1
00001F74 6500                       		blo.s	@dered
00001F76 30C1                       		move.w	d1,(a0)+
00001F78 4E75                       		rts	
00001F7A                            ; ===========================================================================
00001F7A                            

00001F7A                            @dered:
00001F7A 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F7C 4E75                       		rts	
00001F7E                            ; ===========================================================================
00001F7E                            

00001F7E                            @next:
00001F7E 5448                       		addq.w	#2,a0
00001F80 4E75                       		rts	
00001F82                            ; End of function WhiteIn_DecColour
00001F82                            

00001F82                            ; ---------------------------------------------------------------------------
00001F82                            ; Subroutine to fade to white (Special Stage)
00001F82                            ; ---------------------------------------------------------------------------
00001F82                            

00001F82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F82                            

00001F82                            

00001F82                            PaletteWhiteOut:
00001F82 31FC 003F F626             		move.w	#$003F,(v_pfade_start).w ; start position = 0; size = $40
00001F88 383C 0015                  		move.w	#$15,d4
00001F8C                            

00001F8C                            	@mainloop:
00001F8C 11FC 0012 F62A             		move.b	#$12,(v_vbla_routine).w
00001F92 6100 0000                  		bsr.w	WaitForVBla
00001F96 6100                       		bsr.s	WhiteOut_ToWhite
00001F98 6100 F658                  		bsr.w	RunPLC
00001F9C 51CC FFEE                  		dbf	d4,@mainloop
00001FA0 4E75                       		rts	
00001FA2                            ; End of function PaletteWhiteOut
00001FA2                            

00001FA2                            

00001FA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FA2                            

00001FA2                            

00001FA2                            WhiteOut_ToWhite:
00001FA2 7000                       		moveq	#0,d0
00001FA4 41F8 FB00                  		lea	(v_pal_dry).w,a0
00001FA8 1038 F626                  		move.b	(v_pfade_start).w,d0
00001FAC D0C0                       		adda.w	d0,a0
00001FAE 1038 F627                  		move.b	(v_pfade_size).w,d0
00001FB2                            

00001FB2                            	@addcolour:
00001FB2 6100                       		bsr.s	WhiteOut_AddColour
00001FB4 51C8 FFFC                  		dbf	d0,@addcolour
00001FB8                            

00001FB8 7000                       		moveq	#0,d0
00001FBA 41F8 FA80                  		lea	(v_pal_water).w,a0
00001FBE 1038 F626                  		move.b	(v_pfade_start).w,d0
00001FC2 D0C0                       		adda.w	d0,a0
00001FC4 1038 F627                  		move.b	(v_pfade_size).w,d0
00001FC8                            

00001FC8                            	@addcolour2:
00001FC8 6100                       		bsr.s	WhiteOut_AddColour
00001FCA 51C8 FFFC                  		dbf	d0,@addcolour2
00001FCE 4E75                       		rts	
00001FD0                            ; End of function WhiteOut_ToWhite
00001FD0                            

00001FD0                            

00001FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FD0                            

00001FD0                            

00001FD0                            WhiteOut_AddColour:
00001FD0                            @addred:
00001FD0 3410                       		move.w	(a0),d2
00001FD2 0C42 0EEE                  		cmpi.w	#cWhite,d2
00001FD6 6700                       		beq.s	@next
00001FD8 3202                       		move.w	d2,d1
00001FDA 0241 000E                  		andi.w	#$E,d1
00001FDE 0C41 000E                  		cmpi.w	#cRed,d1
00001FE2 6700                       		beq.s	@addgreen
00001FE4 5458                       		addq.w	#2,(a0)+	; increase red value
00001FE6 4E75                       		rts	
00001FE8                            ; ===========================================================================
00001FE8                            

00001FE8                            @addgreen:
00001FE8 3202                       		move.w	d2,d1
00001FEA 0241 00E0                  		andi.w	#$E0,d1
00001FEE 0C41 00E0                  		cmpi.w	#cGreen,d1
00001FF2 6700                       		beq.s	@addblue
00001FF4 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FF8 4E75                       		rts	
00001FFA                            ; ===========================================================================
00001FFA                            

00001FFA                            @addblue:
00001FFA 3202                       		move.w	d2,d1
00001FFC 0241 0E00                  		andi.w	#$E00,d1
00002000 0C41 0E00                  		cmpi.w	#cBlue,d1
00002004 6700                       		beq.s	@next
00002006 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
0000200A 4E75                       		rts	
0000200C                            ; ===========================================================================
0000200C                            

0000200C                            @next:
0000200C 5448                       		addq.w	#2,a0
0000200E 4E75                       		rts	
00002010                            ; End of function WhiteOut_AddColour
00002010                            

00002010                            ; ---------------------------------------------------------------------------
00002010                            ; Palette cycling routine - Sega logo
00002010                            ; ---------------------------------------------------------------------------
00002010                            

00002010                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002010                            

00002010                            

00002010                            PalCycle_Sega:
00002010 4A38 F635                  		tst.b	(v_pcyc_time+1).w
00002014 6600                       		bne.s	loc_206A
00002016 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
0000201A 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002020 7205                       		moveq	#5,d1
00002022 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002026                            

00002026                            loc_2020:
00002026 6A00                       		bpl.s	loc_202A
00002028 5448                       		addq.w	#2,a0
0000202A 5341                       		subq.w	#1,d1
0000202C 5440                       		addq.w	#2,d0
0000202E 60F6                       		bra.s	loc_2020
00002030                            ; ===========================================================================
00002030                            

00002030                            loc_202A:
00002030 3400                       		move.w	d0,d2
00002032 0242 001E                  		andi.w	#$1E,d2
00002036 6600                       		bne.s	loc_2034
00002038 5440                       		addq.w	#2,d0
0000203A                            

0000203A                            loc_2034:
0000203A 0C40 0060                  		cmpi.w	#$60,d0
0000203E 6400                       		bhs.s	loc_203E
00002040 3398 0000                  		move.w	(a0)+,(a1,d0.w)
00002044                            

00002044                            loc_203E:
00002044 5440                       		addq.w	#2,d0
00002046 51C9 FFE8                  		dbf	d1,loc_202A
0000204A                            

0000204A 3038 F632                  		move.w	(v_pcyc_num).w,d0
0000204E 5440                       		addq.w	#2,d0
00002050 3400                       		move.w	d0,d2
00002052 0242 001E                  		andi.w	#$1E,d2
00002056 6600                       		bne.s	loc_2054
00002058 5440                       		addq.w	#2,d0
0000205A                            

0000205A                            loc_2054:
0000205A 0C40 0064                  		cmpi.w	#$64,d0
0000205E 6D00                       		blt.s	loc_2062
00002060 31FC 0401 F634             		move.w	#$401,(v_pcyc_time).w
00002066 70F4                       		moveq	#-$C,d0
00002068                            

00002068                            loc_2062:
00002068 31C0 F632                  		move.w	d0,(v_pcyc_num).w
0000206C 7001                       		moveq	#1,d0
0000206E 4E75                       		rts	
00002070                            ; ===========================================================================
00002070                            

00002070                            loc_206A:
00002070 5338 F634                  		subq.b	#1,(v_pcyc_time).w
00002074 6A00                       		bpl.s	loc_20BC
00002076 11FC 0004 F634             		move.b	#4,(v_pcyc_time).w
0000207C 3038 F632                  		move.w	(v_pcyc_num).w,d0
00002080 0640 000C                  		addi.w	#$C,d0
00002084 0C40 0030                  		cmpi.w	#$30,d0
00002088 6500                       		blo.s	loc_2088
0000208A 7000                       		moveq	#0,d0
0000208C 4E75                       		rts	
0000208E                            ; ===========================================================================
0000208E                            

0000208E                            loc_2088:
0000208E 31C0 F632                  		move.w	d0,(v_pcyc_num).w
00002092 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002098 41F0 0000                  		lea	(a0,d0.w),a0
0000209C 43F8 FB04                  		lea	(v_pal_dry+$04).w,a1
000020A0 22D8                       		move.l	(a0)+,(a1)+
000020A2 22D8                       		move.l	(a0)+,(a1)+
000020A4 3298                       		move.w	(a0)+,(a1)
000020A6 43F8 FB20                  		lea	(v_pal_dry+$20).w,a1
000020AA 7000                       		moveq	#0,d0
000020AC 722C                       		moveq	#$2C,d1
000020AE                            

000020AE                            loc_20A8:
000020AE 3400                       		move.w	d0,d2
000020B0 0242 001E                  		andi.w	#$1E,d2
000020B4 6600                       		bne.s	loc_20B2
000020B6 5440                       		addq.w	#2,d0
000020B8                            

000020B8                            loc_20B2:
000020B8 3390 0000                  		move.w	(a0),(a1,d0.w)
000020BC 5440                       		addq.w	#2,d0
000020BE 51C9 FFEE                  		dbf	d1,loc_20A8
000020C2                            

000020C2                            loc_20BC:
000020C2 7001                       		moveq	#1,d0
000020C4 4E75                       		rts	
000020C6                            ; End of function PalCycle_Sega
000020C6                            

000020C6                            ; ===========================================================================
000020C6                            

000020C6                            Pal_Sega1:	incbin	"palette\Sega1.bin"
000020D2                            Pal_Sega2:	incbin	"palette\Sega2.bin"
00002102                            

00002102                            ; ---------------------------------------------------------------------------
00002102                            ; Subroutines to load palettes
00002102                            

00002102                            ; input:
00002102                            ;	d0 = index number for palette
00002102                            ; ---------------------------------------------------------------------------
00002102                            

00002102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002102                            

00002102                            

00002102                            PalLoad1:
00002102 43F9 0000 0000             		lea	(PalPointers).l,a1
00002108 E748                       		lsl.w	#3,d0
0000210A D2C0                       		adda.w	d0,a1
0000210C 2459                       		movea.l	(a1)+,a2	; get palette data address
0000210E 3659                       		movea.w	(a1)+,a3	; get target RAM address
00002110 D6FC 0080                  		adda.w	#v_pal_dry_dup-v_pal_dry,a3		; skip to "main" RAM address
00002114 3E19                       		move.w	(a1)+,d7	; get length of palette data
00002116                            

00002116                            	@loop:
00002116 26DA                       		move.l	(a2)+,(a3)+	; move data to RAM
00002118 51CF FFFC                  		dbf	d7,@loop
0000211C 4E75                       		rts	
0000211E                            ; End of function PalLoad1
0000211E                            

0000211E                            

0000211E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000211E                            

0000211E                            

0000211E                            PalLoad2:
0000211E 43F9 0000 0000             		lea	(PalPointers).l,a1
00002124 E748                       		lsl.w	#3,d0
00002126 D2C0                       		adda.w	d0,a1
00002128 2459                       		movea.l	(a1)+,a2	; get palette data address
0000212A 3659                       		movea.w	(a1)+,a3	; get target RAM address
0000212C 3E19                       		move.w	(a1)+,d7	; get length of palette
0000212E                            

0000212E                            	@loop:
0000212E 26DA                       		move.l	(a2)+,(a3)+	; move data to RAM
00002130 51CF FFFC                  		dbf	d7,@loop
00002134 4E75                       		rts	
00002136                            ; End of function PalLoad2
00002136                            

00002136                            ; ---------------------------------------------------------------------------
00002136                            ; Underwater palette loading subroutine
00002136                            ; ---------------------------------------------------------------------------
00002136                            

00002136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002136                            

00002136                            

00002136                            PalLoad3_Water:
00002136 43F9 0000 0000             		lea	(PalPointers).l,a1
0000213C E748                       		lsl.w	#3,d0
0000213E D2C0                       		adda.w	d0,a1
00002140 2459                       		movea.l	(a1)+,a2	; get palette data address
00002142 3659                       		movea.w	(a1)+,a3	; get target RAM address
00002144 96FC 0080                  		suba.w	#v_pal_dry-v_pal_water,a3		; skip to "main" RAM address
00002148 3E19                       		move.w	(a1)+,d7	; get length of palette data
0000214A                            

0000214A                            	@loop:
0000214A 26DA                       		move.l	(a2)+,(a3)+	; move data to RAM
0000214C 51CF FFFC                  		dbf	d7,@loop
00002150 4E75                       		rts	
00002152                            ; End of function PalLoad3_Water
00002152                            

00002152                            

00002152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002152                            

00002152                            

00002152                            PalLoad4_Water:
00002152 43F9 0000 0000             		lea	(PalPointers).l,a1
00002158 E748                       		lsl.w	#3,d0
0000215A D2C0                       		adda.w	d0,a1
0000215C 2459                       		movea.l	(a1)+,a2	; get palette data address
0000215E 3659                       		movea.w	(a1)+,a3	; get target RAM address
00002160 96FC 0100                  		suba.w	#v_pal_dry-v_pal_water_dup,a3
00002164 3E19                       		move.w	(a1)+,d7	; get length of palette data
00002166                            

00002166                            	@loop:
00002166 26DA                       		move.l	(a2)+,(a3)+	; move data to RAM
00002168 51CF FFFC                  		dbf	d7,@loop
0000216C 4E75                       		rts	
0000216E                            ; End of function PalLoad4_Water
0000216E                            

0000216E                            ; ===========================================================================
0000216E                            

0000216E                            		include	"_inc\Palette Pointers.asm"
0000216E                            ; ---------------------------------------------------------------------------
0000216E                            ; Palette pointers
0000216E                            ; ---------------------------------------------------------------------------
0000216E                            

0000216E                            palp:	macro paladdress,ramaddress,colours
0000216E                            	dc.l paladdress
0000216E                            	dc.w ramaddress, (colours>>1)-1
0000216E                            	endm
0000216E                            

0000216E                            PalPointers:
0000216E                            

0000216E                            ; palette address, RAM address, colours
0000216E                            

0000216E 0000 0000 FB00 001F        ptr_Pal_SegaBG:		palp	Pal_SegaBG,v_pal_dry,$40		; 0 - Sega logo
00002176 0000 0000 FB00 001F        ptr_Pal_Title:		palp	Pal_Title,v_pal_dry,$40		; 1 - title screen
0000217E 0000 0000 FB00 001F        ptr_Pal_LevelSel:	palp	Pal_LevelSel,v_pal_dry,$40		; 2 - level select
00002186 0000 0000 FB00 0007        ptr_Pal_Sonic:		palp	Pal_Sonic,v_pal_dry,$10		; 3 - Sonic
0000218E                            Pal_Levels:
0000218E 0000 0000 FB20 0017        ptr_Pal_GHZ:		palp	Pal_GHZ,v_pal_dry+$20, $30		; 4 - GHZ
00002196 0000 0000 FB20 0017        ptr_Pal_LZ:		palp	Pal_LZ,v_pal_dry+$20,$30		; 5 - LZ
0000219E 0000 0000 FB20 0017        ptr_Pal_MZ:		palp	Pal_MZ,v_pal_dry+$20,$30		; 6 - MZ
000021A6 0000 0000 FB20 0017        ptr_Pal_SLZ:		palp	Pal_SLZ,v_pal_dry+$20,$30		; 7 - SLZ
000021AE 0000 0000 FB20 0017        ptr_Pal_SYZ:		palp	Pal_SYZ,v_pal_dry+$20,$30		; 8 - SYZ
000021B6 0000 0000 FB20 0017        ptr_Pal_SBZ1:		palp	Pal_SBZ1,v_pal_dry+$20,$30		; 9 - SBZ1
000021BE 0000 0000 FB00 001F        ptr_Pal_Special:	palp	Pal_Special,v_pal_dry,$40		; $A (10) - special stage
000021C6 0000 0000 FB00 001F        ptr_Pal_LZWater:	palp	Pal_LZWater,v_pal_dry,$40		; $B (11) - LZ underwater
000021CE 0000 0000 FB20 0017        ptr_Pal_SBZ3:		palp	Pal_SBZ3,v_pal_dry+$20,$30		; $C (12) - SBZ3
000021D6 0000 0000 FB00 001F        ptr_Pal_SBZ3Water:	palp	Pal_SBZ3Water,v_pal_dry,$40		; $D (13) - SBZ3 underwater
000021DE 0000 0000 FB20 0017        ptr_Pal_SBZ2:		palp	Pal_SBZ2,v_pal_dry+$20,$30		; $E (14) - SBZ2
000021E6 0000 0000 FB00 0007        ptr_Pal_LZSonWater:	palp	Pal_LZSonWater,v_pal_dry,$10	; $F (15) - LZ Sonic underwater
000021EE 0000 0000 FB00 0007        ptr_Pal_SBZ3SonWat:	palp	Pal_SBZ3SonWat,v_pal_dry,$10	; $10 (16) - SBZ3 Sonic underwater
000021F6 0000 0000 FB00 001F        ptr_Pal_SSResult:	palp	Pal_SSResult,v_pal_dry,$40		; $11 (17) - special stage results
000021FE 0000 0000 FB00 000F        ptr_Pal_Continue:	palp	Pal_Continue,v_pal_dry,$20		; $12 (18) - special stage results continue
00002206 0000 0000 FB00 001F        ptr_Pal_Ending:		palp	Pal_Ending,v_pal_dry,$40		; $13 (19) - ending sequence
0000220E                            			even
0000220E                            

0000220E                            

0000220E =00000000                  palid_SegaBG:		equ (ptr_Pal_SegaBG-PalPointers)/8
0000220E =00000001                  palid_Title:		equ (ptr_Pal_Title-PalPointers)/8
0000220E =00000002                  palid_LevelSel:		equ (ptr_Pal_LevelSel-PalPointers)/8
0000220E =00000003                  palid_Sonic:		equ (ptr_Pal_Sonic-PalPointers)/8
0000220E =00000004                  palid_GHZ:		equ (ptr_Pal_GHZ-PalPointers)/8
0000220E =00000005                  palid_LZ:		equ (ptr_Pal_LZ-PalPointers)/8
0000220E =00000006                  palid_MZ:		equ (ptr_Pal_MZ-PalPointers)/8
0000220E =00000007                  palid_SLZ:		equ (ptr_Pal_SLZ-PalPointers)/8
0000220E =00000008                  palid_SYZ:		equ (ptr_Pal_SYZ-PalPointers)/8
0000220E =00000009                  palid_SBZ1:		equ (ptr_Pal_SBZ1-PalPointers)/8
0000220E =0000000A                  palid_Special:		equ (ptr_Pal_Special-PalPointers)/8
0000220E =0000000B                  palid_LZWater:		equ (ptr_Pal_LZWater-PalPointers)/8
0000220E =0000000C                  palid_SBZ3:		equ (ptr_Pal_SBZ3-PalPointers)/8
0000220E =0000000D                  palid_SBZ3Water:	equ (ptr_Pal_SBZ3Water-PalPointers)/8
0000220E =0000000E                  palid_SBZ2:		equ (ptr_Pal_SBZ2-PalPointers)/8
0000220E =0000000F                  palid_LZSonWater:	equ (ptr_Pal_LZSonWater-PalPointers)/8
0000220E =00000010                  palid_SBZ3SonWat:	equ (ptr_Pal_SBZ3SonWat-PalPointers)/8
0000220E =00000011                  palid_SSResult:		equ (ptr_Pal_SSResult-PalPointers)/8
0000220E =00000012                  palid_Continue:		equ (ptr_Pal_Continue-PalPointers)/8
0000220E =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
0000220E =00000013                  palid_Ending:		equ (ptr_Pal_Ending-PalPointers)/8
0000220E                            

0000220E                            ; ---------------------------------------------------------------------------
0000220E                            ; Palette data
0000220E                            ; ---------------------------------------------------------------------------
0000220E                            Pal_SegaBG:	incbin	"palette\Sega Background.bin"
0000228E                            Pal_Title:	incbin	"palette\Title Screen.bin"
0000230E                            Pal_LevelSel:	incbin	"palette\Level Select.bin"
0000238E                            Pal_Sonic:	incbin	"palette\Sonic.bin"
000023AE                            Pal_GHZ:	incbin	"palette\Green Hill Zone.bin"
0000240E                            Pal_LZ:		incbin	"palette\Labyrinth Zone.bin"
0000246E                            Pal_LZWater:	incbin	"palette\Labyrinth Zone Underwater.bin"
000024EE                            Pal_MZ:		incbin	"palette\Marble Zone.bin"
0000254E                            Pal_SLZ:	incbin	"palette\Star Light Zone.bin"
000025AE                            Pal_SYZ:	incbin	"palette\Spring Yard Zone.bin"
0000260E                            Pal_SBZ1:	incbin	"palette\SBZ Act 1.bin"
0000266E                            Pal_SBZ2:	incbin	"palette\SBZ Act 2.bin"
000026CE                            Pal_Special:	incbin	"palette\Special Stage.bin"
0000274E                            Pal_SBZ3:	incbin	"palette\SBZ Act 3.bin"
000027AE                            Pal_SBZ3Water:	incbin	"palette\SBZ Act 3 Underwater.bin"
0000282E                            Pal_LZSonWater:	incbin	"palette\Sonic - LZ Underwater.bin"
0000284E                            Pal_SBZ3SonWat:	incbin	"palette\Sonic - SBZ3 Underwater.bin"
0000286E                            Pal_SSResult:	incbin	"palette\Special Stage Results.bin"
000028EE                            Pal_Continue:	incbin	"palette\Special Stage Continue Bonus.bin"
0000292E                            Pal_Ending:	incbin	"palette\Ending.bin"
000029AE                            

000029AE                            ; ---------------------------------------------------------------------------
000029AE                            ; Subroutine to	wait for VBlank routines to complete
000029AE                            ; ---------------------------------------------------------------------------
000029AE                            

000029AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029AE                            

000029AE                            

000029AE                            WaitForVBla:
000029AE 46FC 2300                  		enable_ints
000029B2                            

000029B2                            	@wait:
000029B2 4A38 F62A                  		tst.b	(v_vbla_routine).w ; has VBlank routine finished?
000029B6 66FA                       		bne.s	@wait		; if not, branch
000029B8 4E75                       		rts	
000029BA                            ; End of function WaitForVBla
000029BA                            

000029BA                            		include	"_incObj\sub RandomNumber.asm"
000029BA                            ; ---------------------------------------------------------------------------
000029BA                            ; Subroutine to	generate a pseudo-random number	in d0
000029BA                            ; ---------------------------------------------------------------------------
000029BA                            

000029BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029BA                            

000029BA                            

000029BA                            RandomNumber:
000029BA 2238 F636                  		move.l	(v_random).w,d1
000029BE 6600                       		bne.s	@scramble	; if d1 is not 0, branch
000029C0 223C 2A6D 365A             		move.l	#$2A6D365A,d1	; if d1 is 0, use seed number
000029C6                            

000029C6                            	@scramble:
000029C6 2001                       		move.l	d1,d0
000029C8 E581                       		asl.l	#2,d1
000029CA D280                       		add.l	d0,d1
000029CC E781                       		asl.l	#3,d1
000029CE D280                       		add.l	d0,d1
000029D0 3001                       		move.w	d1,d0
000029D2 4841                       		swap	d1
000029D4 D041                       		add.w	d1,d0
000029D6 3200                       		move.w	d0,d1
000029D8 4841                       		swap	d1
000029DA 21C1 F636                  		move.l	d1,(v_random).w
000029DE 4E75                       		rts	
000029DE 4E75                       		rts	
000029E0                            		include	"_incObj\sub CalcSine.asm"
000029E0                            ; ---------------------------------------------------------------------------
000029E0                            ; Subroutine calculate a sine
000029E0                            

000029E0                            ; input:
000029E0                            ;	d0 = angle
000029E0                            

000029E0                            ; output:
000029E0                            ;	d0 = sine
000029E0                            ;	d1 = cosine
000029E0                            ; ---------------------------------------------------------------------------
000029E0                            

000029E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029E0                            

000029E0                            

000029E0                            CalcSine:
000029E0 0240 00FF                  		andi.w	#$FF,d0
000029E4 D040                       		add.w	d0,d0
000029E6 0640 0080                  		addi.w	#$80,d0
000029EA 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000029EE 0440 0080                  		subi.w	#$80,d0
000029F2 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000029F6 4E75                       		rts	
000029F8                            ; End of function CalcSine
000029F8                            

000029F8                            ; ===========================================================================
000029F8                            

000029F8                            Sine_Data:	incbin	"misc\sinewave.bin"	; values for a 360° sine wave
00002C78                            

00002C78                            ; ===========================================================================
00002C78                            ; ===========================================================================
00002C78                            		include	"_incObj\sub CalcAngle.asm"
00002C78                            ; ---------------------------------------------------------------------------
00002C78                            ; Subroutine calculate an angle
00002C78                            

00002C78                            ; input:
00002C78                            ;	d1 = x-axis distance
00002C78                            ;	d2 = y-axis distance
00002C78                            

00002C78                            ; output:
00002C78                            ;	d0 = angle
00002C78                            ; ---------------------------------------------------------------------------
00002C78                            

00002C78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002C78                            

00002C78                            

00002C78                            CalcAngle:
00002C78 48E7 1800                  		movem.l	d3-d4,-(sp)
00002C7C 7600                       		moveq	#0,d3
00002C7E 7800                       		moveq	#0,d4
00002C80 3601                       		move.w	d1,d3
00002C82 3802                       		move.w	d2,d4
00002C84 8843                       		or.w	d3,d4
00002C86 6700                       		beq.s	loc_2D04
00002C88 3802                       		move.w	d2,d4
00002C8A 4A43                       		tst.w	d3
00002C8C 6A00 0000                  		bpl.w	loc_2CC2
00002C90 4443                       		neg.w	d3
00002C92                            

00002C92                            loc_2CC2:
00002C92 4A44                       		tst.w	d4
00002C94 6A00 0000                  		bpl.w	loc_2CCA
00002C98 4444                       		neg.w	d4
00002C9A                            

00002C9A                            loc_2CCA:
00002C9A B843                       		cmp.w	d3,d4
00002C9C 6400 0000                  		bcc.w	loc_2CDC
00002CA0 E18C                       		lsl.l	#8,d4
00002CA2 88C3                       		divu.w	d3,d4
00002CA4 7000                       		moveq	#0,d0
00002CA6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CAA 6000                       		bra.s	loc_2CE6
00002CAC                            ; ===========================================================================
00002CAC                            

00002CAC                            loc_2CDC:
00002CAC E18B                       		lsl.l	#8,d3
00002CAE 86C4                       		divu.w	d4,d3
00002CB0 7040                       		moveq	#$40,d0
00002CB2 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CB6                            

00002CB6                            loc_2CE6:
00002CB6 4A41                       		tst.w	d1
00002CB8 6A00 0000                  		bpl.w	loc_2CF2
00002CBC 4440                       		neg.w	d0
00002CBE 0640 0080                  		addi.w	#$80,d0
00002CC2                            

00002CC2                            loc_2CF2:
00002CC2 4A42                       		tst.w	d2
00002CC4 6A00 0000                  		bpl.w	loc_2CFE
00002CC8 4440                       		neg.w	d0
00002CCA 0640 0100                  		addi.w	#$100,d0
00002CCE                            

00002CCE                            loc_2CFE:
00002CCE 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CD2 4E75                       		rts	
00002CD4                            ; ===========================================================================
00002CD4                            

00002CD4                            loc_2D04:
00002CD4 303C 0040                  		move.w	#$40,d0
00002CD8 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002CDC 4E75                       		rts	
00002CDE                            ; End of function CalcAngle
00002CDE                            

00002CDE                            ; ===========================================================================
00002CDE                            

00002CDE                            Angle_Data:	incbin	"misc\angles.bin"
00002DE0                            

00002DE0                            ; ===========================================================================
00002DE0                            ; ===========================================================================
00002DE0                            

00002DE0                            ; ---------------------------------------------------------------------------
00002DE0                            ; Sega screen
00002DE0                            ; ---------------------------------------------------------------------------
00002DE0                            

00002DE0                            GM_Sega:
00002DE0 103C 0000                  		move.b	#bgm_Stop,d0
00002DE4 6100 E5BC                  		bsr.w	PlaySound_Special ; stop music
00002DE8 6100 E7FA                  		bsr.w	ClearPLC
00002DEC 6100 F06A                  		bsr.w	PaletteFadeOut
00002DF0 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00002DF6 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
00002DFA 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00002DFE 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00002E02 3CBC 8700                  		move.w	#$8700,(a6)	; set background colour (palette entry 0)
00002E06 3CBC 8B00                  		move.w	#$8B00,(a6)	; full-screen vertical scrolling
00002E0A 4238 F64E                  		clr.b	(f_wtr_state).w
00002E0E 46FC 2700                  		disable_ints
00002E12 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00002E16 0200 00BF                  		andi.b	#$BF,d0
00002E1A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00002E20 6100 E4B0                  		bsr.w	ClearScreen
00002E2E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E34 6100 E610                  		bsr.w	NemDec
00002E38 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E3E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E44 303C 0000                  		move.w	#0,d0
00002E48 6100 E8DA                  		bsr.w	EniDec
00002E4C                            

00002E74                            

00002E74 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
00002E78 6B00                       			bmi.s   @loadpal
00002E8E                            

00002E8E                            	@loadpal:
00002E8E 7000                       		moveq	#palid_SegaBG,d0
00002E90 6100 F28C                  		bsr.w	PalLoad2	; load Sega logo palette
00002E94 31FC FFF6 F632             		move.w	#-$A,(v_pcyc_num).w
00002E9A 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w
00002EA0 31FC 0000 F662             		move.w	#0,(v_pal_buffer+$12).w
00002EA6 31FC 0000 F660             		move.w	#0,(v_pal_buffer+$10).w
00002EAC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00002EB0 0000 0040                  		ori.b	#$40,d0
00002EB4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00002EBA                            

00002EBA                            Sega_WaitPal:
00002EBA 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00002EC0 6100 FAEC                  		bsr.w	WaitForVBla
00002EC4 6100 F14A                  		bsr.w	PalCycle_Sega
00002EC8 66F0                       		bne.s	Sega_WaitPal
00002ECA                            

00002ECA 103C 0000                  		move.b	#sfx_Sega,d0
00002ECE 6100 E4D2                  		bsr.w	PlaySound_Special	; play "SEGA" sound
00002ED2 11FC 0014 F62A             		move.b	#$14,(v_vbla_routine).w
00002ED8 6100 FAD4                  		bsr.w	WaitForVBla
00002EDC 31FC 001E F614             		move.w	#$1E,(v_demolength).w
00002EE2                            

00002EE2                            Sega_WaitEnd:
00002EE2 11FC 0002 F62A             		move.b	#2,(v_vbla_routine).w
00002EE8 6100 FAC4                  		bsr.w	WaitForVBla
00002EEC 4A78 F614                  		tst.w	(v_demolength).w
00002EF0 6700                       		beq.s	Sega_GotoTitle
00002EF2 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
00002EF8 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002EFA                            

00002EFA                            Sega_GotoTitle:
00002EFA 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00002F00 4E75                       		rts	
00002F02                            ; ===========================================================================
00002F02                            

00002F02                            ; ---------------------------------------------------------------------------
00002F02                            ; Title	screen
00002F02                            ; ---------------------------------------------------------------------------
00002F02                            

00002F02                            GM_Title:
00002F02 103C 0000                  		move.b	#bgm_Stop,d0
00002F06 6100 E49A                  		bsr.w	PlaySound_Special ; stop music
00002F0A 6100 E6D8                  		bsr.w	ClearPLC
00002F0E 6100 EF48                  		bsr.w	PaletteFadeOut
00002F12 46FC 2700                  		disable_ints
00002F16 6100 E440                  		bsr.w	SoundDriverLoad
00002F1A 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00002F20 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
00002F24 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00002F28 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00002F2C 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00002F30 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
00002F34 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F38 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (palette line 2, entry 0)
00002F3C 4238 F64E                  		clr.b	(f_wtr_state).w
00002F40 6100 E390                  		bsr.w	ClearScreen
00002F44                            

00002F44 43F8 D000                  		lea	(v_objspace).w,a1
00002F48 7000                       		moveq	#0,d0
00002F4A 323C 07FF                  		move.w	#$7FF,d1
00002F4E                            

00002F4E                            	Tit_ClrObj1:
00002F4E 22C0                       		move.l	d0,(a1)+
00002F50 51C9 FFFC                  		dbf	d1,Tit_ClrObj1	; fill object space ($D000-$EFFF) with 0
00002F54                            

00002F5E 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002F64 6100 E4E0                  		bsr.w	NemDec
00002F72 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002F78 6100 E4CC                  		bsr.w	NemDec
00002F7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00002F82 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002F88 303C 0000                  		move.w	#0,d0
00002F8C 6100 E796                  		bsr.w	EniDec
00002F90                            

00002FA4                            

00002FA4 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00002FA8 7000                       		moveq	#cBlack,d0
00002FAA 323C 001F                  		move.w	#$1F,d1
00002FAE                            

00002FAE                            	Tit_ClrPal:
00002FAE 22C0                       		move.l	d0,(a1)+
00002FB0 51C9 FFFC                  		dbf	d1,Tit_ClrPal	; fill palette with 0 (black)
00002FB4                            

00002FB4 7003                       		moveq	#palid_Sonic,d0	; load Sonic's palette
00002FB6 6100 F14A                  		bsr.w	PalLoad1
00002FBA 11FC 0000 D080             		move.b	#id_CreditsText,(v_sonicteam).w ; load "SONIC TEAM PRESENTS" object
00002FC0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00002FC6 4EB9 0000 0000             		jsr	(BuildSprites).l
00002FCC 6100 EDE4                  		bsr.w	PaletteFadeIn
00002FD0 46FC 2700                  		disable_ints
00002FDE 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00002FE4 6100 E460                  		bsr.w	NemDec
00002FF2 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00002FF8 6100 E44C                  		bsr.w	NemDec
00003006 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
0000300C 6100 E438                  		bsr.w	NemDec
00003010 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000301E 4BF9 0000 05FE             		lea	(Art_Text).l,a5	; load level select font
00003024 323C 028F                  		move.w	#$28F,d1
00003028                            

00003028                            	Tit_LoadText:
00003028 3C9D                       		move.w	(a5)+,(a6)
0000302A 51C9 FFFC                  		dbf	d1,Tit_LoadText	; load level select font
0000302E                            

0000302E 11FC 0000 FE30             		move.b	#0,(v_lastlamp).w ; clear lamppost counter
00003034 31FC 0000 FE08             		move.w	#0,(v_debuguse).w ; disable debug item placement mode
0000303A 31FC 0000 FFF0             		move.w	#0,(f_demo).w	; disable debug mode
00003040 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w ; unused variable
00003046 31FC 0000 FE10             		move.w	#(id_GHZ<<8),(v_zone).w	; set level to GHZ (00)
0000304C 31FC 0000 F634             		move.w	#0,(v_pcyc_time).w ; disable palette cycling
00003052 6100 0000                  		bsr.w	LevelSizeLoad
00003056 6100 0000                  		bsr.w	DeformLayers
0000305A 43F8 B000                  		lea	(v_16x16).w,a1
0000305E 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003064 303C 0000                  		move.w	#0,d0
00003068 6100 E6BA                  		bsr.w	EniDec
0000306C 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003072 43F9 00FF 0000             		lea	(v_256x256).l,a1
00003078 6100 E828                  		bsr.w	KosDec
0000307C 6100 0000                  		bsr.w	LevelLayoutLoad
00003080 6100 EDD6                  		bsr.w	PaletteFadeOut
00003084 46FC 2700                  		disable_ints
00003088 6100 E248                  		bsr.w	ClearScreen
0000308C 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00003092 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00003098 47F8 F708                  		lea	(v_bgscreenposx).w,a3
0000309C 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000030A0 343C 6000                  		move.w	#$6000,d2
000030A4 6100 0000                  		bsr.w	DrawChunks
000030A8 43F9 00FF 0000             		lea	($FF0000).l,a1
000030AE 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000030B4 303C 0000                  		move.w	#0,d0
000030B8 6100 E66A                  		bsr.w	EniDec
000030BC                            

000030D0                            

000030DA 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000030E0 6100 E364                  		bsr.w	NemDec
000030E4 7001                       		moveq	#palid_Title,d0	; load title screen palette
000030E6 6100 F01A                  		bsr.w	PalLoad1
000030EA 103C 0000                  		move.b	#bgm_Title,d0
000030EE 6100 E2B2                  		bsr.w	PlaySound_Special	; play title screen music
000030F2 11FC 0000 FFFA             		move.b	#0,(f_debugmode).w ; disable debug mode
000030F8 31FC 0178 F614             		move.w	#$178,(v_demolength).w ; run title screen for $178 frames
000030FE                            		
000030FE                            		; Bug: this only clears half of the "SONIC TEAM PRESENTS" slot.
000030FE                            		; This is responsible for why the "PRESS START BUTTON" text doesn't
000030FE                            		; show up, as the routine ID isn't reset.
000030FE 43F8 D080                  		lea	(v_sonicteam).w,a1
00003102 7000                       		moveq	#0,d0
00003104 323C 0007                  		move.w	#7,d1			; should be $F
00003108                            

00003108                            	Tit_ClrObj2:
00003108 22C0                       		move.l	d0,(a1)+
0000310A 51C9 FFFC                  		dbf	d1,Tit_ClrObj2
0000310E                            

0000310E 11FC 0000 D040             		move.b	#id_TitleSonic,(v_titlesonic).w ; load big Sonic object
00003114 11FC 0000 D080             		move.b	#id_PSBTM,(v_pressstart).w ; load "PRESS START BUTTON" object
0000311A                            		;clr.b	(v_pressstart+obRoutine).w ; The 'Mega Games 10' version of Sonic 1 added this line, to fix the 'PRESS START BUTTON' object not appearing
0000311A                            

0000311A 4A38 FFF8                  			tst.b   (v_megadrive).w	; is console Japanese?
0000311E 6A00                       			bpl.s   @isjap		; if yes, branch
00003120                            

00003120 11FC 0000 D0C0             		move.b	#id_PSBTM,(v_titletm).w ; load "TM" object
00003126 11FC 0003 D0DA             		move.b	#3,(v_titletm+obFrame).w
0000312C                            	@isjap:
0000312C 11FC 0000 D100             		move.b	#id_PSBTM,(v_ttlsonichide).w ; load object which hides part of Sonic
00003132 11FC 0002 D11A             		move.b	#2,(v_ttlsonichide+obFrame).w
00003138 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000313E 6100 0000                  		bsr.w	DeformLayers
00003142 4EB9 0000 0000             		jsr	(BuildSprites).l
00003148 7000                       		moveq	#plcid_Main,d0
0000314A 6100 E46C                  		bsr.w	NewPLC
0000314E 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w
00003154 31FC 0000 FFE6             		move.w	#0,(v_title_ccount).w
0000315A 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000315E 0000 0040                  		ori.b	#$40,d0
00003162 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00003168 6100 EC48                  		bsr.w	PaletteFadeIn
0000316C                            

0000316C                            Tit_MainLoop:
0000316C 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00003172 6100 F83A                  		bsr.w	WaitForVBla
00003176 4EB9 0000 0000             		jsr	(ExecuteObjects).l
0000317C 6100 0000                  		bsr.w	DeformLayers
00003180 4EB9 0000 0000             		jsr	(BuildSprites).l
00003186 6100 E7DA                  		bsr.w	PCycle_Title
0000318A 6100 E466                  		bsr.w	RunPLC
0000318E 3038 D008                  		move.w	(v_objspace+obX).w,d0
00003192 5440                       		addq.w	#2,d0
00003194 31C0 D008                  		move.w	d0,(v_objspace+obX).w ; move Sonic to the right
00003198 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed $1C00 on x-axis?
0000319C 6500                       		blo.s	Tit_ChkRegion	; if not, branch
0000319E                            

0000319E 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
000031A4 4E75                       		rts	
000031A6                            ; ===========================================================================
000031A6                            

000031A6                            Tit_ChkRegion:
000031A6 4A38 FFF8                  		tst.b	(v_megadrive).w	; check	if the machine is US or	Japanese
000031AA 6A00                       		bpl.s	Tit_RegionJap	; if Japanese, branch
000031AC                            

000031AC 41F9 0000 0000             		lea	(LevSelCode_US).l,a0 ; load US code
000031B2 6000                       		bra.s	Tit_EnterCheat
000031B4                            

000031B4                            	Tit_RegionJap:
000031B4 41F9 0000 0000             		lea	(LevSelCode_J).l,a0 ; load J code
000031BA                            

000031BA                            Tit_EnterCheat:
000031BA 3038 FFE4                  		move.w	(v_title_dcount).w,d0
000031BE D0C0                       		adda.w	d0,a0
000031C0 1038 F605                  		move.b	(v_jpadpress1).w,d0 ; get button press
000031C4 0200 000F                  		andi.b	#btnDir,d0	; read only UDLR buttons
000031C8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000031CA 6600                       		bne.s	Tit_ResetCheat	; if not, branch
000031CC 5278 FFE4                  		addq.w	#1,(v_title_dcount).w ; next button press
000031D0 4A00                       		tst.b	d0
000031D2 6600                       		bne.s	Tit_CountC
000031D4 41F8 FFE0                  		lea	(f_levselcheat).w,a0
000031D8 3238 FFE6                  		move.w	(v_title_ccount).w,d1
000031DC E249                       		lsr.w	#1,d1
000031DE 0241 0003                  		andi.w	#3,d1
000031E2 6700                       		beq.s	Tit_PlayRing
000031E4 4A38 FFF8                  		tst.b	(v_megadrive).w
000031E8 6A00                       		bpl.s	Tit_PlayRing
000031EA 7201                       		moveq	#1,d1
000031EC 1181 1001                  		move.b	d1,1(a0,d1.w)	; cheat depends on how many times C is pressed
000031F0                            

000031F0                            	Tit_PlayRing:
000031F0 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
000031F6 103C 0000                  		move.b	#sfx_Ring,d0
000031FA 6100 E1A6                  		bsr.w	PlaySound_Special	; play ring sound when code is entered
000031FE 6000                       		bra.s	Tit_CountC
00003200                            ; ===========================================================================
00003200                            

00003200                            Tit_ResetCheat:
00003200 4A00                       		tst.b	d0
00003202 6700                       		beq.s	Tit_CountC
00003204 0C78 0009 FFE4             		cmpi.w	#9,(v_title_dcount).w
0000320A 6700                       		beq.s	Tit_CountC
0000320C 31FC 0000 FFE4             		move.w	#0,(v_title_dcount).w ; reset UDLR counter
00003212                            

00003212                            Tit_CountC:
00003212 1038 F605                  		move.b	(v_jpadpress1).w,d0
00003216 0200 0020                  		andi.b	#btnC,d0	; is C button pressed?
0000321A 6700                       		beq.s	loc_3230	; if not, branch
0000321C 5278 FFE6                  		addq.w	#1,(v_title_ccount).w ; increment C counter
00003220                            

00003220                            loc_3230:
00003220 4A78 F614                  		tst.w	(v_demolength).w
00003224 6700 0000                  		beq.w	GotoDemo
00003228 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; check if Start is pressed
0000322E 6700 FF3C                  		beq.w	Tit_MainLoop	; if not, branch
00003232                            

00003232                            Tit_ChkLevSel:
00003232 4A38 FFE0                  		tst.b	(f_levselcheat).w ; check if level select code is on
00003236 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000323A 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; check if A is pressed
00003240 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003244                            

00003244 7002                       		moveq	#palid_LevelSel,d0
00003246 6100 EED6                  		bsr.w	PalLoad2	; load level select palette
0000324A 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000324E 7000                       		moveq	#0,d0
00003250 323C 00DF                  		move.w	#$DF,d1
00003254                            

00003254                            	Tit_ClrScroll1:
00003254 22C0                       		move.l	d0,(a1)+
00003256 51C9 FFFC                  		dbf	d1,Tit_ClrScroll1 ; clear scroll data (in RAM)
0000325A                            

0000325A 21C0 F616                  		move.l	d0,(v_scrposy_vdp).w
0000325E 46FC 2700                  		disable_ints
00003262 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00003272 323C 03FF                  		move.w	#$3FF,d1
00003276                            

00003276                            	Tit_ClrScroll2:
00003276 2C80                       		move.l	d0,(a6)
00003278 51C9 FFFC                  		dbf	d1,Tit_ClrScroll2 ; clear scroll data (in VRAM)
0000327C                            

0000327C 6100 0000                  		bsr.w	LevSelTextLoad
00003280                            

00003280                            ; ---------------------------------------------------------------------------
00003280                            ; Level	Select
00003280                            ; ---------------------------------------------------------------------------
00003280                            

00003280                            LevelSelect:
00003280 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00003286 6100 F726                  		bsr.w	WaitForVBla
0000328A 6100 0000                  		bsr.w	LevSelControls
0000328E 6100 E362                  		bsr.w	RunPLC
00003292 4AB8 F680                  		tst.l	(v_plc_buffer).w
00003296 66E8                       		bne.s	LevelSelect
00003298 0238 00F0 F605             		andi.b	#btnABC+btnStart,(v_jpadpress1).w ; is A, B, C, or Start pressed?
0000329E 67E0                       		beq.s	LevelSelect	; if not, branch
000032A0 3038 FF82                  		move.w	(v_levselitem).w,d0
000032A4 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000032A8 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000032AA 3038 FF84                  		move.w	(v_levselsound).w,d0
000032AE 0640 0080                  		addi.w	#$80,d0
000032B2 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is Japanese Credits cheat on?
000032B6 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000032B8 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000032BC 6700                       		beq.s	LevSel_Ending	; if yes, branch
000032BE 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000032C2 6700                       		beq.s	LevSel_Credits	; if yes, branch
000032C4                            

000032C4                            LevSel_NoCheat:
000032C4                            		; This is a workaround for a bug; see PlaySoundID for more.
000032C4                            		; Once you've fixed the bugs there, comment these four instructions out.
000032C4 0C40 0000                  		cmpi.w	#bgm__Last+1,d0	; is sound $80-$93 being played?
000032C8 6500                       		blo.s	LevSel_PlaySnd	; if yes, branch
000032CA 0C40 00A0                  		cmpi.w	#sfx__First,d0	; is sound $94-$9F being played?
000032CE 65B0                       		blo.s	LevelSelect	; if yes, branch
000032D0                            

000032D0                            LevSel_PlaySnd:
000032D0 6100 E0D0                  		bsr.w	PlaySound_Special
000032D4 60AA                       		bra.s	LevelSelect
000032D6                            ; ===========================================================================
000032D6                            

000032D6                            LevSel_Ending:
000032D6 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w ; set screen mode to $18 (Ending)
000032DC 31FC 0600 FE10             		move.w	#(id_EndZ<<8),(v_zone).w ; set level to 0600 (Ending)
000032E2 4E75                       		rts	
000032E4                            ; ===========================================================================
000032E4                            

000032E4                            LevSel_Credits:
000032E4 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; set screen mode to $1C (Credits)
000032EA 103C 0000                  		move.b	#bgm_Credits,d0
000032EE 6100 E0B2                  		bsr.w	PlaySound_Special ; play credits music
000032F2 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w
000032F8 4E75                       		rts	
000032FA                            ; ===========================================================================
000032FA                            

000032FA                            LevSel_Level_SS:
000032FA D040                       		add.w	d0,d0
000032FC 303B 0000                  		move.w	LevSel_Ptrs(pc,d0.w),d0 ; load level number
00003300 6B00 FF7E                  		bmi.w	LevelSelect
00003304 0C40 0700                  		cmpi.w	#id_SS*$100,d0	; check	if level is 0700 (Special Stage)
00003308 6600                       		bne.s	LevSel_Level	; if not, branch
0000330A 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
00003310 4278 FE10                  		clr.w	(v_zone).w	; clear	level
00003314 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000331A 7000                       		moveq	#0,d0
0000331C 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00003320 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00003324 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00003328 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00003330 4E75                       		rts	
00003332                            ; ===========================================================================
00003332                            

00003332                            LevSel_Level:
00003332 0240 3FFF                  		andi.w	#$3FFF,d0
00003336 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000333A                            

0000333A                            PlayLevel:
0000333A 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00003340 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00003346 7000                       		moveq	#0,d0
00003348 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
0000334C 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00003350 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00003354 11C0 FE16                  		move.b	d0,(v_lastspecial).w ; clear special stage number
00003358 11C0 FE57                  		move.b	d0,(v_emeralds).w ; clear emeralds
0000335C 21C0 FE58                  		move.l	d0,(v_emldlist).w ; clear emeralds
00003360 21C0 FE5C                  		move.l	d0,(v_emldlist+4).w ; clear emeralds
00003364 11C0 FE18                  		move.b	d0,(v_continues).w ; clear continues
00003368 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00003370 103C 0000                  		move.b	#bgm_Fade,d0
00003374 6100 E02C                  		bsr.w	PlaySound_Special ; fade out music
00003378 4E75                       		rts	
0000337A                            ; ===========================================================================
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            ; Level	select - level pointers
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            		; correct level order
0000337A 0000                       		dc.b id_GHZ, 0
0000337C 0001                       		dc.b id_GHZ, 1
0000337E 0002                       		dc.b id_GHZ, 2
00003380 0200                       		dc.b id_MZ, 0
00003382 0201                       		dc.b id_MZ, 1
00003384 0202                       		dc.b id_MZ, 2
00003386 0400                       		dc.b id_SYZ, 0
00003388 0401                       		dc.b id_SYZ, 1
0000338A 0402                       		dc.b id_SYZ, 2
0000338C 0100                       		dc.b id_LZ, 0
0000338E 0101                       		dc.b id_LZ, 1
00003390 0102                       		dc.b id_LZ, 2
00003392 0300                       		dc.b id_SLZ, 0
00003394 0301                       		dc.b id_SLZ, 1
00003396 0302                       		dc.b id_SLZ, 2
00003398 0500                       		dc.b id_SBZ, 0
0000339A 0501                       		dc.b id_SBZ, 1
0000339C 0103                       		dc.b id_LZ, 3
0000339E 0502                       		dc.b id_SBZ, 2
000033A0 0700                       		dc.b id_SS, 0		; Special Stage
000033A2 8000                       		dc.w $8000		; Sound Test
000033A4                            		even
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            ; Level	select codes
000033A4                            ; ---------------------------------------------------------------------------
000033A4 0102 0202 0408 00FF        		dc.b btnUp,btnDn,btnDn,btnDn,btnL,btnR,0,$FF
000033AC                            		even
000033AC                            

000033AC 0102 0408 00FF             LevSelCode_US:	dc.b btnUp,btnDn,btnL,btnR,0,$FF
000033B2                            		even
000033B2                            ; ===========================================================================
000033B2                            

000033B2                            ; ---------------------------------------------------------------------------
000033B2                            ; Demo mode
000033B2                            ; ---------------------------------------------------------------------------
000033B2                            

000033B2                            GotoDemo:
000033B2 31FC 001E F614             		move.w	#$1E,(v_demolength).w
000033B8                            

000033B8                            loc_33B6:
000033B8 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000033BE 6100 F5EE                  		bsr.w	WaitForVBla
000033C2 6100 0000                  		bsr.w	DeformLayers
000033C6 6100 E57A                  		bsr.w	PaletteCycle
000033CA 6100 E226                  		bsr.w	RunPLC
000033CE 3038 D008                  		move.w	(v_objspace+obX).w,d0
000033D2 5440                       		addq.w	#2,d0
000033D4 31C0 D008                  		move.w	d0,(v_objspace+obX).w
000033D8 0C40 1C00                  		cmpi.w	#$1C00,d0
000033DC 6500                       		blo.s	loc_33E4
000033DE 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
000033E4 4E75                       		rts	
000033E6                            ; ===========================================================================
000033E6                            

000033E6                            loc_33E4:
000033E6 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000033EC 6600 FE44                  		bne.w	Tit_ChkLevSel	; if yes, branch
000033F0 4A78 F614                  		tst.w	(v_demolength).w
000033F4 6600 FFC2                  		bne.w	loc_33B6
000033F8 103C 0000                  		move.b	#bgm_Fade,d0
000033FC 6100 DFA4                  		bsr.w	PlaySound_Special ; fade out music
00003400 3038 FFF2                  		move.w	(v_demonum).w,d0 ; load	demo number
00003404 0240 0007                  		andi.w	#7,d0
00003408 D040                       		add.w	d0,d0
0000340A 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000340E 31C0 FE10                  		move.w	d0,(v_zone).w
00003412 5278 FFF2                  		addq.w	#1,(v_demonum).w ; add 1 to demo number
00003416 0C78 0004 FFF2             		cmpi.w	#4,(v_demonum).w ; is demo number less than 4?
0000341C 6500                       		blo.s	loc_3422	; if yes, branch
0000341E 31FC 0000 FFF2             		move.w	#0,(v_demonum).w ; reset demo number to	0
00003424                            

00003424                            loc_3422:
00003424 31FC 0001 FFF0             		move.w	#1,(f_demo).w	; turn demo mode on
0000342A 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set screen mode to 08 (demo)
00003430 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003434 6600                       		bne.s	Demo_Level	; if not, branch
00003436 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set screen mode to $10 (Special Stage)
0000343C 4278 FE10                  		clr.w	(v_zone).w	; clear	level number
00003440 4238 FE16                  		clr.b	(v_lastspecial).w ; clear special stage number
00003444                            

00003444                            Demo_Level:
00003444 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
0000344A 7000                       		moveq	#0,d0
0000344C 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00003450 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00003454 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00003458 21FC 0000 1388 FFC0        			move.l	#5000,(v_scorelife).w ; extra life is awarded at 50000 points
00003460 4E75                       		rts	
00003462                            ; ===========================================================================
00003462                            ; ---------------------------------------------------------------------------
00003462                            ; Levels used in demos
00003462                            ; ---------------------------------------------------------------------------
00003462                            Demo_Levels:	incbin	"misc\Demo Level Order - Intro.bin"
0000346A                            		even
0000346A                            

0000346A                            ; ---------------------------------------------------------------------------
0000346A                            ; Subroutine to	change what you're selecting in the level select
0000346A                            ; ---------------------------------------------------------------------------
0000346A                            

0000346A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000346A                            

0000346A                            

0000346A                            LevSelControls:
0000346A 1238 F605                  		move.b	(v_jpadpress1).w,d1
0000346E 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed and held?
00003472 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003474 5378 FF80                  		subq.w	#1,(v_levseldelay).w ; subtract 1 from time to next move
00003478 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
0000347A                            

0000347A                            LevSel_UpDown:
0000347A 31FC 000B FF80             		move.w	#$B,(v_levseldelay).w ; reset time delay
00003480 1238 F604                  		move.b	(v_jpadhold1).w,d1
00003484 0201 0003                  		andi.b	#btnUp+btnDn,d1	; is up/down pressed?
00003488 6700                       		beq.s	LevSel_SndTest	; if not, branch
0000348A 3038 FF82                  		move.w	(v_levselitem).w,d0
0000348E 0801 0000                  		btst	#bitUp,d1	; is up	pressed?
00003492 6700                       		beq.s	LevSel_Down	; if not, branch
00003494 5340                       		subq.w	#1,d0		; move up 1 selection
00003496 6400                       		bhs.s	LevSel_Down
00003498 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
0000349A                            

0000349A                            LevSel_Down:
0000349A 0801 0001                  		btst	#bitDn,d1	; is down pressed?
0000349E 6700                       		beq.s	LevSel_Refresh	; if not, branch
000034A0 5240                       		addq.w	#1,d0		; move down 1 selection
000034A2 0C40 0015                  		cmpi.w	#$15,d0
000034A6 6500                       		blo.s	LevSel_Refresh
000034A8 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000034AA                            

000034AA                            LevSel_Refresh:
000034AA 31C0 FF82                  		move.w	d0,(v_levselitem).w ; set new selection
000034AE 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034B2 4E75                       		rts	
000034B4                            ; ===========================================================================
000034B4                            

000034B4                            LevSel_SndTest:
000034B4 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w ; is item $14 selected?
000034BA 6600                       		bne.s	LevSel_NoMove	; if not, branch
000034BC 1238 F605                  		move.b	(v_jpadpress1).w,d1
000034C0 0201 000C                  		andi.b	#btnR+btnL,d1	; is left/right	pressed?
000034C4 6700                       		beq.s	LevSel_NoMove	; if not, branch
000034C6 3038 FF84                  		move.w	(v_levselsound).w,d0
000034CA 0801 0002                  		btst	#bitL,d1	; is left pressed?
000034CE 6700                       		beq.s	LevSel_Right	; if not, branch
000034D0 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000034D2 6400                       		bhs.s	LevSel_Right
000034D4 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000034D6                            

000034D6                            LevSel_Right:
000034D6 0801 0003                  		btst	#bitR,d1	; is right pressed?
000034DA 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000034DC 5240                       		addq.w	#1,d0		; add 1	to sound test
000034DE 0C40 0050                  		cmpi.w	#$50,d0
000034E2 6500                       		blo.s	LevSel_Refresh2
000034E4 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000034E6                            

000034E6                            LevSel_Refresh2:
000034E6 31C0 FF84                  		move.w	d0,(v_levselsound).w ; set sound test number
000034EA 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034EE                            

000034EE                            LevSel_NoMove:
000034EE 4E75                       		rts	
000034F0                            ; End of function LevSelControls
000034F0                            

000034F0                            ; ---------------------------------------------------------------------------
000034F0                            ; Subroutine to load level select text
000034F0                            ; ---------------------------------------------------------------------------
000034F0                            

000034F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034F0                            

000034F0                            

000034F0                            LevSelTextLoad:
000034F0                            

000034F0 =62100003                  	textpos:	= ($40000000+(($E210&$3FFF)<<16)+(($E210&$C000)>>14))
000034F0                            					; $E210 is a VRAM address
000034F0                            

000034F0 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000034F6 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000034FC 283C 6210 0003             		move.l	#textpos,d4	; text position on screen
00003502 363C E680                  		move.w	#$E680,d3	; VRAM setting (4th palette, $680th tile)
00003506 7214                       		moveq	#$14,d1		; number of lines of text
00003508                            

00003508                            	LevSel_DrawAll:
00003508 2D44 0004                  		move.l	d4,4(a6)
0000350C 6100 0000                  		bsr.w	LevSel_ChgLine	; draw line of text
00003510 0684 0080 0000             		addi.l	#$800000,d4	; jump to next line
00003516 51C9 FFF0                  		dbf	d1,LevSel_DrawAll
0000351A                            

0000351A 7000                       		moveq	#0,d0
0000351C 3038 FF82                  		move.w	(v_levselitem).w,d0
00003520 3200                       		move.w	d0,d1
00003522 283C 6210 0003             		move.l	#textpos,d4
00003528 EF48                       		lsl.w	#7,d0
0000352A 4840                       		swap	d0
0000352C D880                       		add.l	d0,d4
0000352E 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003534 E749                       		lsl.w	#3,d1
00003536 3001                       		move.w	d1,d0
00003538 D241                       		add.w	d1,d1
0000353A D240                       		add.w	d0,d1
0000353C D2C1                       		adda.w	d1,a1
0000353E 363C C680                  		move.w	#$C680,d3	; VRAM setting (3rd palette, $680th tile)
00003542 2D44 0004                  		move.l	d4,4(a6)
00003546 6100 0000                  		bsr.w	LevSel_ChgLine	; recolour selected line
0000354A 363C E680                  		move.w	#$E680,d3
0000354E 0C78 0014 FF82             		cmpi.w	#$14,(v_levselitem).w
00003554 6600                       		bne.s	LevSel_DrawSnd
00003556 363C C680                  		move.w	#$C680,d3
0000355A                            

0000355A                            LevSel_DrawSnd:
00003564 3038 FF84                  		move.w	(v_levselsound).w,d0
00003568 0640 0080                  		addi.w	#$80,d0
0000356C 1400                       		move.b	d0,d2
0000356E E808                       		lsr.b	#4,d0
00003570 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 1st digit
00003574 1002                       		move.b	d2,d0
00003576 6100 0000                  		bsr.w	LevSel_ChgSnd	; draw 2nd digit
0000357A 4E75                       		rts	
0000357C                            ; End of function LevSelTextLoad
0000357C                            

0000357C                            

0000357C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000357C                            

0000357C                            

0000357C                            LevSel_ChgSnd:
0000357C 0240 000F                  		andi.w	#$F,d0
00003580 0C00 000A                  		cmpi.b	#$A,d0		; is digit $A-$F?
00003584 6500                       		blo.s	LevSel_Numb	; if not, branch
00003586 0600 0007                  		addi.b	#7,d0		; use alpha characters
0000358A                            

0000358A                            	LevSel_Numb:
0000358A D043                       		add.w	d3,d0
0000358C 3C80                       		move.w	d0,(a6)
0000358E 4E75                       		rts	
00003590                            ; End of function LevSel_ChgSnd
00003590                            

00003590                            

00003590                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003590                            

00003590                            

00003590                            LevSel_ChgLine:
00003590 7417                       		moveq	#$17,d2		; number of characters per line
00003592                            

00003592                            	LevSel_LineLoop:
00003592 7000                       		moveq	#0,d0
00003594 1019                       		move.b	(a1)+,d0	; get character
00003596 6A00                       		bpl.s	LevSel_CharOk	; branch if valid
00003598 3CBC 0000                  		move.w	#0,(a6)		; use blank character
0000359C 51CA FFF4                  		dbf	d2,LevSel_LineLoop
000035A0 4E75                       		rts	
000035A2                            

000035A2                            

000035A2                            	LevSel_CharOk:
000035A2 D043                       		add.w	d3,d0		; combine char with VRAM setting
000035A4 3C80                       		move.w	d0,(a6)		; send to VRAM
000035A6 51CA FFEA                  		dbf	d2,LevSel_LineLoop
000035AA 4E75                       		rts	
000035AC                            ; End of function LevSel_ChgLine
000035AC                            

000035AC                            ; ===========================================================================
000035AC                            ; ---------------------------------------------------------------------------
000035AC                            ; Level	select menu text
000035AC                            ; ---------------------------------------------------------------------------
000035AC                            		incbin	"misc\Level Select Text (JP1).bin"
000037A4                            		even
000037A4                            ; ---------------------------------------------------------------------------
000037A4                            ; Music	playlist
000037A4                            ; ---------------------------------------------------------------------------
000037A4                            MusicList:
000037A4 00                         		dc.b bgm_GHZ	; GHZ
000037A5 00                         		dc.b bgm_LZ	; LZ
000037A6 00                         		dc.b bgm_MZ	; MZ
000037A7 00                         		dc.b bgm_SLZ	; SLZ
000037A8 00                         		dc.b bgm_SYZ	; SYZ
000037A9 00                         		dc.b bgm_SBZ	; SBZ
000037AA 00                         		dc.b bgm_FZ	; Ending
000037AC 00                         		even
000037AC                            ; ===========================================================================
000037AC                            

000037AC                            ; ---------------------------------------------------------------------------
000037AC                            ; Level
000037AC                            ; ---------------------------------------------------------------------------
000037AC                            

000037AC                            GM_Level:
000037AC 08F8 0007 F600             		bset	#7,(v_gamemode).w ; add $80 to screen mode (for pre level sequence)
000037B2 4A78 FFF0                  		tst.w	(f_demo).w
000037B6 6B00                       		bmi.s	Level_NoMusicFade
000037B8 103C 0000                  		move.b	#bgm_Fade,d0
000037BC 6100 DBE4                  		bsr.w	PlaySound_Special ; fade out music
000037C0                            

000037C0                            	Level_NoMusicFade:
000037C0 6100 DE22                  		bsr.w	ClearPLC
000037C4 6100 E692                  		bsr.w	PaletteFadeOut
000037C8 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
000037CC 6B00                       		bmi.s	Level_ClrRam	; if yes, branch
000037CE 46FC 2700                  		disable_ints
000037DC 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000037E2 6100 DC62                  		bsr.w	NemDec
000037E6 46FC 2300                  		enable_ints
000037EA 7000                       		moveq	#0,d0
000037EC 1038 FE10                  		move.b	(v_zone).w,d0
000037F0 E948                       		lsl.w	#4,d0
000037F2 45F9 0000 0000             		lea	(LevelHeaders).l,a2
000037F8 45F2 0000                  		lea	(a2,d0.w),a2
000037FC 7000                       		moveq	#0,d0
000037FE 1012                       		move.b	(a2),d0
00003800 6700                       		beq.s	loc_37FC
00003802 6100 DD82                  		bsr.w	AddPLC		; load level patterns
00003806                            

00003806                            loc_37FC:
00003806 7000                       		moveq	#plcid_Main2,d0
00003808 6100 DD7C                  		bsr.w	AddPLC		; load standard	patterns
0000380C                            

0000380C                            Level_ClrRam:
0000380C 43F8 D000                  		lea	(v_objspace).w,a1
00003810 7000                       		moveq	#0,d0
00003812 323C 07FF                  		move.w	#$7FF,d1
00003816                            

00003816                            	Level_ClrObjRam:
00003816 22C0                       		move.l	d0,(a1)+
00003818 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
0000381C                            

0000381C 43F8 F628                  		lea	($FFFFF628).w,a1
00003820 7000                       		moveq	#0,d0
00003822 323C 0015                  		move.w	#$15,d1
00003826                            

00003826                            	Level_ClrVars1:
00003826 22C0                       		move.l	d0,(a1)+
00003828 51C9 FFFC                  		dbf	d1,Level_ClrVars1 ; clear misc variables
0000382C                            

0000382C 43F8 F700                  		lea	(v_screenposx).w,a1
00003830 7000                       		moveq	#0,d0
00003832 323C 003F                  		move.w	#$3F,d1
00003836                            

00003836                            	Level_ClrVars2:
00003836 22C0                       		move.l	d0,(a1)+
00003838 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
0000383C                            

0000383C 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00003840 7000                       		moveq	#0,d0
00003842 323C 0047                  		move.w	#$47,d1
00003846                            

00003846                            	Level_ClrVars3:
00003846 22C0                       		move.l	d0,(a1)+
00003848 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
0000384C                            

0000384C 46FC 2700                  		disable_ints
00003850 6100 DA80                  		bsr.w	ClearScreen
00003854 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000385A 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000385E 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00003862 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00003866 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
0000386A 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
0000386E 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00003872 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00003876 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
0000387C 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
00003880 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
00003886 6600                       		bne.s	Level_LoadPal	; if not, branch
00003888                            

00003888 3CBC 8014                  		move.w	#$8014,(a6)	; enable H-interrupts
0000388C 7000                       		moveq	#0,d0
0000388E 1038 FE11                  		move.b	(v_act).w,d0
00003892 D040                       		add.w	d0,d0
00003894 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000389A 3031 0000                  		move.w	(a1,d0.w),d0
0000389E 31C0 F646                  		move.w	d0,(v_waterpos1).w ; set water heights
000038A2 31C0 F648                  		move.w	d0,(v_waterpos2).w
000038A6 31C0 F64A                  		move.w	d0,(v_waterpos3).w
000038AA 4238 F64D                  		clr.b	(v_wtr_routine).w ; clear water routine counter
000038AE 4238 F64E                  		clr.b	(f_wtr_state).w	; clear	water state
000038B2 11FC 0001 F64C             		move.b	#1,(f_water).w	; enable water
000038B8                            

000038B8                            Level_LoadPal:
000038B8 31FC 001E FE14             		move.w	#30,(v_air).w
000038BE 46FC 2300                  		enable_ints
000038C2 7003                       		moveq	#palid_Sonic,d0
000038C4 6100 E858                  		bsr.w	PalLoad2	; load Sonic's palette
000038C8 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
000038CE 6600                       		bne.s	Level_GetBgm	; if not, branch
000038D0                            

000038D0 700F                       		moveq	#palid_LZSonWater,d0 ; palette number $F (LZ)
000038D2 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is act number 3?
000038D8 6600                       		bne.s	Level_WaterPal	; if not, branch
000038DA 7010                       		moveq	#palid_SBZ3SonWat,d0 ; palette number $10 (SBZ3)
000038DC                            

000038DC                            	Level_WaterPal:
000038DC 6100 E858                  		bsr.w	PalLoad3_Water	; load underwater palette
000038E0 4A38 FE30                  		tst.b	(v_lastlamp).w
000038E4 6700                       		beq.s	Level_GetBgm
000038E6 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
000038EC                            

000038EC                            Level_GetBgm:
000038EC 4A78 FFF0                  		tst.w	(f_demo).w
000038F0 6B00                       		bmi.s	Level_SkipTtlCard
000038F2 7000                       		moveq	#0,d0
000038F4 1038 FE10                  		move.b	(v_zone).w,d0
000038F8 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3?
000038FE 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
00003900 7005                       		moveq	#5,d0		; use 5th music (SBZ)
00003902                            

00003902                            	Level_BgmNotLZ4:
00003902 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00003908 6600                       		bne.s	Level_PlayBgm	; if not, branch
0000390A 7006                       		moveq	#6,d0		; use 6th music (FZ)
0000390C                            

0000390C                            	Level_PlayBgm:
0000390C 43F9 0000 37A4             		lea	(MusicList).l,a1 ; load	music playlist
00003912 1031 0000                  		move.b	(a1,d0.w),d0
00003916 6100 DA84                  		bsr.w	PlaySound	; play music
0000391A 11FC 0000 D080             		move.b	#id_TitleCard,(v_titlecard).w ; load title card object
00003920                            

00003920                            Level_TtlCardLoop:
00003920 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00003926 6100 F086                  		bsr.w	WaitForVBla
0000392A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00003930 4EB9 0000 0000             		jsr	(BuildSprites).l
00003936 6100 DCBA                  		bsr.w	RunPLC
0000393A 3038 D108                  		move.w	(v_ttlcardact+obX).w,d0
0000393E B078 0000                  		cmp.w	(v_ttlcardact+card_mainX).w,d0 ; has title card sequence finished?
00003942 66DC                       		bne.s	Level_TtlCardLoop ; if not, branch
00003944 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are there any items in the pattern load cue?
00003948 66D6                       		bne.s	Level_TtlCardLoop ; if yes, branch
0000394A 4EB9 0000 0000             		jsr	(Hud_Base).l	; load basic HUD gfx
00003950                            

00003950                            	Level_SkipTtlCard:
00003950 7003                       		moveq	#palid_Sonic,d0
00003952 6100 E7AE                  		bsr.w	PalLoad1	; load Sonic's palette
00003956 6100 0000                  		bsr.w	LevelSizeLoad
0000395A 6100 0000                  		bsr.w	DeformLayers
0000395E 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
00003964 6100 0000                  		bsr.w	LevelDataLoad ; load block mappings and palettes
00003968 6100 0000                  		bsr.w	LoadTilesFromStart
0000396C 4EB9 0000 0000             		jsr	(ConvertCollisionArray).l
00003972 6100 0000                  		bsr.w	ColIndexLoad
00003976 6100 0000                  		bsr.w	LZWaterFeatures
0000397A 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00003980 4A78 FFF0                  		tst.w	(f_demo).w
00003984 6B00                       		bmi.s	Level_ChkDebug
00003986 11FC 0000 D040             		move.b	#id_HUD,(v_hud).w ; load HUD object
0000398C                            

0000398C                            Level_ChkDebug:
0000398C 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00003990 6700                       		beq.s	Level_ChkWater	; if not, branch
00003992 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button held?
00003998 6700                       		beq.s	Level_ChkWater	; if not, branch
0000399A 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
000039A0                            

000039A0                            Level_ChkWater:
000039A0 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
000039A6 31FC 0000 F604             		move.w	#0,(v_jpadhold1).w
000039AC 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ?
000039B2 6600                       		bne.s	Level_LoadObj	; if not, branch
000039B4 11FC 0000 D780             		move.b	#id_WaterSurface,(v_watersurface1).w ; load water surface object
000039BA 31FC 0060 D788             		move.w	#$60,(v_watersurface1+obX).w
000039C0 11FC 0000 D7C0             		move.b	#id_WaterSurface,(v_watersurface2).w
000039C6 31FC 0120 D7C8             		move.w	#$120,(v_watersurface2+obX).w
000039CC                            

000039CC                            Level_LoadObj:
000039CC 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000039D2 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000039D8 4EB9 0000 0000             		jsr	(BuildSprites).l
000039DE 7000                       		moveq	#0,d0
000039E0 4A38 FE30                  		tst.b	(v_lastlamp).w	; are you starting from	a lamppost?
000039E4 6600                       		bne.s	Level_SkipClr	; if yes, branch
000039E6 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000039EA 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000039EE 11C0 FE1B                  		move.b	d0,(v_lifecount).w ; clear lives counter
000039F2                            

000039F2                            	Level_SkipClr:
000039F2 11C0 FE1A                  		move.b	d0,(f_timeover).w
000039F6 11C0 FE2C                  		move.b	d0,(v_shield).w	; clear shield
000039FA 11C0 FE2D                  		move.b	d0,(v_invinc).w	; clear invincibility
000039FE 11C0 FE2E                  		move.b	d0,(v_shoes).w	; clear speed shoes
00003A02 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00003A06 31C0 FE08                  		move.w	d0,(v_debuguse).w
00003A0A 31C0 FE02                  		move.w	d0,(f_restart).w
00003A0E 31C0 FE04                  		move.w	d0,(v_framecount).w
00003A12 6100 0000                  		bsr.w	OscillateNumInit
00003A16 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
00003A1C 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w ; update rings counter
00003A22 11FC 0001 FE1E             		move.b	#1,(f_timecount).w ; update time counter
00003A28 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
00003A2E 43F9 0000 0000             		lea	(DemoDataPtr).l,a1 ; load demo data
00003A34 7000                       		moveq	#0,d0
00003A36 1038 FE10                  		move.b	(v_zone).w,d0
00003A3A E548                       		lsl.w	#2,d0
00003A3C 2271 0000                  		movea.l	(a1,d0.w),a1
00003A40 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00003A44 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003A46 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1 ; load ending demo data
00003A4C 3038 FFF4                  		move.w	(v_creditsnum).w,d0
00003A50 5340                       		subq.w	#1,d0
00003A52 E548                       		lsl.w	#2,d0
00003A54 2271 0000                  		movea.l	(a1,d0.w),a1
00003A58                            

00003A58                            Level_Demo:
00003A58 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w ; load key press duration
00003A5E 5338 F792                  		subq.b	#1,(v_btnpushtime2).w ; subtract 1 from duration
00003A62 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00003A68 4A78 FFF0                  		tst.w	(f_demo).w
00003A6C 6A00                       		bpl.s	Level_ChkWaterPal
00003A6E 31FC 021C F614             		move.w	#540,(v_demolength).w
00003A74 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w
00003A7A 6600                       		bne.s	Level_ChkWaterPal
00003A7C 31FC 01FE F614             		move.w	#510,(v_demolength).w
00003A82                            

00003A82                            Level_ChkWaterPal:
00003A82 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; is level LZ/SBZ3?
00003A88 6600                       		bne.s	Level_Delay	; if not, branch
00003A8A 700B                       		moveq	#palid_LZWater,d0 ; palette $B (LZ underwater)
00003A8C 0C38 0003 FE11             		cmpi.b	#3,(v_act).w	; is level SBZ3?
00003A92 6600                       		bne.s	Level_WtrNotSbz	; if not, branch
00003A94 700D                       		moveq	#palid_SBZ3Water,d0 ; palette $D (SBZ3 underwater)
00003A96                            

00003A96                            	Level_WtrNotSbz:
00003A96 6100 E6BA                  		bsr.w	PalLoad4_Water
00003A9A                            

00003A9A                            Level_Delay:
00003A9A 323C 0003                  		move.w	#3,d1
00003A9E                            

00003A9E                            	Level_DelayLoop:
00003A9E 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00003AA4 6100 EF08                  		bsr.w	WaitForVBla
00003AA8 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003AAC                            

00003AAC 31FC 202F F626             		move.w	#$202F,(v_pfade_start).w ; fade in 2nd, 3rd & 4th palette lines
00003AB2 6100 E304                  		bsr.w	PalFadeIn_Alt
00003AB6 4A78 FFF0                  		tst.w	(f_demo).w	; is an ending sequence demo running?
00003ABA 6B00                       		bmi.s	Level_ClrCardArt ; if yes, branch
00003ABC 5438 D0A4                  		addq.b	#2,(v_ttlcardname+obRoutine).w ; make title card move
00003AC0 5838 D0E4                  		addq.b	#4,(v_ttlcardzone+obRoutine).w
00003AC4 5838 D124                  		addq.b	#4,(v_ttlcardact+obRoutine).w
00003AC8 5838 D164                  		addq.b	#4,(v_ttlcardoval+obRoutine).w
00003ACC 6000                       		bra.s	Level_StartGame
00003ACE                            ; ===========================================================================
00003ACE                            

00003ACE                            Level_ClrCardArt:
00003ACE 7000                       		moveq	#plcid_Explode,d0
00003AD0 4EB9 0000 1586             		jsr	(AddPLC).l	; load explosion gfx
00003AD6 7000                       		moveq	#0,d0
00003AD8 1038 FE10                  		move.b	(v_zone).w,d0
00003ADC 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
00003AE0 4EB9 0000 1586             		jsr	(AddPLC).l	; load animal gfx (level no. + $15)
00003AE6                            

00003AE6                            Level_StartGame:
00003AE6 08B8 0007 F600             		bclr	#7,(v_gamemode).w ; subtract $80 from mode to end pre-level stuff
00003AEC                            

00003AEC                            ; ---------------------------------------------------------------------------
00003AEC                            ; Main level loop (when	all title card and loading sequences are finished)
00003AEC                            ; ---------------------------------------------------------------------------
00003AEC                            

00003AEC                            Level_MainLoop:
00003AEC 6100 D8C0                  		bsr.w	PauseGame
00003AF0 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00003AF6 6100 EEB6                  		bsr.w	WaitForVBla
00003AFA 5278 FE04                  		addq.w	#1,(v_framecount).w ; add 1 to level timer
00003AFE 6100 0000                  		bsr.w	MoveSonicInDemo
00003B02 6100 0000                  		bsr.w	LZWaterFeatures
00003B06 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00003B0C 4A78 FE02                  			tst.w   (f_restart).w
00003B10 6600 FC9A                  			bne     GM_Level
00003B14 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
00003B18 6600                       		bne.s	Level_DoScroll	; if yes, branch
00003B1A 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00003B20 6400                       		bhs.s	Level_SkipScroll ; if yes, branch
00003B22                            

00003B22                            	Level_DoScroll:
00003B22 6100 0000                  		bsr.w	DeformLayers
00003B26                            

00003B26                            	Level_SkipScroll:
00003B26 4EB9 0000 0000             		jsr	(BuildSprites).l
00003B2C 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00003B32 6100 DE0E                  		bsr.w	PaletteCycle
00003B36 6100 DABA                  		bsr.w	RunPLC
00003B3A 6100 0000                  		bsr.w	OscillateNumDo
00003B3E 6100 0000                  		bsr.w	SynchroAnimate
00003B42 6100 0000                  		bsr.w	SignpostArtLoad
00003B46                            

00003B46 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00003B4C 6700                       		beq.s	Level_ChkDemo	; if mode is 8 (demo), branch
00003B4E 0C38 0000 F600             		cmpi.b	#id_Level,(v_gamemode).w
00003B54 6700 FF96                  		beq.w	Level_MainLoop	; if mode is $C (level), branch
00003B58 4E75                       		rts	
00003B5A                            ; ===========================================================================
00003B5A                            

00003B5A                            Level_ChkDemo:
00003B5A 4A78 FE02                  		tst.w	(f_restart).w	; is level set to restart?
00003B5E 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003B60 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00003B64 6700                       		beq.s	Level_EndDemo	; if not, branch
00003B66 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00003B6C 6700 FF7E                  		beq.w	Level_MainLoop	; if mode is 8 (demo), branch
00003B70 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00003B76 4E75                       		rts	
00003B78                            ; ===========================================================================
00003B78                            

00003B78                            Level_EndDemo:
00003B78 0C38 0000 F600             		cmpi.b	#id_Demo,(v_gamemode).w
00003B7E 6600                       		bne.s	Level_FadeDemo	; if mode is 8 (demo), branch
00003B80 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00003B86 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on & not ending sequence?
00003B8A 6A00                       		bpl.s	Level_FadeDemo	; if yes, branch
00003B8C 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; go to credits
00003B92                            

00003B92                            Level_FadeDemo:
00003B92 31FC 003C F614             		move.w	#$3C,(v_demolength).w
00003B98 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00003B9E 4278 F794                  		clr.w	(v_palchgspeed).w
00003BA2                            

00003BA2                            	Level_FDLoop:
00003BA2 11FC 0008 F62A             		move.b	#8,(v_vbla_routine).w
00003BA8 6100 EE04                  		bsr.w	WaitForVBla
00003BAC 6100 0000                  		bsr.w	MoveSonicInDemo
00003BB0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00003BB6 4EB9 0000 0000             		jsr	(BuildSprites).l
00003BBC 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00003BC2 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00003BC6 6A00                       		bpl.s	loc_3BC8
00003BC8 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
00003BCE 6100 E2A8                  		bsr.w	FadeOut_ToBlack
00003BD2                            

00003BD2                            loc_3BC8:
00003BD2 4A78 F614                  		tst.w	(v_demolength).w
00003BD6 66CA                       		bne.s	Level_FDLoop
00003BD8 4E75                       		rts	
00003BDA                            ; ===========================================================================
00003BDA                            

00003BDA                            		include	"_inc\LZWaterFeatures.asm"
00003BDA                            ; ---------------------------------------------------------------------------
00003BDA                            ; Subroutine to	do special water effects in Labyrinth Zone
00003BDA                            ; ---------------------------------------------------------------------------
00003BDA                            

00003BDA                            LZWaterFeatures:
00003BDA 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00003BE0 6600                       		bne.s	@notlabyrinth	; if not, branch
00003BE2 4A38 F744                  			tst.b   (f_nobgscroll).w
00003BE6 6600                       			bne.s	@setheight
00003BE8 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00003BEE 6400                       		bcc.s	@setheight	; if yes, skip other effects
00003BF0                            

00003BF0 6100 0000                  		bsr.w	LZWindTunnels
00003BF4 6100 0000                  		bsr.w	LZWaterSlides
00003BF8 6100 0000                  		bsr.w	LZDynamicWater
00003BFC                            

00003BFC                            @setheight:
00003BFC 4238 F64E                  		clr.b	(f_wtr_state).w
00003C00 7000                       		moveq	#0,d0
00003C02 1038 FE60                  		move.b	(v_oscillate+2).w,d0
00003C06 E248                       		lsr.w	#1,d0
00003C08 D078 F648                  		add.w	(v_waterpos2).w,d0
00003C0C 31C0 F646                  		move.w	d0,(v_waterpos1).w
00003C10 3038 F646                  		move.w	(v_waterpos1).w,d0
00003C14 9078 F704                  		sub.w	(v_screenposy).w,d0
00003C18 6400                       		bcc.s	@isbelow
00003C1A 4A40                       		tst.w	d0
00003C1C 6A00                       		bpl.s	@isbelow	; if water is below top of screen, branch
00003C1E                            

00003C1E 11FC 00DF F625             		move.b	#223,(v_hbla_line).w
00003C24 11FC 0001 F64E             		move.b	#1,(f_wtr_state).w ; screen is all underwater
00003C2A                            

00003C2A                            	@isbelow:
00003C2A 0C40 00DF                  		cmpi.w	#223,d0		; is water within 223 pixels of top of screen?
00003C2E 6500                       		bcs.s	@isvisible	; if yes, branch
00003C30 303C 00DF                  		move.w	#223,d0
00003C34                            

00003C34                            	@isvisible:
00003C34 11C0 F625                  		move.b	d0,(v_hbla_line).w ; set water surface as on-screen
00003C38                            

00003C38                            @notlabyrinth:
00003C38 4E75                       		rts	
00003C3A                            ; ===========================================================================
00003C3A                            ; ---------------------------------------------------------------------------
00003C3A                            ; Initial water heights
00003C3A                            ; ---------------------------------------------------------------------------
00003C3A 00B8                       WaterHeight:	dc.w $B8	; Labyrinth 1
00003C3C 0328                       		dc.w $328	; Labyrinth 2
00003C3E 0900                       		dc.w $900	; Labyrinth 3
00003C40 0228                       		dc.w $228	; Scrap Brain 3
00003C42                            		even
00003C42                            ; ===========================================================================
00003C42                            

00003C42                            ; ---------------------------------------------------------------------------
00003C42                            ; Labyrinth dynamic water routines
00003C42                            ; ---------------------------------------------------------------------------
00003C42                            

00003C42                            LZDynamicWater:
00003C42 7000                       		moveq	#0,d0
00003C44 1038 FE11                  		move.b	(v_act).w,d0
00003C48 D040                       		add.w	d0,d0
00003C4A 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003C4E 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003C52 7200                       		moveq	#0,d1
00003C54 1238 F64C                  		move.b	(f_water).w,d1
00003C58 3038 F64A                  		move.w	(v_waterpos3).w,d0
00003C5C 9078 F648                  		sub.w	(v_waterpos2).w,d0
00003C60 6700                       		beq.s	@exit		; if water level is correct, branch
00003C62 6400                       		bcc.s	@movewater	; if water level is too high, branch
00003C64 4441                       		neg.w	d1		; set water to move up instead
00003C66                            

00003C66                            	@movewater:
00003C66 D378 F648                  		add.w	d1,(v_waterpos2).w ; move water up/down
00003C6A                            

00003C6A                            	@exit:
00003C6A 4E75                       		rts	
00003C6C                            ; ===========================================================================
00003C6C 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003C6E 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003C70 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003C72 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003C74                            ; ===========================================================================
00003C74                            

00003C74                            DynWater_LZ1:
00003C74 3038 F700                  		move.w	(v_screenposx).w,d0
00003C78 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00003C7C 6600                       		bne.s	@routine2
00003C7E 323C 00B8                  		move.w	#$B8,d1		; water height
00003C82 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached next position?
00003C86 6500                       		bcs.s	@setwater	; if not, branch
00003C88 323C 0108                  		move.w	#$108,d1
00003C8C 0C78 0200 D00C             		cmpi.w	#$200,(v_player+obY).w ; is Sonic above $200 y-axis?
00003C92 6500                       		bcs.s	@sonicishigh	; if yes, branch
00003C94 0C40 0C00                  		cmpi.w	#$C00,d0
00003C98 6500                       		bcs.s	@setwater
00003C9A 323C 0318                  		move.w	#$318,d1
00003C9E 0C40 1080                  		cmpi.w	#$1080,d0
00003CA2 6500                       		bcs.s	@setwater
00003CA4 11FC 0080 F7E5             		move.b	#$80,(f_switch+5).w
00003CAA 323C 05C8                  		move.w	#$5C8,d1
00003CAE 0C40 1380                  		cmpi.w	#$1380,d0
00003CB2 6500                       		bcs.s	@setwater
00003CB4 323C 03A8                  		move.w	#$3A8,d1
00003CB8 B278 F648                  		cmp.w	(v_waterpos2).w,d1 ; has water reached last height?
00003CBC 6600                       		bne.s	@setwater	; if not, branch
00003CBE 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00003CC4                            

00003CC4                            	@setwater:
00003CC4 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00003CC8 4E75                       		rts	
00003CCA                            ; ===========================================================================
00003CCA                            

00003CCA                            @sonicishigh:
00003CCA 0C40 0C80                  		cmpi.w	#$C80,d0
00003CCE 65F4                       		bcs.s	@setwater
00003CD0 323C 00E8                  		move.w	#$E8,d1
00003CD4 0C40 1500                  		cmpi.w	#$1500,d0
00003CD8 65EA                       		bcs.s	@setwater
00003CDA 323C 0108                  		move.w	#$108,d1
00003CDE 60E4                       		bra.s	@setwater
00003CE0                            ; ===========================================================================
00003CE0                            

00003CE0                            @routine2:
00003CE0 5302                       		subq.b	#1,d2
00003CE2 6600                       		bne.s	@skip
00003CE4 0C78 02E0 D00C             		cmpi.w	#$2E0,(v_player+obY).w ; is Sonic above $2E0 y-axis?
00003CEA 6400                       		bcc.s	@skip		; if not, branch
00003CEC 323C 03A8                  		move.w	#$3A8,d1
00003CF0 0C40 1300                  		cmpi.w	#$1300,d0
00003CF4 6500                       		bcs.s	@setwater2
00003CF6 323C 0108                  		move.w	#$108,d1
00003CFA 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00003D00                            

00003D00                            	@setwater2:
00003D00 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00003D04                            

00003D04                            	@skip:
00003D04 4E75                       		rts	
00003D06                            ; ===========================================================================
00003D06                            

00003D06                            DynWater_LZ2:
00003D06 3038 F700                  		move.w	(v_screenposx).w,d0
00003D0A 323C 0328                  		move.w	#$328,d1
00003D0E 0C40 0500                  		cmpi.w	#$500,d0
00003D12 6500                       		bcs.s	@setwater
00003D14 323C 03C8                  		move.w	#$3C8,d1
00003D18 0C40 0B00                  		cmpi.w	#$B00,d0
00003D1C 6500                       		bcs.s	@setwater
00003D1E 323C 0428                  		move.w	#$428,d1
00003D22                            

00003D22                            	@setwater:
00003D22 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00003D26 4E75                       		rts	
00003D28                            ; ===========================================================================
00003D28                            

00003D28                            DynWater_LZ3:
00003D28 3038 F700                  		move.w	(v_screenposx).w,d0
00003D2C 1438 F64D                  		move.b	(v_wtr_routine).w,d2
00003D30 6600                       		bne.s	@routine2
00003D32                            

00003D32 323C 0900                  		move.w	#$900,d1
00003D36 0C40 0600                  		cmpi.w	#$600,d0	; has screen reached position?
00003D3A 6500                       		bcs.s	@setwaterlz3	; if not, branch
00003D3C 0C78 03C0 D00C             		cmpi.w	#$3C0,(v_player+obY).w
00003D42 6500                       		bcs.s	@setwaterlz3
00003D44 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic in a y-axis range?
00003D4A 6400                       		bcc.s	@setwaterlz3	; if not, branch
00003D4C                            

00003D4C 323C 04C8                  		move.w	#$4C8,d1	; set new water height
00003D50 11FC 004B A506             		move.b	#$4B,(v_lvllayout+$106).w ; update level layout
00003D56 11FC 0001 F64D             		move.b	#1,(v_wtr_routine).w ; use second routine next
00003D5C 303C 0000                  		move.w	#sfx_Rumbling,d0
00003D60 6100 D640                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003D64                            

00003D64                            	@setwaterlz3:
00003D64 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00003D68 31C1 F648                  		move.w	d1,(v_waterpos2).w ; change water height instantly
00003D6C 4E75                       		rts	
00003D6E                            ; ===========================================================================
00003D6E                            

00003D6E                            @routine2:
00003D6E 5302                       		subq.b	#1,d2
00003D70 6600                       		bne.s	@routine3
00003D72 323C 04C8                  		move.w	#$4C8,d1
00003D76 0C40 0770                  		cmpi.w	#$770,d0
00003D7A 6500                       		bcs.s	@setwater2
00003D7C 323C 0308                  		move.w	#$308,d1
00003D80 0C40 1400                  		cmpi.w	#$1400,d0
00003D84 6500                       		bcs.s	@setwater2
00003D86 0C78 0508 F64A             		cmpi.w	#$508,(v_waterpos3).w
00003D8C 6700                       		beq.s	@sonicislow
00003D8E 0C78 0600 D00C             		cmpi.w	#$600,(v_player+obY).w ; is Sonic below $600 y-axis?
00003D94 6400                       		bcc.s	@sonicislow	; if yes, branch
00003D96 0C78 0280 D00C             		cmpi.w	#$280,(v_player+obY).w
00003D9C 6400                       		bcc.s	@setwater2
00003D9E                            

00003D9E                            @sonicislow:
00003D9E 323C 0508                  		move.w	#$508,d1
00003DA2 31C1 F648                  		move.w	d1,(v_waterpos2).w
00003DA6 0C40 1770                  		cmpi.w	#$1770,d0
00003DAA 6500                       		bcs.s	@setwater2
00003DAC 11FC 0002 F64D             		move.b	#2,(v_wtr_routine).w
00003DB2                            

00003DB2                            	@setwater2:
00003DB2 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00003DB6 4E75                       		rts	
00003DB8                            ; ===========================================================================
00003DB8                            

00003DB8                            @routine3:
00003DB8 5302                       		subq.b	#1,d2
00003DBA 6600                       		bne.s	@routine4
00003DBC 323C 0508                  		move.w	#$508,d1
00003DC0 0C40 1860                  		cmpi.w	#$1860,d0
00003DC4 6500                       		bcs.s	@setwater3
00003DC6 323C 0188                  		move.w	#$188,d1
00003DCA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DCE 6400                       		bcc.s	@loc_3DC6
00003DD0 B278 F648                  		cmp.w	(v_waterpos2).w,d1
00003DD4 6600                       		bne.s	@setwater3
00003DD6                            

00003DD6                            	@loc_3DC6:
00003DD6 11FC 0003 F64D             		move.b	#3,(v_wtr_routine).w
00003DDC                            

00003DDC                            	@setwater3:
00003DDC 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00003DE0 4E75                       		rts	
00003DE2                            ; ===========================================================================
00003DE2                            

00003DE2                            @routine4:
00003DE2 5302                       		subq.b	#1,d2
00003DE4 6600                       		bne.s	@routine5
00003DE6 323C 0188                  		move.w	#$188,d1
00003DEA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DEE 6500                       		bcs.s	@setwater4
00003DF0 323C 0900                  		move.w	#$900,d1
00003DF4 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003DF8 6500                       		bcs.s	@setwater4
00003DFA 11FC 0004 F64D             		move.b	#4,(v_wtr_routine).w
00003E00 31FC 0608 F64A             		move.w	#$608,(v_waterpos3).w
00003E06 31FC 07C0 F648             		move.w	#$7C0,(v_waterpos2).w
00003E0C 11FC 0001 F7E8             		move.b	#1,(f_switch+8).w
00003E12 4E75                       		rts	
00003E14                            ; ===========================================================================
00003E14                            

00003E14                            @setwater4:
00003E14 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00003E18 31C1 F648                  		move.w	d1,(v_waterpos2).w
00003E1C 4E75                       		rts	
00003E1E                            ; ===========================================================================
00003E1E                            

00003E1E                            @routine5:
00003E1E 0C40 1E00                  		cmpi.w	#$1E00,d0	; has screen passed final position?
00003E22 6500                       		bcs.s	@dontset	; if not, branch
00003E24 31FC 0128 F64A             		move.w	#$128,(v_waterpos3).w
00003E2A                            

00003E2A                            	@dontset:
00003E2A 4E75                       		rts	
00003E2C                            ; ===========================================================================
00003E2C                            

00003E2C                            DynWater_SBZ3:
00003E2C 323C 0228                  		move.w	#$228,d1
00003E30 0C78 0F00 F700             		cmpi.w	#$F00,(v_screenposx).w
00003E36 6500                       		bcs.s	@setwater
00003E38 323C 04C8                  		move.w	#$4C8,d1
00003E3C                            

00003E3C                            	@setwater:
00003E3C 31C1 F64A                  		move.w	d1,(v_waterpos3).w
00003E40 4E75                       		rts
00003E42                            

00003E42                            ; ---------------------------------------------------------------------------
00003E42                            ; Labyrinth Zone "wind tunnels"	subroutine
00003E42                            ; ---------------------------------------------------------------------------
00003E42                            

00003E42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E42                            

00003E42                            

00003E42                            LZWindTunnels:
00003E42 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00003E46 6600 0000                  		bne.w	@quit	; if yes, branch
00003E4A 45F9 0000 0000             		lea	(LZWind_Data+8).l,a2
00003E50 7000                       		moveq	#0,d0
00003E52 1038 FE11                  		move.b	(v_act).w,d0	; get act number
00003E56 E748                       		lsl.w	#3,d0		; multiply by 8
00003E58 D4C0                       		adda.w	d0,a2		; add to address for data
00003E5A 7200                       		moveq	#0,d1
00003E5C 4A38 FE11                  		tst.b	(v_act).w	; is act number 1?
00003E60 6600                       		bne.s	@notact1	; if not, branch
00003E62 7201                       		moveq	#1,d1
00003E64 514A                       		subq.w	#8,a2		; use different data for act 1
00003E66                            

00003E66                            	@notact1:
00003E66 43F8 D000                  		lea	(v_player).w,a1
00003E6A                            

00003E6A                            @chksonic:
00003E6A 3029 0008                  		move.w	obX(a1),d0
00003E6E B052                       		cmp.w	(a2),d0
00003E70 6500 0000                  		bcs.w	@chknext
00003E74 B06A 0004                  		cmp.w	4(a2),d0
00003E78 6400 0000                  		bcc.w	@chknext
00003E7C 3429 000C                  		move.w	obY(a1),d2
00003E80 B46A 0002                  		cmp.w	2(a2),d2
00003E84 6500                       		bcs.s	@chknext
00003E86 B46A 0006                  		cmp.w	6(a2),d2
00003E8A 6400                       		bcc.s	@chknext	; branch if Sonic is outside a range
00003E8C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00003E90 0200 003F                  		andi.b	#$3F,d0		; does VInt counter fall on 0, $40, $80 or $C0?
00003E94 6600                       		bne.s	@skipsound	; if not, branch
00003E96 303C 0000                  		move.w	#sfx_Waterfall,d0
00003E9A 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play rushing water sound (only every $40 frames)
00003EA0                            

00003EA0                            	@skipsound:
00003EA0 4A38 F7C9                  		tst.b	(f_wtunnelallow).w ; are wind tunnels disabled?
00003EA4 6600 0000                  		bne.w	@quit	; if yes, branch
00003EA8 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1) ; is Sonic hurt/dying?
00003EAE 6400                       		bcc.s	@clrquit	; if yes, branch
00003EB0 11FC 0001 F7C7             		move.b	#1,(f_wtunnelmode).w
00003EB6 0440 0080                  		subi.w	#$80,d0
00003EBA B052                       		cmp.w	(a2),d0
00003EBC 6400                       		bcc.s	@movesonic
00003EBE 7002                       		moveq	#2,d0
00003EC0 0C38 0001 FE11             		cmpi.b	#1,(v_act).w	; is act number 2?
00003EC6 6600                       		bne.s	@notact2	; if not, branch
00003EC8 4440                       		neg.w	d0
00003ECA                            

00003ECA                            	@notact2:
00003ECA D169 000C                  		add.w	d0,obY(a1)	; adjust Sonic's y-axis for curve of tunnel
00003ECE                            

00003ECE                            @movesonic:
00003ECE 5869 0008                  		addq.w	#4,obX(a1)
00003ED2 337C 0400 0010             		move.w	#$400,obVelX(a1) ; move Sonic horizontally
00003ED8 337C 0000 0012             		move.w	#0,obVelY(a1)
00003EDE 137C 0000 001C             		move.b	#id_Float2,obAnim(a1)	; use floating animation
00003EE4 08E9 0001 0022             		bset	#1,obStatus(a1)
00003EEA 0838 0000 F602             		btst	#0,(v_jpadhold2).w ; is up pressed?
00003EF0 6700                       		beq.s	@down		; if not, branch
00003EF2 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up on pole
00003EF6                            

00003EF6                            	@down:
00003EF6 0838 0001 F602             		btst	#1,(v_jpadhold2).w ; is down being pressed?
00003EFC 6700                       		beq.s	@end		; if not, branch
00003EFE 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down on pole
00003F02                            

00003F02                            	@end:
00003F02 4E75                       		rts	
00003F04                            ; ===========================================================================
00003F04                            

00003F04                            @chknext:
00003F04 504A                       		addq.w	#8,a2		; use second set of values (act 1 only)
00003F06 51C9 FF62                  		dbf	d1,@chksonic	; on act 1, repeat for a second tunnel
00003F0A 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic still in a tunnel?
00003F0E 6700                       		beq.s	@quit		; if yes, branch
00003F10 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
00003F16                            

00003F16                            @clrquit:
00003F16 4238 F7C7                  		clr.b	(f_wtunnelmode).w ; finish tunnel
00003F1A                            

00003F1A                            @quit:
00003F1A 4E75                       		rts	
00003F1C                            ; End of function LZWindTunnels
00003F1C                            

00003F1C                            ; ===========================================================================
00003F1C                            

00003F1C                            		;    left, top,  right, bottom boundaries
00003F1C 0A80 0300 0C10 0380        LZWind_Data:	dc.w $A80, $300, $C10,  $380 ; act 1 values (set 1)
00003F24 0F80 0100 1410 0180        		dc.w $F80, $100, $1410,	$180 ; act 1 values (set 2)
00003F2C 0460 0400 0710 0480        		dc.w $460, $400, $710,  $480 ; act 2 values
00003F34 0A20 0600 1610 06E0        		dc.w $A20, $600, $1610, $6E0 ; act 3 values
00003F3C 0C80 0600 13D0 0680        		dc.w $C80, $600, $13D0, $680 ; SBZ act 3 values
00003F44                            		even
00003F44                            

00003F44                            ; ---------------------------------------------------------------------------
00003F44                            ; Labyrinth Zone water slide subroutine
00003F44                            ; ---------------------------------------------------------------------------
00003F44                            

00003F44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F44                            

00003F44                            

00003F44                            LZWaterSlides:
00003F44 43F8 D000                  		lea	(v_player).w,a1
00003F48 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic jumping?
00003F4E 6600                       		bne.s	loc_3F6A	; if not, branch
00003F50 3029 000C                  		move.w	obY(a1),d0
00003F54 E248                       		lsr.w	#1,d0
00003F56 0240 0380                  		andi.w	#$380,d0
00003F5A 1229 0008                  		move.b	obX(a1),d1
00003F5E 0241 007F                  		andi.w	#$7F,d1
00003F62 D041                       		add.w	d1,d0
00003F64 45F8 A400                  		lea	(v_lvllayout).w,a2
00003F68 1032 0000                  		move.b	(a2,d0.w),d0
00003F6C 45FA 0000                  		lea	Slide_Chunks_End(pc),a2
00003F70 7200                       		moveq	#Slide_Chunks_End-Slide_Chunks-1,d1
00003F72                            

00003F72                            loc_3F62:
00003F72 B022                       		cmp.b	-(a2),d0
00003F74 57C9 FFFC                  		dbeq	d1,loc_3F62
00003F78 6700                       		beq.s	LZSlide_Move
00003F7A                            

00003F7A                            loc_3F6A:
00003F7A 4A38 F7CA                  		tst.b	(f_slidemode).w
00003F7E 6700                       		beq.s	locret_3F7A
00003F80 337C 0005 003E             		move.w	#5,$3E(a1)
00003F86 4238 F7CA                  		clr.b	(f_slidemode).w
00003F8A                            

00003F8A                            locret_3F7A:
00003F8A 4E75                       		rts	
00003F8C                            ; ===========================================================================
00003F8C                            

00003F8C                            LZSlide_Move:
00003F8C 0C41 0003                  		cmpi.w	#3,d1
00003F90 6400                       		bcc.s	loc_3F84
00003F92 4E71                       		nop	
00003F94                            

00003F94                            loc_3F84:
00003F94 08A9 0000 0022             		bclr	#0,obStatus(a1)
00003F9A 103B 1000                  		move.b	Slide_Speeds(pc,d1.w),d0
00003F9E 1340 0014                  		move.b	d0,obInertia(a1)
00003FA2 6A00                       		bpl.s	loc_3F9A
00003FA4 08E9 0000 0022             		bset	#0,obStatus(a1)
00003FAA                            

00003FAA                            loc_3F9A:
00003FAA 4229 0015                  		clr.b	obInertia+1(a1)
00003FAE 137C 0000 001C             		move.b	#id_WaterSlide,obAnim(a1) ; use Sonic's "sliding" animation
00003FB4 11FC 0001 F7CA             		move.b	#1,(f_slidemode).w	; set water slide flag
00003FBA 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00003FBE 0200 001F                  		andi.b	#$1F,d0
00003FC2 6600                       		bne.s	locret_3FBE
00003FC4 303C 0000                  		move.w	#sfx_Waterfall,d0
00003FC8 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play water sound
00003FCE                            

00003FCE                            locret_3FBE:
00003FCE 4E75                       		rts	
00003FD0                            ; End of function LZWaterSlides
00003FD0                            

00003FD0                            ; ===========================================================================
00003FD0                            ; byte_3FC0:
00003FD0                            Slide_Speeds:
00003FD0 0AF5 0AF6 F5F4 0B          		dc.b $A, $F5, $A, $F6, $F5, $F4, $B
00003FD8 00                         		even
00003FD8                            

00003FD8                            Slide_Chunks:
00003FD8 0207 034C 4B08 04          		dc.b 2, 7, 3, $4C, $4B, 8, 4
00003FDF                            ; byte_3FCF
00003FDF                            Slide_Chunks_End
00003FE0 00                         		even
00003FE0 00                         		even
00003FE0                            		include	"_inc\MoveSonicInDemo.asm"
00003FE0                            ; ---------------------------------------------------------------------------
00003FE0                            ; Subroutine to	move Sonic in demo mode
00003FE0                            ; ---------------------------------------------------------------------------
00003FE0                            

00003FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FE0                            

00003FE0                            

00003FE0                            MoveSonicInDemo:
00003FE0 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00003FE4 6600                       		bne.s	MDemo_On	; if yes, branch
00003FE6 4E75                       		rts	
00003FE8                            ; ===========================================================================
00003FE8                            

00003FE8                            ; This is an unused subroutine for recording a demo
00003FE8                            

00003FE8                            DemoRecorder:
00003FE8 43F9 0008 0000             		lea	($80000).l,a1
00003FEE 3038 F790                  		move.w	(v_btnpushtime1).w,d0
00003FF2 D2C0                       		adda.w	d0,a1
00003FF4 1038 F604                  		move.b	(v_jpadhold1).w,d0
00003FF8 B011                       		cmp.b	(a1),d0
00003FFA 6600                       		bne.s	@next
00003FFC 5229 0001                  		addq.b	#1,1(a1)
00004000 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004006 6700                       		beq.s	@next
00004008 4E75                       		rts	
0000400A                            

0000400A                            	@next:
0000400A 1340 0002                  		move.b	d0,2(a1)
0000400E 137C 0000 0003             		move.b	#0,3(a1)
00004014 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
00004018 0278 03FF F790             		andi.w	#$3FF,(v_btnpushtime1).w
0000401E 4E75                       		rts	
00004020                            ; ===========================================================================
00004020                            

00004020                            MDemo_On:
00004020 4A38 F604                  		tst.b	(v_jpadhold1).w	; is start button pressed?
00004024 6A00                       		bpl.s	@dontquit	; if not, branch
00004026 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
0000402A 6B00                       		bmi.s	@dontquit	; if yes, branch
0000402C 11FC 0000 F600             		move.b	#id_Title,(v_gamemode).w ; go to title screen
00004032                            

00004032                            	@dontquit:
00004032 43F9 0000 0000             		lea	(DemoDataPtr).l,a1
00004038 7000                       		moveq	#0,d0
0000403A 1038 FE10                  		move.b	(v_zone).w,d0
0000403E 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is this a special stage?
00004044 6600                       		bne.s	@notspecial	; if not, branch
00004046 7006                       		moveq	#6,d0		; use demo #6
00004048                            

00004048                            	@notspecial:
00004048 E548                       		lsl.w	#2,d0
0000404A 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for demo data
0000404E 4A78 FFF0                  		tst.w	(f_demo).w	; is this an ending sequence demo?
00004052 6A00                       		bpl.s	@notcredits	; if not, branch
00004054 43F9 0000 0000             		lea	(DemoEndDataPtr).l,a1
0000405A 3038 FFF4                  		move.w	(v_creditsnum).w,d0
0000405E 5340                       		subq.w	#1,d0
00004060 E548                       		lsl.w	#2,d0
00004062 2271 0000                  		movea.l	(a1,d0.w),a1	; fetch address for credits demo
00004066                            

00004066                            	@notcredits:
00004066 3038 F790                  		move.w	(v_btnpushtime1).w,d0
0000406A D2C0                       		adda.w	d0,a1
0000406C 1011                       		move.b	(a1),d0
0000406E 41F8 F604                  		lea	(v_jpadhold1).w,a0
00004072 1200                       		move.b	d0,d1
00004074 7400                       			moveq	#0,d2
00004076 B500                       		eor.b	d2,d0
00004078 10C1                       		move.b	d1,(a0)+
0000407A C001                       		and.b	d1,d0
0000407C 10C0                       		move.b	d0,(a0)+
0000407E 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00004082 6400                       		bcc.s	@end
00004084 11E9 0003 F792             		move.b	3(a1),(v_btnpushtime2).w
0000408A 5478 F790                  		addq.w	#2,(v_btnpushtime1).w
0000408E                            

0000408E                            	@end:
0000408E 4E75                       		rts	
00004090                            ; End of function MoveSonicInDemo
00004090                            

00004090                            ; ===========================================================================
00004090                            ; ---------------------------------------------------------------------------
00004090                            ; Demo sequence	pointers
00004090                            ; ---------------------------------------------------------------------------
00004090 0000 0000                  DemoDataPtr:	dc.l Demo_GHZ		; demos run after the title screen
00004094 0000 0000                  		dc.l Demo_GHZ
00004098 0000 0000                  		dc.l Demo_MZ
0000409C 0000 0000                  		dc.l Demo_MZ
000040A0 0000 0000                  		dc.l Demo_SYZ
000040A4 0000 0000                  		dc.l Demo_SYZ
000040A8 0000 0000                  		dc.l Demo_SS
000040AC 0000 0000                  		dc.l Demo_SS
000040B0                            

000040B0 0000 0000                  DemoEndDataPtr:	dc.l Demo_EndGHZ1	; demos run during the credits
000040B4 0000 0000                  		dc.l Demo_EndMZ
000040B8 0000 0000                  		dc.l Demo_EndSYZ
000040BC 0000 0000                  		dc.l Demo_EndLZ
000040C0 0000 0000                  		dc.l Demo_EndSLZ
000040C4 0000 0000                  		dc.l Demo_EndSBZ1
000040C8 0000 0000                  		dc.l Demo_EndSBZ2
000040CC 0000 0000                  		dc.l Demo_EndGHZ2
000040D0                            

000040D0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000040E0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000040F0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004100                            		even
00004100                            		even
00004100                            

00004100                            ; ---------------------------------------------------------------------------
00004100                            ; Collision index pointer loading subroutine
00004100                            ; ---------------------------------------------------------------------------
00004100                            

00004100                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004100                            

00004100                            

00004100                            ColIndexLoad:
00004100 7000                       		moveq	#0,d0
00004102 1038 FE10                  		move.b	(v_zone).w,d0
00004106 E548                       		lsl.w	#2,d0
00004108 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),(v_collindex).w
0000410E 4E75                       		rts	
00004110                            ; End of function ColIndexLoad
00004110                            

00004110                            ; ===========================================================================
00004110                            ; ---------------------------------------------------------------------------
00004110                            ; Collision index pointers
00004110                            ; ---------------------------------------------------------------------------
00004110 0000 0000                  ColPointers:	dc.l Col_GHZ
00004114 0000 0000                  		dc.l Col_LZ
00004118 0000 0000                  		dc.l Col_MZ
0000411C 0000 0000                  		dc.l Col_SLZ
00004120 0000 0000                  		dc.l Col_SYZ
00004124 0000 0000                  		dc.l Col_SBZ
00004128                            ;		dc.l Col_GHZ ; Pointer for Ending is missing by default.
00004128                            

00004128                            		include	"_inc\Oscillatory Routines.asm"
00004128                            ; ---------------------------------------------------------------------------
00004128                            ; Oscillating number subroutines
00004128                            ; ---------------------------------------------------------------------------
00004128                            

00004128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004128                            

00004128                            ; Initialise the values
00004128                            

00004128                            OscillateNumInit:
00004128 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000412C 45F9 0000 0000             		lea	(@baselines).l,a2
00004132 7220                       		moveq	#$20,d1
00004134                            

00004134                            	@loop:
00004134 32DA                       		move.w	(a2)+,(a1)+	; copy baseline values to RAM
00004136 51C9 FFFC                  		dbf	d1,@loop
0000413A 4E75                       		rts	
0000413C                            

0000413C                            

0000413C                            ; ===========================================================================
0000413C 007C                       @baselines:	dc.w %0000000001111100	; oscillation direction bitfield
0000413E 0080 0000                  		dc.w $80, 0
00004142 0080 0000                  		dc.w $80, 0
00004146 0080 0000                  		dc.w $80, 0
0000414A 0080 0000                  		dc.w $80, 0
0000414E 0080 0000                  		dc.w $80, 0
00004152 0080 0000                  		dc.w $80, 0
00004156 0080 0000                  		dc.w $80, 0
0000415A 0080 0000                  		dc.w $80, 0
0000415E 0080 0000                  		dc.w $80, 0
00004162 50F0 011E                  		dc.w $50F0, $11E
00004166 2080 00B4                  		dc.w $2080, $B4
0000416A 3080 010E                  		dc.w $3080, $10E
0000416E 5080 01C2                  		dc.w $5080, $1C2
00004172 7080 0276                  		dc.w $7080, $276
00004176 0080 0000                  		dc.w $80, 0
0000417A 0080 0000                  		dc.w $80, 0
0000417E                            		even
0000417E                            

0000417E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000417E                            

0000417E                            ; Oscillate values
0000417E                            

0000417E                            OscillateNumDo:
0000417E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; has Sonic just died?
00004184 6400                       		bcc.s	@end		; if yes, branch
00004186 43F8 FE5E                  		lea	(v_oscillate).w,a1
0000418A 45F9 0000 0000             		lea	(@settings).l,a2
00004190 3619                       		move.w	(a1)+,d3	; get oscillation direction bitfield
00004192 720F                       		moveq	#$F,d1
00004194                            

00004194                            @loop:
00004194 341A                       		move.w	(a2)+,d2	; get frequency
00004196 381A                       		move.w	(a2)+,d4	; get amplitude
00004198 0303                       		btst	d1,d3		; check oscillation direction
0000419A 6600                       		bne.s	@down		; branch if 1
0000419C                            

0000419C                            	@up:
0000419C 3029 0002                  		move.w	2(a1),d0	; get current rate
000041A0 D042                       		add.w	d2,d0		; add frequency
000041A2 3340 0002                  		move.w	d0,2(a1)
000041A6 D169 0000                  		add.w	d0,0(a1)	; add rate to value
000041AA B829 0000                  		cmp.b	0(a1),d4
000041AE 6200                       		bhi.s	@next
000041B0 03C3                       		bset	d1,d3
000041B2 6000                       		bra.s	@next
000041B4                            

000041B4                            	@down:
000041B4 3029 0002                  		move.w	2(a1),d0
000041B8 9042                       		sub.w	d2,d0
000041BA 3340 0002                  		move.w	d0,2(a1)
000041BE D169 0000                  		add.w	d0,0(a1)
000041C2 B829 0000                  		cmp.b	0(a1),d4
000041C6 6300                       		bls.s	@next
000041C8 0383                       		bclr	d1,d3
000041CA                            

000041CA                            	@next:
000041CA 5849                       		addq.w	#4,a1
000041CC 51C9 FFC6                  		dbf	d1,@loop
000041D0 31C3 FE5E                  		move.w	d3,(v_oscillate).w
000041D4                            

000041D4                            @end:
000041D4 4E75                       		rts	
000041D6                            ; End of function OscillateNumDo
000041D6                            

000041D6                            ; ===========================================================================
000041D6 0002 0010                  @settings:	dc.w 2,	$10	; frequency, amplitude
000041DA 0002 0018                  		dc.w 2,	$18
000041DE 0002 0020                  		dc.w 2,	$20
000041E2 0002 0030                  		dc.w 2,	$30
000041E6 0004 0020                  		dc.w 4,	$20
000041EA 0008 0008                  		dc.w 8,	8
000041EE 0008 0040                  		dc.w 8,	$40
000041F2 0004 0040                  		dc.w 4,	$40
000041F6 0002 0050                  		dc.w 2,	$50
000041FA 0002 0050                  		dc.w 2,	$50
000041FE 0002 0020                  		dc.w 2,	$20
00004202 0003 0030                  		dc.w 3,	$30
00004206 0005 0050                  		dc.w 5,	$50
0000420A 0007 0070                  		dc.w 7,	$70
0000420E 0002 0010                  		dc.w 2,	$10
00004212 0002 0010                  		dc.w 2,	$10
00004216                            		even
00004216                            		even
00004216                            

00004216                            ; ---------------------------------------------------------------------------
00004216                            ; Subroutine to	change synchronised animation variables (rings, giant rings)
00004216                            ; ---------------------------------------------------------------------------
00004216                            

00004216                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004216                            

00004216                            

00004216                            SynchroAnimate:
00004216                            

00004216                            ; Used for GHZ spiked log
00004216                            Sync1:
00004216 5338 FEC0                  		subq.b	#1,(v_ani0_time).w ; has timer reached 0?
0000421A 6A00                       		bpl.s	Sync2		; if not, branch
0000421C 11FC 000B FEC0             		move.b	#$B,(v_ani0_time).w ; reset timer
00004222 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w ; next frame
00004226 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w ; max frame is 7
0000422C                            

0000422C                            ; Used for rings and giant rings
0000422C                            Sync2:
0000422C 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
00004230 6A00                       		bpl.s	Sync3
00004232 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
00004238 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0000423C 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
00004242                            

00004242                            ; Used for nothing
00004242                            Sync3:
00004242 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
00004246 6A00                       		bpl.s	Sync4
00004248 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0000424E 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
00004252 0C38 0006 FEC5             		cmpi.b	#6,(v_ani2_frame).w
00004258 6500                       		blo.s	Sync4
0000425A 11FC 0000 FEC5             		move.b	#0,(v_ani2_frame).w
00004260                            

00004260                            ; Used for bouncing rings
00004260                            Sync4:
00004260 4A38 FEC6                  		tst.b	(v_ani3_time).w
00004264 6700                       		beq.s	SyncEnd
00004266 7000                       		moveq	#0,d0
00004268 1038 FEC6                  		move.b	(v_ani3_time).w,d0
0000426C D078 FEC8                  		add.w	(v_ani3_buf).w,d0
00004270 31C0 FEC8                  		move.w	d0,(v_ani3_buf).w
00004274 EF58                       		rol.w	#7,d0
00004276 0240 0003                  		andi.w	#3,d0
0000427A 11C0 FEC7                  		move.b	d0,(v_ani3_frame).w
0000427E 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
00004282                            

00004282                            SyncEnd:
00004282 4E75                       		rts	
00004284                            ; End of function SynchroAnimate
00004284                            

00004284                            ; ---------------------------------------------------------------------------
00004284                            ; End-of-act signpost pattern loading subroutine
00004284                            ; ---------------------------------------------------------------------------
00004284                            

00004284                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004284                            

00004284                            

00004284                            SignpostArtLoad:
00004284 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
00004288 6600 0000                  		bne.w	@exit		; if yes, branch
0000428C 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; is act number 02 (act 3)?
00004292 6700                       		beq.s	@exit		; if yes, branch
00004294                            

00004294 3038 F700                  		move.w	(v_screenposx).w,d0
00004298 3238 F72A                  		move.w	(v_limitright2).w,d1
0000429C 0441 0100                  		subi.w	#$100,d1
000042A0 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000042A2 6D00                       		blt.s	@exit		; if not, branch
000042A4 4A38 FE1E                  		tst.b	(f_timecount).w
000042A8 6700                       		beq.s	@exit
000042AA B278 F728                  		cmp.w	(v_limitleft2).w,d1
000042AE 6700                       		beq.s	@exit
000042B0 31C1 F728                  		move.w	d1,(v_limitleft2).w ; move left boundary to current screen position
000042B4 7000                       		moveq	#plcid_Signpost,d0
000042B6 6000 D300                  		bra.w	NewPLC		; load signpost	patterns
000042BA                            

000042BA                            	@exit:
000042BA 4E75                       		rts	
000042BC                            ; End of function SignpostArtLoad
000042BC                            

000042BC                            ; ===========================================================================
000042BC                            Demo_GHZ:	incbin	"demodata\Intro - GHZ.bin"
0000433C                            Demo_MZ:	incbin	"demodata\Intro - MZ.bin"
0000446C                            Demo_SYZ:	incbin	"demodata\Intro - SYZ.bin"
000044EC                            Demo_SS:	incbin	"demodata\Intro - Special Stage.bin"
000045EC                            ; ===========================================================================
000045EC                            

000045EC                            ; ---------------------------------------------------------------------------
000045EC                            ; Special Stage
000045EC                            ; ---------------------------------------------------------------------------
000045EC                            

000045EC                            GM_Special:
000045EC 303C 0000                  		move.w	#sfx_EnterSS,d0
000045F0 6100 CDB0                  		bsr.w	PlaySound_Special ; play special stage entry sound
000045F4 6100 D98C                  		bsr.w	PaletteWhiteOut
000045F8 46FC 2700                  		disable_ints
000045FC 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004602 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
00004606 3CBC 8004                  		move.w	#$8004,(a6)	; 8-colour mode
0000460A 31FC 8AAF F624             		move.w	#$8A00+175,(v_hbla_hreg).w
00004610 3CBC 9011                  		move.w	#$9011,(a6)	; 128-cell hscroll size
00004614 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004618 0200 00BF                  		andi.b	#$BF,d0
0000461C 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004622 6100 CCAE                  		bsr.w	ClearScreen
00004626 46FC 2300                  		enable_ints
0000462A 4BF9 00C0 0004 3ABC 8F01+  		fillVRAM	0,$6FFF,$5000
0000464C                            

0000464C                            	SS_WaitForDMA:
0000464C 3215                       		move.w	(a5),d1		; read control port ($C00004)
0000464E 0801 0001                  		btst	#1,d1		; is DMA running?
00004652 66F8                       		bne.s	SS_WaitForDMA	; if yes, branch
00004654 3ABC 8F02                  		move.w	#$8F02,(a5)	; set VDP increment to 2 bytes
00004658 6100 0000                  		bsr.w	SS_BGLoad
0000465C 7000                       		moveq	#plcid_SpecialStage,d0
0000465E 6100 D092                  		bsr.w	QuickPLC	; load special stage patterns
00004662                            

00004662 43F8 D000                  		lea	(v_objspace).w,a1
00004666 7000                       		moveq	#0,d0
00004668 323C 07FF                  		move.w	#$7FF,d1
0000466C                            	SS_ClrObjRam:
0000466C 22C0                       		move.l	d0,(a1)+
0000466E 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004672                            

00004672 43F8 F700                  		lea	(v_screenposx).w,a1
00004676 7000                       		moveq	#0,d0
00004678 323C 003F                  		move.w	#$3F,d1
0000467C                            	SS_ClrRam1:
0000467C 22C0                       		move.l	d0,(a1)+
0000467E 51C9 FFFC                  		dbf	d1,SS_ClrRam1	; clear	variables
00004682                            

00004682 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00004686 7000                       		moveq	#0,d0
00004688 323C 0027                  		move.w	#$27,d1
0000468C                            	SS_ClrRam2:
0000468C 22C0                       		move.l	d0,(a1)+
0000468E 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004692                            

00004692 43F8 AA00                  		lea	(v_ngfx_buffer).w,a1
00004696 7000                       		moveq	#0,d0
00004698 323C 007F                  		move.w	#$7F,d1
0000469C                            	SS_ClrNemRam:
0000469C 22C0                       		move.l	d0,(a1)+
0000469E 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000046A2                            

000046A2 4238 F64E                  		clr.b	(f_wtr_state).w
000046A6 4278 FE02                  		clr.w	(f_restart).w
000046AA 700A                       		moveq	#palid_Special,d0
000046AC 6100 DA54                  		bsr.w	PalLoad1	; load special stage palette
000046B0 4EB9 0000 0000             		jsr	(SS_Load).l		; load SS layout data
000046B6 21FC 0000 0000 F700        		move.l	#0,(v_screenposx).w
000046BE 21FC 0000 0000 F704        		move.l	#0,(v_screenposy).w
000046C6 11FC 0000 D000             		move.b	#id_SonicSpecial,(v_player).w ; load special stage Sonic object
000046CC 6100 0000                  		bsr.w	PalCycle_SS
000046D0 4278 F780                  		clr.w	(v_ssangle).w	; set stage angle to "upright"
000046D4 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set stage rotation speed
000046DA 303C 0000                  		move.w	#bgm_SS,d0
000046DE 6100 CCBC                  		bsr.w	PlaySound	; play special stage BG	music
000046E2 31FC 0000 F790             		move.w	#0,(v_btnpushtime1).w
000046E8 43F9 0000 4090             		lea	(DemoDataPtr).l,a1
000046EE 7006                       		moveq	#6,d0
000046F0 E548                       		lsl.w	#2,d0
000046F2 2271 0000                  		movea.l	(a1,d0.w),a1
000046F6 11E9 0001 F792             		move.b	1(a1),(v_btnpushtime2).w
000046FC 5338 F792                  		subq.b	#1,(v_btnpushtime2).w
00004700 4278 FE20                  		clr.w	(v_rings).w
00004704 4238 FE1B                  		clr.b	(v_lifecount).w
00004708 31FC 0000 FE08             		move.w	#0,(v_debuguse).w
0000470E 31FC 0708 F614             		move.w	#1800,(v_demolength).w
00004714 4A38 FFE2                  		tst.b	(f_debugcheat).w ; has debug cheat been entered?
00004718 6700                       		beq.s	SS_NoDebug	; if not, branch
0000471A 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is A button pressed?
00004720 6700                       		beq.s	SS_NoDebug	; if not, branch
00004722 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00004728                            

00004728                            	SS_NoDebug:
00004728 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000472C 0000 0040                  		ori.b	#$40,d0
00004730 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004736 6100 D79E                  		bsr.w	PaletteWhiteIn
0000473A                            

0000473A                            ; ---------------------------------------------------------------------------
0000473A                            ; Main Special Stage loop
0000473A                            ; ---------------------------------------------------------------------------
0000473A                            

0000473A                            SS_MainLoop:
0000473A 6100 CC72                  		bsr.w	PauseGame
0000473E 11FC 000A F62A             		move.b	#$A,(v_vbla_routine).w
00004744 6100 E268                  		bsr.w	WaitForVBla
00004748 6100 F896                  		bsr.w	MoveSonicInDemo
0000474C 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
00004752 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004758 4EB9 0000 0000             		jsr	(BuildSprites).l
0000475E 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
00004764 6100 0000                  		bsr.w	SS_BGAnimate
00004768 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
0000476C 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000476E 4A78 F614                  		tst.w	(v_demolength).w ; is there time left on the demo?
00004772 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004776                            

00004776                            	SS_ChkEnd:
00004776 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
0000477C 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004780                            

00004780 4A78 FFF0                  		tst.w	(f_demo).w	; is demo mode on?
00004784 6600 0000                  		bne.w	SS_ToLevel
00004788 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
0000478E 0C78 0503 FE10             		cmpi.w	#(id_SBZ<<8)+3,(v_zone).w ; is level number higher than FZ?
00004794 6500                       		blo.s	SS_Finish	; if not, branch
00004796 4278 FE10                  		clr.w	(v_zone).w	; set to GHZ1
0000479A                            

0000479A                            SS_Finish:
0000479A 31FC 003C F614             		move.w	#60,(v_demolength).w ; set delay time to 1 second
000047A0 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
000047A6 4278 F794                  		clr.w	(v_palchgspeed).w
000047AA                            

000047AA                            	SS_FinLoop:
000047AA 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
000047B0 6100 E1FC                  		bsr.w	WaitForVBla
000047B4 6100 F82A                  		bsr.w	MoveSonicInDemo
000047B8 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w
000047BE 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000047C4 4EB9 0000 0000             		jsr	(BuildSprites).l
000047CA 4EB9 0000 0000             		jsr	(SS_ShowLayout).l
000047D0 6100 0000                  		bsr.w	SS_BGAnimate
000047D4 5378 F794                  		subq.w	#1,(v_palchgspeed).w
000047D8 6A00                       		bpl.s	loc_47D4
000047DA 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
000047E0 6100 D7C0                  		bsr.w	WhiteOut_ToWhite
000047E4                            

000047E4                            loc_47D4:
000047E4 4A78 F614                  		tst.w	(v_demolength).w
000047E8 66C0                       		bne.s	SS_FinLoop
000047EA                            

000047EA 46FC 2700                  		disable_ints
000047EE 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000047F4 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000047F8 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000047FC 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
00004800 6100 CAD0                  		bsr.w	ClearScreen
0000480E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004814 6100 CC30                  		bsr.w	NemDec
00004818 4EB9 0000 0000             		jsr	(Hud_Base).l
0000481E 46FC 2300                  		enable_ints
00004822 7011                       		moveq	#palid_SSResult,d0
00004824 6100 D8F8                  		bsr.w	PalLoad2	; load results screen palette
00004828 7000                       		moveq	#plcid_Main,d0
0000482A 6100 CD8C                  		bsr.w	NewPLC
0000482E 7000                       		moveq	#plcid_SSResult,d0
00004830 6100 CD54                  		bsr.w	AddPLC		; load results screen patterns
00004834 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; update score counter
0000483A 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; update ring bonus counter
00004840 3038 FE20                  		move.w	(v_rings).w,d0
00004844 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004848 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set rings bonus
0000484C 303C 0000                  		move.w	#bgm_GotThrough,d0
00004850 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	 ; play end-of-level music
00004856                            

00004856 43F8 D000                  		lea	(v_objspace).w,a1
0000485A 7000                       		moveq	#0,d0
0000485C 323C 07FF                  		move.w	#$7FF,d1
00004860                            	SS_EndClrObjRam:
00004860 22C0                       		move.l	d0,(a1)+
00004862 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004866                            

00004866 11FC 0000 D5C0             		move.b	#id_SSResult,(v_ssrescard).w ; load results screen object
0000486C                            

0000486C                            SS_NormalExit:
0000486C 6100 CB40                  		bsr.w	PauseGame
00004870 11FC 000C F62A             		move.b	#$C,(v_vbla_routine).w
00004876 6100 E136                  		bsr.w	WaitForVBla
0000487A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004880 4EB9 0000 0000             		jsr	(BuildSprites).l
00004886 6100 CD6A                  		bsr.w	RunPLC
0000488A 4A78 FE02                  		tst.w	(f_restart).w
0000488E 67DC                       		beq.s	SS_NormalExit
00004890 4AB8 F680                  		tst.l	(v_plc_buffer).w
00004894 66D6                       		bne.s	SS_NormalExit
00004896 303C 0000                  		move.w	#sfx_EnterSS,d0
0000489A 6100 CB06                  		bsr.w	PlaySound_Special ; play special stage exit sound
0000489E 6100 D6E2                  		bsr.w	PaletteWhiteOut
000048A2 4E75                       		rts	
000048A4                            ; ===========================================================================
000048A4                            

000048A4                            SS_ToSegaScreen:
000048A4 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000048AA 4E75                       		rts
000048AC                            

000048AC 0C38 0000 F600             SS_ToLevel:	cmpi.b	#id_Level,(v_gamemode).w
000048B2 67F0                       		beq.s	SS_ToSegaScreen
000048B4 4E75                       		rts
000048B6                            

000048B6                            ; ---------------------------------------------------------------------------
000048B6                            ; Special stage	background loading subroutine
000048B6                            ; ---------------------------------------------------------------------------
000048B6                            

000048B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000048B6                            

000048B6                            

000048B6                            SS_BGLoad:
000048B6 43F9 00FF 0000             		lea	($FF0000).l,a1
000048BC 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000048C2 303C 4051                  		move.w	#$4051,d0
000048C6 6100 CE5C                  		bsr.w	EniDec
000048D0 45F9 00FF 0080             		lea	($FF0080).l,a2
000048D6 7E06                       		moveq	#6,d7
000048D8                            

000048D8                            loc_48BE:
000048D8 2003                       		move.l	d3,d0
000048DA 7C03                       		moveq	#3,d6
000048DC 7800                       		moveq	#0,d4
000048DE 0C47 0003                  		cmpi.w	#3,d7
000048E2 6400                       		bhs.s	loc_48CC
000048E4 7801                       		moveq	#1,d4
000048E6                            

000048E6                            loc_48CC:
000048E6 7A07                       		moveq	#7,d5
000048E8                            

000048E8                            loc_48CE:
000048E8 224A                       		movea.l	a2,a1
000048EA 0A04 0001                  		eori.b	#1,d4
000048EE 6600                       		bne.s	loc_48E2
000048F0 0C47 0006                  		cmpi.w	#6,d7
000048F4 6600                       		bne.s	loc_48F2
000048F6 43F9 00FF 0000             		lea	($FF0000).l,a1
000048FC                            

000048FC                            loc_48E2:
000048FC 48E7 F800                  		movem.l	d0-d4,-(sp)
00004900 7207                       		moveq	#7,d1
00004902 7407                       		moveq	#7,d2
00004904 6100 CB20                  		bsr.w	TilemapToVRAM
00004908 4CDF 001F                  		movem.l	(sp)+,d0-d4
0000490C                            

0000490C                            loc_48F2:
0000490C 0680 0010 0000             		addi.l	#$100000,d0
00004912 51CD FFD4                  		dbf	d5,loc_48CE
00004916 0680 0380 0000             		addi.l	#$3800000,d0
0000491C 0A04 0001                  		eori.b	#1,d4
00004920 51CE FFC4                  		dbf	d6,loc_48CC
00004924 0683 1000 0000             		addi.l	#$10000000,d3
0000492A 6A00                       		bpl.s	loc_491C
0000492C 4843                       		swap	d3
0000492E 0683 0000 C000             		addi.l	#$C000,d3
00004934 4843                       		swap	d3
00004936                            

00004936                            loc_491C:
00004936 D4FC 0080                  		adda.w	#$80,a2
0000493A 51CF FF9C                  		dbf	d7,loc_48BE
0000493E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004944 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
0000494A 303C 4000                  		move.w	#$4000,d0
0000494E 6100 CDD4                  		bsr.w	EniDec
0000497A 4E75                       		rts	
0000497C                            ; End of function SS_BGLoad
0000497C                            

0000497C                            ; ---------------------------------------------------------------------------
0000497C                            ; Palette cycling routine - special stage
0000497C                            ; ---------------------------------------------------------------------------
0000497C                            

0000497C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000497C                            

0000497C                            

0000497C                            PalCycle_SS:
0000497C 4A78 F63A                  		tst.w	(f_pause).w
00004980 6600                       		bne.s	locret_49E6
00004982 5378 F79C                  		subq.w	#1,(v_palss_time).w
00004986 6A00                       		bpl.s	locret_49E6
00004988 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
0000498E 3038 F79A                  		move.w	(v_palss_num).w,d0
00004992 5278 F79A                  		addq.w	#1,(v_palss_num).w
00004996 0240 001F                  		andi.w	#$1F,d0
0000499A E548                       		lsl.w	#2,d0
0000499C 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000049A2 D0C0                       		adda.w	d0,a0
000049A4 1018                       		move.b	(a0)+,d0
000049A6 6A00                       		bpl.s	loc_4992
000049A8 303C 01FF                  		move.w	#$1FF,d0
000049AC                            

000049AC                            loc_4992:
000049AC 31C0 F79C                  		move.w	d0,(v_palss_time).w
000049B0 7000                       		moveq	#0,d0
000049B2 1018                       		move.b	(a0)+,d0
000049B4 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000049B8 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000049BE 43F1 0000                  		lea	(a1,d0.w),a1
000049C2 303C 8200                  		move.w	#$8200,d0
000049C6 1019                       		move.b	(a1)+,d0
000049C8 3C80                       		move.w	d0,(a6)
000049CA 11D1 F616                  		move.b	(a1),(v_scrposy_vdp).w
000049CE 303C 8400                  		move.w	#$8400,d0
000049D2 1018                       		move.b	(a0)+,d0
000049D4 3C80                       		move.w	d0,(a6)
000049D6 23FC 4000 0010 00C0 0004   		move.l	#$40000010,(vdp_control_port).l
000049E0 23F8 F616 00C0 0000        		move.l	(v_scrposy_vdp).w,(vdp_data_port).l
000049E8 7000                       		moveq	#0,d0
000049EA 1018                       		move.b	(a0)+,d0
000049EC 6B00                       		bmi.s	loc_49E8
000049EE 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000049F4 D2C0                       		adda.w	d0,a1
000049F6 45F8 FB4E                  		lea	(v_pal_dry+$4E).w,a2
000049FA 24D9                       		move.l	(a1)+,(a2)+
000049FC 24D9                       		move.l	(a1)+,(a2)+
000049FE 24D9                       		move.l	(a1)+,(a2)+
00004A00                            

00004A00                            locret_49E6:
00004A00 4E75                       		rts	
00004A02                            ; ===========================================================================
00004A02                            

00004A02                            loc_49E8:
00004A02 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004A06 0C40 008A                  		cmpi.w	#$8A,d0
00004A0A 6500                       		blo.s	loc_49F4
00004A0C 5241                       		addq.w	#1,d1
00004A0E                            

00004A0E                            loc_49F4:
00004A0E C2FC 002A                  		mulu.w	#$2A,d1
00004A12 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004A18 D2C1                       		adda.w	d1,a1
00004A1A 0240 007F                  		andi.w	#$7F,d0
00004A1E 0880 0000                  		bclr	#0,d0
00004A22 6700                       		beq.s	loc_4A18
00004A24 45F8 FB6E                  		lea	(v_pal_dry+$6E).w,a2
00004A28 24D1                       		move.l	(a1),(a2)+
00004A2A 24E9 0004                  		move.l	4(a1),(a2)+
00004A2E 24E9 0008                  		move.l	8(a1),(a2)+
00004A32                            

00004A32                            loc_4A18:
00004A32 D2FC 000C                  		adda.w	#$C,a1
00004A36 45F8 FB5A                  		lea	(v_pal_dry+$5A).w,a2
00004A3A 0C40 000A                  		cmpi.w	#$A,d0
00004A3E 6500                       		blo.s	loc_4A2E
00004A40 0440 000A                  		subi.w	#$A,d0
00004A44 45F8 FB7A                  		lea	(v_pal_dry+$7A).w,a2
00004A48                            

00004A48                            loc_4A2E:
00004A48 3200                       		move.w	d0,d1
00004A4A D040                       		add.w	d0,d0
00004A4C D041                       		add.w	d1,d0
00004A4E D2C0                       		adda.w	d0,a1
00004A50 24D9                       		move.l	(a1)+,(a2)+
00004A52 34D9                       		move.w	(a1)+,(a2)+
00004A54 4E75                       		rts	
00004A56                            ; End of function PalCycle_SS
00004A56                            

00004A56                            ; ===========================================================================
00004A56 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004A66                            

00004A66 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004A76 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004A86 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004A96 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004AA6 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004AB6 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004AC6 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004AD6                            		even
00004AD6 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004AE4                            		even
00004AE4                            

00004AE4                            Pal_SSCyc1:	incbin	"palette\Cycle - Special Stage 1.bin"
00004B2C                            		even
00004B2C                            Pal_SSCyc2:	incbin	"palette\Cycle - Special Stage 2.bin"
00004BFE                            		even
00004BFE                            

00004BFE                            ; ---------------------------------------------------------------------------
00004BFE                            ; Subroutine to	make the special stage background animated
00004BFE                            ; ---------------------------------------------------------------------------
00004BFE                            

00004BFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BFE                            

00004BFE                            

00004BFE                            SS_BGAnimate:
00004BFE 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004C02 6600                       		bne.s	loc_4BF6
00004C04 31FC 0000 F70C             		move.w	#0,(v_bgscreenposy).w
00004C0A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_vdp).w
00004C10                            

00004C10                            loc_4BF6:
00004C10 0C40 0008                  		cmpi.w	#8,d0
00004C14 6400                       		bhs.s	loc_4C4E
00004C16 0C40 0006                  		cmpi.w	#6,d0
00004C1A 6600                       		bne.s	loc_4C10
00004C1C 5278 F718                  		addq.w	#1,(v_bg3screenposx).w
00004C20 5278 F70C                  		addq.w	#1,(v_bgscreenposy).w
00004C24 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_vdp).w
00004C2A                            

00004C2A                            loc_4C10:
00004C2A 7000                       		moveq	#0,d0
00004C2C 3038 F708                  		move.w	(v_bgscreenposx).w,d0
00004C30 4440                       		neg.w	d0
00004C32 4840                       		swap	d0
00004C34 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004C3A 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00004C3E 7609                       		moveq	#9,d3
00004C40                            

00004C40                            loc_4C26:
00004C40 302B 0002                  		move.w	2(a3),d0
00004C44 6100 DD9A                  		bsr.w	CalcSine
00004C48 7400                       		moveq	#0,d2
00004C4A 1419                       		move.b	(a1)+,d2
00004C4C C1C2                       		muls.w	d2,d0
00004C4E E080                       		asr.l	#8,d0
00004C50 36C0                       		move.w	d0,(a3)+
00004C52 1419                       		move.b	(a1)+,d2
00004C54 4882                       		ext.w	d2
00004C56 D55B                       		add.w	d2,(a3)+
00004C58 51CB FFE6                  		dbf	d3,loc_4C26
00004C5C 47F8 AA00                  		lea	(v_ngfx_buffer).w,a3
00004C60 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004C66 6000                       		bra.s	loc_4C7E
00004C68                            ; ===========================================================================
00004C68                            

00004C68                            loc_4C4E:
00004C68 0C40 000C                  		cmpi.w	#$C,d0
00004C6C 6600                       		bne.s	loc_4C74
00004C6E 5378 F718                  		subq.w	#1,(v_bg3screenposx).w
00004C72 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C76 243C 0001 8000             		move.l	#$18000,d2
00004C7C 7206                       		moveq	#6,d1
00004C7E                            

00004C7E                            loc_4C64:
00004C7E 2013                       		move.l	(a3),d0
00004C80 9082                       		sub.l	d2,d0
00004C82 26C0                       		move.l	d0,(a3)+
00004C84 0482 0000 2000             		subi.l	#$2000,d2
00004C8A 51C9 FFF2                  		dbf	d1,loc_4C64
00004C8E                            

00004C8E                            loc_4C74:
00004C8E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C92 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004C98                            

00004C98                            loc_4C7E:
00004C98 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
00004C9C 3038 F718                  		move.w	(v_bg3screenposx).w,d0
00004CA0 4440                       		neg.w	d0
00004CA2 4840                       		swap	d0
00004CA4 7600                       		moveq	#0,d3
00004CA6 161A                       		move.b	(a2)+,d3
00004CA8 3438 F70C                  		move.w	(v_bgscreenposy).w,d2
00004CAC 4442                       		neg.w	d2
00004CAE 0242 00FF                  		andi.w	#$FF,d2
00004CB2 E54A                       		lsl.w	#2,d2
00004CB4                            

00004CB4                            loc_4C9A:
00004CB4 301B                       		move.w	(a3)+,d0
00004CB6 544B                       		addq.w	#2,a3
00004CB8 7200                       		moveq	#0,d1
00004CBA 121A                       		move.b	(a2)+,d1
00004CBC 5341                       		subq.w	#1,d1
00004CBE                            

00004CBE                            loc_4CA4:
00004CBE 2380 2000                  		move.l	d0,(a1,d2.w)
00004CC2 5842                       		addq.w	#4,d2
00004CC4 0242 03FC                  		andi.w	#$3FC,d2
00004CC8 51C9 FFF4                  		dbf	d1,loc_4CA4
00004CCC 51CB FFE6                  		dbf	d3,loc_4C9A
00004CD0 4E75                       		rts	
00004CD2                            ; End of function SS_BGAnimate
00004CD2                            

00004CD2                            ; ===========================================================================
00004CD2 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004CDE                            		even
00004CDE 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004CE6                            		even
00004CE6 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004CFA                            		even
00004CFA                            

00004CFA                            ; ===========================================================================
00004CFA                            

00004CFA                            ; ---------------------------------------------------------------------------
00004CFA                            ; Continue screen
00004CFA                            ; ---------------------------------------------------------------------------
00004CFA                            

00004CFA                            GM_Continue:
00004CFA 6100 D15C                  		bsr.w	PaletteFadeOut
00004CFE 46FC 2700                  		disable_ints
00004D02 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004D06 0200 00BF                  		andi.b	#$BF,d0
00004D0A 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004D10 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00004D16 3CBC 8004                  		move.w	#$8004,(a6)	; 8 colour mode
00004D1A 3CBC 8700                  		move.w	#$8700,(a6)	; background colour
00004D1E 6100 C5B2                  		bsr.w	ClearScreen
00004D22                            

00004D22 43F8 D000                  		lea	(v_objspace).w,a1
00004D26 7000                       		moveq	#0,d0
00004D28 323C 07FF                  		move.w	#$7FF,d1
00004D2C                            	Cont_ClrObjRam:
00004D2C 22C0                       		move.l	d0,(a1)+
00004D2E 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004D32                            

00004D3C 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D42 6100 C702                  		bsr.w	NemDec
00004D50 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004D56 6100 C6EE                  		bsr.w	NemDec
00004D64 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004D6A 6100 C6DA                  		bsr.w	NemDec
00004D6E 720A                       		moveq	#10,d1
00004D70 4EB9 0000 0000             		jsr	(ContScrCounter).l	; run countdown	(start from 10)
00004D76 7012                       		moveq	#palid_Continue,d0
00004D78 6100 D388                  		bsr.w	PalLoad1	; load continue	screen palette
00004D7C 103C 0000                  		move.b	#bgm_Continue,d0
00004D80 6100 C61A                  		bsr.w	PlaySound	; play continue	music
00004D84 31FC 0293 F614             		move.w	#659,(v_demolength).w ; set time delay to 11 seconds
00004D8A 42B8 F700                  		clr.l	(v_screenposx).w
00004D8E 21FC 0100 0000 F704        		move.l	#$1000000,(v_screenposy).w
00004D96 11FC 0000 D000             		move.b	#id_ContSonic,(v_player).w ; load Sonic object
00004D9C 11FC 0000 D040             		move.b	#id_ContScrItem,(v_continuetext).w ; load continue screen objects
00004DA2 11FC 0000 D080             		move.b	#id_ContScrItem,(v_continuelight).w
00004DA8 11FC 0003 D098             		move.b	#3,(v_continuelight+obPriority).w
00004DAE 11FC 0004 D09A             		move.b	#4,(v_continuelight+obFrame).w
00004DB4 11FC 0000 D0C0             		move.b	#id_ContScrItem,(v_continueicon).w
00004DBA 11FC 0004 D0E4             		move.b	#4,(v_continueicon+obRoutine).w
00004DC0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004DC6 4EB9 0000 0000             		jsr	(BuildSprites).l
00004DCC 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00004DD0 0000 0040                  		ori.b	#$40,d0
00004DD4 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00004DDA 6100 CFD6                  		bsr.w	PaletteFadeIn
00004DDE                            

00004DDE                            ; ---------------------------------------------------------------------------
00004DDE                            ; Continue screen main loop
00004DDE                            ; ---------------------------------------------------------------------------
00004DDE                            

00004DDE                            Cont_MainLoop:
00004DDE 11FC 0016 F62A             		move.b	#$16,(v_vbla_routine).w
00004DE4 6100 DBC8                  		bsr.w	WaitForVBla
00004DE8 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00004DEE 6400                       		bhs.s	loc_4DF2
00004DF0 46FC 2700                  		disable_ints
00004DF4 3238 F614                  		move.w	(v_demolength).w,d1
00004DF8 82FC 003C                  		divu.w	#$3C,d1
00004DFC 0281 0000 000F             		andi.l	#$F,d1
00004E02 4EB9 0000 0000             		jsr	(ContScrCounter).l
00004E08 46FC 2300                  		enable_ints
00004E0C                            

00004E0C                            loc_4DF2:
00004E0C 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00004E12 4EB9 0000 0000             		jsr	(BuildSprites).l
00004E18 0C78 0180 D008             		cmpi.w	#$180,(v_player+obX).w ; has Sonic run off screen?
00004E1E 6400                       		bhs.s	Cont_GotoLevel	; if yes, branch
00004E20 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
00004E26 64B6                       		bhs.s	Cont_MainLoop
00004E28 4A78 F614                  		tst.w	(v_demolength).w
00004E2C 6600 FFB0                  		bne.w	Cont_MainLoop
00004E30 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; go to Sega screen
00004E36 4E75                       		rts	
00004E38                            ; ===========================================================================
00004E38                            

00004E38                            Cont_GotoLevel:
00004E38 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w ; set screen mode to $0C (level)
00004E3E 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
00004E44 7000                       		moveq	#0,d0
00004E46 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
00004E4A 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
00004E4E 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
00004E52 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost count
00004E56 5338 FE18                  		subq.b	#1,(v_continues).w ; subtract 1 from continues
00004E5A 4E75                       		rts	
00004E5C                            ; ===========================================================================
00004E5C                            

00004E5C                            		include	"_incObj\80 Continue Screen Elements.asm"
00004E5C                            ; ---------------------------------------------------------------------------
00004E5C                            ; Object 80 - Continue screen elements
00004E5C                            ; ---------------------------------------------------------------------------
00004E5C                            

00004E5C                            ContScrItem:
00004E5C 7000                       		moveq	#0,d0
00004E5E 1028 0024                  		move.b	$24(a0),d0
00004E62 323B 0000                  		move.w	CSI_Index(pc,d0.w),d1
00004E66 4EFB 1000                  		jmp	CSI_Index(pc,d1.w)
00004E6A                            ; ===========================================================================
00004E6A 0000                       CSI_Index:	dc.w CSI_Main-CSI_Index
00004E6C 0000                       		dc.w CSI_Display-CSI_Index
00004E6E 0000                       		dc.w CSI_MakeMiniSonic-CSI_Index
00004E70 0000                       		dc.w CSI_ChkDel-CSI_Index
00004E72                            ; ===========================================================================
00004E72                            

00004E72                            CSI_Main:	; Routine 0
00004E72 5428 0024                  		addq.b	#2,obRoutine(a0)
00004E76 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00004E7E 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00004E84 117C 0000 0001             		move.b	#0,obRender(a0)
00004E8A 117C 003C 0019             		move.b	#$3C,obActWid(a0)
00004E90 317C 0120 0008             		move.w	#$120,obX(a0)
00004E96 317C 00C0 000A             		move.w	#$C0,obScreenY(a0)
00004E9C 31FC 0000 FE20             		move.w	#0,(v_rings).w	; clear rings
00004EA2                            

00004EA2                            CSI_Display:	; Routine 2
00004EA2 4EF9 0000 0000             		jmp	(DisplaySprite).l
00004EA8                            ; ===========================================================================
00004EA8                            

00004EA8                            	CSI_MiniSonicPos:
00004EA8 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00004EBA 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00004EC6                            

00004EC6                            CSI_MakeMiniSonic:
00004EC6                            		; Routine 4
00004EC6 2248                       		movea.l	a0,a1
00004EC8 45F9 0000 4EA8             		lea	(CSI_MiniSonicPos).l,a2
00004ECE 7200                       		moveq	#0,d1
00004ED0 1238 FE18                  		move.b	(v_continues).w,d1
00004ED4 5501                       		subq.b	#2,d1
00004ED6 6400                       		bcc.s	CSI_MoreThan1
00004ED8 4EF9 0000 0000             		jmp	(DeleteObject).l	; cancel if you have 0-1 continues
00004EDE                            

00004EDE                            	CSI_MoreThan1:
00004EDE 7601                       		moveq	#1,d3
00004EE0 0C01 000E                  		cmpi.b	#14,d1		; do you have fewer than 16 continues
00004EE4 6500                       		bcs.s	CSI_FewerThan16	; if yes, branch
00004EE6                            

00004EE6 7600                       		moveq	#0,d3
00004EE8 720E                       		moveq	#14,d1		; cap at 15 mini-Sonics
00004EEA                            

00004EEA                            	CSI_FewerThan16:
00004EEA 1401                       		move.b	d1,d2
00004EEC 0202 0001                  		andi.b	#1,d2
00004EF0                            

00004EF0                            CSI_MiniSonicLoop:
00004EF0 137C 0000 0000             		move.b	#id_ContScrItem,0(a1) ; load mini-Sonic object
00004EF6 335A 0008                  		move.w	(a2)+,obX(a1)	; use above data for x-axis position
00004EFA 4A02                       		tst.b	d2		; do you have an even number of continues?
00004EFC 6700                       		beq.s	CSI_Even	; if yes, branch
00004EFE 0469 000A 0008             		subi.w	#$A,obX(a1)	; shift mini-Sonics slightly to the right
00004F04                            

00004F04                            	CSI_Even:
00004F04 337C 00D0 000A             		move.w	#$D0,obScreenY(a1)
00004F0A 137C 0006 001A             		move.b	#6,obFrame(a1)
00004F10 137C 0006 0024             		move.b	#6,obRoutine(a1)
00004F16 237C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a1)
00004F1E 337C 8551 0002             		move.w	#$8551,obGfx(a1)
00004F24 137C 0000 0001             		move.b	#0,obRender(a1)
00004F2A 43E9 0040                  		lea	$40(a1),a1
00004F2E 51C9 FFC0                  		dbf	d1,CSI_MiniSonicLoop ; repeat for number of continues
00004F32                            

00004F32 43E9 FFC0                  		lea	-$40(a1),a1
00004F36 1343 0028                  		move.b	d3,obSubtype(a1)
00004F3A                            

00004F3A                            CSI_ChkDel:	; Routine 6
00004F3A 4A28 0028                  		tst.b	obSubtype(a0)	; do you have 16 or more continues?
00004F3E 6700                       		beq.s	CSI_Animate	; if yes, branch
00004F40 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic running?
00004F46 6500                       		bcs.s	CSI_Animate	; if not, branch
00004F48 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004F4C 0200 0001                  		andi.b	#1,d0
00004F50 6600                       		bne.s	CSI_Animate
00004F52 4A78 D010                  		tst.w	(v_player+obVelX).w ; is Sonic running?
00004F56 6600                       		bne.s	CSI_Delete	; if yes, goto delete
00004F58 4E75                       		rts	
00004F5A                            

00004F5A                            CSI_Animate:
00004F5A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00004F5E 0200 000F                  		andi.b	#$F,d0
00004F62 6600                       		bne.s	CSI_Display2
00004F64 0868 0000 001A             		bchg	#0,obFrame(a0)
00004F6A                            

00004F6A                            	CSI_Display2:
00004F6A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00004F70                            ; ===========================================================================
00004F70                            

00004F70                            CSI_Delete:
00004F70 4EF9 0000 0000             		jmp	(DeleteObject).l
00004F70 4EF9 0000 0000             		jmp	(DeleteObject).l
00004F76                            		include	"_incObj\81 Continue Screen Sonic.asm"
00004F76                            ; ---------------------------------------------------------------------------
00004F76                            ; Object 81 - Sonic on the continue screen
00004F76                            ; ---------------------------------------------------------------------------
00004F76                            

00004F76                            ContSonic:
00004F76 7000                       		moveq	#0,d0
00004F78 1028 0024                  		move.b	obRoutine(a0),d0
00004F7C 323B 0000                  		move.w	CSon_Index(pc,d0.w),d1
00004F80 4EBB 1000                  		jsr	CSon_Index(pc,d1.w)
00004F84 4EF9 0000 0000             		jmp	(DisplaySprite).l
00004F8A                            ; ===========================================================================
00004F8A 0000                       CSon_Index:	dc.w CSon_Main-CSon_Index
00004F8C 0000                       		dc.w CSon_ChkLand-CSon_Index
00004F8E 0000                       		dc.w CSon_Animate-CSon_Index
00004F90 0000                       		dc.w CSon_Run-CSon_Index
00004F92                            ; ===========================================================================
00004F92                            

00004F92                            CSon_Main:	; Routine 0
00004F92 5428 0024                  		addq.b	#2,obRoutine(a0)
00004F96 317C 00A0 0008             		move.w	#$A0,obX(a0)
00004F9C 317C 00C0 000C             		move.w	#$C0,obY(a0)
00004FA2 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
00004FAA 317C 0780 0002             		move.w	#$780,obGfx(a0)
00004FB0 117C 0004 0001             		move.b	#4,obRender(a0)
00004FB6 117C 0002 0018             		move.b	#2,obPriority(a0)
00004FBC 117C 0000 001C             		move.b	#id_Float3,obAnim(a0) ; use "floating" animation
00004FC2 317C 0400 0012             		move.w	#$400,obVelY(a0) ; make Sonic fall from above
00004FC8                            

00004FC8                            CSon_ChkLand:	; Routine 2
00004FC8 0C68 01A0 000C             		cmpi.w	#$1A0,obY(a0)	; has Sonic landed yet?
00004FCE 6600                       		bne.s	CSon_ShowFall	; if not, branch
00004FD0                            

00004FD0 5428 0024                  		addq.b	#2,obRoutine(a0)
00004FD4 4268 0012                  		clr.w	obVelY(a0)	; stop Sonic falling
00004FD8 217C 0000 0000 0004        		move.l	#Map_ContScr,obMap(a0)
00004FE0 317C 8500 0002             		move.w	#$8500,obGfx(a0)
00004FE6 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00004FEC 6000                       		bra.s	CSon_Animate
00004FEE                            

00004FEE                            CSon_ShowFall:
00004FEE 4EB9 0000 0000             		jsr	(SpeedToPos).l
00004FF4 4EB9 0000 0000             		jsr	(Sonic_Animate).l
00004FFA 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005000                            ; ===========================================================================
00005000                            

00005000                            CSon_Animate:	; Routine 4
00005000 4A38 F605                  		tst.b	(v_jpadpress1).w ; is Start button pressed?
00005004 6B00                       		bmi.s	CSon_GetUp	; if yes, branch
00005006 43F9 0000 0000             		lea	(AniScript_CSon).l,a1
0000500C 4EF9 0000 0000             		jmp	(AnimateSprite).l
00005012                            

00005012                            CSon_GetUp:
00005012 5428 0024                  		addq.b	#2,obRoutine(a0)
00005016 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0000501E 317C 0780 0002             		move.w	#$780,obGfx(a0)
00005024 117C 0000 001C             		move.b	#id_Float4,obAnim(a0) ; use "getting up" animation
0000502A 4268 0014                  		clr.w	obInertia(a0)
0000502E 5168 000C                  		subq.w	#8,obY(a0)
00005032 103C 0000                  		move.b	#bgm_Fade,d0
00005036 6100 C36A                  		bsr.w	PlaySound_Special ; fade out music
0000503A                            

0000503A                            CSon_Run:	; Routine 6
0000503A 0C68 0800 0014             		cmpi.w	#$800,obInertia(a0) ; check Sonic's inertia
00005040 6600                       		bne.s	CSon_AddInertia	; if too low, branch
00005042 317C 1000 0010             		move.w	#$1000,obVelX(a0) ; move Sonic to the right
00005048 6000                       		bra.s	CSon_ShowRun
0000504A                            

0000504A                            CSon_AddInertia:
0000504A 0668 0020 0014             		addi.w	#$20,obInertia(a0) ; increase inertia
00005050                            

00005050                            CSon_ShowRun:
00005050 4EB9 0000 0000             		jsr	(SpeedToPos).l
00005056 4EB9 0000 0000             		jsr	(Sonic_Animate).l
0000505C 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
0000505C 4EF9 0000 0000             		jmp	(Sonic_LoadGfx).l
00005062                            		include	"_anim\Continue Screen Sonic.asm"
00005062                            ; ---------------------------------------------------------------------------
00005062                            ; Animation script - Sonic on the continue screen
00005062                            ; ---------------------------------------------------------------------------
00005062 0000                       AniScript_CSon:	dc.w A_CSon_1-AniScript_CSon
00005064 0401 0101 0102 0202 0303+  A_CSon_1:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, afEnd
00005070 00                         		even
00005070 00                         		even
00005070                            Map_ContScr:	include	"_maps\Continue Screen.asm"
00005070                            ; ---------------------------------------------------------------------------
00005070                            ; Sprite mappings - Continue screen
00005070                            ; ---------------------------------------------------------------------------
00005070                            Map_ContScr_internal:
00005070 0000                       		dc.w M_Cont_text-Map_ContScr_internal
00005072 0000                       		dc.w M_Cont_Sonic1-Map_ContScr_internal
00005074 0000                       		dc.w M_Cont_Sonic2-Map_ContScr_internal
00005076 0000                       		dc.w M_Cont_Sonic3-Map_ContScr_internal
00005078 0000                       		dc.w M_Cont_oval-Map_ContScr_internal
0000507A 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
0000507C 0000                       		dc.w M_Cont_Mini1-Map_ContScr_internal
0000507E 0000                       		dc.w M_Cont_Mini2-Map_ContScr_internal
00005080 0B                         M_Cont_text:	dc.b $B
00005081 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005086 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
0000508B F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005090 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005095 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
0000509A F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000509F F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000050A4 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000050A9 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000050AE 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000050B3 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000050B8 03                         M_Cont_Sonic1:	dc.b 3
000050B9 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000050BE F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050C3 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050C8 03                         M_Cont_Sonic2:	dc.b 3
000050C9 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000050CE F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050D3 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050D8 03                         M_Cont_Sonic3:	dc.b 3
000050D9 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000050DE F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050E3 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050E8 02                         M_Cont_oval:	dc.b 2
000050E9 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000050EE 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000050F3 01                         M_Cont_Mini1:	dc.b 1
000050F4 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000050F9 01                         M_Cont_Mini2:	dc.b 1
000050FA 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005100 00                         		even
00005100 00                         		even
00005100                            

00005100                            ; ===========================================================================
00005100                            ; ---------------------------------------------------------------------------
00005100                            ; Ending sequence in Green Hill	Zone
00005100                            ; ---------------------------------------------------------------------------
00005100                            

00005100                            GM_Ending:
00005100 103C 0000                  		move.b	#bgm_Stop,d0
00005104 6100 C29C                  		bsr.w	PlaySound_Special ; stop music
00005108 6100 CD4E                  		bsr.w	PaletteFadeOut
0000510C                            

0000510C 43F8 D000                  		lea	(v_objspace).w,a1
00005110 7000                       		moveq	#0,d0
00005112 323C 07FF                  		move.w	#$7FF,d1
00005116                            	End_ClrObjRam:
00005116 22C0                       		move.l	d0,(a1)+
00005118 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000511C                            

0000511C 43F8 F628                  		lea	($FFFFF628).w,a1
00005120 7000                       		moveq	#0,d0
00005122 323C 0015                  		move.w	#$15,d1
00005126                            	End_ClrRam1:
00005126 22C0                       		move.l	d0,(a1)+
00005128 51C9 FFFC                  		dbf	d1,End_ClrRam1	; clear	variables
0000512C                            

0000512C 43F8 F700                  		lea	(v_screenposx).w,a1
00005130 7000                       		moveq	#0,d0
00005132 323C 003F                  		move.w	#$3F,d1
00005136                            	End_ClrRam2:
00005136 22C0                       		move.l	d0,(a1)+
00005138 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000513C                            

0000513C 43F8 FE60                  		lea	(v_oscillate+2).w,a1
00005140 7000                       		moveq	#0,d0
00005142 323C 0047                  		move.w	#$47,d1
00005146                            	End_ClrRam3:
00005146 22C0                       		move.l	d0,(a1)+
00005148 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000514C                            

0000514C 46FC 2700                  		disable_ints
00005150 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
00005154 0200 00BF                  		andi.b	#$BF,d0
00005158 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
0000515E 6100 C172                  		bsr.w	ClearScreen
00005162 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005168 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000516C 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
00005170 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005174 3CBC 857C                  		move.w	#$8500+(vram_sprites>>9),(a6) ; set sprite table address
00005178 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
0000517C 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
00005180 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
00005184 31FC 8ADF F624             		move.w	#$8A00+223,(v_hbla_hreg).w ; set palette change position (for water)
0000518A 3CB8 F624                  		move.w	(v_hbla_hreg).w,(a6)
0000518E 31FC 001E FE14             		move.w	#30,(v_air).w
00005194 31FC 0600 FE10             		move.w	#id_EndZ<<8,(v_zone).w ; set level number to 0600 (extra flowers)
0000519A 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
000051A0 6700                       		beq.s	End_LoadData	; if yes, branch
000051A2 31FC 0601 FE10             		move.w	#(id_EndZ<<8)+1,(v_zone).w ; set level number to 0601 (no flowers)
000051A8                            

000051A8                            End_LoadData:
000051A8 7000                       		moveq	#plcid_Ending,d0
000051AA 6100 C546                  		bsr.w	QuickPLC	; load ending sequence patterns
000051AE 4EB9 0000 0000             		jsr	(Hud_Base).l
000051B4 6100 0000                  		bsr.w	LevelSizeLoad
000051B8 6100 0000                  		bsr.w	DeformLayers
000051BC 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w
000051C2 6100 0000                  		bsr.w	LevelDataLoad
000051C6 6100 0000                  		bsr.w	LoadTilesFromStart
000051CA 21FC 0000 0000 F796        		move.l	#Col_GHZ,(v_collindex).w ; load collision index
000051D2 46FC 2300                  		enable_ints
000051D6 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000051DC 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000051E0 6100 C6C0                  		bsr.w	KosDec
000051E4 7003                       		moveq	#palid_Sonic,d0
000051E6 6100 CF1A                  		bsr.w	PalLoad1	; load Sonic's palette
000051EA 303C 0000                  		move.w	#bgm_Ending,d0
000051EE 6100 C1AC                  		bsr.w	PlaySound	; play ending sequence music
000051F2 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
000051F8 6700                       		beq.s	End_LoadSonic	; if not, branch
000051FA 11FC 0001 FFFA             		move.b	#1,(f_debugmode).w ; enable debug mode
00005200                            

00005200                            End_LoadSonic:
00005200 11FC 0000 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00005206 08F8 0000 D022             		bset	#0,(v_player+obStatus).w ; make Sonic face left
0000520C 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
00005212 31FC 0400 F602             		move.w	#(btnL<<8),(v_jpadhold2).w ; move Sonic to the left
00005218 31FC F800 D014             		move.w	#$F800,(v_player+obInertia).w ; set Sonic's speed
0000521E 11FC 0000 D040             		move.b	#id_HUD,(v_hud).w ; load HUD object
00005224 4EB9 0000 0000             		jsr	(ObjPosLoad).l
0000522A 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005230 4EB9 0000 0000             		jsr	(BuildSprites).l
00005236 7000                       		moveq	#0,d0
00005238 31C0 FE20                  		move.w	d0,(v_rings).w
0000523C 21C0 FE22                  		move.l	d0,(v_time).w
00005240 11C0 FE1B                  		move.b	d0,(v_lifecount).w
00005244 11C0 FE2C                  		move.b	d0,(v_shield).w
00005248 11C0 FE2D                  		move.b	d0,(v_invinc).w
0000524C 11C0 FE2E                  		move.b	d0,(v_shoes).w
00005250 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005254 31C0 FE08                  		move.w	d0,(v_debuguse).w
00005258 31C0 FE02                  		move.w	d0,(f_restart).w
0000525C 31C0 FE04                  		move.w	d0,(v_framecount).w
00005260 6100 EEC6                  		bsr.w	OscillateNumInit
00005264 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w
0000526A 11FC 0001 FE1D             		move.b	#1,(f_ringcount).w
00005270 11FC 0000 FE1E             		move.b	#0,(f_timecount).w
00005276 31FC 0708 F614             		move.w	#1800,(v_demolength).w
0000527C 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00005282 6100 D72A                  		bsr.w	WaitForVBla
00005286 3038 F60C                  		move.w	(v_vdp_buffer1).w,d0
0000528A 0000 0040                  		ori.b	#$40,d0
0000528E 33C0 00C0 0004             		move.w	d0,(vdp_control_port).l
00005294 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
0000529A 6100 CB16                  		bsr.w	PaletteFadeIn
0000529E                            

0000529E                            ; ---------------------------------------------------------------------------
0000529E                            ; Main ending sequence loop
0000529E                            ; ---------------------------------------------------------------------------
0000529E                            

0000529E                            End_MainLoop:
0000529E 6100 C10E                  		bsr.w	PauseGame
000052A2 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
000052A8 6100 D704                  		bsr.w	WaitForVBla
000052AC 5278 FE04                  		addq.w	#1,(v_framecount).w
000052B0 6100 0000                  		bsr.w	End_MoveSonic
000052B4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000052BA 6100 0000                  		bsr.w	DeformLayers
000052BE 4EB9 0000 0000             		jsr	(BuildSprites).l
000052C4 4EB9 0000 0000             		jsr	(ObjPosLoad).l
000052CA 6100 C676                  		bsr.w	PaletteCycle
000052CE 6100 EEAE                  		bsr.w	OscillateNumDo
000052D2 6100 EF42                  		bsr.w	SynchroAnimate
000052D6 0C38 0000 F600             		cmpi.b	#id_Ending,(v_gamemode).w ; is game mode $18 (ending)?
000052DC 6700                       		beq.s	End_ChkEmerald	; if yes, branch
000052DE                            

000052DE 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; goto credits
000052E4 103C 0000                  		move.b	#bgm_Credits,d0
000052E8 6100 C0B8                  		bsr.w	PlaySound_Special ; play credits music
000052EC 31FC 0000 FFF4             		move.w	#0,(v_creditsnum).w ; set credits index number to 0
000052F2 4E75                       		rts	
000052F4                            ; ===========================================================================
000052F4                            

000052F4                            End_ChkEmerald:
000052F4 4A78 FE02                  		tst.w	(f_restart).w	; has Sonic released the emeralds?
000052F8 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000052FC                            

000052FC 4278 FE02                  		clr.w	(f_restart).w
00005300 31FC 003F F626             		move.w	#$3F,(v_pfade_start).w
00005306 4278 F794                  		clr.w	(v_palchgspeed).w
0000530A                            

0000530A                            	End_AllEmlds:
0000530A 6100 C0A2                  		bsr.w	PauseGame
0000530E 11FC 0018 F62A             		move.b	#$18,(v_vbla_routine).w
00005314 6100 D698                  		bsr.w	WaitForVBla
00005318 5278 FE04                  		addq.w	#1,(v_framecount).w
0000531C 6100 0000                  		bsr.w	End_MoveSonic
00005320 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005326 6100 0000                  		bsr.w	DeformLayers
0000532A 4EB9 0000 0000             		jsr	(BuildSprites).l
00005330 4EB9 0000 0000             		jsr	(ObjPosLoad).l
00005336 6100 EE46                  		bsr.w	OscillateNumDo
0000533A 6100 EEDA                  		bsr.w	SynchroAnimate
0000533E 5378 F794                  		subq.w	#1,(v_palchgspeed).w
00005342 6A00                       		bpl.s	End_SlowFade
00005344 31FC 0002 F794             		move.w	#2,(v_palchgspeed).w
0000534A 6100 CC56                  		bsr.w	WhiteOut_ToWhite
0000534E                            

0000534E                            	End_SlowFade:
0000534E 4A78 FE02                  		tst.w	(f_restart).w
00005352 6700 FFB6                  		beq.w	End_AllEmlds
00005356 4278 FE02                  		clr.w	(f_restart).w
0000535A 31FC 2E2F A480             		move.w	#$2E2F,(v_lvllayout+$80).w ; modify level layout
00005360 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00005366 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0000536C 47F8 F700                  		lea	(v_screenposx).w,a3
00005370 49F8 A400                  		lea	(v_lvllayout).w,a4
00005374 343C 4000                  		move.w	#$4000,d2
00005378 6100 0000                  		bsr.w	DrawChunks
0000537C 7013                       		moveq	#palid_Ending,d0
0000537E 6100 CD82                  		bsr.w	PalLoad1	; load ending palette
00005382 6100 CB52                  		bsr.w	PaletteWhiteIn
00005386 6000 FF16                  		bra.w	End_MainLoop
0000538A                            

0000538A                            ; ---------------------------------------------------------------------------
0000538A                            ; Subroutine controlling Sonic on the ending sequence
0000538A                            ; ---------------------------------------------------------------------------
0000538A                            

0000538A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000538A                            

0000538A                            

0000538A                            End_MoveSonic:
0000538A 1038 F7D7                  		move.b	(v_sonicend).w,d0
0000538E 6600                       		bne.s	End_MoveSon2
00005390 0C78 0090 D008             		cmpi.w	#$90,(v_player+obX).w ; has Sonic passed $90 on x-axis?
00005396 6400                       		bhs.s	End_MoveSonExit	; if not, branch
00005398                            

00005398 5438 F7D7                  		addq.b	#2,(v_sonicend).w
0000539C 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock player's controls
000053A2 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; move Sonic to the right
000053A8 4E75                       		rts	
000053AA                            ; ===========================================================================
000053AA                            

000053AA                            End_MoveSon2:
000053AA 5500                       		subq.b	#2,d0
000053AC 6600                       		bne.s	End_MoveSon3
000053AE 0C78 00A0 D008             		cmpi.w	#$A0,(v_player+obX).w ; has Sonic passed $A0 on x-axis?
000053B4 6500                       		blo.s	End_MoveSonExit	; if not, branch
000053B6                            

000053B6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000053BA 7000                       		moveq	#0,d0
000053BC 11C0 F7CC                  		move.b	d0,(f_lockctrl).w
000053C0 31C0 F602                  		move.w	d0,(v_jpadhold2).w ; stop Sonic moving
000053C4 31C0 D014                  		move.w	d0,(v_player+obInertia).w
000053C8 11FC 0081 F7C8             		move.b	#$81,(f_playerctrl).w ; lock controls and disable object interaction
000053CE 11FC 0003 D01A             		move.b	#fr_Wait2,(v_player+obFrame).w
000053D4 31FC 0000 D01C             		move.w	#(id_Wait<<8)+id_Wait,(v_player+obAnim).w ; use "standing" animation
000053DA 11FC 0003 D01E             		move.b	#3,(v_player+obTimeFrame).w
000053E0 4E75                       		rts	
000053E2                            ; ===========================================================================
000053E2                            

000053E2                            End_MoveSon3:
000053E2 5500                       		subq.b	#2,d0
000053E4 6600                       		bne.s	End_MoveSonExit
000053E6 5438 F7D7                  		addq.b	#2,(v_sonicend).w
000053EA 31FC 00A0 D008             		move.w	#$A0,(v_player+obX).w
000053F0 11FC 0000 D000             		move.b	#id_EndSonic,(v_player).w ; load Sonic ending sequence object
000053F6 4278 D024                  		clr.w	(v_player+obRoutine).w
000053FA                            

000053FA                            End_MoveSonExit:
000053FA 4E75                       		rts	
000053FC                            ; End of function End_MoveSonic
000053FC                            

000053FC                            ; ===========================================================================
000053FC                            

000053FC                            		include	"_incObj\87 Ending Sequence Sonic.asm"
000053FC                            ; ---------------------------------------------------------------------------
000053FC                            ; Object 87 - Sonic on ending sequence
000053FC                            ; ---------------------------------------------------------------------------
000053FC                            

000053FC                            EndSonic:
000053FC 7000                       		moveq	#0,d0
000053FE 1028 0025                  		move.b	ob2ndRout(a0),d0
00005402 323B 0000                  		move.w	ESon_Index(pc,d0.w),d1
00005406 4EBB 1000                  		jsr	ESon_Index(pc,d1.w)
0000540A 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005410                            ; ===========================================================================
00005410 0000 0000                  ESon_Index:	dc.w ESon_Main-ESon_Index, ESon_MakeEmeralds-ESon_Index
00005414 0000 0000                  		dc.w Obj87_Animate-ESon_Index,	Obj87_LookUp-ESon_Index
00005418 0000 0000                  		dc.w Obj87_ClrObjRam-ESon_Index, Obj87_Animate-ESon_Index
0000541C 0000 0000                  		dc.w Obj87_MakeLogo-ESon_Index, Obj87_Animate-ESon_Index
00005420 0000 0000                  		dc.w Obj87_Leap-ESon_Index, Obj87_Animate-ESon_Index
00005424                            

00005424 =00000030                  eson_time:	equ $30	; time to wait between events
00005424                            ; ===========================================================================
00005424                            

00005424                            ESon_Main:	; Routine 0
00005424 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
0000542A 6700                       		beq.s	ESon_Main2	; if yes, branch
0000542C 0628 0010 0025             		addi.b	#$10,ob2ndRout(a0) ; else, skip emerald sequence
00005432 317C 00D8 0030             		move.w	#216,eson_time(a0)
00005438 4E75                       		rts	
0000543A                            ; ===========================================================================
0000543A                            

0000543A                            ESon_Main2:
0000543A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000543E 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00005446 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000544C 117C 0004 0001             		move.b	#4,obRender(a0)
00005452 4228 0022                  		clr.b	obStatus(a0)
00005456 117C 0002 0018             		move.b	#2,obPriority(a0)
0000545C 117C 0000 001A             		move.b	#0,obFrame(a0)
00005462 317C 0050 0030             		move.w	#80,eson_time(a0) ; set duration for Sonic to pause
00005468                            

00005468                            ESon_MakeEmeralds:
00005468                            		; Routine 2
00005468 5368 0030                  		subq.w	#1,eson_time(a0) ; subtract 1 from duration
0000546C 6600                       		bne.s	ESon_Wait
0000546E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00005472 317C 0001 001C             		move.w	#1,obAnim(a0)
00005478 11FC 0000 D400             		move.b	#id_EndChaos,(v_endemeralds).w ; load chaos emeralds objects
0000547E                            

0000547E                            	ESon_Wait:
0000547E 4E75                       		rts	
00005480                            ; ===========================================================================
00005480                            

00005480                            Obj87_LookUp:	; Routine 6
00005480 0C79 2000 00FF D43C        		cmpi.w	#$2000,((v_objspace&$FFFFFF)+$400+$3C).l
00005488 6600                       		bne.s	locret_5480
0000548A 31FC 0001 FE02             		move.w	#1,(f_restart).w ; set level to	restart	(causes	flash)
00005490 317C 005A 0030             		move.w	#90,eson_time(a0)
00005496 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000549A                            

0000549A                            locret_5480:
0000549A 4E75                       		rts	
0000549C                            ; ===========================================================================
0000549C                            

0000549C                            Obj87_ClrObjRam:
0000549C                            		; Routine 8
0000549C 5368 0030                  		subq.w	#1,eson_time(a0)
000054A0 6600                       		bne.s	ESon_Wait2
000054A2 43F8 D400                  		lea	(v_endemeralds).w,a1
000054A6 323C 00FF                  		move.w	#$FF,d1
000054AA                            

000054AA                            Obj87_ClrLoop:
000054AA 4299                       		clr.l	(a1)+
000054AC 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000054B0 31FC 0001 FE02             		move.w	#1,(f_restart).w
000054B6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000054BA 117C 0001 001C             		move.b	#1,obAnim(a0)
000054C0 317C 003C 0030             		move.w	#60,eson_time(a0)
000054C6                            

000054C6                            ESon_Wait2:
000054C6 4E75                       		rts	
000054C8                            ; ===========================================================================
000054C8                            

000054C8                            Obj87_MakeLogo:	; Routine $C
000054C8 5368 0030                  		subq.w	#1,eson_time(a0)
000054CC 6600                       		bne.s	ESon_Wait3
000054CE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000054D2 317C 00B4 0030             		move.w	#180,eson_time(a0)
000054D8 117C 0002 001C             		move.b	#2,obAnim(a0)
000054DE 11FC 0000 D400             		move.b	#id_EndSTH,(v_endlogo).w ; load "SONIC THE HEDGEHOG" object
000054E4                            

000054E4                            ESon_Wait3:
000054E4 4E75                       		rts	
000054E6                            ; ===========================================================================
000054E6                            

000054E6                            Obj87_Animate:	; Rountine 4, $A, $E, $12
000054E6 43F9 0000 0000             		lea	(AniScript_ESon).l,a1
000054EC 4EF9 0000 0000             		jmp	(AnimateSprite).l
000054F2                            ; ===========================================================================
000054F2                            

000054F2                            Obj87_Leap:	; Routine $10
000054F2 5368 0030                  		subq.w	#1,eson_time(a0)
000054F6 6600                       		bne.s	ESon_Wait4
000054F8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000054FC 217C 0000 0000 0004        		move.l	#Map_ESon,obMap(a0)
00005504 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
0000550A 117C 0004 0001             		move.b	#4,obRender(a0)
00005510 4228 0022                  		clr.b	obStatus(a0)
00005514 117C 0002 0018             		move.b	#2,obPriority(a0)
0000551A 117C 0005 001A             		move.b	#5,obFrame(a0)
00005520 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "leaping"	animation
00005526 11FC 0000 D400             		move.b	#id_EndSTH,(v_endlogo).w ; load "SONIC THE HEDGEHOG" object
0000552C 60B8                       		bra.s	Obj87_Animate
0000552E                            ; ===========================================================================
0000552E                            

0000552E                            ESon_Wait4:
0000552E 4E75                       		rts	
0000552E 4E75                       		rts	
00005530                            		include "_anim\Ending Sequence Sonic.asm"
00005530                            ; ---------------------------------------------------------------------------
00005530                            ; Animation script - Sonic on the ending sequence
00005530                            ; ---------------------------------------------------------------------------
00005530 0000                       AniScript_ESon:	dc.w byte_551C-AniScript_ESon
00005532 0000                       		dc.w byte_552A-AniScript_ESon
00005534 0000                       		dc.w byte_5534-AniScript_ESon
00005536 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005544 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000554E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005556                            		even
00005556                            		even
00005556                            		include	"_incObj\88 Ending Sequence Emeralds.asm"
00005556                            ; ---------------------------------------------------------------------------
00005556                            ; Object 88 - chaos emeralds on	the ending sequence
00005556                            ; ---------------------------------------------------------------------------
00005556                            

00005556                            EndChaos:
00005556 7000                       		moveq	#0,d0
00005558 1028 0024                  		move.b	obRoutine(a0),d0
0000555C 323B 0000                  		move.w	ECha_Index(pc,d0.w),d1
00005560 4EBB 1000                  		jsr	ECha_Index(pc,d1.w)
00005564 4EF9 0000 0000             		jmp	(DisplaySprite).l
0000556A                            ; ===========================================================================
0000556A 0000                       ECha_Index:	dc.w ECha_Main-ECha_Index
0000556C 0000                       		dc.w ECha_Move-ECha_Index
0000556E                            

0000556E =00000038                  echa_origX:	equ $38	; x-axis centre of emerald circle (2 bytes)
0000556E =0000003A                  echa_origY:	equ $3A	; y-axis centre of emerald circle (2 bytes)
0000556E =0000003C                  echa_radius:	equ $3C	; radius (2 bytes)
0000556E =0000003E                  echa_angle:	equ $3E	; angle for rotation (2 bytes)
0000556E                            ; ===========================================================================
0000556E                            

0000556E                            ECha_Main:	; Routine 0
0000556E 0C38 0002 D01A             		cmpi.b	#2,(v_player+obFrame).w ; this isn't `fr_Wait1`: `v_player` is Object 88, which has its own frames
00005574 6700                       		beq.s	ECha_CreateEms
00005576 588F                       		addq.l	#4,sp
00005578 4E75                       		rts	
0000557A                            ; ===========================================================================
0000557A                            

0000557A                            ECha_CreateEms:
0000557A 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; match X position with Sonic
00005580 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0) ; match Y position with Sonic
00005586 2248                       		movea.l	a0,a1
00005588 7600                       		moveq	#0,d3
0000558A 7401                       		moveq	#1,d2
0000558C 7205                       		moveq	#5,d1
0000558E                            

0000558E                            	ECha_LoadLoop:
0000558E 12BC 0000                  		move.b	#id_EndChaos,(a1) ; load chaos emerald object
00005592 5429 0024                  		addq.b	#2,obRoutine(a1)
00005596 237C 0000 0000 0004        		move.l	#Map_ECha,obMap(a1)
0000559E 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
000055A4 137C 0004 0001             		move.b	#4,obRender(a1)
000055AA 137C 0001 0018             		move.b	#1,obPriority(a1)
000055B0 3368 0008 0038             		move.w	obX(a0),echa_origX(a1)
000055B6 3368 000C 003A             		move.w	obY(a0),echa_origY(a1)
000055BC 1342 001C                  		move.b	d2,obAnim(a1)
000055C0 1342 001A                  		move.b	d2,obFrame(a1)
000055C4 5202                       		addq.b	#1,d2
000055C6 1343 0026                  		move.b	d3,obAngle(a1)
000055CA 0603 002A                  		addi.b	#$100/6,d3	; angle between each emerald
000055CE 43E9 0040                  		lea	$40(a1),a1
000055D2 51C9 FFBA                  		dbf	d1,ECha_LoadLoop ; repeat 5 more times
000055D6                            

000055D6                            ECha_Move:	; Routine 2
000055D6 3028 003E                  		move.w	echa_angle(a0),d0
000055DA D168 0026                  		add.w	d0,obAngle(a0)
000055DE 1028 0026                  		move.b	obAngle(a0),d0
000055E2 4EB9 0000 29E0             		jsr	(CalcSine).l
000055E8 7800                       		moveq	#0,d4
000055EA 1828 003C                  		move.b	echa_radius(a0),d4
000055EE C3C4                       		muls.w	d4,d1
000055F0 E081                       		asr.l	#8,d1
000055F2 C1C4                       		muls.w	d4,d0
000055F4 E080                       		asr.l	#8,d0
000055F6 D268 0038                  		add.w	echa_origX(a0),d1
000055FA D068 003A                  		add.w	echa_origY(a0),d0
000055FE 3141 0008                  		move.w	d1,obX(a0)
00005602 3140 000C                  		move.w	d0,obY(a0)
00005606                            

00005606                            	ECha_Expand:
00005606 0C68 2000 003C             		cmpi.w	#$2000,echa_radius(a0)
0000560C 6700                       		beq.s	ECha_Rotate
0000560E 0668 0020 003C             		addi.w	#$20,echa_radius(a0) ; expand circle of emeralds
00005614                            

00005614                            	ECha_Rotate:
00005614 0C68 2000 003E             		cmpi.w	#$2000,echa_angle(a0)
0000561A 6700                       		beq.s	ECha_Rise
0000561C 0668 0020 003E             		addi.w	#$20,echa_angle(a0) ; move emeralds around the centre
00005622                            

00005622                            	ECha_Rise:
00005622 0C68 0140 003A             		cmpi.w	#$140,echa_origY(a0)
00005628 6700                       		beq.s	ECha_End
0000562A 5368 003A                  		subq.w	#1,echa_origY(a0) ; make circle rise
0000562E                            

0000562E                            ECha_End:
0000562E 4E75                       		rts	
0000562E 4E75                       		rts	
00005630                            		include	"_incObj\89 Ending Sequence STH.asm"
00005630                            ; ---------------------------------------------------------------------------
00005630                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005630                            ; ---------------------------------------------------------------------------
00005630                            

00005630                            EndSTH:
00005630 7000                       		moveq	#0,d0
00005632 1028 0024                  		move.b	obRoutine(a0),d0
00005636 323B 0000                  		move.w	ESth_Index(pc,d0.w),d1
0000563A 4EBB 1000                  		jsr	ESth_Index(pc,d1.w)
0000563E 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005644                            ; ===========================================================================
00005644 0000                       ESth_Index:	dc.w ESth_Main-ESth_Index
00005646 0000                       		dc.w ESth_Move-ESth_Index
00005648 0000                       		dc.w ESth_GotoCredits-ESth_Index
0000564A                            

0000564A =00000030                  esth_time:	equ $30		; time until exit
0000564A                            ; ===========================================================================
0000564A                            

0000564A                            ESth_Main:	; Routine 0
0000564A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000564E 317C FFE0 0008             		move.w	#-$20,obX(a0)	; object starts	outside	the level boundary
00005654 317C 00D8 000A             		move.w	#$D8,obScreenY(a0)
0000565A 217C 0000 0000 0004        		move.l	#Map_ESth,obMap(a0)
00005662 317C 05C5 0002             		move.w	#$5C5,obGfx(a0)
00005668 117C 0000 0001             		move.b	#0,obRender(a0)
0000566E 117C 0000 0018             		move.b	#0,obPriority(a0)
00005674                            

00005674                            ESth_Move:	; Routine 2
00005674 0C68 00C0 0008             		cmpi.w	#$C0,obX(a0)	; has object reached $C0?
0000567A 6700                       		beq.s	ESth_Delay	; if yes, branch
0000567C 0668 0010 0008             		addi.w	#$10,obX(a0)	; move object to the right
00005682 4E75                       		rts
00005684                            

00005684                            ESth_Delay:
00005684 5428 0024                  		addq.b	#2,obRoutine(a0)
00005688 317C 012C 0030             		move.w	#300,esth_time(a0) ; set duration for delay (5 seconds)
0000568E                            

0000568E                            ESth_GotoCredits:
0000568E                            		; Routine 4
0000568E 5368 0030                  		subq.w	#1,esth_time(a0) ; subtract 1 from duration
00005692 6A00                       		bpl.s	ESth_Wait
00005694 11FC 0000 F600             		move.b	#id_Credits,(v_gamemode).w ; exit to credits
0000569A                            

0000569A                            	ESth_Wait:
0000569A 4E75                       		rts
0000569C                            Map_ESon:	include	"_maps\Ending Sequence Sonic.asm"
0000569C                            ; ---------------------------------------------------------------------------
0000569C                            ; Sprite mappings - Sonic on the ending	sequence
0000569C                            ; ---------------------------------------------------------------------------
0000569C                            Map_ESon_internal:
0000569C 0000                       		dc.w M_ESon_Hold1-Map_ESon_internal
0000569E 0000                       		dc.w M_ESon_Hold2-Map_ESon_internal
000056A0 0000                       		dc.w M_ESon_Up-Map_ESon_internal
000056A2 0000                       		dc.w M_ESon_Conf1-Map_ESon_internal
000056A4 0000                       		dc.w M_ESon_Conf2-Map_ESon_internal
000056A6 0000                       		dc.w M_ESon_Leap1-Map_ESon_internal
000056A8 0000                       		dc.w M_ESon_Leap2-Map_ESon_internal
000056AA 0000                       		dc.w M_ESon_Leap3-Map_ESon_internal
000056AC 02                         M_ESon_Hold1:	dc.b 2
000056AD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000056B2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056B7 03                         M_ESon_Hold2:	dc.b 3
000056B8 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000056BD EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000056C2 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056C7 02                         M_ESon_Up:	dc.b 2
000056C8 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000056CD FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000056D2 02                         M_ESon_Conf1:	dc.b 2
000056D3 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000056D8 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000056DD 02                         M_ESon_Conf2:	dc.b 2
000056DE EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000056E3 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000056E8 03                         M_ESon_Leap1:	dc.b 3
000056E9 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000056EE EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000056F3 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000056F8 07                         M_ESon_Leap2:	dc.b 7
000056F9 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000056FE BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005703 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005708 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
0000570D DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005712 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005717 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
0000571C 18                         M_ESon_Leap3:	dc.b $18
0000571D 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005722 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005727 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000572C 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005731 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005736 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
0000573B 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005740 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005745 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
0000574A B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000574F A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005754 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005759 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000575E B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005763 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005768 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000576D D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005772 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005777 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000577C E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005781 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005786 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
0000578B F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005790 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005796 00                         		even
00005796 00                         		even
00005796                            Map_ECha:	include	"_maps\Ending Sequence Emeralds.asm"
00005796                            ; ---------------------------------------------------------------------------
00005796                            ; Sprite mappings - chaos emeralds on the ending sequence
00005796                            ; ---------------------------------------------------------------------------
00005796                            Map_ECha_internal:
00005796 0000                       		dc.w M_ECha_1-Map_ECha_internal
00005798 0000                       		dc.w M_ECha_2-Map_ECha_internal
0000579A 0000                       		dc.w M_ECha_3-Map_ECha_internal
0000579C 0000                       		dc.w M_ECha_4-Map_ECha_internal
0000579E 0000                       		dc.w M_ECha_5-Map_ECha_internal
000057A0 0000                       		dc.w M_ECha_6-Map_ECha_internal
000057A2 0000                       		dc.w M_ECha_7-Map_ECha_internal
000057A4 01                         M_ECha_1:	dc.b 1
000057A5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000057AA 01                         M_ECha_2:	dc.b 1
000057AB F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000057B0 01                         M_ECha_3:	dc.b 1
000057B1 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000057B6 01                         M_ECha_4:	dc.b 1
000057B7 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000057BC 01                         M_ECha_5:	dc.b 1
000057BD F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000057C2 01                         M_ECha_6:	dc.b 1
000057C3 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000057C8 01                         M_ECha_7:	dc.b 1
000057C9 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000057CE                            		even
000057CE                            		even
000057CE                            Map_ESth:	include	"_maps\Ending Sequence STH.asm"
000057CE                            ; ---------------------------------------------------------------------------
000057CE                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057CE                            ; ---------------------------------------------------------------------------
000057CE                            Map_ESth_internal:
000057CE 0000                       		dc.w M_ESth_1-Map_ESth_internal
000057D0 03                         M_ESth_1:	dc.b 3
000057D1 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000057D6 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000057DB F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000057E0                            		even
000057E0                            		even
000057E0                            

000057E0                            ; ===========================================================================
000057E0                            ; ---------------------------------------------------------------------------
000057E0                            ; Credits ending sequence
000057E0                            ; ---------------------------------------------------------------------------
000057E0                            

000057E0                            GM_Credits:
000057E0 6100 BE02                  		bsr.w	ClearPLC
000057E4 6100 C672                  		bsr.w	PaletteFadeOut
000057E8 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
000057EE 3CBC 8004                  		move.w	#$8004,(a6)		; 8-colour mode
000057F2 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
000057F6 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
000057FA 3CBC 9001                  		move.w	#$9001,(a6)		; 64-cell hscroll size
000057FE 3CBC 9200                  		move.w	#$9200,(a6)		; window vertical position
00005802 3CBC 8B03                  		move.w	#$8B03,(a6)		; line scroll mode
00005806 3CBC 8720                  		move.w	#$8720,(a6)		; set background colour (line 3; colour 0)
0000580A 4238 F64E                  		clr.b	(f_wtr_state).w
0000580E 6100 BAC2                  		bsr.w	ClearScreen
00005812                            

00005812 43F8 D000                  		lea	(v_objspace).w,a1
00005816 7000                       		moveq	#0,d0
00005818 323C 07FF                  		move.w	#$7FF,d1
0000581C                            	Cred_ClrObjRam:
0000581C 22C0                       		move.l	d0,(a1)+
0000581E 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005822                            

0000582C 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005832 6100 BC12                  		bsr.w	NemDec
00005836                            

00005836 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
0000583A 7000                       		moveq	#0,d0
0000583C 323C 001F                  		move.w	#$1F,d1
00005840                            	Cred_ClrPal:
00005840 22C0                       		move.l	d0,(a1)+
00005842 51C9 FFFC                  		dbf	d1,Cred_ClrPal ; fill palette with black
00005846                            

00005846 7003                       		moveq	#palid_Sonic,d0
00005848 6100 C8B8                  		bsr.w	PalLoad1	; load Sonic's palette
0000584C 11FC 0000 D080             		move.b	#id_CreditsText,(v_credits).w ; load credits object
00005852 4EB9 0000 0000             		jsr	(ExecuteObjects).l
00005858 4EB9 0000 0000             		jsr	(BuildSprites).l
0000585E 6100 0000                  		bsr.w	EndingDemoLoad
00005862 7000                       		moveq	#0,d0
00005864 1038 FE10                  		move.b	(v_zone).w,d0
00005868 E948                       		lsl.w	#4,d0
0000586A 45F9 0000 0000             		lea	(LevelHeaders).l,a2
00005870 45F2 0000                  		lea	(a2,d0.w),a2
00005874 7000                       		moveq	#0,d0
00005876 1012                       		move.b	(a2),d0
00005878 6700                       		beq.s	Cred_SkipObjGfx
0000587A 6100 BD0A                  		bsr.w	AddPLC		; load object graphics
0000587E                            

0000587E                            	Cred_SkipObjGfx:
0000587E 7000                       		moveq	#plcid_Main2,d0
00005880 6100 BD04                  		bsr.w	AddPLC		; load standard	level graphics
00005884 31FC 0078 F614             		move.w	#120,(v_demolength).w ; display a credit for 2 seconds
0000588A 6100 C526                  		bsr.w	PaletteFadeIn
0000588E                            

0000588E                            Cred_WaitLoop:
0000588E 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
00005894 6100 D118                  		bsr.w	WaitForVBla
00005898 6100 BD58                  		bsr.w	RunPLC
0000589C 4A78 F614                  		tst.w	(v_demolength).w ; have 2 seconds elapsed?
000058A0 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000058A2 4AB8 F680                  		tst.l	(v_plc_buffer).w ; have level gfx finished decompressing?
000058A6 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000058A8 0C78 0009 FFF4             		cmpi.w	#9,(v_creditsnum).w ; have the credits finished?
000058AE 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000058B2 4E75                       		rts	
000058B4                            

000058B4                            ; ---------------------------------------------------------------------------
000058B4                            ; Ending sequence demo loading subroutine
000058B4                            ; ---------------------------------------------------------------------------
000058B4                            

000058B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000058B4                            

000058B4                            

000058B4                            EndingDemoLoad:
000058B4 3038 FFF4                  		move.w	(v_creditsnum).w,d0
000058B8 0240 000F                  		andi.w	#$F,d0
000058BC D040                       		add.w	d0,d0
000058BE 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000058C2 31C0 FE10                  		move.w	d0,(v_zone).w	; set level from level array
000058C6 5278 FFF4                  		addq.w	#1,(v_creditsnum).w
000058CA 0C78 0009 FFF4             		cmpi.w	#9,(v_creditsnum).w ; have credits finished?
000058D0 6400                       		bhs.s	EndDemo_Exit	; if yes, branch
000058D2 31FC 8001 FFF0             		move.w	#$8001,(f_demo).w ; set demo+ending mode
000058D8 11FC 0000 F600             		move.b	#id_Demo,(v_gamemode).w ; set game mode to 8 (demo)
000058DE 11FC 0003 FE12             		move.b	#3,(v_lives).w	; set lives to 3
000058E4 7000                       		moveq	#0,d0
000058E6 31C0 FE20                  		move.w	d0,(v_rings).w	; clear rings
000058EA 21C0 FE22                  		move.l	d0,(v_time).w	; clear time
000058EE 21C0 FE26                  		move.l	d0,(v_score).w	; clear score
000058F2 11C0 FE30                  		move.b	d0,(v_lastlamp).w ; clear lamppost counter
000058F6 0C78 0004 FFF4             		cmpi.w	#4,(v_creditsnum).w ; is SLZ demo running?
000058FC 6600                       		bne.s	EndDemo_Exit	; if not, branch
000058FE 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005904 45F8 FE30                  		lea	(v_lastlamp).w,a2
00005908 303C 0008                  		move.w	#8,d0
0000590C                            

0000590C                            	EndDemo_LampLoad:
0000590C 24D9                       		move.l	(a1)+,(a2)+
0000590E 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005912                            

00005912                            EndDemo_Exit:
00005912 4E75                       		rts	
00005914                            ; End of function EndingDemoLoad
00005914                            

00005914                            ; ===========================================================================
00005914                            ; ---------------------------------------------------------------------------
00005914                            ; Levels used in the end sequence demos
00005914                            ; ---------------------------------------------------------------------------
00005914                            EndDemo_Levels:	incbin	"misc\Demo Level Order - Ending.bin"
00005924                            

00005924                            ; ---------------------------------------------------------------------------
00005924                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005924                            ; ---------------------------------------------------------------------------
00005924                            EndDemo_LampVar:
00005924 0101                       		dc.b 1,	1		; number of the last lamppost
00005926 0A00 062C                  		dc.w $A00, $62C		; x/y-axis position
0000592A 000D                       		dc.w 13			; rings
0000592C 0000 0000                  		dc.l 0			; time
00005930 0000                       		dc.b 0,	0		; dynamic level event routine counter
00005932 0800                       		dc.w $800		; level bottom boundary
00005934 0957 05CC                  		dc.w $957, $5CC		; x/y axis screen position
00005938 04AB 03A6 0000 028C 0000+  		dc.w $4AB, $3A6, 0, $28C, 0, 0 ; scroll info
00005944 0308                       		dc.w $308		; water height
00005946 0101                       		dc.b 1,	1		; water routine and state
00005948                            ; ===========================================================================
00005948                            ; ---------------------------------------------------------------------------
00005948                            ; "TRY AGAIN" and "END"	screens
00005948                            ; ---------------------------------------------------------------------------
00005948                            

00005948                            TryAgainEnd:
00005948 6100 BC9A                  		bsr.w	ClearPLC
0000594C 6100 C50A                  		bsr.w	PaletteFadeOut
00005950 4DF9 00C0 0004             		lea	(vdp_control_port).l,a6
00005956 3CBC 8004                  		move.w	#$8004,(a6)	; use 8-colour mode
0000595A 3CBC 8230                  		move.w	#$8200+(vram_fg>>10),(a6) ; set foreground nametable address
0000595E 3CBC 8407                  		move.w	#$8400+(vram_bg>>13),(a6) ; set background nametable address
00005962 3CBC 9001                  		move.w	#$9001,(a6)	; 64-cell hscroll size
00005966 3CBC 9200                  		move.w	#$9200,(a6)	; window vertical position
0000596A 3CBC 8B03                  		move.w	#$8B03,(a6)	; line scroll mode
0000596E 3CBC 8720                  		move.w	#$8720,(a6)	; set background colour (line 3; colour 0)
00005972 4238 F64E                  		clr.b	(f_wtr_state).w
00005976 6100 B95A                  		bsr.w	ClearScreen
0000597A                            

0000597A 43F8 D000                  		lea	(v_objspace).w,a1
0000597E 7000                       		moveq	#0,d0
00005980 323C 07FF                  		move.w	#$7FF,d1
00005984                            	TryAg_ClrObjRam:
00005984 22C0                       		move.l	d0,(a1)+
00005986 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
0000598A                            

0000598A 7000                       		moveq	#plcid_TryAgain,d0
0000598C 6100 BD64                  		bsr.w	QuickPLC	; load "TRY AGAIN" or "END" patterns
00005990                            

00005990 43F8 FB80                  		lea	(v_pal_dry_dup).w,a1
00005994 7000                       		moveq	#0,d0
00005996 323C 001F                  		move.w	#$1F,d1
0000599A                            	TryAg_ClrPal:
0000599A 22C0                       		move.l	d0,(a1)+
0000599C 51C9 FFFC                  		dbf	d1,TryAg_ClrPal ; fill palette with black
000059A0                            

000059A0 7013                       		moveq	#palid_Ending,d0
000059A2 6100 C75E                  		bsr.w	PalLoad1	; load ending palette
000059A6 4278 FBC0                  		clr.w	(v_pal_dry_dup+$40).w
000059AA 11FC 0000 D080             		move.b	#id_EndEggman,(v_endeggman).w ; load Eggman object
000059B0 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000059B6 4EB9 0000 0000             		jsr	(BuildSprites).l
000059BC 31FC 0708 F614             		move.w	#1800,(v_demolength).w ; show screen for 30 seconds
000059C2 6100 C3EE                  		bsr.w	PaletteFadeIn
000059C6                            

000059C6                            ; ---------------------------------------------------------------------------
000059C6                            ; "TRY AGAIN" and "END"	screen main loop
000059C6                            ; ---------------------------------------------------------------------------
000059C6                            TryAg_MainLoop:
000059C6 6100 B9E6                  		bsr.w	PauseGame
000059CA 11FC 0004 F62A             		move.b	#4,(v_vbla_routine).w
000059D0 6100 CFDC                  		bsr.w	WaitForVBla
000059D4 4EB9 0000 0000             		jsr	(ExecuteObjects).l
000059DA 4EB9 0000 0000             		jsr	(BuildSprites).l
000059E0 0238 0080 F605             		andi.b	#btnStart,(v_jpadpress1).w ; is Start button pressed?
000059E6 6600                       		bne.s	TryAg_Exit	; if yes, branch
000059E8 4A78 F614                  		tst.w	(v_demolength).w ; has 30 seconds elapsed?
000059EC 6700                       		beq.s	TryAg_Exit	; if yes, branch
000059EE 0C38 0000 F600             		cmpi.b	#id_Credits,(v_gamemode).w
000059F4 67D0                       		beq.s	TryAg_MainLoop
000059F6                            

000059F6                            TryAg_Exit:
000059F6 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; goto Sega screen
000059FC 4E75                       		rts	
000059FE                            

000059FE                            ; ===========================================================================
000059FE                            

000059FE                            		include	"_incObj\8B Try Again & End Eggman.asm"
000059FE                            ; ---------------------------------------------------------------------------
000059FE                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000059FE                            ; ---------------------------------------------------------------------------
000059FE                            

000059FE                            EndEggman:
000059FE 7000                       		moveq	#0,d0
00005A00 1028 0024                  		move.b	obRoutine(a0),d0
00005A04 323B 0000                  		move.w	EEgg_Index(pc,d0.w),d1
00005A08 4EBB 1000                  		jsr	EEgg_Index(pc,d1.w)
00005A0C 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005A12                            ; ===========================================================================
00005A12 0000                       EEgg_Index:	dc.w EEgg_Main-EEgg_Index
00005A14 0000                       		dc.w EEgg_Animate-EEgg_Index
00005A16 0000                       		dc.w EEgg_Juggle-EEgg_Index
00005A18 0000                       		dc.w EEgg_Wait-EEgg_Index
00005A1A                            

00005A1A =00000030                  eegg_time:	equ $30		; time between juggle motions
00005A1A                            ; ===========================================================================
00005A1A                            

00005A1A                            EEgg_Main:	; Routine 0
00005A1A 5428 0024                  		addq.b	#2,obRoutine(a0)
00005A1E 317C 0120 0008             		move.w	#$120,obX(a0)
00005A24 317C 00F4 000A             		move.w	#$F4,obScreenY(a0)
00005A2A 217C 0000 0000 0004        		move.l	#Map_EEgg,obMap(a0)
00005A32 317C 03E1 0002             		move.w	#$3E1,obGfx(a0)
00005A38 117C 0000 0001             		move.b	#0,obRender(a0)
00005A3E 117C 0002 0018             		move.b	#2,obPriority(a0)
00005A44 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "END" animation
00005A4A 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all 6 emeralds?
00005A50 6700                       		beq.s	EEgg_Animate	; if yes, branch
00005A52                            

00005A52 11FC 0000 D0C0             		move.b	#id_CreditsText,(v_tryagain).w ; load credits object
00005A58 31FC 0009 FFF4             		move.w	#9,(v_creditsnum).w ; use "TRY AGAIN" text
00005A5E 11FC 0000 D800             		move.b	#id_TryChaos,(v_eggmanchaos).w ; load emeralds object on "TRY AGAIN" screen
00005A64 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "TRY AGAIN" animation
00005A6A                            

00005A6A                            EEgg_Animate:	; Routine 2
00005A6A 43F9 0000 0000             		lea	(Ani_EEgg).l,a1
00005A70 4EF9 0000 0000             		jmp	(AnimateSprite).l
00005A76                            ; ===========================================================================
00005A76                            

00005A76                            EEgg_Juggle:	; Routine 4
00005A76 5428 0024                  		addq.b	#2,obRoutine(a0)
00005A7A 7002                       		moveq	#2,d0
00005A7C 0828 0000 001C             		btst	#0,obAnim(a0)
00005A82 6700                       		beq.s	@noflip
00005A84 4440                       		neg.w	d0
00005A86                            

00005A86                            	@noflip:
00005A86 43F8 D800                  		lea	(v_eggmanchaos).w,a1 ; get RAM address for emeralds
00005A8A 7205                       		moveq	#5,d1
00005A8C                            

00005A8C                            @emeraldloop:
00005A8C 1340 003E                  		move.b	d0,$3E(a1)
00005A90 3400                       		move.w	d0,d2
00005A92 E742                       		asl.w	#3,d2
00005A94 D529 0026                  		add.b	d2,obAngle(a1)
00005A98 43E9 0040                  		lea	$40(a1),a1
00005A9C 51C9 FFEE                  		dbf	d1,@emeraldloop
00005AA0 5228 001A                  		addq.b	#1,obFrame(a0)
00005AA4 317C 0070 0030             		move.w	#112,eegg_time(a0)
00005AAA                            

00005AAA                            EEgg_Wait:	; Routine 6
00005AAA 5368 0030                  		subq.w	#1,eegg_time(a0) ; decrement timer
00005AAE 6A00                       		bpl.s	@nochg		; branch if time remains
00005AB0 0868 0000 001C             		bchg	#0,obAnim(a0)
00005AB6 117C 0002 0024             		move.b	#2,obRoutine(a0) ; goto EEgg_Animate next
00005ABC                            

00005ABC                            	@nochg:
00005ABC 4E75                       		rts	
00005ABC 4E75                       		rts	
00005ABE                            		include "_anim\Try Again & End Eggman.asm"
00005ABE                            ; ---------------------------------------------------------------------------
00005ABE                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005ABE                            ; ---------------------------------------------------------------------------
00005ABE 0000                       Ani_EEgg:	dc.w @tryagain1-Ani_EEgg
00005AC0 0000                       		dc.w @tryagain2-Ani_EEgg
00005AC2 0000                       		dc.w @end-Ani_EEgg
00005AC4 0500 FC01                  @tryagain1:	dc.b 5,	0, afRoutine, 1
00005AC8 0502 FC03                  @tryagain2:	dc.b 5,	2, afRoutine, 3
00005ACC 0704 0506 0504 0506 0504+  @end:		dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	afEnd
00005ADE                            		even
00005ADE                            		even
00005ADE                            		include	"_incObj\8C Try Again Emeralds.asm"
00005ADE                            ; ---------------------------------------------------------------------------
00005ADE                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005ADE                            ; ---------------------------------------------------------------------------
00005ADE                            

00005ADE                            TryChaos:
00005ADE 7000                       		moveq	#0,d0
00005AE0 1028 0024                  		move.b	obRoutine(a0),d0
00005AE4 323B 0000                  		move.w	TCha_Index(pc,d0.w),d1
00005AE8 4EBB 1000                  		jsr	TCha_Index(pc,d1.w)
00005AEC 4EF9 0000 0000             		jmp	(DisplaySprite).l
00005AF2                            ; ===========================================================================
00005AF2 0000                       TCha_Index:	dc.w TCha_Main-TCha_Index
00005AF4 0000                       		dc.w TCha_Move-TCha_Index
00005AF6                            ; ===========================================================================
00005AF6                            

00005AF6                            TCha_Main:	; Routine 0
00005AF6 2248                       		movea.l	a0,a1
00005AF8 7400                       		moveq	#0,d2
00005AFA 7600                       		moveq	#0,d3
00005AFC 7205                       		moveq	#5,d1
00005AFE 9238 FE57                  		sub.b	(v_emeralds).w,d1
00005B02                            

00005B02                            @makeemerald:
00005B02 12BC 0000                  		move.b	#id_TryChaos,(a1) ; load emerald object
00005B06 5429 0024                  		addq.b	#2,obRoutine(a1)
00005B0A 237C 0000 5796 0004        		move.l	#Map_ECha,obMap(a1)
00005B12 337C 03C5 0002             		move.w	#$3C5,obGfx(a1)
00005B18 137C 0000 0001             		move.b	#0,obRender(a1)
00005B1E 137C 0001 0018             		move.b	#1,obPriority(a1)
00005B24 337C 0104 0008             		move.w	#$104,obX(a1)
00005B2A 337C 0120 0038             		move.w	#$120,$38(a1)
00005B30 337C 00EC 000A             		move.w	#$EC,obScreenY(a1)
00005B36 3369 000A 003A             		move.w	obScreenY(a1),$3A(a1)
00005B3C 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005B42 47F8 FE58                  		lea	(v_emldlist).w,a3
00005B46                            

00005B46                            	@chkemerald:
00005B46 7000                       		moveq	#0,d0
00005B48 1038 FE57                  		move.b	(v_emeralds).w,d0
00005B4C 5340                       		subq.w	#1,d0
00005B4E 6500                       		bcs.s	@loc_5B42
00005B50                            

00005B50                            	@chkloop:
00005B50 B433 0000                  		cmp.b	(a3,d0.w),d2
00005B54 6600                       		bne.s	@notgot
00005B56 5202                       		addq.b	#1,d2
00005B58 60EC                       		bra.s	@chkemerald
00005B5A                            ; ===========================================================================
00005B5A                            

00005B5A                            	@notgot:
00005B5A 51C8 FFF4                  		dbf	d0,@chkloop
00005B5E                            

00005B5E                            @loc_5B42:
00005B5E 1342 001A                  		move.b	d2,obFrame(a1)
00005B62 5229 001A                  		addq.b	#1,obFrame(a1)
00005B66 5202                       		addq.b	#1,d2
00005B68 137C 0080 0026             		move.b	#$80,obAngle(a1)
00005B6E 1343 001E                  		move.b	d3,obTimeFrame(a1)
00005B72 1343 001F                  		move.b	d3,obDelayAni(a1)
00005B76 0643 000A                  		addi.w	#10,d3
00005B7A 43E9 0040                  		lea	$40(a1),a1
00005B7E 51C9 FF82                  		dbf	d1,@makeemerald	; repeat 5 times
00005B82                            

00005B82                            TCha_Move:	; Routine 2
00005B82 4A68 003E                  		tst.w	$3E(a0)
00005B86 6700                       		beq.s	locret_5BBA
00005B88 4A28 001E                  		tst.b	obTimeFrame(a0)
00005B8C 6700                       		beq.s	loc_5B78
00005B8E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00005B92 6600                       		bne.s	loc_5B80
00005B94                            

00005B94                            loc_5B78:
00005B94 3028 003E                  		move.w	$3E(a0),d0
00005B98 D168 0026                  		add.w	d0,obAngle(a0)
00005B9C                            

00005B9C                            loc_5B80:
00005B9C 1028 0026                  		move.b	obAngle(a0),d0
00005BA0 6700                       		beq.s	loc_5B8C
00005BA2 0C00 0080                  		cmpi.b	#$80,d0
00005BA6 6600                       		bne.s	loc_5B96
00005BA8                            

00005BA8                            loc_5B8C:
00005BA8 4268 003E                  		clr.w	$3E(a0)
00005BAC 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00005BB2                            

00005BB2                            loc_5B96:
00005BB2 4EB9 0000 29E0             		jsr	(CalcSine).l
00005BB8 7800                       		moveq	#0,d4
00005BBA 1828 003C                  		move.b	$3C(a0),d4
00005BBE C3C4                       		muls.w	d4,d1
00005BC0 E081                       		asr.l	#8,d1
00005BC2 C1C4                       		muls.w	d4,d0
00005BC4 E080                       		asr.l	#8,d0
00005BC6 D268 0038                  		add.w	$38(a0),d1
00005BCA D068 003A                  		add.w	$3A(a0),d0
00005BCE 3141 0008                  		move.w	d1,obX(a0)
00005BD2 3140 000A                  		move.w	d0,obScreenY(a0)
00005BD6                            

00005BD6                            locret_5BBA:
00005BD6 4E75                       		rts	
00005BD6 4E75                       		rts	
00005BD8                            Map_EEgg:	include	"_maps\Try Again & End Eggman.asm"
00005BD8                            ; ---------------------------------------------------------------------------
00005BD8                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005BD8                            ; ---------------------------------------------------------------------------
00005BD8                            Map_EEgg_internal:
00005BD8 0000                       		dc.w M_EEgg_Try1-Map_EEgg_internal
00005BDA 0000                       		dc.w M_EEgg_Try2-Map_EEgg_internal
00005BDC 0000                       		dc.w M_EEgg_Try3-Map_EEgg_internal
00005BDE 0000                       		dc.w M_EEgg_Try4-Map_EEgg_internal
00005BE0 0000                       		dc.w M_EEgg_End1-Map_EEgg_internal
00005BE2 0000                       		dc.w M_EEgg_End2-Map_EEgg_internal
00005BE4 0000                       		dc.w M_EEgg_End3-Map_EEgg_internal
00005BE6 0000                       		dc.w M_EEgg_End4-Map_EEgg_internal
00005BE8 08                         M_EEgg_Try1:	dc.b 8
00005BE9 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005BEE F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005BF3 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005BF8 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005BFD 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C02 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C07 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C0C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C11 08                         M_EEgg_Try2:	dc.b 8
00005C12 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005C17 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005C1C E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005C21 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005C26 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C2B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C30 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C35 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C3A 08                         M_EEgg_Try3:	dc.b 8
00005C3B E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005C40 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005C45 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005C4A F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005C4F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C54 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C59 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C5E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C63 08                         M_EEgg_Try4:	dc.b 8
00005C64 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005C69 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005C6E E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005C73 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005C78 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C7D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C82 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C87 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C8C 0C                         M_EEgg_End1:	dc.b $C
00005C8D ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005C92 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005C97 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005C9C 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005CA1 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005CA6 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005CAB 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005CB0 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005CB5 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005CBA 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005CBF 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005CC4 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005CC9 0A                         M_EEgg_End2:	dc.b $A
00005CCA D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005CCF DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005CD4 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005CD9 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005CDE DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005CE3 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005CE8 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CED 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005CF2 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005CF7 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005CFC 0A                         M_EEgg_End3:	dc.b $A
00005CFD C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005D02 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005D07 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005D0C C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005D11 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005D16 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005D1B 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005D20 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005D25 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005D2A 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005D2F 0C                         M_EEgg_End4:	dc.b $C
00005D30 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005D35 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005D3A 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005D3F 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005D44 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005D49 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005D4E 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005D53 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005D58 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005D5D 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005D62 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005D67 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005D6C                            		even
00005D6C                            		even
00005D6C                            

00005D6C                            ; ---------------------------------------------------------------------------
00005D6C                            ; Ending sequence demos
00005D6C                            ; ---------------------------------------------------------------------------
00005D6C                            Demo_EndGHZ1:	incbin	"demodata\Ending - GHZ1.bin"
00005D9A                            		even
00005D9A                            Demo_EndMZ:	incbin	"demodata\Ending - MZ.bin"
00005DDA                            		even
00005DDA                            Demo_EndSYZ:	incbin	"demodata\Ending - SYZ.bin"
00005E0A                            		even
00005E0A                            Demo_EndLZ:	incbin	"demodata\Ending - LZ.bin"
00005E3A                            		even
00005E3A                            Demo_EndSLZ:	incbin	"demodata\Ending - SLZ.bin"
00005E5A                            		even
00005E5A                            Demo_EndSBZ1:	incbin	"demodata\Ending - SBZ1.bin"
00005E7A                            		even
00005E7A                            Demo_EndSBZ2:	incbin	"demodata\Ending - SBZ2.bin"
00005EAA                            		even
00005EAA                            Demo_EndGHZ2:	incbin	"demodata\Ending - GHZ2.bin"
00005EDA                            		even
00005EDA                            

00005EDA                            		include	"_inc\LevelSizeLoad & BgScrollSpeed (JP1).asm"
00005EDA                            ; ---------------------------------------------------------------------------
00005EDA                            ; Subroutine to	load level boundaries and start	locations
00005EDA                            ; ---------------------------------------------------------------------------
00005EDA                            

00005EDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EDA                            

00005EDA                            

00005EDA                            LevelSizeLoad:
00005EDA 7000                       		moveq	#0,d0
00005EDC 11C0 F740                  		move.b	d0,($FFFFF740).w
00005EE0 11C0 F741                  		move.b	d0,($FFFFF741).w
00005EE4 11C0 F746                  		move.b	d0,($FFFFF746).w
00005EE8 11C0 F748                  		move.b	d0,($FFFFF748).w
00005EEC 11C0 F742                  		move.b	d0,(v_dle_routine).w
00005EF0 3038 FE10                  		move.w	(v_zone).w,d0
00005EF4 ED08                       		lsl.b	#6,d0
00005EF6 E848                       		lsr.w	#4,d0
00005EF8 3200                       		move.w	d0,d1
00005EFA D040                       		add.w	d0,d0
00005EFC D041                       		add.w	d1,d0
00005EFE 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00005F02 3018                       		move.w	(a0)+,d0
00005F04 31C0 F730                  		move.w	d0,($FFFFF730).w
00005F08 2018                       		move.l	(a0)+,d0
00005F0A 21C0 F728                  		move.l	d0,(v_limitleft2).w
00005F0E 21C0 F720                  		move.l	d0,(v_limitleft1).w
00005F12 2018                       		move.l	(a0)+,d0
00005F14 21C0 F72C                  		move.l	d0,(v_limittop2).w
00005F18 21C0 F724                  		move.l	d0,(v_limittop1).w
00005F1C 3038 F728                  		move.w	(v_limitleft2).w,d0
00005F20 0640 0240                  		addi.w	#$240,d0
00005F24 31C0 F732                  		move.w	d0,(v_limitleft3).w
00005F28 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00005F2E 3018                       		move.w	(a0)+,d0
00005F30 31C0 F73E                  		move.w	d0,(v_lookshift).w
00005F34 6000 0000                  		bra.w	LevSz_ChkLamp
00005F38                            ; ===========================================================================
00005F38                            ; ---------------------------------------------------------------------------
00005F38                            ; Level size array
00005F38                            ; ---------------------------------------------------------------------------
00005F38                            LevelSizeArray:
00005F38                            		; GHZ
00005F38 0004 0000 24BF 0000 0300+  		dc.w $0004, $0000, $24BF, $0000, $0300, $0060
00005F44 0004 0000 1EBF 0000 0300+  		dc.w $0004, $0000, $1EBF, $0000, $0300, $0060
00005F50 0004 0000 2960 0000 0300+  		dc.w $0004, $0000, $2960, $0000, $0300, $0060
00005F5C 0004 0000 2ABF 0000 0300+  		dc.w $0004, $0000, $2ABF, $0000, $0300, $0060
00005F68                            		; LZ
00005F68 0004 0000 19BF 0000 0530+  		dc.w $0004, $0000, $19BF, $0000, $0530, $0060
00005F74 0004 0000 10AF 0000 0720+  		dc.w $0004, $0000, $10AF, $0000, $0720, $0060
00005F80 0004 0000 202F FF00 0800+  		dc.w $0004, $0000, $202F, $FF00, $0800, $0060
00005F8C 0004 0000 20BF 0000 0720+  		dc.w $0004, $0000, $20BF, $0000, $0720, $0060
00005F98                            		; MZ
00005F98 0004 0000 17BF 0000 01D0+  		dc.w $0004, $0000, $17BF, $0000, $01D0, $0060
00005FA4 0004 0000 17BF 0000 0520+  		dc.w $0004, $0000, $17BF, $0000, $0520, $0060
00005FB0 0004 0000 1800 0000 0720+  		dc.w $0004, $0000, $1800, $0000, $0720, $0060
00005FBC 0004 0000 16BF 0000 0720+  		dc.w $0004, $0000, $16BF, $0000, $0720, $0060
00005FC8                            		; SLZ
00005FC8 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00005FD4 0004 0000 1FBF 0000 0640+  		dc.w $0004, $0000, $1FBF, $0000, $0640, $0060
00005FE0 0004 0000 2000 0000 06C0+  		dc.w $0004, $0000, $2000, $0000, $06C0, $0060
00005FEC 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00005FF8                            		; SYZ
00005FF8 0004 0000 22C0 0000 0420+  		dc.w $0004, $0000, $22C0, $0000, $0420, $0060
00006004 0004 0000 28C0 0000 0520+  		dc.w $0004, $0000, $28C0, $0000, $0520, $0060
00006010 0004 0000 2C00 0000 0620+  		dc.w $0004, $0000, $2C00, $0000, $0620, $0060
0000601C 0004 0000 2EC0 0000 0620+  		dc.w $0004, $0000, $2EC0, $0000, $0620, $0060
00006028                            		; SBZ
00006028 0004 0000 21C0 0000 0720+  		dc.w $0004, $0000, $21C0, $0000, $0720, $0060
00006034 0004 0000 1E40 FF00 0800+  		dc.w $0004, $0000, $1E40, $FF00, $0800, $0060
00006040 0004 2080 2460 0510 0510+  		dc.w $0004, $2080, $2460, $0510, $0510, $0060
0000604C 0004 0000 3EC0 0000 0720+  		dc.w $0004, $0000, $3EC0, $0000, $0720, $0060
00006058                            		; Ending
00006058 0004 0000 0500 0110 0110+  		dc.w $0004, $0000, $0500, $0110, $0110, $0060
00006064 0004 0000 0DC0 0110 0110+  		dc.w $0004, $0000, $0DC0, $0110, $0110, $0060
00006070 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
0000607C 0004 0000 2FFF 0000 0320+  		dc.w $0004, $0000, $2FFF, $0000, $0320, $0060
00006088                            

00006088                            ; ---------------------------------------------------------------------------
00006088                            ; Ending start location array
00006088                            ; ---------------------------------------------------------------------------
00006088                            EndingStLocArray:
00006088                            		include	"_inc\Start Location Array - Ending.asm"
00006088                            ; ---------------------------------------------------------------------------
00006088                            ; Ending start location array
00006088                            ; ---------------------------------------------------------------------------
00006088                            

00006088                            		incbin	"startpos\ghz1 (Credits demo 1).bin"
0000608C                            		incbin	"startpos\mz2 (Credits demo).bin"
00006090                            		incbin	"startpos\syz3 (Credits demo).bin"
00006094                            		incbin	"startpos\lz3 (Credits demo).bin"
00006098                            		incbin	"startpos\slz3 (Credits demo).bin"
0000609C                            		incbin	"startpos\sbz1 (Credits demo).bin"
000060A0                            		incbin	"startpos\sbz2 (Credits demo).bin"
000060A4                            		incbin	"startpos\ghz1 (Credits demo 2).bin"
000060A8                            		even
000060A8                            		even
000060A8                            

000060A8                            ; ===========================================================================
000060A8                            

000060A8                            LevSz_ChkLamp:
000060A8 4A38 FE30                  		tst.b	(v_lastlamp).w	; have any lampposts been hit?
000060AC 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000060AE                            

000060AE 4EB9 0000 0000             		jsr	(Lamp_LoadInfo).l
000060B4 3238 D008                  		move.w	(v_player+obX).w,d1
000060B8 3038 D00C                  		move.w	(v_player+obY).w,d0
000060BC 6000                       		bra.s	LevSz_SkipStartPos
000060BE                            ; ===========================================================================
000060BE                            

000060BE                            LevSz_StartLoc:
000060BE 3038 FE10                  		move.w	(v_zone).w,d0
000060C2 ED08                       		lsl.b	#6,d0
000060C4 E848                       		lsr.w	#4,d0
000060C6 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000060CA 4A78 FFF0                  		tst.w	(f_demo).w	; is ending demo mode on?
000060CE 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000060D0                            

000060D0 3038 FFF4                  		move.w	(v_creditsnum).w,d0
000060D4 5340                       		subq.w	#1,d0
000060D6 E548                       		lsl.w	#2,d0
000060D8 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000060DC                            

000060DC                            LevSz_SonicPos:
000060DC 7200                       		moveq	#0,d1
000060DE 3219                       		move.w	(a1)+,d1
000060E0 31C1 D008                  		move.w	d1,(v_player+obX).w ; set Sonic's position on x-axis
000060E4 7000                       		moveq	#0,d0
000060E6 3011                       		move.w	(a1),d0
000060E8 31C0 D00C                  		move.w	d0,(v_player+obY).w ; set Sonic's position on y-axis
000060EC                            

000060EC                            SetScreen:
000060EC                            	LevSz_SkipStartPos:
000060EC 0441 00A0                  		subi.w	#160,d1		; is Sonic more than 160px from left edge?
000060F0 6400                       		bcc.s	SetScr_WithinLeft ; if yes, branch
000060F2 7200                       		moveq	#0,d1
000060F4                            

000060F4                            	SetScr_WithinLeft:
000060F4 3438 F72A                  		move.w	(v_limitright2).w,d2
000060F8 B242                       		cmp.w	d2,d1		; is Sonic inside the right edge?
000060FA 6500                       		bcs.s	SetScr_WithinRight ; if yes, branch
000060FC 3202                       		move.w	d2,d1
000060FE                            

000060FE                            	SetScr_WithinRight:
000060FE 31C1 F700                  		move.w	d1,(v_screenposx).w ; set horizontal screen position
00006102                            

00006102 0440 0060                  		subi.w	#96,d0		; is Sonic within 96px of upper edge?
00006106 6400                       		bcc.s	SetScr_WithinTop ; if yes, branch
00006108 7000                       		moveq	#0,d0
0000610A                            

0000610A                            	SetScr_WithinTop:
0000610A B078 F72E                  		cmp.w	(v_limitbtm2).w,d0 ; is Sonic above the bottom edge?
0000610E 6D00                       		blt.s	SetScr_WithinBottom ; if yes, branch
00006110 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00006114                            

00006114                            	SetScr_WithinBottom:
00006114 31C0 F704                  		move.w	d0,(v_screenposy).w ; set vertical screen position
00006118 6100 0000                  		bsr.w	BgScrollSpeed
0000611C 7000                       		moveq	#0,d0
0000611E 1038 FE10                  		move.b	(v_zone).w,d0
00006122 E508                       		lsl.b	#2,d0
00006124 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),(v_256loop1).w
0000612A 4E75                       		rts
0000612C                            ; ===========================================================================
0000612C                            ; ---------------------------------------------------------------------------
0000612C                            ; Sonic start location array
0000612C                            ; ---------------------------------------------------------------------------
0000612C                            StartLocArray:	include	"_inc\Start Location Array - Levels.asm"
0000612C                            ; ---------------------------------------------------------------------------
0000612C                            ; Sonic start location array
0000612C                            ; ---------------------------------------------------------------------------
0000612C                            

0000612C                            		incbin	"startpos\ghz1.bin"
00006130                            		incbin	"startpos\ghz2.bin"
00006134                            		incbin	"startpos\ghz3.bin"
00006138 0080 00A8                  		dc.w	$80,$A8
0000613C                            

0000613C                            		incbin	"startpos\lz1.bin"
00006140                            		incbin	"startpos\lz2.bin"
00006144                            		incbin	"startpos\lz3.bin"
00006148                            		incbin	"startpos\sbz3.bin"
0000614C                            

0000614C                            		incbin	"startpos\mz1.bin"
00006150                            		incbin	"startpos\mz2.bin"
00006154                            		incbin	"startpos\mz3.bin"
00006158 0080 00A8                  		dc.w	$80,$A8
0000615C                            

0000615C                            		incbin	"startpos\slz1.bin"
00006160                            		incbin	"startpos\slz2.bin"
00006164                            		incbin	"startpos\slz3.bin"
00006168 0080 00A8                  		dc.w	$80,$A8
0000616C                            

0000616C                            		incbin	"startpos\syz1.bin"
00006170                            		incbin	"startpos\syz2.bin"
00006174                            		incbin	"startpos\syz3.bin"
00006178 0080 00A8                  		dc.w	$80,$A8
0000617C                            

0000617C                            		incbin	"startpos\sbz1.bin"
00006180                            		incbin	"startpos\sbz2.bin"
00006184                            		incbin	"startpos\fz.bin"
00006188 0080 00A8                  		dc.w	$80,$A8
0000618C                            

0000618C                            

0000618C                            		incbin	"startpos\end1.bin"
00006190                            		incbin	"startpos\end2.bin"
00006194 0080 00A8                  		dc.w	$80,$A8
00006198 0080 00A8                  		dc.w	$80,$A8
0000619C                            

0000619C                            		even
0000619C                            		even
0000619C                            

0000619C                            ; ---------------------------------------------------------------------------
0000619C                            ; Which	256x256	tiles contain loops or roll-tunnels
0000619C                            ; ---------------------------------------------------------------------------
0000619C                            

0000619C                            LoopTileNums:
0000619C                            

0000619C                            ; 		loop	loop	tunnel	tunnel
0000619C                            

0000619C B57F 1F20                  	dc.b	$B5,	$7F,	$1F,	$20	; Green Hill
000061A0 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Labyrinth
000061A4 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Marble
000061A8 AAB4 7F7F                  	dc.b	$AA,	$B4,	$7F,	$7F	; Star Light
000061AC 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Spring Yard
000061B0 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Scrap Brain
000061B4 7F7F 7F7F                  	dc.b	$7F,	$7F,	$7F,	$7F	; Ending (Green Hill)
000061B8                            

000061B8                            		even
000061B8                            

000061B8                            ; ---------------------------------------------------------------------------
000061B8                            ; Subroutine to	set scroll speed of some backgrounds
000061B8                            ; ---------------------------------------------------------------------------
000061B8                            

000061B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000061B8                            

000061B8                            

000061B8                            BgScrollSpeed:
000061B8 4A38 FE30                  		tst.b	(v_lastlamp).w
000061BC 6600                       		bne.s	loc_6206
000061BE 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
000061C2 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000061C6 31C1 F708                  		move.w	d1,(v_bgscreenposx).w
000061CA 31C1 F710                  		move.w	d1,(v_bg2screenposx).w
000061CE 31C1 F718                  		move.w	d1,(v_bg3screenposx).w
000061D2                            

000061D2                            loc_6206:
000061D2 7400                       		moveq	#0,d2
000061D4 1438 FE10                  		move.b	(v_zone).w,d2
000061D8 D442                       		add.w	d2,d2
000061DA 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
000061DE 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
000061E2                            ; End of function BgScrollSpeed
000061E2                            

000061E2                            ; ===========================================================================
000061E2 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
000061E6 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
000061EA 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
000061EE 0000                       		dc.w BgScroll_End-BgScroll_Index
000061F0                            ; ===========================================================================
000061F0                            

000061F0                            BgScroll_GHZ:
000061F0 42B8 F708                  		clr.l	(v_bgscreenposx).w
000061F4 42B8 F70C                  		clr.l	(v_bgscreenposy).w
000061F8 42B8 F714                  		clr.l	(v_bg2screenposy).w
000061FC 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00006200 45F8 A800                  		lea	($FFFFA800).w,a2
00006204 429A                       		clr.l	(a2)+
00006206 429A                       		clr.l	(a2)+
00006208 429A                       		clr.l	(a2)+
0000620A 4E75                       		rts
0000620C                            ; ===========================================================================
0000620C                            

0000620C                            BgScroll_LZ:
0000620C E280                       		asr.l	#1,d0
0000620E 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006212 4E75                       		rts	
00006214                            ; ===========================================================================
00006214                            

00006214                            BgScroll_MZ:
00006214 4E75                       		rts	
00006216                            ; ===========================================================================
00006216                            

00006216                            BgScroll_SLZ:
00006216 E280                       		asr.l	#1,d0
00006218 0640 00C0                  		addi.w	#$C0,d0
0000621C 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006220 42B8 F708                  		clr.l	(v_bgscreenposx).w
00006224 4E75                       		rts	
00006226                            ; ===========================================================================
00006226                            

00006226                            BgScroll_SYZ:
00006226 E980                       		asl.l	#4,d0
00006228 2400                       		move.l	d0,d2
0000622A E380                       		asl.l	#1,d0
0000622C D082                       		add.l	d2,d0
0000622E E080                       		asr.l	#8,d0
00006230 5240                       		addq.w	#1,d0
00006232 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006236 42B8 F708                  		clr.l	(v_bgscreenposx).w
0000623A 4E75                       		rts	
0000623C                            ; ===========================================================================
0000623C                            

0000623C                            BgScroll_SBZ:
0000623C 0240 07F8                  		andi.w	#$7F8,d0
00006240 E640                       		asr.w	#3,d0
00006242 5240                       		addq.w	#1,d0
00006244 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006248 4E75                       		rts	
0000624A                            ; ===========================================================================
0000624A                            

0000624A                            BgScroll_End:
0000624A 3038 F700                  		move.w	(v_screenposx).w,d0
0000624E E240                       		asr.w	#1,d0
00006250 31C0 F708                  		move.w	d0,(v_bgscreenposx).w
00006254 31C0 F710                  		move.w	d0,(v_bg2screenposx).w
00006258 E440                       		asr.w	#2,d0
0000625A 3200                       		move.w	d0,d1
0000625C D040                       		add.w	d0,d0
0000625E D041                       		add.w	d1,d0
00006260 31C0 F718                  		move.w	d0,(v_bg3screenposx).w
00006264 42B8 F70C                  		clr.l	(v_bgscreenposy).w
00006268 42B8 F714                  		clr.l	(v_bg2screenposy).w
0000626C 42B8 F71C                  		clr.l	(v_bg3screenposy).w
00006270 45F8 A800                  		lea	($FFFFA800).w,a2
00006274 429A                       		clr.l	(a2)+
00006276 429A                       		clr.l	(a2)+
00006278 429A                       		clr.l	(a2)+
0000627A 4E75                       		rts
0000627A 4E75                       		rts
0000627C                            		include	"_inc\DeformLayers (JP1).asm"
0000627C                            ; ---------------------------------------------------------------------------
0000627C                            ; Background layer deformation subroutines
0000627C                            ; ---------------------------------------------------------------------------
0000627C                            

0000627C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000627C                            

0000627C                            

0000627C                            DeformLayers:
0000627C 4A38 F744                  		tst.b	(f_nobgscroll).w
00006280 6700                       		beq.s	@bgscroll
00006282 4E75                       		rts	
00006284                            ; ===========================================================================
00006284                            

00006284                            	@bgscroll:
00006284 4278 F754                  		clr.w	(v_fg_scroll_flags).w
00006288 4278 F756                  		clr.w	(v_bg1_scroll_flags).w
0000628C 4278 F758                  		clr.w	(v_bg2_scroll_flags).w
00006290 4278 F75A                  		clr.w	(v_bg3_scroll_flags).w
00006294 6100 0000                  		bsr.w	ScrollHoriz
00006298 6100 0000                  		bsr.w	ScrollVertical
0000629C 6100 0000                  		bsr.w	DynamicLevelEvents
000062A0 31F8 F704 F616             		move.w	(v_screenposy).w,(v_scrposy_vdp).w
000062A6 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_vdp).w
000062AC 7000                       		moveq	#0,d0
000062AE 1038 FE10                  		move.b	(v_zone).w,d0
000062B2 D040                       		add.w	d0,d0
000062B4 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000062B8 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000062BC                            ; End of function DeformLayers
000062BC                            

000062BC                            ; ===========================================================================
000062BC                            ; ---------------------------------------------------------------------------
000062BC                            ; Offset index for background layer deformation	code
000062BC                            ; ---------------------------------------------------------------------------
000062BC 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000062C0 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000062C4 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000062C8 0000                       		dc.w Deform_GHZ-Deform_Index
000062CA                            ; ---------------------------------------------------------------------------
000062CA                            ; Green	Hill Zone background layer deformation code
000062CA                            ; ---------------------------------------------------------------------------
000062CA                            

000062CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062CA                            

000062CA                            

000062CA                            Deform_GHZ:
000062CA                            	; block 3 - distant mountains
000062CA 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000062CE 48C4                       		ext.l	d4
000062D0 EB84                       		asl.l	#5,d4
000062D2 2204                       		move.l	d4,d1
000062D4 E384                       		asl.l	#1,d4
000062D6 D881                       		add.l	d1,d4
000062D8 7C00                       		moveq	#0,d6
000062DA 6100 0000                  		bsr.w	BGScroll_Block3
000062DE                            	; block 2 - hills & waterfalls
000062DE 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000062E2 48C4                       		ext.l	d4
000062E4 EF84                       		asl.l	#7,d4
000062E6 7C00                       		moveq	#0,d6
000062E8 6100 0000                  		bsr.w	BGScroll_Block2
000062EC                            	; calculate Y position
000062EC 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000062F0 3038 F704                  		move.w	(v_screenposy).w,d0
000062F4 0240 07FF                  		andi.w	#$7FF,d0
000062F8 EA48                       		lsr.w	#5,d0
000062FA 4440                       		neg.w	d0
000062FC 0640 0020                  		addi.w	#$20,d0
00006300 6A00                       		bpl.s	@limitY
00006302 7000                       		moveq	#0,d0
00006304                            	@limitY:
00006304 3800                       		move.w	d0,d4
00006306 31C0 F618                  		move.w	d0,(v_bgscrposy_vdp).w
0000630A 3038 F700                  		move.w	(v_screenposx).w,d0
0000630E 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w
00006314 6600                       		bne.s	@notTitle
00006316 7000                       		moveq	#0,d0	; reset foreground position in title screen
00006318                            	@notTitle:
00006318 4440                       		neg.w	d0
0000631A 4840                       		swap	d0
0000631C                            	; auto-scroll clouds
0000631C 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
00006320 069A 0001 0000             		addi.l	#$10000,(a2)+
00006326 069A 0000 C000             		addi.l	#$C000,(a2)+
0000632C 069A 0000 8000             		addi.l	#$8000,(a2)+
00006332                            	; calculate background scroll	
00006332 3038 A800                  		move.w	(v_bgscroll_buffer).w,d0
00006336 D078 F718                  		add.w	(v_bg3screenposx).w,d0
0000633A 4440                       		neg.w	d0
0000633C 323C 001F                  		move.w	#$1F,d1
00006340 9244                       		sub.w	d4,d1
00006342 6500                       		bcs.s	@gotoCloud2
00006344                            	@cloudLoop1:		; upper cloud (32px)
00006344 22C0                       		move.l	d0,(a1)+
00006346 51C9 FFFC                  		dbf	d1,@cloudLoop1
0000634A                            

0000634A                            	@gotoCloud2:
0000634A 3038 A804                  		move.w	(v_bgscroll_buffer+4).w,d0
0000634E D078 F718                  		add.w	(v_bg3screenposx).w,d0
00006352 4440                       		neg.w	d0
00006354 323C 000F                  		move.w	#$F,d1
00006358                            	@cloudLoop2:		; middle cloud (16px)
00006358 22C0                       		move.l	d0,(a1)+
0000635A 51C9 FFFC                  		dbf	d1,@cloudLoop2
0000635E                            

0000635E 3038 A808                  		move.w	(v_bgscroll_buffer+8).w,d0
00006362 D078 F718                  		add.w	(v_bg3screenposx).w,d0
00006366 4440                       		neg.w	d0
00006368 323C 000F                  		move.w	#$F,d1
0000636C                            	@cloudLoop3:		; lower cloud (16px)
0000636C 22C0                       		move.l	d0,(a1)+
0000636E 51C9 FFFC                  		dbf	d1,@cloudLoop3
00006372                            

00006372 323C 002F                  		move.w	#$2F,d1
00006376 3038 F718                  		move.w	(v_bg3screenposx).w,d0
0000637A 4440                       		neg.w	d0
0000637C                            	@mountainLoop:		; distant mountains (48px)
0000637C 22C0                       		move.l	d0,(a1)+
0000637E 51C9 FFFC                  		dbf	d1,@mountainLoop
00006382                            

00006382 323C 0027                  		move.w	#$27,d1
00006386 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000638A 4440                       		neg.w	d0
0000638C                            	@hillLoop:			; hills & waterfalls (40px)
0000638C 22C0                       		move.l	d0,(a1)+
0000638E 51C9 FFFC                  		dbf	d1,@hillLoop
00006392                            

00006392 3038 F710                  		move.w	(v_bg2screenposx).w,d0
00006396 3438 F700                  		move.w	(v_screenposx).w,d2
0000639A 9440                       		sub.w	d0,d2
0000639C 48C2                       		ext.l	d2
0000639E E182                       		asl.l	#8,d2
000063A0 85FC 0068                  		divs.w	#$68,d2
000063A4 48C2                       		ext.l	d2
000063A6 E182                       		asl.l	#8,d2
000063A8 7600                       		moveq	#0,d3
000063AA 3600                       		move.w	d0,d3
000063AC 323C 0047                  		move.w	#$47,d1
000063B0 D244                       		add.w	d4,d1
000063B2                            	@waterLoop:			; water deformation
000063B2 3003                       		move.w	d3,d0
000063B4 4440                       		neg.w	d0
000063B6 22C0                       		move.l	d0,(a1)+
000063B8 4843                       		swap	d3
000063BA D682                       		add.l	d2,d3
000063BC 4843                       		swap	d3
000063BE 51C9 FFF2                  		dbf	d1,@waterLoop
000063C2 4E75                       		rts
000063C4                            ; End of function Deform_GHZ
000063C4                            

000063C4                            ; ---------------------------------------------------------------------------
000063C4                            ; Labyrinth Zone background layer deformation code
000063C4                            ; ---------------------------------------------------------------------------
000063C4                            

000063C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063C4                            

000063C4                            

000063C4                            Deform_LZ:
000063C4                            	; plain background scroll
000063C4 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000063C8 48C4                       		ext.l	d4
000063CA EF84                       		asl.l	#7,d4
000063CC 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000063D0 48C5                       		ext.l	d5
000063D2 EF85                       		asl.l	#7,d5
000063D4 6100 0000                  		bsr.w	BGScroll_XY
000063D8                            

000063D8 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_vdp).w
000063DE 47F9 0000 0000             		lea	(Lz_Scroll_Data).l,a3
000063E4 45F9 0000 0000             		lea	(Drown_WobbleData).l,a2
000063EA 1438 F7D8                  		move.b	(v_lz_deform).w,d2
000063EE 1602                       		move.b	d2,d3
000063F0 0678 0080 F7D8             		addi.w	#$80,(v_lz_deform).w
000063F6                            

000063F6 D478 F70C                  		add.w	(v_bgscreenposy).w,d2
000063FA 0242 00FF                  		andi.w	#$FF,d2
000063FE D678 F704                  		add.w	(v_screenposy).w,d3
00006402 0243 00FF                  		andi.w	#$FF,d3
00006406 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
0000640A 323C 00DF                  		move.w	#$DF,d1
0000640E 3038 F700                  		move.w	(v_screenposx).w,d0
00006412 4440                       		neg.w	d0
00006414 3C00                       		move.w	d0,d6
00006416 4840                       		swap	d0
00006418 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000641C 4440                       		neg.w	d0
0000641E 3838 F646                  		move.w	(v_waterpos1).w,d4
00006422 3A38 F704                  		move.w	(v_screenposy).w,d5
00006426                            	; write normal scroll before meeting water position
00006426                            	@normalLoop:		
00006426 BA44                       		cmp.w	d4,d5	; is current y >= water y?
00006428 6C00                       		bge.s	@underwaterLoop	; if yes, branch
0000642A 22C0                       		move.l	d0,(a1)+
0000642C 5245                       		addq.w	#1,d5
0000642E 5202                       		addq.b	#1,d2
00006430 5203                       		addq.b	#1,d3
00006432 51C9 FFF2                  		dbf	d1,@normalLoop
00006436 4E75                       		rts
00006438                            	; apply water deformation when underwater
00006438                            	@underwaterLoop:
00006438 1833 3000                  		move.b	(a3,d3.w),d4
0000643C 4884                       		ext.w	d4
0000643E D846                       		add.w	d6,d4
00006440 32C4                       		move.w	d4,(a1)+
00006442 1832 2000                  		move.b	(a2,d2.w),d4
00006446 4884                       		ext.w	d4
00006448 D840                       		add.w	d0,d4
0000644A 32C4                       		move.w	d4,(a1)+
0000644C 5202                       		addq.b	#1,d2
0000644E 5203                       		addq.b	#1,d3
00006450 51C9 FFE6                  		dbf	d1,@underwaterLoop
00006454 4E75                       		rts
00006456                            

00006456                            Lz_Scroll_Data:
00006456 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
00006466 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00006476 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00006486 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00006496 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000064A6 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000064B6 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000064C6 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000064D6 FFFF FEFE FDFD FDFD FEFE+  		dc.b $FF,$FF,$FE,$FE,$FD,$FD,$FD,$FD,$FE,$FE,$FF,$FF,$00,$00,$00,$00
000064E6 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
000064F6 0101 0202 0303 0303 0202+  		dc.b $01,$01,$02,$02,$03,$03,$03,$03,$02,$02,$01,$01,$00,$00,$00,$00
00006506 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00006516 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00006526 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00006536 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00006546 0000 0000 0000 0000 0000+  		dc.b $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00006556                            ; End of function Deform_LZ
00006556                            

00006556                            ; ---------------------------------------------------------------------------
00006556                            ; Marble Zone background layer deformation code
00006556                            ; ---------------------------------------------------------------------------
00006556                            

00006556                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006556                            

00006556                            

00006556                            Deform_MZ:
00006556                            	; block 1 - dungeon interior
00006556 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000655A 48C4                       		ext.l	d4
0000655C ED84                       		asl.l	#6,d4
0000655E 2204                       		move.l	d4,d1
00006560 E384                       		asl.l	#1,d4
00006562 D881                       		add.l	d1,d4
00006564 7C02                       		moveq	#2,d6
00006566 6100 0000                  		bsr.w	BGScroll_Block1
0000656A                            	; block 3 - mountains
0000656A 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000656E 48C4                       		ext.l	d4
00006570 ED84                       		asl.l	#6,d4
00006572 7C06                       		moveq	#6,d6
00006574 6100 0000                  		bsr.w	BGScroll_Block3
00006578                            	; block 2 - bushes & antique buildings
00006578 3838 F73A                  		move.w	(v_scrshiftx).w,d4
0000657C 48C4                       		ext.l	d4
0000657E EF84                       		asl.l	#7,d4
00006580 7C04                       		moveq	#4,d6
00006582 6100 0000                  		bsr.w	BGScroll_Block2
00006586                            	; calculate y-position of background
00006586 303C 0200                  		move.w	#$200,d0	; start with 512px, ignoring 2 chunks
0000658A 3238 F704                  		move.w	(v_screenposy).w,d1
0000658E 0441 01C8                  		subi.w	#$1C8,d1	; 0% scrolling when y <= 56px 
00006592 6500                       		bcs.s	@noYscroll
00006594 3401                       		move.w	d1,d2
00006596 D241                       		add.w	d1,d1
00006598 D242                       		add.w	d2,d1
0000659A E441                       		asr.w	#2,d1
0000659C D041                       		add.w	d1,d0
0000659E                            	@noYscroll:
0000659E 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
000065A2 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
000065A6 6100 0000                  		bsr.w	BGScroll_YAbsolute
000065AA 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_vdp).w
000065B0                            	; do something with redraw flags
000065B0 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
000065B4 8038 F758                  		or.b	(v_bg2_scroll_flags).w,d0
000065B8 8138 F75A                  		or.b	d0,(v_bg3_scroll_flags).w
000065BC 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
000065C0 4238 F758                  		clr.b	(v_bg2_scroll_flags).w
000065C4                            	; calculate background scroll buffer
000065C4 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
000065C8 3438 F700                  		move.w	(v_screenposx).w,d2
000065CC 4442                       		neg.w	d2
000065CE 3002                       		move.w	d2,d0
000065D0 E440                       		asr.w	#2,d0
000065D2 9042                       		sub.w	d2,d0
000065D4 48C0                       		ext.l	d0
000065D6 E780                       		asl.l	#3,d0
000065D8 81FC 0005                  		divs.w	#5,d0
000065DC 48C0                       		ext.l	d0
000065DE E980                       		asl.l	#4,d0
000065E0 E180                       		asl.l	#8,d0
000065E2 7600                       		moveq	#0,d3
000065E4 3602                       		move.w	d2,d3
000065E6 E243                       		asr.w	#1,d3
000065E8 323C 0004                  		move.w	#4,d1
000065EC                            	@cloudLoop:		
000065EC 32C3                       		move.w	d3,(a1)+
000065EE 4843                       		swap	d3
000065F0 D680                       		add.l	d0,d3
000065F2 4843                       		swap	d3
000065F4 51C9 FFF6                  		dbf	d1,@cloudLoop
000065F8                            

000065F8 3038 F718                  		move.w	(v_bg3screenposx).w,d0
000065FC 4440                       		neg.w	d0
000065FE 323C 0001                  		move.w	#1,d1
00006602                            	@mountainLoop:		
00006602 32C0                       		move.w	d0,(a1)+
00006604 51C9 FFFC                  		dbf	d1,@mountainLoop
00006608                            

00006608 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000660C 4440                       		neg.w	d0
0000660E 323C 0008                  		move.w	#8,d1
00006612                            	@bushLoop:		
00006612 32C0                       		move.w	d0,(a1)+
00006614 51C9 FFFC                  		dbf	d1,@bushLoop
00006618                            

00006618 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000661C 4440                       		neg.w	d0
0000661E 323C 000F                  		move.w	#$F,d1
00006622                            	@interiorLoop:		
00006622 32C0                       		move.w	d0,(a1)+
00006624 51C9 FFFC                  		dbf	d1,@interiorLoop
00006628                            

00006628 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
0000662C 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00006630 0440 0200                  		subi.w	#$200,d0	; subtract 512px (unused 2 chunks)
00006634 3400                       		move.w	d0,d2
00006636 0C40 0100                  		cmpi.w	#$100,d0
0000663A 6500                       		bcs.s	@limitY
0000663C 303C 0100                  		move.w	#$100,d0
00006640                            	@limitY:
00006640 0240 01F0                  		andi.w	#$1F0,d0
00006644 E648                       		lsr.w	#3,d0
00006646 45F2 0000                  		lea	(a2,d0.w),a2
0000664A 6000 0000                  		bra.w	Bg_Scroll_X
0000664E                            ; End of function Deform_MZ
0000664E                            

0000664E                            ; ---------------------------------------------------------------------------
0000664E                            ; Star Light Zone background layer deformation code
0000664E                            ; ---------------------------------------------------------------------------
0000664E                            

0000664E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000664E                            

0000664E                            

0000664E                            Deform_SLZ:
0000664E                            	; vertical scrolling
0000664E 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00006652 48C5                       		ext.l	d5
00006654 EF85                       		asl.l	#7,d5
00006656 6100 0000                  		bsr.w	Bg_Scroll_Y
0000665A 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_vdp).w
00006660                            	; calculate background scroll buffer
00006660 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00006664 3438 F700                  		move.w	(v_screenposx).w,d2
00006668 4442                       		neg.w	d2
0000666A 3002                       		move.w	d2,d0
0000666C E640                       		asr.w	#3,d0
0000666E 9042                       		sub.w	d2,d0
00006670 48C0                       		ext.l	d0
00006672 E980                       		asl.l	#4,d0
00006674 81FC 001C                  		divs.w	#$1C,d0
00006678 48C0                       		ext.l	d0
0000667A E980                       		asl.l	#4,d0
0000667C E180                       		asl.l	#8,d0
0000667E 7600                       		moveq	#0,d3
00006680 3602                       		move.w	d2,d3
00006682 323C 001B                  		move.w	#$1B,d1
00006686                            	@starLoop:		
00006686 32C3                       		move.w	d3,(a1)+
00006688 4843                       		swap	d3
0000668A D680                       		add.l	d0,d3
0000668C 4843                       		swap	d3
0000668E 51C9 FFF6                  		dbf	d1,@starLoop
00006692                            

00006692 3002                       		move.w	d2,d0
00006694 E640                       		asr.w	#3,d0
00006696 3200                       		move.w	d0,d1
00006698 E241                       		asr.w	#1,d1
0000669A D041                       		add.w	d1,d0
0000669C 323C 0004                  		move.w	#4,d1
000066A0                            	@buildingLoop1:		; distant black buildings
000066A0 32C0                       		move.w	d0,(a1)+
000066A2 51C9 FFFC                  		dbf	d1,@buildingLoop1
000066A6                            

000066A6 3002                       		move.w	d2,d0
000066A8 E440                       		asr.w	#2,d0
000066AA 323C 0004                  		move.w	#4,d1
000066AE                            	@buildingLoop2:		; closer buildings
000066AE 32C0                       		move.w	d0,(a1)+
000066B0 51C9 FFFC                  		dbf	d1,@buildingLoop2
000066B4                            

000066B4 3002                       		move.w	d2,d0
000066B6 E240                       		asr.w	#1,d0
000066B8 323C 001D                  		move.w	#$1D,d1
000066BC                            	@bottomLoop:		; bottom part of background
000066BC 32C0                       		move.w	d0,(a1)+
000066BE 51C9 FFFC                  		dbf	d1,@bottomLoop
000066C2                            

000066C2 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000066C6 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
000066CA 3400                       		move.w	d0,d2
000066CC 0440 00C0                  		subi.w	#$C0,d0
000066D0 0240 03F0                  		andi.w	#$3F0,d0
000066D4 E648                       		lsr.w	#3,d0
000066D6 45F2 0000                  		lea	(a2,d0.w),a2
000066DA                            ;-------------------------------------------------------------------------------
000066DA                            ;-------------------------------------------------------------------------------
000066DA                            Bg_Scroll_X:
000066DA 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000066DE 323C 000E                  		move.w	#$E,d1
000066E2 3038 F700                  		move.w	(v_screenposx).w,d0
000066E6 4440                       		neg.w	d0
000066E8 4840                       		swap	d0
000066EA 0242 000F                  		andi.w	#$F,d2
000066EE D442                       		add.w	d2,d2
000066F0 301A                       		move.w	(a2)+,d0
000066F2 4EFB 2000                  		jmp	@pixelJump(pc,d2.w)		; skip pixels for first row
000066F6                            	@blockLoop:
000066F6 301A                       		move.w	(a2)+,d0
000066F8                            	@pixelJump:		
000066F8 22C0                       		move.l	d0,(a1)+
000066FA 22C0                       		move.l	d0,(a1)+
000066FC 22C0                       		move.l	d0,(a1)+
000066FE 22C0                       		move.l	d0,(a1)+
00006700 22C0                       		move.l	d0,(a1)+
00006702 22C0                       		move.l	d0,(a1)+
00006704 22C0                       		move.l	d0,(a1)+
00006706 22C0                       		move.l	d0,(a1)+
00006708 22C0                       		move.l	d0,(a1)+
0000670A 22C0                       		move.l	d0,(a1)+
0000670C 22C0                       		move.l	d0,(a1)+
0000670E 22C0                       		move.l	d0,(a1)+
00006710 22C0                       		move.l	d0,(a1)+
00006712 22C0                       		move.l	d0,(a1)+
00006714 22C0                       		move.l	d0,(a1)+
00006716 22C0                       		move.l	d0,(a1)+
00006718 51C9 FFDC                  		dbf	d1,@blockLoop
0000671C 4E75                       		rts
0000671E                            

0000671E                            ; ---------------------------------------------------------------------------
0000671E                            ; Spring Yard Zone background layer deformation	code
0000671E                            ; ---------------------------------------------------------------------------
0000671E                            

0000671E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000671E                            

0000671E                            

0000671E                            Deform_SYZ:
0000671E                            	; vertical scrolling
0000671E 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00006722 48C5                       		ext.l	d5
00006724 E985                       		asl.l	#4,d5
00006726 2205                       		move.l	d5,d1
00006728 E385                       		asl.l	#1,d5
0000672A DA81                       		add.l	d1,d5
0000672C 6100 0000                  		bsr.w	Bg_Scroll_Y
00006730 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_vdp).w
00006736                            	; calculate background scroll buffer
00006736 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
0000673A 3438 F700                  		move.w	(v_screenposx).w,d2
0000673E 4442                       		neg.w	d2
00006740 3002                       		move.w	d2,d0
00006742 E640                       		asr.w	#3,d0
00006744 9042                       		sub.w	d2,d0
00006746 48C0                       		ext.l	d0
00006748 E780                       		asl.l	#3,d0
0000674A 81FC 0008                  		divs.w	#8,d0
0000674E 48C0                       		ext.l	d0
00006750 E980                       		asl.l	#4,d0
00006752 E180                       		asl.l	#8,d0
00006754 7600                       		moveq	#0,d3
00006756 3602                       		move.w	d2,d3
00006758 E243                       		asr.w	#1,d3
0000675A 323C 0007                  		move.w	#7,d1
0000675E                            	@cloudLoop:		
0000675E 32C3                       		move.w	d3,(a1)+
00006760 4843                       		swap	d3
00006762 D680                       		add.l	d0,d3
00006764 4843                       		swap	d3
00006766 51C9 FFF6                  		dbf	d1,@cloudLoop
0000676A                            

0000676A 3002                       		move.w	d2,d0
0000676C E640                       		asr.w	#3,d0
0000676E 323C 0004                  		move.w	#4,d1
00006772                            	@mountainLoop:		
00006772 32C0                       		move.w	d0,(a1)+
00006774 51C9 FFFC                  		dbf	d1,@mountainLoop
00006778                            

00006778 3002                       		move.w	d2,d0
0000677A E440                       		asr.w	#2,d0
0000677C 323C 0005                  		move.w	#5,d1
00006780                            	@buildingLoop:		
00006780 32C0                       		move.w	d0,(a1)+
00006782 51C9 FFFC                  		dbf	d1,@buildingLoop
00006786                            

00006786 3002                       		move.w	d2,d0
00006788 3202                       		move.w	d2,d1
0000678A E241                       		asr.w	#1,d1
0000678C 9041                       		sub.w	d1,d0
0000678E 48C0                       		ext.l	d0
00006790 E980                       		asl.l	#4,d0
00006792 81FC 000E                  		divs.w	#$E,d0
00006796 48C0                       		ext.l	d0
00006798 E980                       		asl.l	#4,d0
0000679A E180                       		asl.l	#8,d0
0000679C 7600                       		moveq	#0,d3
0000679E 3602                       		move.w	d2,d3
000067A0 E243                       		asr.w	#1,d3
000067A2 323C 000D                  		move.w	#$D,d1
000067A6                            	@bushLoop:		
000067A6 32C3                       		move.w	d3,(a1)+
000067A8 4843                       		swap	d3
000067AA D680                       		add.l	d0,d3
000067AC 4843                       		swap	d3
000067AE 51C9 FFF6                  		dbf	d1,@bushLoop
000067B2                            

000067B2 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
000067B6 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
000067BA 3400                       		move.w	d0,d2
000067BC 0240 01F0                  		andi.w	#$1F0,d0
000067C0 E648                       		lsr.w	#3,d0
000067C2 45F2 0000                  		lea	(a2,d0.w),a2
000067C6 6000 FF12                  		bra.w	Bg_Scroll_X
000067CA                            ; End of function Deform_SYZ
000067CA                            

000067CA                            ; ---------------------------------------------------------------------------
000067CA                            ; Scrap	Brain Zone background layer deformation	code
000067CA                            ; ---------------------------------------------------------------------------
000067CA                            

000067CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067CA                            

000067CA                            

000067CA                            Deform_SBZ:
000067CA 4A38 FE11                  		tst.b	(v_act).w
000067CE 6600 0000                  		bne.w	Deform_SBZ2
000067D2                            	; block 1 - lower black buildings
000067D2 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000067D6 48C4                       		ext.l	d4
000067D8 EF84                       		asl.l	#7,d4
000067DA 7C02                       		moveq	#2,d6
000067DC 6100 0000                  		bsr.w	BGScroll_Block1
000067E0                            	; block 3 - distant brown buildings
000067E0 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000067E4 48C4                       		ext.l	d4
000067E6 ED84                       		asl.l	#6,d4
000067E8 7C06                       		moveq	#6,d6
000067EA 6100 0000                  		bsr.w	BGScroll_Block3
000067EE                            	; block 2 - upper black buildings
000067EE 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000067F2 48C4                       		ext.l	d4
000067F4 EB84                       		asl.l	#5,d4
000067F6 2204                       		move.l	d4,d1
000067F8 E384                       		asl.l	#1,d4
000067FA D881                       		add.l	d1,d4
000067FC 7C04                       		moveq	#4,d6
000067FE 6100 0000                  		bsr.w	BGScroll_Block2
00006802                            	; vertical scrolling
00006802 7800                       		moveq	#0,d4
00006804 3A38 F73C                  		move.w	(v_scrshifty).w,d5
00006808 48C5                       		ext.l	d5
0000680A EB85                       		asl.l	#5,d5
0000680C 6100 0000                  		bsr.w	BGScroll_YRelative
00006810                            

00006810 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
00006814 31C0 F714                  		move.w	d0,(v_bg2screenposy).w
00006818 31C0 F71C                  		move.w	d0,(v_bg3screenposy).w
0000681C 31C0 F618                  		move.w	d0,(v_bgscrposy_vdp).w
00006820 1038 F756                  		move.b	(v_bg1_scroll_flags).w,d0
00006824 8038 F75A                  		or.b	(v_bg3_scroll_flags).w,d0
00006828 8138 F758                  		or.b	d0,(v_bg2_scroll_flags).w
0000682C 4238 F756                  		clr.b	(v_bg1_scroll_flags).w
00006830 4238 F75A                  		clr.b	(v_bg3_scroll_flags).w
00006834                            	; calculate background scroll buffer
00006834 43F8 A800                  		lea	(v_bgscroll_buffer).w,a1
00006838 3438 F700                  		move.w	(v_screenposx).w,d2
0000683C 4442                       		neg.w	d2
0000683E E442                       		asr.w	#2,d2
00006840 3002                       		move.w	d2,d0
00006842 E240                       		asr.w	#1,d0
00006844 9042                       		sub.w	d2,d0
00006846 48C0                       		ext.l	d0
00006848 E780                       		asl.l	#3,d0
0000684A 81FC 0004                  		divs.w	#4,d0
0000684E 48C0                       		ext.l	d0
00006850 E980                       		asl.l	#4,d0
00006852 E180                       		asl.l	#8,d0
00006854 7600                       		moveq	#0,d3
00006856 3602                       		move.w	d2,d3
00006858 323C 0003                  		move.w	#3,d1
0000685C                            	@cloudLoop:		
0000685C 32C3                       		move.w	d3,(a1)+
0000685E 4843                       		swap	d3
00006860 D680                       		add.l	d0,d3
00006862 4843                       		swap	d3
00006864 51C9 FFF6                  		dbf	d1,@cloudLoop
00006868                            

00006868 3038 F718                  		move.w	(v_bg3screenposx).w,d0
0000686C 4440                       		neg.w	d0
0000686E 323C 0009                  		move.w	#9,d1
00006872                            	@buildingLoop1:		; distant brown buildings
00006872 32C0                       		move.w	d0,(a1)+
00006874 51C9 FFFC                  		dbf	d1,@buildingLoop1
00006878                            

00006878 3038 F710                  		move.w	(v_bg2screenposx).w,d0
0000687C 4440                       		neg.w	d0
0000687E 323C 0006                  		move.w	#6,d1
00006882                            	@buildingLoop2:		; upper black buildings
00006882 32C0                       		move.w	d0,(a1)+
00006884 51C9 FFFC                  		dbf	d1,@buildingLoop2
00006888                            

00006888 3038 F708                  		move.w	(v_bgscreenposx).w,d0
0000688C 4440                       		neg.w	d0
0000688E 323C 000A                  		move.w	#$A,d1
00006892                            	@buildingLoop3:		; lower black buildings
00006892 32C0                       		move.w	d0,(a1)+
00006894 51C9 FFFC                  		dbf	d1,@buildingLoop3
00006898 45F8 A800                  		lea	(v_bgscroll_buffer).w,a2
0000689C 3038 F70C                  		move.w	(v_bgscreenposy).w,d0
000068A0 3400                       		move.w	d0,d2
000068A2 0240 01F0                  		andi.w	#$1F0,d0
000068A6 E648                       		lsr.w	#3,d0
000068A8 45F2 0000                  		lea	(a2,d0.w),a2
000068AC 6000 FE2C                  		bra.w	Bg_Scroll_X
000068B0                            ;-------------------------------------------------------------------------------
000068B0                            Deform_SBZ2:;loc_68A2:
000068B0                            	; plain background deformation
000068B0 3838 F73A                  		move.w	(v_scrshiftx).w,d4
000068B4 48C4                       		ext.l	d4		
000068B6 ED84                       		asl.l	#6,d4
000068B8 3A38 F73C                  		move.w	(v_scrshifty).w,d5
000068BC 48C5                       		ext.l	d5
000068BE EB85                       		asl.l	#5,d5
000068C0 6100 0000                  		bsr.w	BGScroll_XY
000068C4 31F8 F70C F618             		move.w	(v_bgscreenposy).w,(v_bgscrposy_vdp).w
000068CA                            	; copy fg & bg x-position to hscroll table
000068CA 43F8 CC00                  		lea	(v_hscrolltablebuffer).w,a1
000068CE 323C 00DF                  		move.w	#223,d1
000068D2 3038 F700                  		move.w	(v_screenposx).w,d0
000068D6 4440                       		neg.w	d0
000068D8 4840                       		swap	d0
000068DA 3038 F708                  		move.w	(v_bgscreenposx).w,d0
000068DE 4440                       		neg.w	d0
000068E0                            	@loop:		
000068E0 22C0                       		move.l	d0,(a1)+
000068E2 51C9 FFFC                  		dbf	d1,@loop
000068E6 4E75                       		rts
000068E8                            ; End of function Deform_SBZ
000068E8                            

000068E8                            ; ---------------------------------------------------------------------------
000068E8                            ; Subroutine to	scroll the level horizontally as Sonic moves
000068E8                            ; ---------------------------------------------------------------------------
000068E8                            

000068E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068E8                            

000068E8                            

000068E8                            ScrollHoriz:
000068E8 3838 F700                  		move.w	(v_screenposx).w,d4 ; save old screen position
000068EC 6100                       		bsr.s	MoveScreenHoriz
000068EE 3038 F700                  		move.w	(v_screenposx).w,d0
000068F2 0240 0010                  		andi.w	#$10,d0
000068F6 1238 F74A                  		move.b	(v_fg_xblock).w,d1
000068FA B300                       		eor.b	d1,d0
000068FC 6600                       		bne.s	@return
000068FE 0A38 0010 F74A             		eori.b	#$10,(v_fg_xblock).w
00006904 3038 F700                  		move.w	(v_screenposx).w,d0
00006908 9044                       		sub.w	d4,d0		; compare new with old screen position
0000690A 6A00                       		bpl.s	@scrollRight
0000690C                            

0000690C 08F8 0002 F754             		bset	#2,(v_fg_scroll_flags).w ; screen moves backward
00006912 4E75                       		rts	
00006914                            

00006914                            	@scrollRight:
00006914 08F8 0003 F754             		bset	#3,(v_fg_scroll_flags).w ; screen moves forward
0000691A                            

0000691A                            	@return:
0000691A 4E75                       		rts	
0000691C                            ; End of function ScrollHoriz
0000691C                            

0000691C                            

0000691C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000691C                            

0000691C                            

0000691C                            MoveScreenHoriz:
0000691C 3038 D008                  		move.w	(v_player+obX).w,d0
00006920 9078 F700                  		sub.w	(v_screenposx).w,d0 ; Sonic's distance from left edge of screen
00006924 0440 0090                  		subi.w	#144,d0		; is distance less than 144px?
00006928 6500                       		bcs.s	SH_BehindMid	; if yes, branch
0000692A 0440 0010                  		subi.w	#16,d0		; is distance more than 160px?
0000692E 6400                       		bcc.s	SH_AheadOfMid	; if yes, branch
00006930 4278 F73A                  		clr.w	(v_scrshiftx).w
00006934 4E75                       		rts	
00006936                            ; ===========================================================================
00006936                            

00006936                            SH_AheadOfMid:
00006936 0C40 0010                  		cmpi.w	#16,d0		; is Sonic within 16px of middle area?
0000693A 6500                       		bcs.s	SH_Ahead16	; if yes, branch
0000693C 303C 0010                  		move.w	#16,d0		; set to 16 if greater
00006940                            

00006940                            	SH_Ahead16:
00006940 D078 F700                  		add.w	(v_screenposx).w,d0
00006944 B078 F72A                  		cmp.w	(v_limitright2).w,d0
00006948 6D00                       		blt.s	SH_SetScreen
0000694A 3038 F72A                  		move.w	(v_limitright2).w,d0
0000694E                            

0000694E                            SH_SetScreen:
0000694E 3200                       		move.w	d0,d1
00006950 9278 F700                  		sub.w	(v_screenposx).w,d1
00006954 E141                       		asl.w	#8,d1
00006956 31C0 F700                  		move.w	d0,(v_screenposx).w ; set new screen position
0000695A 31C1 F73A                  		move.w	d1,(v_scrshiftx).w ; set distance for screen movement
0000695E 4E75                       		rts	
00006960                            ; ===========================================================================
00006960                            

00006960                            SH_BehindMid:
00006960 D078 F700                  		add.w	(v_screenposx).w,d0
00006964 B078 F728                  		cmp.w	(v_limitleft2).w,d0
00006968 6EE4                       		bgt.s	SH_SetScreen
0000696A 3038 F728                  		move.w	(v_limitleft2).w,d0
0000696E 60DE                       		bra.s	SH_SetScreen
00006970                            ; End of function MoveScreenHoriz
00006970                            

00006970                            ; ===========================================================================
00006970 4A40                       		tst.w	d0
00006972 6A00                       		bpl.s	loc_6610
00006974 303C FFFE                  		move.w	#-2,d0
00006978 60E6                       		bra.s	SH_BehindMid
0000697A                            

0000697A                            loc_6610:
0000697A 303C 0002                  		move.w	#2,d0
0000697E 60B6                       		bra.s	SH_AheadOfMid
00006980                            

00006980                            ; ---------------------------------------------------------------------------
00006980                            ; Subroutine to	scroll the level vertically as Sonic moves
00006980                            ; ---------------------------------------------------------------------------
00006980                            

00006980                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006980                            

00006980                            

00006980                            ScrollVertical:
00006980 7200                       		moveq	#0,d1
00006982 3038 D00C                  		move.w	(v_player+obY).w,d0
00006986 9078 F704                  		sub.w	(v_screenposy).w,d0 ; Sonic's distance from top of screen
0000698A 0838 0002 D022             		btst	#2,(v_player+obStatus).w ; is Sonic rolling?
00006990 6700                       		beq.s	SV_NotRolling	; if not, branch
00006992 5B40                       		subq.w	#5,d0
00006994                            

00006994                            	SV_NotRolling:
00006994 0838 0001 D022             		btst	#1,(v_player+obStatus).w ; is Sonic jumping?
0000699A 6700                       		beq.s	loc_664A	; if not, branch
0000699C                            

0000699C 0640 0020                  		addi.w	#32,d0
000069A0 9078 F73E                  		sub.w	(v_lookshift).w,d0
000069A4 6500                       		bcs.s	loc_6696
000069A6 0440 0040                  		subi.w	#64,d0
000069AA 6400                       		bcc.s	loc_6696
000069AC 4A38 F75C                  		tst.b	(f_bgscrollvert).w
000069B0 6600                       		bne.s	loc_66A8
000069B2 6000                       		bra.s	loc_6656
000069B4                            ; ===========================================================================
000069B4                            

000069B4                            loc_664A:
000069B4 9078 F73E                  		sub.w	(v_lookshift).w,d0
000069B8 6600                       		bne.s	loc_665C
000069BA 4A38 F75C                  		tst.b	(f_bgscrollvert).w
000069BE 6600                       		bne.s	loc_66A8
000069C0                            

000069C0                            loc_6656:
000069C0 4278 F73C                  		clr.w	(v_scrshifty).w
000069C4 4E75                       		rts	
000069C6                            ; ===========================================================================
000069C6                            

000069C6                            loc_665C:
000069C6 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w
000069CC 6600                       		bne.s	loc_6684
000069CE 3238 D014                  		move.w	(v_player+obInertia).w,d1
000069D2 6A00                       		bpl.s	loc_666C
000069D4 4441                       		neg.w	d1
000069D6                            

000069D6                            loc_666C:
000069D6 0C41 0800                  		cmpi.w	#$800,d1
000069DA 6400                       		bcc.s	loc_6696
000069DC 323C 0600                  		move.w	#$600,d1
000069E0 0C40 0006                  		cmpi.w	#6,d0
000069E4 6E00                       		bgt.s	loc_66F6
000069E6 0C40 FFFA                  		cmpi.w	#-6,d0
000069EA 6D00                       		blt.s	loc_66C0
000069EC 6000                       		bra.s	loc_66AE
000069EE                            ; ===========================================================================
000069EE                            

000069EE                            loc_6684:
000069EE 323C 0200                  		move.w	#$200,d1
000069F2 0C40 0002                  		cmpi.w	#2,d0
000069F6 6E00                       		bgt.s	loc_66F6
000069F8 0C40 FFFE                  		cmpi.w	#-2,d0
000069FC 6D00                       		blt.s	loc_66C0
000069FE 6000                       		bra.s	loc_66AE
00006A00                            ; ===========================================================================
00006A00                            

00006A00                            loc_6696:
00006A00 323C 1000                  		move.w	#$1000,d1
00006A04 0C40 0010                  		cmpi.w	#$10,d0
00006A08 6E00                       		bgt.s	loc_66F6
00006A0A 0C40 FFF0                  		cmpi.w	#-$10,d0
00006A0E 6D00                       		blt.s	loc_66C0
00006A10 6000                       		bra.s	loc_66AE
00006A12                            ; ===========================================================================
00006A12                            

00006A12                            loc_66A8:
00006A12 7000                       		moveq	#0,d0
00006A14 11C0 F75C                  		move.b	d0,(f_bgscrollvert).w
00006A18                            

00006A18                            loc_66AE:
00006A18 7200                       		moveq	#0,d1
00006A1A 3200                       		move.w	d0,d1
00006A1C D278 F704                  		add.w	(v_screenposy).w,d1
00006A20 4A40                       		tst.w	d0
00006A22 6A00 0000                  		bpl.w	loc_6700
00006A26 6000 0000                  		bra.w	loc_66CC
00006A2A                            ; ===========================================================================
00006A2A                            

00006A2A                            loc_66C0:
00006A2A 4441                       		neg.w	d1
00006A2C 48C1                       		ext.l	d1
00006A2E E181                       		asl.l	#8,d1
00006A30 D2B8 F704                  		add.l	(v_screenposy).w,d1
00006A34 4841                       		swap	d1
00006A36                            

00006A36                            loc_66CC:
00006A36 B278 F72C                  		cmp.w	(v_limittop2).w,d1
00006A3A 6E00                       		bgt.s	loc_6724
00006A3C 0C41 FF00                  		cmpi.w	#-$100,d1
00006A40 6E00                       		bgt.s	loc_66F0
00006A42 0241 07FF                  		andi.w	#$7FF,d1
00006A46 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00006A4C 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
00006A52 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00006A58 6000                       		bra.s	loc_6724
00006A5A                            ; ===========================================================================
00006A5A                            

00006A5A                            loc_66F0:
00006A5A 3238 F72C                  		move.w	(v_limittop2).w,d1
00006A5E 6000                       		bra.s	loc_6724
00006A60                            ; ===========================================================================
00006A60                            

00006A60                            loc_66F6:
00006A60 48C1                       		ext.l	d1
00006A62 E181                       		asl.l	#8,d1
00006A64 D2B8 F704                  		add.l	(v_screenposy).w,d1
00006A68 4841                       		swap	d1
00006A6A                            

00006A6A                            loc_6700:
00006A6A B278 F72E                  		cmp.w	(v_limitbtm2).w,d1
00006A6E 6D00                       		blt.s	loc_6724
00006A70 0441 0800                  		subi.w	#$800,d1
00006A74 6500                       		bcs.s	loc_6720
00006A76 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
00006A7C 0478 0800 F704             		subi.w	#$800,(v_screenposy).w
00006A82 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
00006A88 6000                       		bra.s	loc_6724
00006A8A                            ; ===========================================================================
00006A8A                            

00006A8A                            loc_6720:
00006A8A 3238 F72E                  		move.w	(v_limitbtm2).w,d1
00006A8E                            

00006A8E                            loc_6724:
00006A8E 3838 F704                  		move.w	(v_screenposy).w,d4
00006A92 4841                       		swap	d1
00006A94 2601                       		move.l	d1,d3
00006A96 96B8 F704                  		sub.l	(v_screenposy).w,d3
00006A9A E09B                       		ror.l	#8,d3
00006A9C 31C3 F73C                  		move.w	d3,(v_scrshifty).w
00006AA0 21C1 F704                  		move.l	d1,(v_screenposy).w
00006AA4 3038 F704                  		move.w	(v_screenposy).w,d0
00006AA8 0240 0010                  		andi.w	#$10,d0
00006AAC 1238 F74B                  		move.b	(v_fg_yblock).w,d1
00006AB0 B300                       		eor.b	d1,d0
00006AB2 6600                       		bne.s	@return
00006AB4 0A38 0010 F74B             		eori.b	#$10,(v_fg_yblock).w
00006ABA 3038 F704                  		move.w	(v_screenposy).w,d0
00006ABE 9044                       		sub.w	d4,d0
00006AC0 6A00                       		bpl.s	@scrollBottom
00006AC2 08F8 0000 F754             		bset	#0,(v_fg_scroll_flags).w
00006AC8 4E75                       		rts	
00006ACA                            ; ===========================================================================
00006ACA                            

00006ACA                            	@scrollBottom:
00006ACA 08F8 0001 F754             		bset	#1,(v_fg_scroll_flags).w
00006AD0                            

00006AD0                            	@return:
00006AD0 4E75                       		rts	
00006AD2                            ; End of function ScrollVertical
00006AD2                            

00006AD2                            

00006AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AD2                            ; Scrolls background and sets redraw flags.
00006AD2                            ; d4 - background x offset * $10000
00006AD2                            ; d5 - background y offset * $10000
00006AD2                            

00006AD2                            BGScroll_XY:
00006AD2 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00006AD6 2002                       		move.l	d2,d0
00006AD8 D084                       		add.l	d4,d0
00006ADA 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00006ADE 2200                       		move.l	d0,d1
00006AE0 4841                       		swap	d1
00006AE2 0241 0010                  		andi.w	#$10,d1
00006AE6 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00006AEA B701                       		eor.b	d3,d1
00006AEC 6600                       		bne.s	BGScroll_YRelative	; no change in Y
00006AEE 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00006AF4 9082                       		sub.l	d2,d0	; new - old
00006AF6 6A00                       		bpl.s	@scrollRight
00006AF8 08F8 0002 F756             		bset	#2,(v_bg1_scroll_flags).w
00006AFE 6000                       		bra.s	BGScroll_YRelative
00006B00                            	@scrollRight:
00006B00 08F8 0003 F756             		bset	#3,(v_bg1_scroll_flags).w
00006B06                            BGScroll_YRelative:
00006B06 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00006B0A 2003                       		move.l	d3,d0
00006B0C D085                       		add.l	d5,d0
00006B0E 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00006B12 2200                       		move.l	d0,d1
00006B14 4841                       		swap	d1
00006B16 0241 0010                  		andi.w	#$10,d1
00006B1A 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00006B1E B501                       		eor.b	d2,d1
00006B20 6600                       		bne.s	@return
00006B22 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00006B28 9083                       		sub.l	d3,d0
00006B2A 6A00                       		bpl.s	@scrollBottom
00006B2C 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00006B32 4E75                       		rts
00006B34                            	@scrollBottom:
00006B34 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00006B3A                            	@return:
00006B3A 4E75                       		rts
00006B3C                            ; End of function BGScroll_XY
00006B3C                            

00006B3C                            Bg_Scroll_Y:
00006B3C 2638 F70C                  		move.l	(v_bgscreenposy).w,d3
00006B40 2003                       		move.l	d3,d0
00006B42 D085                       		add.l	d5,d0
00006B44 21C0 F70C                  		move.l	d0,(v_bgscreenposy).w
00006B48 2200                       		move.l	d0,d1
00006B4A 4841                       		swap	d1
00006B4C 0241 0010                  		andi.w	#$10,d1
00006B50 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00006B54 B501                       		eor.b	d2,d1
00006B56 6600                       		bne.s	@return
00006B58 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00006B5E 9083                       		sub.l	d3,d0
00006B60 6A00                       		bpl.s	@scrollBottom
00006B62 08F8 0004 F756             		bset	#4,(v_bg1_scroll_flags).w
00006B68 4E75                       		rts
00006B6A                            	@scrollBottom:
00006B6A 08F8 0005 F756             		bset	#5,(v_bg1_scroll_flags).w
00006B70                            	@return:
00006B70 4E75                       		rts
00006B72                            

00006B72                            

00006B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B72                            

00006B72                            

00006B72                            BGScroll_YAbsolute:
00006B72 3638 F70C                  		move.w	(v_bgscreenposy).w,d3
00006B76 31C0 F70C                  		move.w	d0,(v_bgscreenposy).w
00006B7A 3200                       		move.w	d0,d1
00006B7C 0241 0010                  		andi.w	#$10,d1
00006B80 1438 F74D                  		move.b	(v_bg1_yblock).w,d2
00006B84 B501                       		eor.b	d2,d1
00006B86 6600                       		bne.s	@return
00006B88 0A38 0010 F74D             		eori.b	#$10,(v_bg1_yblock).w
00006B8E 9043                       		sub.w	d3,d0
00006B90 6A00                       		bpl.s	@scrollBottom
00006B92 08F8 0000 F756             		bset	#0,(v_bg1_scroll_flags).w
00006B98 4E75                       		rts
00006B9A                            	@scrollBottom:
00006B9A 08F8 0001 F756             		bset	#1,(v_bg1_scroll_flags).w
00006BA0                            	@return:
00006BA0 4E75                       		rts
00006BA2                            ; End of function BGScroll_YAbsolute
00006BA2                            

00006BA2                            

00006BA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BA2                            ; d6 - bit to set for redraw
00006BA2                            

00006BA2                            BGScroll_Block1:
00006BA2 2438 F708                  		move.l	(v_bgscreenposx).w,d2
00006BA6 2002                       		move.l	d2,d0
00006BA8 D084                       		add.l	d4,d0
00006BAA 21C0 F708                  		move.l	d0,(v_bgscreenposx).w
00006BAE 2200                       		move.l	d0,d1
00006BB0 4841                       		swap	d1
00006BB2 0241 0010                  		andi.w	#$10,d1
00006BB6 1638 F74C                  		move.b	(v_bg1_xblock).w,d3
00006BBA B701                       		eor.b	d3,d1
00006BBC 6600                       		bne.s	@return
00006BBE 0A38 0010 F74C             		eori.b	#$10,(v_bg1_xblock).w
00006BC4 9082                       		sub.l	d2,d0
00006BC6 6A00                       		bpl.s	@scrollRight
00006BC8 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00006BCC 6000                       		bra.s	@return
00006BCE                            	@scrollRight:
00006BCE 5206                       		addq.b	#1,d6
00006BD0 0DF8 F756                  		bset	d6,(v_bg1_scroll_flags).w
00006BD4                            	@return:
00006BD4 4E75                       		rts
00006BD6                            ; End of function BGScroll_Block1
00006BD6                            

00006BD6                            

00006BD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BD6                            

00006BD6                            

00006BD6                            BGScroll_Block2:
00006BD6 2438 F710                  		move.l	(v_bg2screenposx).w,d2
00006BDA 2002                       		move.l	d2,d0
00006BDC D084                       		add.l	d4,d0
00006BDE 21C0 F710                  		move.l	d0,(v_bg2screenposx).w
00006BE2 2200                       		move.l	d0,d1
00006BE4 4841                       		swap	d1
00006BE6 0241 0010                  		andi.w	#$10,d1
00006BEA 1638 F74E                  		move.b	(v_bg2_xblock).w,d3
00006BEE B701                       		eor.b	d3,d1
00006BF0 6600                       		bne.s	@return
00006BF2 0A38 0010 F74E             		eori.b	#$10,(v_bg2_xblock).w
00006BF8 9082                       		sub.l	d2,d0
00006BFA 6A00                       		bpl.s	@scrollRight
00006BFC 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00006C00 6000                       		bra.s	@return
00006C02                            	@scrollRight:
00006C02 5206                       		addq.b	#1,d6
00006C04 0DF8 F758                  		bset	d6,(v_bg2_scroll_flags).w
00006C08                            	@return:
00006C08 4E75                       		rts
00006C0A                            ;-------------------------------------------------------------------------------
00006C0A                            BGScroll_Block3:
00006C0A 2438 F718                  		move.l	(v_bg3screenposx).w,d2
00006C0E 2002                       		move.l	d2,d0
00006C10 D084                       		add.l	d4,d0
00006C12 21C0 F718                  		move.l	d0,(v_bg3screenposx).w
00006C16 2200                       		move.l	d0,d1
00006C18 4841                       		swap	d1
00006C1A 0241 0010                  		andi.w	#$10,d1
00006C1E 1638 F750                  		move.b	(v_bg3_xblock).w,d3
00006C22 B701                       		eor.b	d3,d1
00006C24 6600                       		bne.s	@return
00006C26 0A38 0010 F750             		eori.b	#$10,(v_bg3_xblock).w
00006C2C 9082                       		sub.l	d2,d0
00006C2E 6A00                       		bpl.s	@scrollRight
00006C30 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00006C34 6000                       		bra.s	@return
00006C36                            	@scrollRight:
00006C36 5206                       		addq.b	#1,d6
00006C38 0DF8 F75A                  		bset	d6,(v_bg3_scroll_flags).w
00006C3C                            	@return:
00006C3C 4E75                       		rts
00006C3C 4E75                       		rts
00006C3E                            

00006C3E                            

00006C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C3E                            

00006C3E                            ; sub_6886:
00006C3E                            LoadTilesAsYouMove_BGOnly:
00006C3E 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006C44 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00006C4A 45F8 F756                  		lea	(v_bg1_scroll_flags).w,a2
00006C4E 47F8 F708                  		lea	(v_bgscreenposx).w,a3
00006C52 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00006C56 343C 6000                  		move.w	#$6000,d2
00006C5A 6100 0000                  		bsr.w	DrawBGScrollBlock1
00006C5E 45F8 F758                  		lea	(v_bg2_scroll_flags).w,a2
00006C62 47F8 F710                  		lea	(v_bg2screenposx).w,a3
00006C66 6000 0000                  		bra.w	DrawBGScrollBlock2
00006C6A                            ; End of function sub_6886
00006C6A                            

00006C6A                            ; ---------------------------------------------------------------------------
00006C6A                            ; Subroutine to	display	correct	tiles as you move
00006C6A                            ; ---------------------------------------------------------------------------
00006C6A                            

00006C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C6A                            

00006C6A                            

00006C6A                            LoadTilesAsYouMove:
00006C6A 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
00006C70 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
00006C76                            		; First, update the background
00006C76 45F8 FF32                  		lea	(v_bg1_scroll_flags_dup).w,a2	; Scroll block 1 scroll flags
00006C7A 47F8 FF18                  		lea	(v_bgscreenposx_dup).w,a3	; Scroll block 1 X coordinate
00006C7E 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
00006C82 343C 6000                  		move.w	#$6000,d2			; VRAM thing for selecting Plane B
00006C86 6100 0000                  		bsr.w	DrawBGScrollBlock1
00006C8A 45F8 FF34                  		lea	(v_bg2_scroll_flags_dup).w,a2	; Scroll block 2 scroll flags
00006C8E 47F8 FF20                  		lea	(v_bg2screenposx_dup).w,a3	; Scroll block 2 X coordinate
00006C92 6100 0000                  		bsr.w	DrawBGScrollBlock2
00006C96                            		; REV01 added a third scroll block, though, technically,
00006C96                            		; the RAM for it was already there in REV00
00006C96 45F8 FF36                  		lea	(v_bg3_scroll_flags_dup).w,a2	; Scroll block 3 scroll flags
00006C9A 47F8 FF28                  		lea	(v_bg3screenposx_dup).w,a3	; Scroll block 3 X coordinate
00006C9E 6100 0000                  		bsr.w	DrawBGScrollBlock3
00006CA2                            		; Then, update the foreground
00006CA2 45F8 FF30                  		lea	(v_fg_scroll_flags_dup).w,a2	; Foreground scroll flags
00006CA6 47F8 FF10                  		lea	(v_screenposx_dup).w,a3		; Foreground X coordinate
00006CAA 49F8 A400                  		lea	(v_lvllayout).w,a4
00006CAE 343C 4000                  		move.w	#$4000,d2			; VRAM thing for selecting Plane A
00006CB2                            		; The FG's update function is inlined here
00006CB2 4A12                       		tst.b	(a2)
00006CB4 6700                       		beq.s	locret_6952	; If there are no flags set, nothing needs updating
00006CB6 0892 0000                  		bclr	#0,(a2)
00006CBA 6700                       		beq.s	loc_6908
00006CBC                            		; Draw new tiles at the top
00006CBC 78F0                       		moveq	#-16,d4	; Y coordinate. Note that 16 is the size of a block in pixels
00006CBE 7AF0                       		moveq	#-16,d5 ; X coordinate
00006CC0 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006CC4 78F0                       		moveq	#-16,d4 ; Y coordinate
00006CC6 7AF0                       		moveq	#-16,d5 ; X coordinate
00006CC8 6100 0000                  		bsr.w	DrawBlocks_LR
00006CCC                            

00006CCC                            loc_6908:
00006CCC 0892 0001                  		bclr	#1,(a2)
00006CD0 6700                       		beq.s	loc_6922
00006CD2                            		; Draw new tiles at the bottom
00006CD2 383C 00E0                  		move.w	#224,d4	; Start at bottom of the screen. Since this draws from top to bottom, we don't need 224+16
00006CD6 7AF0                       		moveq	#-16,d5
00006CD8 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006CDC 383C 00E0                  		move.w	#224,d4
00006CE0 7AF0                       		moveq	#-16,d5
00006CE2 6100 0000                  		bsr.w	DrawBlocks_LR
00006CE6                            

00006CE6                            loc_6922:
00006CE6 0892 0002                  		bclr	#2,(a2)
00006CEA 6700                       		beq.s	loc_6938
00006CEC                            		; Draw new tiles on the left
00006CEC 78F0                       		moveq	#-16,d4
00006CEE 7AF0                       		moveq	#-16,d5
00006CF0 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006CF4 78F0                       		moveq	#-16,d4
00006CF6 7AF0                       		moveq	#-16,d5
00006CF8 6100 0000                  		bsr.w	DrawBlocks_TB
00006CFC                            

00006CFC                            loc_6938:
00006CFC 0892 0003                  		bclr	#3,(a2)
00006D00 6700                       		beq.s	locret_6952
00006D02                            		; Draw new tiles on the right
00006D02 78F0                       		moveq	#-16,d4
00006D04 3A3C 0140                  		move.w	#320,d5
00006D08 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006D0C 78F0                       		moveq	#-16,d4
00006D0E 3A3C 0140                  		move.w	#320,d5
00006D12 6100 0000                  		bsr.w	DrawBlocks_TB
00006D16                            

00006D16                            locret_6952:
00006D16 4E75                       		rts	
00006D18                            ; End of function LoadTilesAsYouMove
00006D18                            

00006D18                            

00006D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D18                            

00006D18                            ; sub_6954:
00006D18                            DrawBGScrollBlock1:
00006D18 4A12                       		tst.b	(a2)
00006D1A 6700 0000                  		beq.w	locret_69F2
00006D1E 0892 0000                  		bclr	#0,(a2)
00006D22 6700                       		beq.s	loc_6972
00006D24                            		; Draw new tiles at the top
00006D24 78F0                       		moveq	#-16,d4
00006D26 7AF0                       		moveq	#-16,d5
00006D28 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006D2C 78F0                       		moveq	#-16,d4
00006D2E 7AF0                       		moveq	#-16,d5
00006D30 6100 0000                  			bsr.w	DrawBlocks_LR
00006D34                            

00006D34                            loc_6972:
00006D34 0892 0001                  		bclr	#1,(a2)
00006D38 6700                       		beq.s	loc_698E
00006D3A                            		; Draw new tiles at the top
00006D3A 383C 00E0                  		move.w	#224,d4
00006D3E 7AF0                       		moveq	#-16,d5
00006D40 6100 0000                  		bsr.w	Calc_VRAM_Pos
00006D44 383C 00E0                  		move.w	#224,d4
00006D48 7AF0                       		moveq	#-16,d5
00006D4A 6100 0000                  			bsr.w	DrawBlocks_LR
00006D4E                            

00006D4E                            loc_698E:
00006D4E 0892 0002                  		bclr	#2,(a2)
00006D52                            

00006D52                            

00006D52 6700                       			beq.s	locj_6D56
00006D54                            			; Draw new tiles on the left
00006D54 78F0                       			moveq	#-16,d4
00006D56 7AF0                       			moveq	#-16,d5
00006D58 6100 0000                  			bsr.w	Calc_VRAM_Pos
00006D5C 78F0                       			moveq	#-16,d4
00006D5E 7AF0                       			moveq	#-16,d5
00006D60 6100 0000                  			bsr.w	DrawBlocks_TB
00006D64                            	locj_6D56:
00006D64                            

00006D64 0892 0003                  			bclr	#3,(a2)
00006D68 6700                       			beq.s	locj_6D70
00006D6A                            			; Draw new tiles on the right
00006D6A 78F0                       			moveq	#-16,d4
00006D6C 3A3C 0140                  			move.w	#320,d5
00006D70 6100 0000                  			bsr.w	Calc_VRAM_Pos
00006D74 78F0                       			moveq	#-16,d4
00006D76 3A3C 0140                  			move.w	#320,d5
00006D7A 6100 0000                  			bsr.w	DrawBlocks_TB
00006D7E                            	locj_6D70:
00006D7E                            

00006D7E 0892 0004                  			bclr	#4,(a2)
00006D82 6700                       			beq.s	locj_6D88
00006D84                            			; Draw entire row at the top
00006D84 78F0                       			moveq	#-16,d4
00006D86 7A00                       			moveq	#0,d5
00006D88 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00006D8C 78F0                       			moveq	#-16,d4
00006D8E 7A00                       			moveq	#0,d5
00006D90 7C1F                       			moveq	#(512/16)-1,d6
00006D92 6100 0000                  			bsr.w	DrawBlocks_LR_3
00006D96                            	locj_6D88:
00006D96                            

00006D96 0892 0005                  			bclr	#5,(a2)
00006D9A 6700                       			beq.s	locret_69F2
00006D9C                            			; Draw entire row at the bottom
00006D9C 383C 00E0                  			move.w	#224,d4
00006DA0 7A00                       			moveq	#0,d5
00006DA2 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00006DA6 383C 00E0                  			move.w	#224,d4
00006DAA 7A00                       			moveq	#0,d5
00006DAC 7C1F                       			moveq	#(512/16)-1,d6
00006DAE 6100 0000                  			bsr.w	DrawBlocks_LR_3
00006DB2                            

00006DB2                            locret_69F2:
00006DB2 4E75                       		rts	
00006DB4                            ; End of function DrawBGScrollBlock1
00006DB4                            

00006DB4                            

00006DB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB4                            

00006DB4                            ; Essentially, this draws everything that isn't scroll block 1
00006DB4                            ; sub_69F4:
00006DB4                            DrawBGScrollBlock2:
00006DB4                            

00006DB4 4A12                       			tst.b	(a2)
00006DB6 6700 0000                  			beq.w	locj_6DF2
00006DBA 0C38 0005 FE10             			cmpi.b	#id_SBZ,(v_zone).w
00006DC0 6700 0000                  			beq.w	Draw_SBz
00006DC4 0892 0000                  			bclr	#0,(a2)
00006DC8 6700                       			beq.s	locj_6DD2
00006DCA                            			; Draw new tiles on the left
00006DCA 383C 0070                  			move.w	#224/2,d4	; Draw the bottom half of the screen
00006DCE 7AF0                       			moveq	#-16,d5
00006DD0 6100 0000                  			bsr.w	Calc_VRAM_Pos
00006DD4 383C 0070                  			move.w	#224/2,d4
00006DD8 7AF0                       			moveq	#-16,d5
00006DDA 7C02                       			moveq	#3-1,d6		; Draw three rows... could this be a repurposed version of the above unused code?
00006DDC 6100 0000                  			bsr.w	DrawBlocks_TB_2
00006DE0                            	locj_6DD2:
00006DE0 0892 0001                  			bclr	#1,(a2)
00006DE4 6700                       			beq.s	locj_6DF2
00006DE6                            			; Draw new tiles on the right
00006DE6 383C 0070                  			move.w	#224/2,d4
00006DEA 3A3C 0140                  			move.w	#320,d5
00006DEE 6100 0000                  			bsr.w	Calc_VRAM_Pos
00006DF2 383C 0070                  			move.w	#224/2,d4
00006DF6 3A3C 0140                  			move.w	#320,d5
00006DFA 7C02                       			moveq	#3-1,d6
00006DFC 6100 0000                  			bsr.w	DrawBlocks_TB_2
00006E00                            	locj_6DF2:
00006E00 4E75                       			rts
00006E02                            ;===============================================================================
00006E02                            	locj_6DF4:
00006E02 0000 0000 0006 0606 0606+  			dc.b $00,$00,$00,$00,$00,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$04
00006E12 0404 0404 0404 0202 0202+  			dc.b $04,$04,$04,$04,$04,$04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00006E22 0200                       			dc.b $02,$00						
00006E24                            ;===============================================================================
00006E24                            	Draw_SBz:
00006E24 78F0                       			moveq	#-16,d4
00006E26 0892 0000                  			bclr	#0,(a2)
00006E2A 6600                       			bne.s	locj_6E28
00006E2C 0892 0001                  			bclr	#1,(a2)
00006E30 6700                       			beq.s	locj_6E72
00006E32 383C 00E0                  			move.w	#224,d4
00006E36                            	locj_6E28:
00006E36 41F9 0000 6E03             			lea	(locj_6DF4+1).l,a0
00006E3C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00006E40 D044                       			add.w	d4,d0
00006E42 0240 01F0                  			andi.w	#$1F0,d0
00006E46 E848                       			lsr.w	#4,d0
00006E48 1030 0000                  			move.b	(a0,d0.w),d0
00006E4C 47F9 0000 0000             			lea	(locj_6FE4).l,a3
00006E52 3673 0000                  			movea.w	(a3,d0.w),a3
00006E56 6700                       			beq.s	locj_6E5E
00006E58 7AF0                       			moveq	#-16,d5
00006E5A 48E7 0C00                  			movem.l	d4/d5,-(sp)
00006E5E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00006E62 4CDF 0030                  			movem.l	(sp)+,d4/d5
00006E66 6100 0000                  			bsr.w	DrawBlocks_LR
00006E6A 6000                       			bra.s	locj_6E72
00006E6C                            ;===============================================================================
00006E6C                            	locj_6E5E:
00006E6C 7A00                       			moveq	#0,d5
00006E6E 48E7 0C00                  			movem.l	d4/d5,-(sp)
00006E72 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00006E76 4CDF 0030                  			movem.l	(sp)+,d4/d5
00006E7A 7C1F                       			moveq	#(512/16)-1,d6
00006E7C 6100 0000                  			bsr.w	DrawBlocks_LR_3
00006E80                            	locj_6E72:
00006E80 4A12                       			tst.b	(a2)
00006E82 6600                       			bne.s	locj_6E78
00006E84 4E75                       			rts
00006E86                            ;===============================================================================			
00006E86                            	locj_6E78:
00006E86 78F0                       			moveq	#-16,d4
00006E88 7AF0                       			moveq	#-16,d5
00006E8A 1012                       			move.b	(a2),d0
00006E8C 0200 00A8                  			andi.b	#$A8,d0
00006E90 6700                       			beq.s	locj_6E8C
00006E92 E208                       			lsr.b	#1,d0
00006E94 1480                       			move.b	d0,(a2)
00006E96 3A3C 0140                  			move.w	#320,d5
00006E9A                            	locj_6E8C:
00006E9A 41F9 0000 6E02             			lea	(locj_6DF4).l,a0
00006EA0 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00006EA4 0240 01F0                  			andi.w	#$1F0,d0
00006EA8 E848                       			lsr.w	#4,d0
00006EAA 41F0 0000                  			lea	(a0,d0.w),a0
00006EAE 6000 0000                  			bra.w	locj_6FEC						
00006EB2                            ;===============================================================================
00006EB2                            

00006EB2                            

00006EB2                            	; locj_6EA4:
00006EB2                            	DrawBGScrollBlock3:
00006EB2 4A12                       			tst.b	(a2)
00006EB4 6700 0000                  			beq.w	locj_6EF0
00006EB8 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
00006EBE 6700 0000                  			beq.w	Draw_Mz
00006EC2 0892 0000                  			bclr	#0,(a2)
00006EC6 6700                       			beq.s	locj_6ED0
00006EC8                            			; Draw new tiles on the left
00006EC8 383C 0040                  			move.w	#$40,d4
00006ECC 7AF0                       			moveq	#-16,d5
00006ECE 6100 0000                  			bsr.w	Calc_VRAM_Pos
00006ED2 383C 0040                  			move.w	#$40,d4
00006ED6 7AF0                       			moveq	#-16,d5
00006ED8 7C02                       			moveq	#3-1,d6
00006EDA 6100 0000                  			bsr.w	DrawBlocks_TB_2
00006EDE                            	locj_6ED0:
00006EDE 0892 0001                  			bclr	#1,(a2)
00006EE2 6700                       			beq.s	locj_6EF0
00006EE4                            			; Draw new tiles on the right
00006EE4 383C 0040                  			move.w	#$40,d4
00006EE8 3A3C 0140                  			move.w	#320,d5
00006EEC 6100 0000                  			bsr.w	Calc_VRAM_Pos
00006EF0 383C 0040                  			move.w	#$40,d4
00006EF4 3A3C 0140                  			move.w	#320,d5
00006EF8 7C02                       			moveq	#3-1,d6
00006EFA 6100 0000                  			bsr.w	DrawBlocks_TB_2
00006EFE                            	locj_6EF0:
00006EFE 4E75                       			rts
00006F00                            	locj_6EF2:
00006F00 0000 0000 0000 0606 0404+  			dc.b $00,$00,$00,$00,$00,$00,$06,$06,$04,$04,$04,$04,$04,$04,$04,$04
00006F10 0402 0202 0202 0202 0202+  			dc.b $04,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00006F20 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00006F30 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00006F40 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00006F50 0202 0202 0202 0202 0202+  			dc.b $02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02
00006F60 0200                       			dc.b $02,$00
00006F62                            ;===============================================================================
00006F62                            	Draw_Mz:
00006F62 78F0                       			moveq	#-16,d4
00006F64 0892 0000                  			bclr	#0,(a2)
00006F68 6600                       			bne.s	locj_6F66
00006F6A 0892 0001                  			bclr	#1,(a2)
00006F6E 6700                       			beq.s	locj_6FAE
00006F70 383C 00E0                  			move.w	#224,d4
00006F74                            	locj_6F66:
00006F74 41F9 0000 6F01             			lea	(locj_6EF2+1).l,a0
00006F7A 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00006F7E 0440 0200                  			subi.w	#$200,d0
00006F82 D044                       			add.w	d4,d0
00006F84 0240 07F0                  			andi.w	#$7F0,d0
00006F88 E848                       			lsr.w	#4,d0
00006F8A 1030 0000                  			move.b	(a0,d0.w),d0
00006F8E 367B 0000                  			movea.w	locj_6FE4(pc,d0.w),a3
00006F92 6700                       			beq.s	locj_6F9A
00006F94 7AF0                       			moveq	#-16,d5
00006F96 48E7 0C00                  			movem.l	d4/d5,-(sp)
00006F9A 6100 0000                  			bsr.w	Calc_VRAM_Pos
00006F9E 4CDF 0030                  			movem.l	(sp)+,d4/d5
00006FA2 6100 0000                  			bsr.w	DrawBlocks_LR
00006FA6 6000                       			bra.s	locj_6FAE
00006FA8                            ;===============================================================================
00006FA8                            	locj_6F9A:
00006FA8 7A00                       			moveq	#0,d5
00006FAA 48E7 0C00                  			movem.l	d4/d5,-(sp)
00006FAE 6100 0000                  			bsr.w	Calc_VRAM_Pos_2
00006FB2 4CDF 0030                  			movem.l	(sp)+,d4/d5
00006FB6 7C1F                       			moveq	#(512/16)-1,d6
00006FB8 6100 0000                  			bsr.w	DrawBlocks_LR_3
00006FBC                            	locj_6FAE:
00006FBC 4A12                       			tst.b	(a2)
00006FBE 6600                       			bne.s	locj_6FB4
00006FC0 4E75                       			rts
00006FC2                            ;===============================================================================			
00006FC2                            	locj_6FB4:
00006FC2 78F0                       			moveq	#-16,d4
00006FC4 7AF0                       			moveq	#-16,d5
00006FC6 1012                       			move.b	(a2),d0
00006FC8 0200 00A8                  			andi.b	#$A8,d0
00006FCC 6700                       			beq.s	locj_6FC8
00006FCE E208                       			lsr.b	#1,d0
00006FD0 1480                       			move.b	d0,(a2)
00006FD2 3A3C 0140                  			move.w	#320,d5
00006FD6                            	locj_6FC8:
00006FD6 41F9 0000 6F00             			lea	(locj_6EF2).l,a0
00006FDC 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00006FE0 0440 0200                  			subi.w	#$200,d0
00006FE4 0240 07F0                  			andi.w	#$7F0,d0
00006FE8 E848                       			lsr.w	#4,d0
00006FEA 41F0 0000                  			lea	(a0,d0.w),a0
00006FEE 6000 0000                  			bra.w	locj_6FEC
00006FF2                            ;===============================================================================			
00006FF2                            	locj_6FE4:
00006FF2 FF18 FF18 FF20 FF28        			dc.w v_bgscreenposx_dup, v_bgscreenposx_dup, v_bg2screenposx_dup, v_bg3screenposx_dup
00006FFA                            	locj_6FEC:
00006FFA 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00006FFC 2E3C 0080 0000             			move.l	#$800000,d7
00007002                            	locj_6FF4:			
00007002 7000                       			moveq	#0,d0
00007004 1018                       			move.b	(a0)+,d0
00007006 0112                       			btst	d0,(a2)
00007008 6700                       			beq.s	locj_701C
0000700A 367B 00E6                  			movea.w	locj_6FE4(pc,d0.w),a3
0000700E 48E7 0C80                  			movem.l	d4/d5/a0,-(sp)
00007012 48E7 0C00                  			movem.l	d4/d5,-(sp)
00007016 6100 0000                  			bsr.w	GetBlockData
0000701A 4CDF 0030                  			movem.l	(sp)+,d4/d5
0000701E 6100 0000                  			bsr.w	Calc_VRAM_Pos
00007022 6100 0000                  			bsr.w	DrawBlock
00007026 4CDF 0130                  			movem.l	(sp)+,d4/d5/a0
0000702A                            	locj_701C:
0000702A 0644 0010                  			addi.w	#16,d4
0000702E 51CE FFD2                  			dbf	d6,locj_6FF4
00007032 4212                       			clr.b	(a2)
00007034 4E75                       			rts			
00007036                            

00007036                            

00007036                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007036                            

00007036                            ; Don't be fooled by the name: this function's for drawing from left to right
00007036                            ; when the camera's moving up or down
00007036                            ; DrawTiles_LR:
00007036                            DrawBlocks_LR:
00007036 7C15                       		moveq	#((320+16+16)/16)-1,d6	; Draw the entire width of the screen + two extra columns
00007038                            ; DrawTiles_LR_2:
00007038                            DrawBlocks_LR_2:
00007038 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
0000703E 2200                       		move.l	d0,d1
00007040                            

00007040                            	@loop:
00007040 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007044 6100 0000                  		bsr.w	GetBlockData
00007048 2001                       		move.l	d1,d0
0000704A 6100 0000                  		bsr.w	DrawBlock
0000704E 5801                       		addq.b	#4,d1		; Two tiles ahead
00007050 0201 007F                  		andi.b	#$7F,d1		; Wrap around row
00007054 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007058 0645 0010                  		addi.w	#16,d5		; Move X coordinate one block ahead
0000705C 51CE FFE2                  		dbf	d6,@loop
00007060 4E75                       		rts
00007062                            ; End of function DrawBlocks_LR
00007062                            

00007062                            ; DrawTiles_LR_3:
00007062                            DrawBlocks_LR_3:
00007062 2E3C 0080 0000             		move.l	#$800000,d7
00007068 2200                       		move.l	d0,d1
0000706A                            

0000706A                            	@loop:
0000706A 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000706E 6100 0000                  		bsr.w	GetBlockData_2
00007072 2001                       		move.l	d1,d0
00007074 6100 0000                  		bsr.w	DrawBlock
00007078 5801                       		addq.b	#4,d1
0000707A 0201 007F                  		andi.b	#$7F,d1
0000707E 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007082 0645 0010                  		addi.w	#16,d5
00007086 51CE FFE2                  		dbf	d6,@loop
0000708A 4E75                       		rts	
0000708C                            ; End of function DrawBlocks_LR_3
0000708C                            

0000708C                            

0000708C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000708C                            

0000708C                            ; Don't be fooled by the name: this function's for drawing from top to bottom
0000708C                            ; when the camera's moving left or right
0000708C                            ; DrawTiles_TB:
0000708C                            DrawBlocks_TB:
0000708C 7C0F                       		moveq	#((224+16+16)/16)-1,d6	; Draw the entire height of the screen + two extra rows
0000708E                            ; DrawTiles_TB_2:
0000708E                            DrawBlocks_TB_2:
0000708E 2E3C 0080 0000             		move.l	#$800000,d7	; Delta between rows of tiles
00007094 2200                       		move.l	d0,d1
00007096                            

00007096                            	@loop:
00007096 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000709A 6100 0000                  		bsr.w	GetBlockData
0000709E 2001                       		move.l	d1,d0
000070A0 6100 0000                  		bsr.w	DrawBlock
000070A4 0641 0100                  		addi.w	#$100,d1	; Two rows ahead
000070A8 0241 0FFF                  		andi.w	#$FFF,d1	; Wrap around plane
000070AC 4CDF 0030                  		movem.l	(sp)+,d4-d5
000070B0 0644 0010                  		addi.w	#16,d4		; Move X coordinate one block ahead
000070B4 51CE FFE0                  		dbf	d6,@loop
000070B8 4E75                       		rts	
000070BA                            ; End of function DrawBlocks_TB_2
000070BA                            

000070BA                            

000070BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000070BA                            

000070BA                            ; Draws a block's worth of tiles
000070BA                            ; Parameters:
000070BA                            ; a0 = Pointer to block metadata (block index and X/Y flip)
000070BA                            ; a1 = Pointer to block
000070BA                            ; a5 = Pointer to VDP command port
000070BA                            ; a6 = Pointer to VDP data port
000070BA                            ; d0 = VRAM command to access plane
000070BA                            ; d2 = VRAM plane A/B specifier
000070BA                            ; d7 = Plane row delta
000070BA                            ; DrawTiles:
000070BA                            DrawBlock:
000070BA 8042                       		or.w	d2,d0	; OR in that plane A/B specifier to the VRAM command
000070BC 4840                       		swap	d0
000070BE 0810 0004                  		btst	#4,(a0)	; Check Y-flip bit
000070C2 6600                       		bne.s	DrawFlipY
000070C4 0810 0003                  		btst	#3,(a0)	; Check X-flip bit
000070C8 6600                       		bne.s	DrawFlipX
000070CA 2A80                       		move.l	d0,(a5)
000070CC 2C99                       		move.l	(a1)+,(a6)	; Write top two tiles
000070CE D087                       		add.l	d7,d0		; Next row
000070D0 2A80                       		move.l	d0,(a5)
000070D2 2C99                       		move.l	(a1)+,(a6)	; Write bottom two tiles
000070D4 4E75                       		rts	
000070D6                            ; ===========================================================================
000070D6                            

000070D6                            DrawFlipX:
000070D6 2A80                       		move.l	d0,(a5)
000070D8 2819                       		move.l	(a1)+,d4
000070DA 0A84 0800 0800             		eori.l	#$8000800,d4	; Invert X-flip bits of each tile
000070E0 4844                       		swap	d4		; Swap the tiles around
000070E2 2C84                       		move.l	d4,(a6)		; Write top two tiles
000070E4 D087                       		add.l	d7,d0		; Next row
000070E6 2A80                       		move.l	d0,(a5)
000070E8 2819                       		move.l	(a1)+,d4
000070EA 0A84 0800 0800             		eori.l	#$8000800,d4
000070F0 4844                       		swap	d4
000070F2 2C84                       		move.l	d4,(a6)		; Write bottom two tiles
000070F4 4E75                       		rts	
000070F6                            ; ===========================================================================
000070F6                            

000070F6                            DrawFlipY:
000070F6 0810 0003                  		btst	#3,(a0)
000070FA 6600                       		bne.s	DrawFlipXY
000070FC 2A80                       		move.l	d0,(a5)
000070FE 2A19                       		move.l	(a1)+,d5
00007100 2819                       		move.l	(a1)+,d4
00007102 0A84 1000 1000             		eori.l	#$10001000,d4
00007108 2C84                       		move.l	d4,(a6)
0000710A D087                       		add.l	d7,d0
0000710C 2A80                       		move.l	d0,(a5)
0000710E 0A85 1000 1000             		eori.l	#$10001000,d5
00007114 2C85                       		move.l	d5,(a6)
00007116 4E75                       		rts	
00007118                            ; ===========================================================================
00007118                            

00007118                            DrawFlipXY:
00007118 2A80                       		move.l	d0,(a5)
0000711A 2A19                       		move.l	(a1)+,d5
0000711C 2819                       		move.l	(a1)+,d4
0000711E 0A84 1800 1800             		eori.l	#$18001800,d4
00007124 4844                       		swap	d4
00007126 2C84                       		move.l	d4,(a6)
00007128 D087                       		add.l	d7,d0
0000712A 2A80                       		move.l	d0,(a5)
0000712C 0A85 1800 1800             		eori.l	#$18001800,d5
00007132 4845                       		swap	d5
00007134 2C85                       		move.l	d5,(a6)
00007136 4E75                       		rts	
00007138                            ; End of function DrawBlocks
00007138                            

00007138                            ; ===========================================================================
00007138                            ; unused garbage
00007138                            

00007138                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007138                            

00007138                            ; Gets address of block at a certain coordinate
00007138                            ; Parameters:
00007138                            ; a4 = Pointer to level layout
00007138                            ; d4 = Relative Y coordinate
00007138                            ; d5 = Relative X coordinate
00007138                            ; Returns:
00007138                            ; a0 = Address of block metadata
00007138                            ; a1 = Address of block
00007138                            ; DrawBlocks:
00007138                            GetBlockData:
00007138 DA53                       			add.w	(a3),d5
0000713A                            	GetBlockData_2:
0000713A D86B 0004                  			add.w	4(a3),d4
0000713E 43F8 B000                  			lea	(v_16x16).w,a1
00007142                            		; Turn Y coordinate into index into level layout
00007142 3604                       		move.w	d4,d3
00007144 E24B                       		lsr.w	#1,d3
00007146 0243 0380                  		andi.w	#$380,d3
0000714A                            		; Turn X coordinate into index into level layout
0000714A E64D                       		lsr.w	#3,d5
0000714C 3005                       		move.w	d5,d0
0000714E EA48                       		lsr.w	#5,d0
00007150 0240 007F                  		andi.w	#$7F,d0
00007154                            		; Get chunk from level layout
00007154 D043                       		add.w	d3,d0
00007156 76FF                       		moveq	#-1,d3
00007158 1634 0000                  		move.b	(a4,d0.w),d3
0000715C 6700                       		beq.s	locret_6C1E	; If chunk 00, just return a pointer to the first block (expected to be empty)
0000715E                            		; Turn chunk ID into index into chunk table
0000715E 5303                       		subq.b	#1,d3
00007160 0243 007F                  		andi.w	#$7F,d3
00007164 EE5B                       		ror.w	#7,d3
00007166                            		; Turn Y coordinate into index into chunk
00007166 D844                       		add.w	d4,d4
00007168 0244 01E0                  		andi.w	#$1E0,d4
0000716C                            		; Turn X coordinate into index into chunk
0000716C 0245 001E                  		andi.w	#$1E,d5
00007170                            		; Get block metadata from chunk
00007170 D644                       		add.w	d4,d3
00007172 D645                       		add.w	d5,d3
00007174 2043                       		movea.l	d3,a0
00007176 3610                       		move.w	(a0),d3
00007178                            		; Turn block ID into address
00007178 0243 03FF                  		andi.w	#$3FF,d3
0000717C E74B                       		lsl.w	#3,d3
0000717E D2C3                       		adda.w	d3,a1
00007180                            

00007180                            locret_6C1E:
00007180 4E75                       		rts	
00007182                            ; End of function GetBlockData
00007182                            

00007182                            

00007182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007182                            

00007182                            ; Produces a VRAM plane access command from coordinates
00007182                            ; Parameters:
00007182                            ; d4 = Relative Y coordinate
00007182                            ; d5 = Relative X coordinate
00007182                            ; Returns VDP command in d0
00007182                            Calc_VRAM_Pos:
00007182 DA53                       			add.w	(a3),d5
00007184                            	Calc_VRAM_Pos_2:
00007184 D86B 0004                  			add.w	4(a3),d4
00007188                            		; Floor the coordinates to the nearest pair of tiles (the size of a block).
00007188                            		; Also note that this wraps the value to the size of the plane:
00007188                            		; The plane is 64*8 wide, so wrap at $100, and it's 32*8 tall, so wrap at $200
00007188 0244 00F0                  		andi.w	#$F0,d4
0000718C 0245 01F0                  		andi.w	#$1F0,d5
00007190                            		; Transform the adjusted coordinates into a VDP command
00007190 E94C                       		lsl.w	#4,d4
00007192 E44D                       		lsr.w	#2,d5
00007194 D845                       		add.w	d5,d4
00007196 7003                       		moveq	#3,d0	; Highest bits of plane VRAM address
00007198 4840                       		swap	d0
0000719A 3004                       		move.w	d4,d0
0000719C 4E75                       		rts	
0000719E                            ; End of function Calc_VRAM_Pos
0000719E                            

0000719E                            

0000719E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000719E                            ; not used
0000719E                            

0000719E                            ; This is just like Calc_VRAM_Pos, but seemingly for an earlier
0000719E                            ; VRAM layout: the only difference is the high bits of the
0000719E                            ; plane's VRAM address, which are 10 instead of 11.
0000719E                            ; Both the foreground and background are at $C000 and $E000
0000719E                            ; respectively, so this one starting at $8000 makes no sense.
0000719E                            ; sub_6C3C:
0000719E                            Calc_VRAM_Pos_Unknown:
0000719E D86B 0004                  		add.w	4(a3),d4
000071A2 DA53                       		add.w	(a3),d5
000071A4 0244 00F0                  		andi.w	#$F0,d4
000071A8 0245 01F0                  		andi.w	#$1F0,d5
000071AC E94C                       		lsl.w	#4,d4
000071AE E44D                       		lsr.w	#2,d5
000071B0 D845                       		add.w	d5,d4
000071B2 7002                       		moveq	#2,d0
000071B4 4840                       		swap	d0
000071B6 3004                       		move.w	d4,d0
000071B8 4E75                       		rts	
000071BA                            ; End of function Calc_VRAM_Pos_Unknown
000071BA                            

000071BA                            ; ---------------------------------------------------------------------------
000071BA                            ; Subroutine to	load tiles as soon as the level	appears
000071BA                            ; ---------------------------------------------------------------------------
000071BA                            

000071BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071BA                            

000071BA                            

000071BA                            LoadTilesFromStart:
000071BA 4BF9 00C0 0004             		lea	(vdp_control_port).l,a5
000071C0 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
000071C6 47F8 F700                  		lea	(v_screenposx).w,a3
000071CA 49F8 A400                  		lea	(v_lvllayout).w,a4
000071CE 343C 4000                  		move.w	#$4000,d2
000071D2 6100                       		bsr.s	DrawChunks
000071D4 47F8 F708                  		lea	(v_bgscreenposx).w,a3
000071D8 49F8 A440                  		lea	(v_lvllayout+$40).w,a4
000071DC 343C 6000                  		move.w	#$6000,d2
000071E0 4A38 FE10                  			tst.b	(v_zone).w
000071E4 6700 0000                  			beq.w	Draw_GHz_Bg
000071E8 0C38 0002 FE10             			cmpi.b	#id_MZ,(v_zone).w
000071EE 6700 0000                  			beq.w	Draw_Mz_Bg
000071F2 0C78 0500 FE10             			cmpi.w	#(id_SBZ<<8)+0,(v_zone).w
000071F8 6700 0000                  			beq.w	Draw_SBz_Bg
000071FC 0C38 0006 FE10             			cmpi.b	#id_EndZ,(v_zone).w
00007202 6700 0000                  			beq.w	Draw_GHz_Bg
00007206                            ; End of function LoadTilesFromStart
00007206                            

00007206                            

00007206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007206                            

00007206                            

00007206                            DrawChunks:
00007206 78F0                       		moveq	#-16,d4
00007208 7C0F                       		moveq	#((224+16+16)/16)-1,d6
0000720A                            

0000720A                            	@loop:
0000720A 48E7 0E00                  		movem.l	d4-d6,-(sp)
0000720E 7A00                       		moveq	#0,d5
00007210 3204                       		move.w	d4,d1
00007212 6100 FF6E                  		bsr.w	Calc_VRAM_Pos
00007216 3801                       		move.w	d1,d4
00007218 7A00                       		moveq	#0,d5
0000721A 7C1F                       		moveq	#(512/16)-1,d6
0000721C 6100 FE1A                  		bsr.w	DrawBlocks_LR_2
00007220 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007224 0644 0010                  		addi.w	#16,d4
00007228 51CE FFE0                  		dbf	d6,@loop
0000722C 4E75                       		rts	
0000722E                            ; End of function DrawChunks
0000722E                            

0000722E                            	Draw_GHz_Bg:
0000722E 7800                       			moveq	#0,d4
00007230 7C0F                       			moveq	#((224+16+16)/16)-1,d6
00007232                            	locj_7224:			
00007232 48E7 0E00                  			movem.l	d4-d6,-(sp)
00007236 41F9 0000 0000             			lea	(locj_724a),a0
0000723C 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
00007240 D044                       			add.w	d4,d0
00007242 0240 00F0                  			andi.w	#$F0,d0
00007246 6100 0000                  			bsr.w	locj_72Ba
0000724A 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000724E 0644 0010                  			addi.w	#16,d4
00007252 51CE FFDE                  			dbf	d6,locj_7224
00007256 4E75                       			rts
00007258                            	locj_724a:
00007258 0000 0000 0606 0604 0404+  			dc.b $00,$00,$00,$00,$06,$06,$06,$04,$04,$04,$00,$00,$00,$00,$00,$00
00007268                            ;-------------------------------------------------------------------------------
00007268                            	Draw_Mz_Bg:;locj_725a:
00007268 78F0                       			moveq	#-16,d4
0000726A 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000726C                            	locj_725E:			
0000726C 48E7 0E00                  			movem.l	d4-d6,-(sp)
00007270 41F9 0000 6F01             			lea	(locj_6EF2+1),a0
00007276 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
0000727A 0440 0200                  			subi.w	#$200,d0
0000727E D044                       			add.w	d4,d0
00007280 0240 07F0                  			andi.w	#$7F0,d0
00007284 6100 0000                  			bsr.w	locj_72Ba
00007288 4CDF 0070                  			movem.l	(sp)+,d4-d6
0000728C 0644 0010                  			addi.w	#16,d4
00007290 51CE FFDA                  			dbf	d6,locj_725E
00007294 4E75                       			rts
00007296                            ;-------------------------------------------------------------------------------
00007296                            	Draw_SBz_Bg:;locj_7288:
00007296 78F0                       			moveq	#-16,d4
00007298 7C0F                       			moveq	#((224+16+16)/16)-1,d6
0000729A                            	locj_728C:			
0000729A 48E7 0E00                  			movem.l	d4-d6,-(sp)
0000729E 41F9 0000 6E03             			lea	(locj_6DF4+1),a0
000072A4 3038 F70C                  			move.w	(v_bgscreenposy).w,d0
000072A8 D044                       			add.w	d4,d0
000072AA 0240 01F0                  			andi.w	#$1F0,d0
000072AE 6100 0000                  			bsr.w	locj_72Ba
000072B2 4CDF 0070                  			movem.l	(sp)+,d4-d6
000072B6 0644 0010                  			addi.w	#16,d4
000072BA 51CE FFDE                  			dbf	d6,locj_728C
000072BE 4E75                       			rts
000072C0                            ;-------------------------------------------------------------------------------
000072C0                            	locj_72B2:
000072C0 F708 F708 F710 F718        			dc.w v_bgscreenposx, v_bgscreenposx, v_bg2screenposx, v_bg3screenposx
000072C8                            	locj_72Ba:
000072C8 E848                       			lsr.w	#4,d0
000072CA 1030 0000                  			move.b	(a0,d0.w),d0
000072CE 367B 00F0                  			movea.w	locj_72B2(pc,d0.w),a3
000072D2 6700                       			beq.s	locj_72da
000072D4 7AF0                       			moveq	#-16,d5
000072D6 48E7 0C00                  			movem.l	d4/d5,-(sp)
000072DA 6100 FEA6                  			bsr.w	Calc_VRAM_Pos
000072DE 4CDF 0030                  			movem.l	(sp)+,d4/d5
000072E2 6100 FD52                  			bsr.w	DrawBlocks_LR
000072E6 6000                       			bra.s	locj_72EE
000072E8                            	locj_72da:
000072E8 7A00                       			moveq	#0,d5
000072EA 48E7 0C00                  			movem.l	d4/d5,-(sp)
000072EE 6100 FE94                  			bsr.w	Calc_VRAM_Pos_2
000072F2 4CDF 0030                  			movem.l	(sp)+,d4/d5
000072F6 7C1F                       			moveq	#(512/16)-1,d6
000072F8 6100 FD68                  			bsr.w	DrawBlocks_LR_3
000072FC                            	locj_72EE:
000072FC 4E75                       			rts
000072FE                            

000072FE                            ; ---------------------------------------------------------------------------
000072FE                            ; Subroutine to load basic level data
000072FE                            ; ---------------------------------------------------------------------------
000072FE                            

000072FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072FE                            

000072FE                            

000072FE                            LevelDataLoad:
000072FE 7000                       		moveq	#0,d0
00007300 1038 FE10                  		move.b	(v_zone).w,d0
00007304 E948                       		lsl.w	#4,d0
00007306 45F9 0000 0000             		lea	(LevelHeaders).l,a2
0000730C 45F2 0000                  		lea	(a2,d0.w),a2
00007310 2F0A                       		move.l	a2,-(sp)
00007312 588A                       		addq.l	#4,a2
00007314 205A                       		movea.l	(a2)+,a0
00007316 43F8 B000                  		lea	(v_16x16).w,a1	; RAM address for 16x16 mappings
0000731A 303C 0000                  		move.w	#0,d0
0000731E 6100 A404                  		bsr.w	EniDec
00007322 205A                       		movea.l	(a2)+,a0
00007324 43F9 00FF 0000             		lea	(v_256x256).l,a1 ; RAM address for 256x256 mappings
0000732A 6100 A576                  		bsr.w	KosDec
0000732E 6100 0000                  		bsr.w	LevelLayoutLoad
00007332 301A                       		move.w	(a2)+,d0
00007334 3012                       		move.w	(a2),d0
00007336 0240 00FF                  		andi.w	#$FF,d0
0000733A 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; is level SBZ3 (LZ4) ?
00007340 6600                       		bne.s	@notSBZ3	; if not, branch
00007342 700C                       		moveq	#palid_SBZ3,d0	; use SB3 palette
00007344                            

00007344                            	@notSBZ3:
00007344 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2?
0000734A 6700                       		beq.s	@isSBZorFZ	; if yes, branch
0000734C 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; is level FZ?
00007352 6600                       		bne.s	@normalpal	; if not, branch
00007354                            

00007354                            	@isSBZorFZ:
00007354 700E                       		moveq	#palid_SBZ2,d0	; use SBZ2/FZ palette
00007356                            

00007356                            	@normalpal:
00007356 6100 ADAA                  		bsr.w	PalLoad1	; load palette (based on d0)
0000735A 245F                       		movea.l	(sp)+,a2
0000735C 584A                       		addq.w	#4,a2		; read number for 2nd PLC
0000735E 7000                       		moveq	#0,d0
00007360 1012                       		move.b	(a2),d0
00007362 6700                       		beq.s	@skipPLC	; if 2nd PLC is 0 (i.e. the ending sequence), branch
00007364 6100 A220                  		bsr.w	AddPLC		; load pattern load cues
00007368                            

00007368                            	@skipPLC:
00007368 4E75                       		rts	
0000736A                            ; End of function LevelDataLoad
0000736A                            

0000736A                            ; ---------------------------------------------------------------------------
0000736A                            ; Level	layout loading subroutine
0000736A                            ; ---------------------------------------------------------------------------
0000736A                            

0000736A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000736A                            

0000736A                            

0000736A                            LevelLayoutLoad:
0000736A 47F8 A400                  		lea	(v_lvllayout).w,a3
0000736E 323C 01FF                  		move.w	#$1FF,d1
00007372 7000                       		moveq	#0,d0
00007374                            

00007374                            LevLoad_ClrRam:
00007374 26C0                       		move.l	d0,(a3)+
00007376 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($A400-A7FF)
0000737A                            

0000737A 47F8 A400                  		lea	(v_lvllayout).w,a3 ; RAM address for level layout
0000737E 7200                       		moveq	#0,d1
00007380 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007384 47F8 A440                  		lea	(v_lvllayout+$40).w,a3 ; RAM address for background layout
00007388 7202                       		moveq	#2,d1
0000738A                            ; End of function LevelLayoutLoad
0000738A                            

0000738A                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
0000738A                            

0000738A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000738A                            

0000738A                            

0000738A                            LevelLayoutLoad2:
0000738A 3038 FE10                  		move.w	(v_zone).w,d0
0000738E ED08                       		lsl.b	#6,d0
00007390 EA48                       		lsr.w	#5,d0
00007392 3400                       		move.w	d0,d2
00007394 D040                       		add.w	d0,d0
00007396 D042                       		add.w	d2,d0
00007398 D041                       		add.w	d1,d0
0000739A 43F9 0000 0000             		lea	(Level_Index).l,a1
000073A0 3031 0000                  		move.w	(a1,d0.w),d0
000073A4 43F1 0000                  		lea	(a1,d0.w),a1
000073A8 7200                       		moveq	#0,d1
000073AA 3401                       		move.w	d1,d2
000073AC 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
000073AE 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
000073B0                            

000073B0                            LevLoad_NumRows:
000073B0 3001                       		move.w	d1,d0
000073B2 204B                       		movea.l	a3,a0
000073B4                            

000073B4                            LevLoad_Row:
000073B4 10D9                       		move.b	(a1)+,(a0)+
000073B6 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000073BA 47EB 0080                  		lea	$80(a3),a3	; do next row
000073BE 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000073C2 4E75                       		rts	
000073C4                            ; End of function LevelLayoutLoad2
000073C4                            

000073C4                            		include	"_inc\DynamicLevelEvents.asm"
000073C4                            ; ---------------------------------------------------------------------------
000073C4                            ; Dynamic level events
000073C4                            ; ---------------------------------------------------------------------------
000073C4                            

000073C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073C4                            

000073C4                            

000073C4                            DynamicLevelEvents:
000073C4 7000                       		moveq	#0,d0
000073C6 1038 FE10                  		move.b	(v_zone).w,d0
000073CA D040                       		add.w	d0,d0
000073CC 303B 0000                  		move.w	DLE_Index(pc,d0.w),d0
000073D0 4EBB 0000                  		jsr	DLE_Index(pc,d0.w) ; run level-specific events
000073D4 7202                       		moveq	#2,d1
000073D6 3038 F726                  		move.w	(v_limitbtm1).w,d0
000073DA 9078 F72E                  		sub.w	(v_limitbtm2).w,d0 ; has lower level boundary changed recently?
000073DE 6700                       		beq.s	DLE_NoChg	; if not, branch
000073E0 6400                       		bcc.s	loc_6DAC
000073E2                            

000073E2 4441                       		neg.w	d1
000073E4 3038 F704                  		move.w	(v_screenposy).w,d0
000073E8 B078 F726                  		cmp.w	(v_limitbtm1).w,d0
000073EC 6300                       		bls.s	loc_6DA0
000073EE 31C0 F72E                  		move.w	d0,(v_limitbtm2).w
000073F2 0278 FFFE F72E             		andi.w	#$FFFE,(v_limitbtm2).w
000073F8                            

000073F8                            loc_6DA0:
000073F8 D378 F72E                  		add.w	d1,(v_limitbtm2).w
000073FC 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00007402                            

00007402                            DLE_NoChg:
00007402 4E75                       		rts	
00007404                            ; ===========================================================================
00007404                            

00007404                            loc_6DAC:
00007404 3038 F704                  		move.w	(v_screenposy).w,d0
00007408 5040                       		addq.w	#8,d0
0000740A B078 F72E                  		cmp.w	(v_limitbtm2).w,d0
0000740E 6500                       		bcs.s	loc_6DC4
00007410 0838 0001 D022             		btst	#1,(v_player+obStatus).w
00007416 6700                       		beq.s	loc_6DC4
00007418 D241                       		add.w	d1,d1
0000741A D241                       		add.w	d1,d1
0000741C                            

0000741C                            loc_6DC4:
0000741C D378 F72E                  		add.w	d1,(v_limitbtm2).w
00007420 11FC 0001 F75C             		move.b	#1,(f_bgscrollvert).w
00007426 4E75                       		rts	
00007428                            ; End of function DynamicLevelEvents
00007428                            

00007428                            ; ===========================================================================
00007428                            ; ---------------------------------------------------------------------------
00007428                            ; Offset index for dynamic level events
00007428                            ; ---------------------------------------------------------------------------
00007428 0000 0000                  DLE_Index:	dc.w DLE_GHZ-DLE_Index, DLE_LZ-DLE_Index
0000742C 0000 0000                  		dc.w DLE_MZ-DLE_Index, DLE_SLZ-DLE_Index
00007430 0000 0000                  		dc.w DLE_SYZ-DLE_Index, DLE_SBZ-DLE_Index
00007434 0000                       		dc.w DLE_Ending-DLE_Index
00007436                            ; ===========================================================================
00007436                            ; ---------------------------------------------------------------------------
00007436                            ; Green	Hill Zone dynamic level events
00007436                            ; ---------------------------------------------------------------------------
00007436                            

00007436                            DLE_GHZ:
00007436 7000                       		moveq	#0,d0
00007438 1038 FE11                  		move.b	(v_act).w,d0
0000743C D040                       		add.w	d0,d0
0000743E 303B 0000                  		move.w	DLE_GHZx(pc,d0.w),d0
00007442 4EFB 0000                  		jmp	DLE_GHZx(pc,d0.w)
00007446                            ; ===========================================================================
00007446 0000                       DLE_GHZx:	dc.w DLE_GHZ1-DLE_GHZx
00007448 0000                       		dc.w DLE_GHZ2-DLE_GHZx
0000744A 0000                       		dc.w DLE_GHZ3-DLE_GHZx
0000744C                            ; ===========================================================================
0000744C                            

0000744C                            DLE_GHZ1:
0000744C 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w ; set lower y-boundary
00007452 0C78 1780 F700             		cmpi.w	#$1780,(v_screenposx).w ; has the camera reached $1780 on x-axis?
00007458 6500                       		bcs.s	locret_6E08	; if not, branch
0000745A 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w ; set lower y-boundary
00007460                            

00007460                            locret_6E08:
00007460 4E75                       		rts	
00007462                            ; ===========================================================================
00007462                            

00007462                            DLE_GHZ2:
00007462 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00007468 0C78 0ED0 F700             		cmpi.w	#$ED0,(v_screenposx).w
0000746E 6500                       		bcs.s	locret_6E3A
00007470 31FC 0200 F726             		move.w	#$200,(v_limitbtm1).w
00007476 0C78 1600 F700             		cmpi.w	#$1600,(v_screenposx).w
0000747C 6500                       		bcs.s	locret_6E3A
0000747E 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
00007484 0C78 1D60 F700             		cmpi.w	#$1D60,(v_screenposx).w
0000748A 6500                       		bcs.s	locret_6E3A
0000748C 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
00007492                            

00007492                            locret_6E3A:
00007492 4E75                       		rts	
00007494                            ; ===========================================================================
00007494                            

00007494                            DLE_GHZ3:
00007494 7000                       		moveq	#0,d0
00007496 1038 F742                  		move.b	(v_dle_routine).w,d0
0000749A 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000749E 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
000074A2                            ; ===========================================================================
000074A2 0000                       off_6E4A:	dc.w DLE_GHZ3main-off_6E4A
000074A4 0000                       		dc.w DLE_GHZ3boss-off_6E4A
000074A6 0000                       		dc.w DLE_GHZ3end-off_6E4A
000074A8                            ; ===========================================================================
000074A8                            

000074A8                            DLE_GHZ3main:
000074A8 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000074AE 0C78 0380 F700             		cmpi.w	#$380,(v_screenposx).w
000074B4 6500                       		bcs.s	locret_6E96
000074B6 31FC 0310 F726             		move.w	#$310,(v_limitbtm1).w
000074BC 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
000074C2 6500                       		bcs.s	locret_6E96
000074C4 0C78 0280 F704             		cmpi.w	#$280,(v_screenposy).w
000074CA 6500                       		bcs.s	loc_6E98
000074CC 31FC 0400 F726             		move.w	#$400,(v_limitbtm1).w
000074D2 0C78 1380 F700             		cmpi.w	#$1380,(v_screenposx).w
000074D8 6400                       		bcc.s	loc_6E8E
000074DA 31FC 04C0 F726             		move.w	#$4C0,(v_limitbtm1).w
000074E0 31FC 04C0 F72E             		move.w	#$4C0,(v_limitbtm2).w
000074E6                            

000074E6                            loc_6E8E:
000074E6 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
000074EC 6400                       		bcc.s	loc_6E98
000074EE                            

000074EE                            locret_6E96:
000074EE 4E75                       		rts	
000074F0                            ; ===========================================================================
000074F0                            

000074F0                            loc_6E98:
000074F0 31FC 0300 F726             		move.w	#$300,(v_limitbtm1).w
000074F6 5438 F742                  		addq.b	#2,(v_dle_routine).w
000074FA 4E75                       		rts	
000074FC                            ; ===========================================================================
000074FC                            

000074FC                            DLE_GHZ3boss:
000074FC 0C78 0960 F700             		cmpi.w	#$960,(v_screenposx).w
00007502 6400                       		bcc.s	loc_6EB0
00007504 5538 F742                  		subq.b	#2,(v_dle_routine).w
00007508                            

00007508                            loc_6EB0:
00007508 0C78 2960 F700             		cmpi.w	#$2960,(v_screenposx).w
0000750E 6500                       		bcs.s	locret_6EE8
00007510 6100 0000                  		bsr.w	FindFreeObj
00007514 6600                       		bne.s	loc_6ED0
00007516 137C 0000 0000             		move.b	#id_BossGreenHill,0(a1) ; load GHZ boss	object
0000751C 337C 2A60 0008             		move.w	#$2A60,obX(a1)
00007522 337C 0280 000C             		move.w	#$280,obY(a1)
00007528                            

00007528                            loc_6ED0:
00007528 303C 0000                  		move.w	#bgm_Boss,d0
0000752C 6100 9E6E                  		bsr.w	PlaySound	; play boss music
00007530 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00007536 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000753A 7000                       		moveq	#plcid_Boss,d0
0000753C 6000 A048                  		bra.w	AddPLC		; load boss patterns
00007540                            ; ===========================================================================
00007540                            

00007540                            locret_6EE8:
00007540 4E75                       		rts	
00007542                            ; ===========================================================================
00007542                            

00007542                            DLE_GHZ3end:
00007542 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00007548 4E75                       		rts	
0000754A                            ; ===========================================================================
0000754A                            ; ---------------------------------------------------------------------------
0000754A                            ; Labyrinth Zone dynamic level events
0000754A                            ; ---------------------------------------------------------------------------
0000754A                            

0000754A                            DLE_LZ:
0000754A 7000                       		moveq	#0,d0
0000754C 1038 FE11                  		move.b	(v_act).w,d0
00007550 D040                       		add.w	d0,d0
00007552 303B 0000                  		move.w	DLE_LZx(pc,d0.w),d0
00007556 4EFB 0000                  		jmp	DLE_LZx(pc,d0.w)
0000755A                            ; ===========================================================================
0000755A 0000                       DLE_LZx:	dc.w DLE_LZ12-DLE_LZx
0000755C 0000                       		dc.w DLE_LZ12-DLE_LZx
0000755E 0000                       		dc.w DLE_LZ3-DLE_LZx
00007560 0000                       		dc.w DLE_SBZ3-DLE_LZx
00007562                            ; ===========================================================================
00007562                            

00007562                            DLE_LZ12:
00007562 4E75                       		rts	
00007564                            ; ===========================================================================
00007564                            

00007564                            DLE_LZ3:
00007564 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch $F	been pressed?
00007568 6700                       		beq.s	loc_6F28	; if not, branch
0000756A 43F8 A506                  		lea	(v_lvllayout+$106).w,a1
0000756E 0C11 0007                  		cmpi.b	#7,(a1)
00007572 6700                       		beq.s	loc_6F28
00007574 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00007578 303C 0000                  		move.w	#sfx_Rumbling,d0
0000757C 6100 9E24                  		bsr.w	PlaySound_Special ; play rumbling sound
00007580                            

00007580                            loc_6F28:
00007580 4A38 F742                  		tst.b	(v_dle_routine).w
00007584 6600                       		bne.s	locret_6F64
00007586 0C78 1CA0 F700             		cmpi.w	#$1CA0,(v_screenposx).w
0000758C 6500                       		bcs.s	locret_6F62
0000758E 0C78 0600 F704             		cmpi.w	#$600,(v_screenposy).w
00007594 6400                       		bcc.s	locret_6F62
00007596 6100 0000                  		bsr.w	FindFreeObj
0000759A 6600                       		bne.s	loc_6F4A
0000759C 137C 0000 0000             		move.b	#id_BossLabyrinth,0(a1) ; load LZ boss object
000075A2                            

000075A2                            loc_6F4A:
000075A2 303C 0000                  		move.w	#bgm_Boss,d0
000075A6 6100 9DF4                  		bsr.w	PlaySound	; play boss music
000075AA 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000075B0 5438 F742                  		addq.b	#2,(v_dle_routine).w
000075B4 7000                       		moveq	#plcid_Boss,d0
000075B6 6000 9FCE                  		bra.w	AddPLC		; load boss patterns
000075BA                            ; ===========================================================================
000075BA                            

000075BA                            locret_6F62:
000075BA 4E75                       		rts	
000075BC                            ; ===========================================================================
000075BC                            

000075BC                            locret_6F64:
000075BC 4E75                       		rts	
000075BE                            ; ===========================================================================
000075BE                            

000075BE                            DLE_SBZ3:
000075BE 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
000075C4 6500                       		bcs.s	locret_6F8C
000075C6 0C78 0018 D00C             		cmpi.w	#$18,(v_player+obY).w ; has Sonic reached the top of the level?
000075CC 6400                       		bcc.s	locret_6F8C	; if not, branch
000075CE 4238 FE30                  		clr.b	(v_lastlamp).w
000075D2 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
000075D8 31FC 0502 FE10             		move.w	#(id_SBZ<<8)+2,(v_zone).w ; set level number to 0502 (FZ)
000075DE 11FC 0001 F7C8             		move.b	#1,(f_playerctrl).w ; lock controls
000075E4                            

000075E4                            locret_6F8C:
000075E4 4E75                       		rts	
000075E6                            ; ===========================================================================
000075E6                            ; ---------------------------------------------------------------------------
000075E6                            ; Marble Zone dynamic level events
000075E6                            ; ---------------------------------------------------------------------------
000075E6                            

000075E6                            DLE_MZ:
000075E6 7000                       		moveq	#0,d0
000075E8 1038 FE11                  		move.b	(v_act).w,d0
000075EC D040                       		add.w	d0,d0
000075EE 303B 0000                  		move.w	DLE_MZx(pc,d0.w),d0
000075F2 4EFB 0000                  		jmp	DLE_MZx(pc,d0.w)
000075F6                            ; ===========================================================================
000075F6 0000                       DLE_MZx:	dc.w DLE_MZ1-DLE_MZx
000075F8 0000                       		dc.w DLE_MZ2-DLE_MZx
000075FA 0000                       		dc.w DLE_MZ3-DLE_MZx
000075FC                            ; ===========================================================================
000075FC                            

000075FC                            DLE_MZ1:
000075FC 7000                       		moveq	#0,d0
000075FE 1038 F742                  		move.b	(v_dle_routine).w,d0
00007602 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007606 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
0000760A                            ; ===========================================================================
0000760A 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
0000760C 0000                       		dc.w loc_6FEA-off_6FB2
0000760E 0000                       		dc.w loc_702E-off_6FB2
00007610 0000                       		dc.w loc_7050-off_6FB2
00007612                            ; ===========================================================================
00007612                            

00007612                            loc_6FBA:
00007612 31FC 01D0 F726             		move.w	#$1D0,(v_limitbtm1).w
00007618 0C78 0700 F700             		cmpi.w	#$700,(v_screenposx).w
0000761E 6500                       		bcs.s	locret_6FE8
00007620 31FC 0220 F726             		move.w	#$220,(v_limitbtm1).w
00007626 0C78 0D00 F700             		cmpi.w	#$D00,(v_screenposx).w
0000762C 6500                       		bcs.s	locret_6FE8
0000762E 31FC 0340 F726             		move.w	#$340,(v_limitbtm1).w
00007634 0C78 0340 F704             		cmpi.w	#$340,(v_screenposy).w
0000763A 6500                       		bcs.s	locret_6FE8
0000763C 5438 F742                  		addq.b	#2,(v_dle_routine).w
00007640                            

00007640                            locret_6FE8:
00007640 4E75                       		rts	
00007642                            ; ===========================================================================
00007642                            

00007642                            loc_6FEA:
00007642 0C78 0340 F704             		cmpi.w	#$340,(v_screenposy).w
00007648 6400                       		bcc.s	loc_6FF8
0000764A 5538 F742                  		subq.b	#2,(v_dle_routine).w
0000764E 4E75                       		rts	
00007650                            ; ===========================================================================
00007650                            

00007650                            loc_6FF8:
00007650 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
00007656 0C78 0E00 F700             		cmpi.w	#$E00,(v_screenposx).w
0000765C 6400                       		bcc.s	locret_702C
0000765E 31FC 0340 F72C             		move.w	#$340,(v_limittop2).w
00007664 31FC 0340 F726             		move.w	#$340,(v_limitbtm1).w
0000766A 0C78 0A90 F700             		cmpi.w	#$A90,(v_screenposx).w
00007670 6400                       		bcc.s	locret_702C
00007672 31FC 0500 F726             		move.w	#$500,(v_limitbtm1).w
00007678 0C78 0370 F704             		cmpi.w	#$370,(v_screenposy).w
0000767E 6500                       		bcs.s	locret_702C
00007680 5438 F742                  		addq.b	#2,(v_dle_routine).w
00007684                            

00007684                            locret_702C:
00007684 4E75                       		rts	
00007686                            ; ===========================================================================
00007686                            

00007686                            loc_702E:
00007686 0C78 0370 F704             		cmpi.w	#$370,(v_screenposy).w
0000768C 6400                       		bcc.s	loc_703C
0000768E 5538 F742                  		subq.b	#2,(v_dle_routine).w
00007692 4E75                       		rts	
00007694                            ; ===========================================================================
00007694                            

00007694                            loc_703C:
00007694 0C78 0500 F704             		cmpi.w	#$500,(v_screenposy).w
0000769A 6500                       		bcs.s	locret_704E
0000769C 0C78 0B80 F700             			cmpi.w	#$B80,(v_screenposx).w
000076A2 6500                       			bcs.s	locret_704E
000076A4 31FC 0500 F72C             		move.w	#$500,(v_limittop2).w
000076AA 5438 F742                  		addq.b	#2,(v_dle_routine).w
000076AE                            

000076AE                            locret_704E:
000076AE 4E75                       		rts	
000076B0                            ; ===========================================================================
000076B0                            

000076B0                            loc_7050:
000076B0 0C78 0B80 F700             			cmpi.w	#$B80,(v_screenposx).w
000076B6 6400                       			bcc.s	locj_76B8
000076B8 0C78 0340 F72C             			cmpi.w	#$340,(v_limittop2).w
000076BE 6700                       			beq.s	locret_7072
000076C0 5578 F72C                  			subq.w	#2,(v_limittop2).w
000076C4 4E75                       			rts
000076C6                            	locj_76B8:
000076C6 0C78 0500 F72C             			cmpi.w	#$500,(v_limittop2).w
000076CC 6700                       			beq.s	locj_76CE
000076CE 0C78 0500 F704             			cmpi.w	#$500,(v_screenposy).w
000076D4 6500                       			bcs.s	locret_7072
000076D6 31FC 0500 F72C             			move.w	#$500,(v_limittop2).w
000076DC                            	locj_76CE:
000076DC                            

000076DC 0C78 0E70 F700             		cmpi.w	#$E70,(v_screenposx).w
000076E2 6500                       		bcs.s	locret_7072
000076E4 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
000076EA 31FC 0500 F726             		move.w	#$500,(v_limitbtm1).w
000076F0 0C78 1430 F700             		cmpi.w	#$1430,(v_screenposx).w
000076F6 6500                       		bcs.s	locret_7072
000076F8 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000076FE                            

000076FE                            locret_7072:
000076FE 4E75                       		rts	
00007700                            ; ===========================================================================
00007700                            

00007700                            DLE_MZ2:
00007700 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00007706 0C78 1700 F700             		cmpi.w	#$1700,(v_screenposx).w
0000770C 6500                       		bcs.s	locret_7088
0000770E 31FC 0200 F726             		move.w	#$200,(v_limitbtm1).w
00007714                            

00007714                            locret_7088:
00007714 4E75                       		rts	
00007716                            ; ===========================================================================
00007716                            

00007716                            DLE_MZ3:
00007716 7000                       		moveq	#0,d0
00007718 1038 F742                  		move.b	(v_dle_routine).w,d0
0000771C 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007720 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007724                            ; ===========================================================================
00007724 0000                       off_7098:	dc.w DLE_MZ3boss-off_7098
00007726 0000                       		dc.w DLE_MZ3end-off_7098
00007728                            ; ===========================================================================
00007728                            

00007728                            DLE_MZ3boss:
00007728 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
0000772E 0C78 1560 F700             		cmpi.w	#$1560,(v_screenposx).w
00007734 6500                       		bcs.s	locret_70E8
00007736 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
0000773C 0C78 17F0 F700             		cmpi.w	#$17F0,(v_screenposx).w
00007742 6500                       		bcs.s	locret_70E8
00007744 6100 0000                  		bsr.w	FindFreeObj
00007748 6600                       		bne.s	loc_70D0
0000774A 137C 0000 0000             		move.b	#id_BossMarble,0(a1) ; load MZ boss object
00007750 337C 19F0 0008             		move.w	#$19F0,obX(a1)
00007756 337C 022C 000C             		move.w	#$22C,obY(a1)
0000775C                            

0000775C                            loc_70D0:
0000775C 303C 0000                  		move.w	#bgm_Boss,d0
00007760 6100 9C3A                  		bsr.w	PlaySound	; play boss music
00007764 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000776A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000776E 7000                       		moveq	#plcid_Boss,d0
00007770 6000 9E14                  		bra.w	AddPLC		; load boss patterns
00007774                            ; ===========================================================================
00007774                            

00007774                            locret_70E8:
00007774 4E75                       		rts	
00007776                            ; ===========================================================================
00007776                            

00007776                            DLE_MZ3end:
00007776 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
0000777C 4E75                       		rts	
0000777E                            ; ===========================================================================
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            ; Star Light Zone dynamic level events
0000777E                            ; ---------------------------------------------------------------------------
0000777E                            

0000777E                            DLE_SLZ:
0000777E 7000                       		moveq	#0,d0
00007780 1038 FE11                  		move.b	(v_act).w,d0
00007784 D040                       		add.w	d0,d0
00007786 303B 0000                  		move.w	DLE_SLZx(pc,d0.w),d0
0000778A 4EFB 0000                  		jmp	DLE_SLZx(pc,d0.w)
0000778E                            ; ===========================================================================
0000778E 0000                       DLE_SLZx:	dc.w DLE_SLZ12-DLE_SLZx
00007790 0000                       		dc.w DLE_SLZ12-DLE_SLZx
00007792 0000                       		dc.w DLE_SLZ3-DLE_SLZx
00007794                            ; ===========================================================================
00007794                            

00007794                            DLE_SLZ12:
00007794 4E75                       		rts	
00007796                            ; ===========================================================================
00007796                            

00007796                            DLE_SLZ3:
00007796 7000                       		moveq	#0,d0
00007798 1038 F742                  		move.b	(v_dle_routine).w,d0
0000779C 303B 0000                  		move.w	off_7118(pc,d0.w),d0
000077A0 4EFB 0000                  		jmp	off_7118(pc,d0.w)
000077A4                            ; ===========================================================================
000077A4 0000                       off_7118:	dc.w DLE_SLZ3main-off_7118
000077A6 0000                       		dc.w DLE_SLZ3boss-off_7118
000077A8 0000                       		dc.w DLE_SLZ3end-off_7118
000077AA                            ; ===========================================================================
000077AA                            

000077AA                            DLE_SLZ3main:
000077AA 0C78 1E70 F700             		cmpi.w	#$1E70,(v_screenposx).w
000077B0 6500                       		bcs.s	locret_7130
000077B2 31FC 0210 F726             		move.w	#$210,(v_limitbtm1).w
000077B8 5438 F742                  		addq.b	#2,(v_dle_routine).w
000077BC                            

000077BC                            locret_7130:
000077BC 4E75                       		rts	
000077BE                            ; ===========================================================================
000077BE                            

000077BE                            DLE_SLZ3boss:
000077BE 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
000077C4 6500                       		bcs.s	locret_715C
000077C6 6100 0000                  		bsr.w	FindFreeObj
000077CA 6600                       		bne.s	loc_7144
000077CC 12BC 0000                  		move.b	#id_BossStarLight,(a1) ; load SLZ boss object
000077D0                            

000077D0                            loc_7144:
000077D0 303C 0000                  		move.w	#bgm_Boss,d0
000077D4 6100 9BC6                  		bsr.w	PlaySound	; play boss music
000077D8 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
000077DE 5438 F742                  		addq.b	#2,(v_dle_routine).w
000077E2 7000                       		moveq	#plcid_Boss,d0
000077E4 6000 9DA0                  		bra.w	AddPLC		; load boss patterns
000077E8                            ; ===========================================================================
000077E8                            

000077E8                            locret_715C:
000077E8 4E75                       		rts	
000077EA                            ; ===========================================================================
000077EA                            

000077EA                            DLE_SLZ3end:
000077EA 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
000077F0 4E75                       		rts
000077F2 4E75                       		rts
000077F4                            ; ===========================================================================
000077F4                            ; ---------------------------------------------------------------------------
000077F4                            ; Spring Yard Zone dynamic level events
000077F4                            ; ---------------------------------------------------------------------------
000077F4                            

000077F4                            DLE_SYZ:
000077F4 7000                       		moveq	#0,d0
000077F6 1038 FE11                  		move.b	(v_act).w,d0
000077FA D040                       		add.w	d0,d0
000077FC 303B 0000                  		move.w	DLE_SYZx(pc,d0.w),d0
00007800 4EFB 0000                  		jmp	DLE_SYZx(pc,d0.w)
00007804                            ; ===========================================================================
00007804 0000                       DLE_SYZx:	dc.w DLE_SYZ1-DLE_SYZx
00007806 0000                       		dc.w DLE_SYZ2-DLE_SYZx
00007808 0000                       		dc.w DLE_SYZ3-DLE_SYZx
0000780A                            ; ===========================================================================
0000780A                            

0000780A                            DLE_SYZ1:
0000780A 4E75                       		rts	
0000780C                            ; ===========================================================================
0000780C                            

0000780C                            DLE_SYZ2:
0000780C 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
00007812 0C78 25A0 F700             		cmpi.w	#$25A0,(v_screenposx).w
00007818 6500                       		bcs.s	locret_71A2
0000781A 31FC 0420 F726             		move.w	#$420,(v_limitbtm1).w
00007820 0C78 04D0 D00C             		cmpi.w	#$4D0,(v_player+obY).w
00007826 6500                       		bcs.s	locret_71A2
00007828 31FC 0520 F726             		move.w	#$520,(v_limitbtm1).w
0000782E                            

0000782E                            locret_71A2:
0000782E 4E75                       		rts	
00007830                            ; ===========================================================================
00007830                            

00007830                            DLE_SYZ3:
00007830 7000                       		moveq	#0,d0
00007832 1038 F742                  		move.b	(v_dle_routine).w,d0
00007836 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000783A 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
0000783E                            ; ===========================================================================
0000783E 0000                       off_71B2:	dc.w DLE_SYZ3main-off_71B2
00007840 0000                       		dc.w DLE_SYZ3boss-off_71B2
00007842 0000                       		dc.w DLE_SYZ3end-off_71B2
00007844                            ; ===========================================================================
00007844                            

00007844                            DLE_SYZ3main:
00007844 0C78 2AC0 F700             		cmpi.w	#$2AC0,(v_screenposx).w
0000784A 6500                       		bcs.s	locret_71CE
0000784C 6100 0000                  		bsr.w	FindFreeObj
00007850 6600                       		bne.s	locret_71CE
00007852 12BC 0000                  		move.b	#id_BossBlock,(a1) ; load blocks that boss picks up
00007856 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000785A                            

0000785A                            locret_71CE:
0000785A 4E75                       		rts	
0000785C                            ; ===========================================================================
0000785C                            

0000785C                            DLE_SYZ3boss:
0000785C 0C78 2C00 F700             		cmpi.w	#$2C00,(v_screenposx).w
00007862 6500                       		bcs.s	locret_7200
00007864 31FC 04CC F726             		move.w	#$4CC,(v_limitbtm1).w
0000786A 6100 0000                  		bsr.w	FindFreeObj
0000786E 6600                       		bne.s	loc_71EC
00007870 12BC 0000                  		move.b	#id_BossSpringYard,(a1) ; load SYZ boss	object
00007874 5438 F742                  		addq.b	#2,(v_dle_routine).w
00007878                            

00007878                            loc_71EC:
00007878 303C 0000                  		move.w	#bgm_Boss,d0
0000787C 6100 9B1E                  		bsr.w	PlaySound	; play boss music
00007880 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00007886 7000                       		moveq	#plcid_Boss,d0
00007888 6000 9CFC                  		bra.w	AddPLC		; load boss patterns
0000788C                            ; ===========================================================================
0000788C                            

0000788C                            locret_7200:
0000788C 4E75                       		rts	
0000788E                            ; ===========================================================================
0000788E                            

0000788E                            DLE_SYZ3end:
0000788E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00007894 4E75                       		rts	
00007896                            ; ===========================================================================
00007896                            ; ---------------------------------------------------------------------------
00007896                            ; Scrap	Brain Zone dynamic level events
00007896                            ; ---------------------------------------------------------------------------
00007896                            

00007896                            DLE_SBZ:
00007896 7000                       		moveq	#0,d0
00007898 1038 FE11                  		move.b	(v_act).w,d0
0000789C D040                       		add.w	d0,d0
0000789E 303B 0000                  		move.w	DLE_SBZx(pc,d0.w),d0
000078A2 4EFB 0000                  		jmp	DLE_SBZx(pc,d0.w)
000078A6                            ; ===========================================================================
000078A6 0000                       DLE_SBZx:	dc.w DLE_SBZ1-DLE_SBZx
000078A8 0000                       		dc.w DLE_SBZ2-DLE_SBZx
000078AA 0000                       		dc.w DLE_FZ-DLE_SBZx
000078AC                            ; ===========================================================================
000078AC                            

000078AC                            DLE_SBZ1:
000078AC 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
000078B2 0C78 1880 F700             		cmpi.w	#$1880,(v_screenposx).w
000078B8 6500                       		bcs.s	locret_7242
000078BA 31FC 0620 F726             		move.w	#$620,(v_limitbtm1).w
000078C0 0C78 2000 F700             		cmpi.w	#$2000,(v_screenposx).w
000078C6 6500                       		bcs.s	locret_7242
000078C8 31FC 02A0 F726             		move.w	#$2A0,(v_limitbtm1).w
000078CE                            

000078CE                            locret_7242:
000078CE 4E75                       		rts	
000078D0                            ; ===========================================================================
000078D0                            

000078D0                            DLE_SBZ2:
000078D0 7000                       		moveq	#0,d0
000078D2 1038 F742                  		move.b	(v_dle_routine).w,d0
000078D6 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000078DA 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000078DE                            ; ===========================================================================
000078DE 0000                       off_7252:	dc.w DLE_SBZ2main-off_7252
000078E0 0000                       		dc.w DLE_SBZ2boss-off_7252
000078E2 0000                       		dc.w DLE_SBZ2boss2-off_7252
000078E4 0000                       		dc.w DLE_SBZ2end-off_7252
000078E6                            ; ===========================================================================
000078E6                            

000078E6                            DLE_SBZ2main:
000078E6 31FC 0800 F726             		move.w	#$800,(v_limitbtm1).w
000078EC 0C78 1800 F700             		cmpi.w	#$1800,(v_screenposx).w
000078F2 6500                       		bcs.s	locret_727A
000078F4 31FC 0510 F726             		move.w	#$510,(v_limitbtm1).w
000078FA 0C78 1E00 F700             		cmpi.w	#$1E00,(v_screenposx).w
00007900 6500                       		bcs.s	locret_727A
00007902 5438 F742                  		addq.b	#2,(v_dle_routine).w
00007906                            

00007906                            locret_727A:
00007906 4E75                       		rts	
00007908                            ; ===========================================================================
00007908                            

00007908                            DLE_SBZ2boss:
00007908 0C78 1EB0 F700             		cmpi.w	#$1EB0,(v_screenposx).w
0000790E 6500                       		bcs.s	locret_7298
00007910 6100 0000                  		bsr.w	FindFreeObj
00007914 6600                       		bne.s	locret_7298
00007916 12BC 0000                  		move.b	#id_FalseFloor,(a1) ; load collapsing block object
0000791A 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000791E 7000                       		moveq	#plcid_EggmanSBZ2,d0
00007920 6000 9C64                  		bra.w	AddPLC		; load SBZ2 Eggman patterns
00007924                            ; ===========================================================================
00007924                            

00007924                            locret_7298:
00007924 4E75                       		rts	
00007926                            ; ===========================================================================
00007926                            

00007926                            DLE_SBZ2boss2:
00007926 0C78 1F60 F700             		cmpi.w	#$1F60,(v_screenposx).w
0000792C 6500                       		bcs.s	loc_72B6
0000792E 6100 0000                  		bsr.w	FindFreeObj
00007932 6600                       		bne.s	loc_72B0
00007934 12BC 0000                  		move.b	#id_ScrapEggman,(a1) ; load SBZ2 Eggman object
00007938 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000793C                            

0000793C                            loc_72B0:
0000793C 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
00007942                            

00007942                            loc_72B6:
00007942 6000                       		bra.s	loc_72C2
00007944                            ; ===========================================================================
00007944                            

00007944                            DLE_SBZ2end:
00007944 0C78 2050 F700             		cmpi.w	#$2050,(v_screenposx).w
0000794A 6500                       		bcs.s	loc_72C2
0000794C 4E75                       		rts	
0000794E                            ; ===========================================================================
0000794E                            

0000794E                            loc_72C2:
0000794E 31F8 F700 F728             		move.w	(v_screenposx).w,(v_limitleft2).w
00007954 4E75                       		rts	
00007956                            ; ===========================================================================
00007956                            

00007956                            DLE_FZ:
00007956 7000                       		moveq	#0,d0
00007958 1038 F742                  		move.b	(v_dle_routine).w,d0
0000795C 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007960 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
00007964                            ; ===========================================================================
00007964 0000 0000                  off_72D8:	dc.w DLE_FZmain-off_72D8, DLE_FZboss-off_72D8
00007968 0000 0000                  		dc.w DLE_FZend-off_72D8, locret_7322-off_72D8
0000796C 0000                       		dc.w DLE_FZend2-off_72D8
0000796E                            ; ===========================================================================
0000796E                            

0000796E                            DLE_FZmain:
0000796E 0C78 2148 F700             		cmpi.w	#$2148,(v_screenposx).w
00007974 6500                       		bcs.s	loc_72F4
00007976 5438 F742                  		addq.b	#2,(v_dle_routine).w
0000797A 7000                       		moveq	#plcid_FZBoss,d0
0000797C 6100 9C08                  		bsr.w	AddPLC		; load FZ boss patterns
00007980                            

00007980                            loc_72F4:
00007980 60CC                       		bra.s	loc_72C2
00007982                            ; ===========================================================================
00007982                            

00007982                            DLE_FZboss:
00007982 0C78 2300 F700             		cmpi.w	#$2300,(v_screenposx).w
00007988 6500                       		bcs.s	loc_7312
0000798A 6100 0000                  		bsr.w	FindFreeObj
0000798E 6600                       		bne.s	loc_7312
00007990 12BC 0000                  		move.b	#id_BossFinal,(a1) ; load FZ boss object
00007994 5438 F742                  		addq.b	#2,(v_dle_routine).w
00007998 11FC 0001 F7AA             		move.b	#1,(f_lockscreen).w ; lock screen
0000799E                            

0000799E                            loc_7312:
0000799E 60AE                       		bra.s	loc_72C2
000079A0                            ; ===========================================================================
000079A0                            

000079A0                            DLE_FZend:
000079A0 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
000079A6 6500                       		bcs.s	loc_7320
000079A8 5438 F742                  		addq.b	#2,(v_dle_routine).w
000079AC                            

000079AC                            loc_7320:
000079AC 60A0                       		bra.s	loc_72C2
000079AE                            ; ===========================================================================
000079AE                            

000079AE                            locret_7322:
000079AE 4E75                       		rts	
000079B0                            ; ===========================================================================
000079B0                            

000079B0                            DLE_FZend2:
000079B0 609C                       		bra.s	loc_72C2
000079B2                            ; ===========================================================================
000079B2                            ; ---------------------------------------------------------------------------
000079B2                            ; Ending sequence dynamic level events (empty)
000079B2                            ; ---------------------------------------------------------------------------
000079B2                            

000079B2                            DLE_Ending:
000079B2 4E75                       		rts	
000079B2 4E75                       		rts	
000079B4                            

000079B4                            		include	"_incObj\11 Bridge (part 1).asm"
000079B4                            ; ---------------------------------------------------------------------------
000079B4                            ; Object 11 - GHZ bridge
000079B4                            ; ---------------------------------------------------------------------------
000079B4                            

000079B4                            Bridge:
000079B4 7000                       		moveq	#0,d0
000079B6 1028 0024                  		move.b	obRoutine(a0),d0
000079BA 323B 0000                  		move.w	Bri_Index(pc,d0.w),d1
000079BE 4EFB 1000                  		jmp	Bri_Index(pc,d1.w)
000079C2                            ; ===========================================================================
000079C2 0000 0000                  Bri_Index:	dc.w Bri_Main-Bri_Index, Bri_Action-Bri_Index
000079C6 0000 0000                  		dc.w Bri_Platform-Bri_Index, Bri_Delete-Bri_Index
000079CA 0000 0000                  		dc.w Bri_Delete-Bri_Index, Bri_Display-Bri_Index
000079CE                            ; ===========================================================================
000079CE                            

000079CE                            Bri_Main:	; Routine 0
000079CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000079D2 217C 0000 0000 0004        		move.l	#Map_Bri,obMap(a0)
000079DA 317C 438E 0002             		move.w	#$438E,obGfx(a0)
000079E0 117C 0004 0001             		move.b	#4,obRender(a0)
000079E6 117C 0003 0018             		move.b	#3,obPriority(a0)
000079EC 117C 0080 0019             		move.b	#$80,obActWid(a0)
000079F2 3428 000C                  		move.w	obY(a0),d2
000079F6 3628 0008                  		move.w	obX(a0),d3
000079FA 1828 0000                  		move.b	0(a0),d4	; copy object number ($11) to d4
000079FE 45E8 0028                  		lea	obSubtype(a0),a2
00007A02 7200                       		moveq	#0,d1
00007A04 1212                       		move.b	(a2),d1		; copy bridge length to d1
00007A06 14FC 0000                  		move.b	#0,(a2)+	; clear bridge length
00007A0A 3001                       		move.w	d1,d0
00007A0C E248                       		lsr.w	#1,d0
00007A0E E948                       		lsl.w	#4,d0
00007A10 9640                       		sub.w	d0,d3		; d3 is position of leftmost log
00007A12 5501                       		subq.b	#2,d1
00007A14 6500                       		bcs.s	Bri_Action	; don't make more if bridge has only 1 log
00007A16                            

00007A16                            @buildloop:
00007A16 6100 0000                  		bsr.w	FindFreeObj
00007A1A 6600                       		bne.s	Bri_Action
00007A1C 5228 0028                  		addq.b	#1,obSubtype(a0)
00007A20 B668 0008                  		cmp.w	obX(a0),d3	; is this log the leftmost one?
00007A24 6600                       		bne.s	@notleftmost	; if not, branch
00007A26                            

00007A26 0643 0010                  		addi.w	#$10,d3
00007A2A 3142 000C                  		move.w	d2,obY(a0)
00007A2E 3142 003C                  		move.w	d2,$3C(a0)
00007A32 3A08                       		move.w	a0,d5
00007A34 0445 D000                  		subi.w	#v_objspace&$FFFF,d5
00007A38 EC4D                       		lsr.w	#6,d5
00007A3A 0245 007F                  		andi.w	#$7F,d5
00007A3E 14C5                       		move.b	d5,(a2)+
00007A40 5228 0028                  		addq.b	#1,obSubtype(a0)
00007A44                            

00007A44                            	@notleftmost:
00007A44 3A09                       		move.w	a1,d5
00007A46 0445 D000                  		subi.w	#v_objspace&$FFFF,d5
00007A4A EC4D                       		lsr.w	#6,d5
00007A4C 0245 007F                  		andi.w	#$7F,d5
00007A50 14C5                       		move.b	d5,(a2)+
00007A52 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00007A58 1344 0000                  		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007A5C 3342 000C                  		move.w	d2,obY(a1)
00007A60 3342 003C                  		move.w	d2,$3C(a1)
00007A64 3343 0008                  		move.w	d3,obX(a1)
00007A68 237C 0000 0000 0004        		move.l	#Map_Bri,obMap(a1)
00007A70 337C 438E 0002             		move.w	#$438E,obGfx(a1)
00007A76 137C 0004 0001             		move.b	#4,obRender(a1)
00007A7C 137C 0003 0018             		move.b	#3,obPriority(a1)
00007A82 137C 0008 0019             		move.b	#8,obActWid(a1)
00007A88 0643 0010                  		addi.w	#$10,d3
00007A8C 51C9 FF88                  		dbf	d1,@buildloop ; repeat d1 times (length of bridge)
00007A90                            

00007A90                            Bri_Action:	; Routine 2
00007A90 6100                       		bsr.s	Bri_Solid
00007A92 4A28 003E                  		tst.b	$3E(a0)
00007A96 6700                       		beq.s	@display
00007A98 5928 003E                  		subq.b	#4,$3E(a0)
00007A9C 6100 0000                  		bsr.w	Bri_Bend
00007AA0                            

00007AA0                            	@display:
00007AA0 6100 0000                  		bsr.w	DisplaySprite
00007AA4 6000 0000                  		bra.w	Bri_ChkDel
00007AA8                            

00007AA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AA8                            

00007AA8                            

00007AA8                            Bri_Solid:
00007AA8 7200                       		moveq	#0,d1
00007AAA 1228 0028                  		move.b	obSubtype(a0),d1
00007AAE E749                       		lsl.w	#3,d1
00007AB0 3401                       		move.w	d1,d2
00007AB2 5041                       		addq.w	#8,d1
00007AB4 D442                       		add.w	d2,d2
00007AB6 43F8 D000                  		lea	(v_player).w,a1
00007ABA 4A69 0012                  		tst.w	obVelY(a1)
00007ABE 6B00 0000                  		bmi.w	Plat_Exit
00007AC2 3029 0008                  		move.w	obX(a1),d0
00007AC6 9068 0008                  		sub.w	obX(a0),d0
00007ACA D041                       		add.w	d1,d0
00007ACC 6B00 0000                  		bmi.w	Plat_Exit
00007AD0 B042                       		cmp.w	d2,d0
00007AD2 6400 0000                  		bcc.w	Plat_Exit
00007AD6 6000                       		bra.s	Plat_NoXCheck
00007AD8                            ; End of function Bri_Solid
00007AD8                            ; End of function Bri_Solid
00007AD8                            

00007AD8                            ; ---------------------------------------------------------------------------
00007AD8                            ; Platform subroutine
00007AD8                            ; ---------------------------------------------------------------------------
00007AD8                            

00007AD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007AD8                            

00007AD8                            PlatformObject:
00007AD8 43F8 D000                  		lea	(v_player).w,a1
00007ADC 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving up/jumping?
00007AE0 6B00 0000                  		bmi.w	Plat_Exit	; if yes, branch
00007AE4                            

00007AE4                            ;		perform x-axis range check
00007AE4 3029 0008                  		move.w	obX(a1),d0
00007AE8 9068 0008                  		sub.w	obX(a0),d0
00007AEC D041                       		add.w	d1,d0
00007AEE 6B00 0000                  		bmi.w	Plat_Exit
00007AF2 D241                       		add.w	d1,d1
00007AF4 B041                       		cmp.w	d1,d0
00007AF6 6400 0000                  		bhs.w	Plat_Exit
00007AFA                            

00007AFA                            	Plat_NoXCheck:
00007AFA 3028 000C                  		move.w	obY(a0),d0
00007AFE 5140                       		subq.w	#8,d0
00007B00                            

00007B00                            Platform3:
00007B00                            ;		perform y-axis range check
00007B00 3429 000C                  		move.w	obY(a1),d2
00007B04 1229 0016                  		move.b	obHeight(a1),d1
00007B08 4881                       		ext.w	d1
00007B0A D242                       		add.w	d2,d1
00007B0C 5841                       		addq.w	#4,d1
00007B0E 9041                       		sub.w	d1,d0
00007B10 6200 0000                  		bhi.w	Plat_Exit
00007B14 0C40 FFF0                  		cmpi.w	#-$10,d0
00007B18 6500 0000                  		blo.w	Plat_Exit
00007B1C                            

00007B1C 4A38 F7C8                  		tst.b	(f_playerctrl).w
00007B20 6B00 0000                  		bmi.w	Plat_Exit
00007B24 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
00007B2A 6400 0000                  		bhs.w	Plat_Exit
00007B2E D440                       		add.w	d0,d2
00007B30 5642                       		addq.w	#3,d2
00007B32 3342 000C                  		move.w	d2,obY(a1)
00007B36 5428 0024                  		addq.b	#2,obRoutine(a0)
00007B3A                            

00007B3A                            loc_74AE:
00007B3A 0829 0003 0022             		btst	#3,obStatus(a1)
00007B40 6700                       		beq.s	loc_74DC
00007B42 7000                       		moveq	#0,d0
00007B44 1029 003D                  		move.b	standonobject(a1),d0
00007B48 ED48                       		lsl.w	#6,d0
00007B4A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00007B50 2440                       		movea.l	d0,a2
00007B52 08AA 0003 0022             		bclr	#3,obStatus(a2)
00007B58 422A 0025                  		clr.b	ob2ndRout(a2)
00007B5C 0C2A 0004 0024             		cmpi.b	#4,obRoutine(a2)
00007B62 6600                       		bne.s	loc_74DC
00007B64 552A 0024                  		subq.b	#2,obRoutine(a2)
00007B68                            

00007B68                            loc_74DC:
00007B68 3008                       		move.w	a0,d0
00007B6A 0440 D000                  		subi.w	#v_objspace&$FFFF,d0
00007B6E EC48                       		lsr.w	#6,d0
00007B70 0240 007F                  		andi.w	#$7F,d0
00007B74 1340 003D                  		move.b	d0,standonobject(a1)
00007B78 137C 0000 0026             		move.b	#0,obAngle(a1)
00007B7E 337C 0000 0012             		move.w	#0,obVelY(a1)
00007B84 3369 0010 0014             		move.w	obVelX(a1),obInertia(a1)
00007B8A 0829 0001 0022             		btst	#1,obStatus(a1)
00007B90 6700                       		beq.s	loc_7512
00007B92 2F08                       		move.l	a0,-(sp)
00007B94 2049                       		movea.l	a1,a0
00007B96 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l
00007B9C 205F                       		movea.l	(sp)+,a0
00007B9E                            

00007B9E                            loc_7512:
00007B9E 08E9 0003 0022             		bset	#3,obStatus(a1)
00007BA4 08E8 0003 0022             		bset	#3,obStatus(a0)
00007BAA                            

00007BAA                            Plat_Exit:
00007BAA 4E75                       		rts	
00007BAC                            ; End of function PlatformObject
00007BAC                            

00007BAC                            ; ---------------------------------------------------------------------------
00007BAC                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007BAC                            ; ---------------------------------------------------------------------------
00007BAC                            

00007BAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BAC                            

00007BAC                            

00007BAC                            SlopeObject:
00007BAC 43F8 D000                  		lea	(v_player).w,a1
00007BB0 4A69 0012                  		tst.w	obVelY(a1)
00007BB4 6B00 FFF4                  		bmi.w	Plat_Exit
00007BB8 3029 0008                  		move.w	obX(a1),d0
00007BBC 9068 0008                  		sub.w	obX(a0),d0
00007BC0 D041                       		add.w	d1,d0
00007BC2 6BE6                       		bmi.s	Plat_Exit
00007BC4 D241                       		add.w	d1,d1
00007BC6 B041                       		cmp.w	d1,d0
00007BC8 64E0                       		bhs.s	Plat_Exit
00007BCA 0828 0000 0001             		btst	#0,obRender(a0)
00007BD0 6700                       		beq.s	loc_754A
00007BD2 4640                       		not.w	d0
00007BD4 D041                       		add.w	d1,d0
00007BD6                            

00007BD6                            loc_754A:
00007BD6 E248                       		lsr.w	#1,d0
00007BD8 7600                       		moveq	#0,d3
00007BDA 1632 0000                  		move.b	(a2,d0.w),d3
00007BDE 3028 000C                  		move.w	obY(a0),d0
00007BE2 9043                       		sub.w	d3,d0
00007BE4 6000 FF1A                  		bra.w	Platform3
00007BE8                            ; End of function SlopeObject
00007BE8                            

00007BE8                            

00007BE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BE8                            

00007BE8                            

00007BE8                            Swing_Solid:
00007BE8 43F8 D000                  		lea	(v_player).w,a1
00007BEC 4A69 0012                  		tst.w	obVelY(a1)
00007BF0 6B00 FFB8                  		bmi.w	Plat_Exit
00007BF4 3029 0008                  		move.w	obX(a1),d0
00007BF8 9068 0008                  		sub.w	obX(a0),d0
00007BFC D041                       		add.w	d1,d0
00007BFE 6B00 FFAA                  		bmi.w	Plat_Exit
00007C02 D241                       		add.w	d1,d1
00007C04 B041                       		cmp.w	d1,d0
00007C06 6400 FFA2                  		bhs.w	Plat_Exit
00007C0A 3028 000C                  		move.w	obY(a0),d0
00007C0E 9043                       		sub.w	d3,d0
00007C10 6000 FEEE                  		bra.w	Platform3
00007C14                            ; End of function Obj15_Solid
00007C14                            

00007C14                            ; ===========================================================================
00007C14                            

00007C14                            		include	"_incObj\11 Bridge (part 2).asm"
00007C14                            

00007C14                            Bri_Platform:	; Routine 4
00007C14 6100                       		bsr.s	Bri_WalkOff
00007C16 6100 0000                  		bsr.w	DisplaySprite
00007C1A 6000 0000                  		bra.w	Bri_ChkDel
00007C1E                            

00007C1E                            ; ---------------------------------------------------------------------------
00007C1E                            ; Subroutine allowing Sonic to walk off a bridge
00007C1E                            ; ---------------------------------------------------------------------------
00007C1E                            

00007C1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C1E                            

00007C1E                            

00007C1E                            Bri_WalkOff:
00007C1E 7200                       		moveq	#0,d1
00007C20 1228 0028                  		move.b	obSubtype(a0),d1
00007C24 E749                       		lsl.w	#3,d1
00007C26 3401                       		move.w	d1,d2
00007C28 5041                       		addq.w	#8,d1
00007C2A 6100                       		bsr.s	ExitPlatform2
00007C2C 6400                       		bcc.s	locret_75BE
00007C2E E848                       		lsr.w	#4,d0
00007C30 1140 003F                  		move.b	d0,$3F(a0)
00007C34 1028 003E                  		move.b	$3E(a0),d0
00007C38 0C00 0040                  		cmpi.b	#$40,d0
00007C3C 6700                       		beq.s	loc_75B6
00007C3E 5828 003E                  		addq.b	#4,$3E(a0)
00007C42                            

00007C42                            loc_75B6:
00007C42 6100 0000                  		bsr.w	Bri_Bend
00007C46 6100 0000                  		bsr.w	Bri_MoveSonic
00007C4A                            

00007C4A                            locret_75BE:
00007C4A 4E75                       		rts	
00007C4C                            ; End of function Bri_WalkOff
00007C4C                            ; End of function Bri_WalkOff
00007C4C                            

00007C4C                            ; ---------------------------------------------------------------------------
00007C4C                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007C4C                            ; ---------------------------------------------------------------------------
00007C4C                            

00007C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C4C                            

00007C4C                            

00007C4C                            ExitPlatform:
00007C4C 3401                       		move.w	d1,d2
00007C4E                            

00007C4E                            ExitPlatform2:
00007C4E D442                       		add.w	d2,d2
00007C50 43F8 D000                  		lea	(v_player).w,a1
00007C54 0829 0001 0022             		btst	#1,obStatus(a1)
00007C5A 6600                       		bne.s	loc_75E0
00007C5C 3029 0008                  		move.w	obX(a1),d0
00007C60 9068 0008                  		sub.w	obX(a0),d0
00007C64 D041                       		add.w	d1,d0
00007C66 6B00                       		bmi.s	loc_75E0
00007C68 B042                       		cmp.w	d2,d0
00007C6A 6500                       		blo.s	locret_75F2
00007C6C                            

00007C6C                            loc_75E0:
00007C6C 08A9 0003 0022             		bclr	#3,obStatus(a1)
00007C72 117C 0002 0024             		move.b	#2,obRoutine(a0)
00007C78 08A8 0003 0022             		bclr	#3,obStatus(a0)
00007C7E                            

00007C7E                            locret_75F2:
00007C7E 4E75                       		rts	
00007C80                            ; End of function ExitPlatform
00007C80                            

00007C80                            		include	"_incObj\11 Bridge (part 3).asm"
00007C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C80                            

00007C80                            

00007C80                            Bri_MoveSonic:
00007C80 7000                       		moveq	#0,d0
00007C82 1028 003F                  		move.b	$3F(a0),d0
00007C86 1030 0029                  		move.b	$29(a0,d0.w),d0
00007C8A ED48                       		lsl.w	#6,d0
00007C8C 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00007C92 2440                       		movea.l	d0,a2
00007C94 43F8 D000                  		lea	(v_player).w,a1
00007C98 302A 000C                  		move.w	obY(a2),d0
00007C9C 5140                       		subq.w	#8,d0
00007C9E 7200                       		moveq	#0,d1
00007CA0 1229 0016                  		move.b	obHeight(a1),d1
00007CA4 9041                       		sub.w	d1,d0
00007CA6 3340 000C                  		move.w	d0,obY(a1)	; change Sonic's position on y-axis
00007CAA 4E75                       		rts	
00007CAC                            ; End of function Bri_MoveSonic
00007CAC                            

00007CAC                            

00007CAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CAC                            

00007CAC                            

00007CAC                            Bri_Bend:
00007CAC 1028 003E                  		move.b	$3E(a0),d0
00007CB0 6100 AD2E                  		bsr.w	CalcSine
00007CB4 3800                       		move.w	d0,d4
00007CB6 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007CBC 7000                       		moveq	#0,d0
00007CBE 1028 0028                  		move.b	obSubtype(a0),d0
00007CC2 E948                       		lsl.w	#4,d0
00007CC4 7600                       		moveq	#0,d3
00007CC6 1628 003F                  		move.b	$3F(a0),d3
00007CCA 3403                       		move.w	d3,d2
00007CCC D640                       		add.w	d0,d3
00007CCE 7A00                       		moveq	#0,d5
00007CD0 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007CD6 1A35 3000                  		move.b	(a5,d3.w),d5
00007CDA 0243 000F                  		andi.w	#$F,d3
00007CDE E94B                       		lsl.w	#4,d3
00007CE0 47F4 3000                  		lea	(a4,d3.w),a3
00007CE4 45E8 0029                  		lea	$29(a0),a2
00007CE8                            

00007CE8                            loc_765C:
00007CE8 7000                       		moveq	#0,d0
00007CEA 101A                       		move.b	(a2)+,d0
00007CEC ED48                       		lsl.w	#6,d0
00007CEE 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00007CF4 2240                       		movea.l	d0,a1
00007CF6 7000                       		moveq	#0,d0
00007CF8 101B                       		move.b	(a3)+,d0
00007CFA 5240                       		addq.w	#1,d0
00007CFC C0C5                       		mulu.w	d5,d0
00007CFE C0C4                       		mulu.w	d4,d0
00007D00 4840                       		swap	d0
00007D02 D069 003C                  		add.w	$3C(a1),d0
00007D06 3340 000C                  		move.w	d0,obY(a1)
00007D0A 51CA FFDC                  		dbf	d2,loc_765C
00007D0E 7000                       		moveq	#0,d0
00007D10 1028 0028                  		move.b	obSubtype(a0),d0
00007D14 7600                       		moveq	#0,d3
00007D16 1628 003F                  		move.b	$3F(a0),d3
00007D1A 5203                       		addq.b	#1,d3
00007D1C 9600                       		sub.b	d0,d3
00007D1E 4403                       		neg.b	d3
00007D20 6B00                       		bmi.s	locret_76CA
00007D22 3403                       		move.w	d3,d2
00007D24 E94B                       		lsl.w	#4,d3
00007D26 47F4 3000                  		lea	(a4,d3.w),a3
00007D2A D6C2                       		adda.w	d2,a3
00007D2C 5342                       		subq.w	#1,d2
00007D2E 6500                       		bcs.s	locret_76CA
00007D30                            

00007D30                            loc_76A4:
00007D30 7000                       		moveq	#0,d0
00007D32 101A                       		move.b	(a2)+,d0
00007D34 ED48                       		lsl.w	#6,d0
00007D36 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00007D3C 2240                       		movea.l	d0,a1
00007D3E 7000                       		moveq	#0,d0
00007D40 1023                       		move.b	-(a3),d0
00007D42 5240                       		addq.w	#1,d0
00007D44 C0C5                       		mulu.w	d5,d0
00007D46 C0C4                       		mulu.w	d4,d0
00007D48 4840                       		swap	d0
00007D4A D069 003C                  		add.w	$3C(a1),d0
00007D4E 3340 000C                  		move.w	d0,obY(a1)
00007D52 51CA FFDC                  		dbf	d2,loc_76A4
00007D56                            

00007D56                            locret_76CA:
00007D56 4E75                       		rts	
00007D58                            ; End of function Bri_Bend
00007D58                            

00007D58                            ; ===========================================================================
00007D58                            ; ---------------------------------------------------------------------------
00007D58                            ; GHZ bridge-bending data
00007D58                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007D58                            ; ---------------------------------------------------------------------------
00007D58                            Obj11_BendData:	incbin	"misc\ghzbend1.bin"
00007E68                            		even
00007E68                            Obj11_BendData2: incbin	"misc\ghzbend2.bin"
00007F68                            		even
00007F68                            

00007F68                            ; ===========================================================================
00007F68                            

00007F68                            Bri_ChkDel:
00007F86 4E75                       		rts	
00007F88                            ; ===========================================================================
00007F88                            

00007F88                            @deletebridge:
00007F88 7400                       		moveq	#0,d2
00007F8A 45E8 0028                  		lea	obSubtype(a0),a2 ; load bridge length
00007F8E 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007F90 5302                       		subq.b	#1,d2		; subtract 1
00007F92 6500                       		bcs.s	@delparent
00007F94                            

00007F94                            	@loop:
00007F94 7000                       		moveq	#0,d0
00007F96 101A                       		move.b	(a2)+,d0
00007F98 ED48                       		lsl.w	#6,d0
00007F9A 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00007FA0 2240                       		movea.l	d0,a1
00007FA2 B048                       		cmp.w	a0,d0
00007FA4 6700                       		beq.s	@skipdel
00007FA6 6100 0000                  		bsr.w	DeleteChild
00007FAA                            

00007FAA                            	@skipdel:
00007FAA 51CA FFE8                  		dbf	d2,@loop ; repeat d2 times (bridge length)
00007FAE                            

00007FAE                            @delparent:
00007FAE 6100 0000                  		bsr.w	DeleteObject
00007FB2 4E75                       		rts	
00007FB4                            ; ===========================================================================
00007FB4                            

00007FB4                            Bri_Delete:	; Routine 6, 8
00007FB4 6100 0000                  		bsr.w	DeleteObject
00007FB8 4E75                       		rts	
00007FBA                            ; ===========================================================================
00007FBA                            

00007FBA                            Bri_Display:	; Routine $A
00007FBA 6100 0000                  		bsr.w	DisplaySprite
00007FBE 4E75                       		rts	
00007FBE 4E75                       		rts	
00007FC0                            Map_Bri:	include	"_maps\Bridge.asm"
00007FC0                            ; ---------------------------------------------------------------------------
00007FC0                            ; Sprite mappings - GHZ	bridge
00007FC0                            ; ---------------------------------------------------------------------------
00007FC0                            Map_Bri_internal:
00007FC0 0000                       		dc.w M_Bri_Log-Map_Bri_internal
00007FC2 0000                       		dc.w M_Bri_Stump-Map_Bri_internal
00007FC4 0000                       		dc.w M_Bri_Rope-Map_Bri_internal
00007FC6 01                         M_Bri_Log:	dc.b 1
00007FC7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; log
00007FCC 02                         M_Bri_Stump:	dc.b 2
00007FCD F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0	; stump & rope
00007FD2 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007FD7 01                         M_Bri_Rope:	dc.b 1
00007FD8 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8	; rope only
00007FDE 00                         		even
00007FDE 00                         		even
00007FDE                            

00007FDE                            		include	"_incObj\15 Swinging Platforms (part 1).asm"
00007FDE                            ; ---------------------------------------------------------------------------
00007FDE                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007FDE                            ;	    - spiked ball on a chain (SBZ)
00007FDE                            ; ---------------------------------------------------------------------------
00007FDE                            

00007FDE                            SwingingPlatform:
00007FDE 7000                       		moveq	#0,d0
00007FE0 1028 0024                  		move.b	obRoutine(a0),d0
00007FE4 323B 0000                  		move.w	Swing_Index(pc,d0.w),d1
00007FE8 4EFB 1000                  		jmp	Swing_Index(pc,d1.w)
00007FEC                            ; ===========================================================================
00007FEC 0000 0000                  Swing_Index:	dc.w Swing_Main-Swing_Index, Swing_SetSolid-Swing_Index
00007FF0 0000 0000                  		dc.w Swing_Action2-Swing_Index,	Swing_Delete-Swing_Index
00007FF4 0000 0000                  		dc.w Swing_Delete-Swing_Index, Swing_Display-Swing_Index
00007FF8 0000                       		dc.w Swing_Action-Swing_Index
00007FFA                            

00007FFA =0000003A                  swing_origX:	equ $3A		; original x-axis position
00007FFA =00000038                  swing_origY:	equ $38		; original y-axis position
00007FFA                            ; ===========================================================================
00007FFA                            

00007FFA                            Swing_Main:	; Routine 0
00007FFA 5428 0024                  		addq.b	#2,obRoutine(a0)
00007FFE 217C 0000 0000 0004        		move.l	#Map_Swing_GHZ,obMap(a0) ; GHZ and MZ specific code
00008006 317C 4380 0002             		move.w	#$4380,obGfx(a0)
0000800C 117C 0004 0001             		move.b	#4,obRender(a0)
00008012 117C 0003 0018             		move.b	#3,obPriority(a0)
00008018 117C 0018 0019             		move.b	#$18,obActWid(a0)
0000801E 117C 0008 0016             		move.b	#8,obHeight(a0)
00008024 3168 000C 0038             		move.w	obY(a0),swing_origY(a0)
0000802A 3168 0008 003A             		move.w	obX(a0),swing_origX(a0)
00008030 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
00008036 6600                       		bne.s	@notSLZ
00008038                            

00008038 217C 0000 0000 0004        		move.l	#Map_Swing_SLZ,obMap(a0) ; SLZ specific code
00008040 317C 43DC 0002             		move.w	#$43DC,obGfx(a0)
00008046 117C 0020 0019             		move.b	#$20,obActWid(a0)
0000804C 117C 0010 0016             		move.b	#$10,obHeight(a0)
00008052 117C 0099 0020             		move.b	#$99,obColType(a0)
00008058                            

00008058                            	@notSLZ:
00008058 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
0000805E 6600                       		bne.s	@length
00008060                            

00008060 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0) ; SBZ specific code
00008068 317C 0391 0002             		move.w	#$391,obGfx(a0)
0000806E 117C 0018 0019             		move.b	#$18,obActWid(a0)
00008074 117C 0018 0016             		move.b	#$18,obHeight(a0)
0000807A 117C 0086 0020             		move.b	#$86,obColType(a0)
00008080 117C 000C 0024             		move.b	#$C,obRoutine(a0) ; goto Swing_Action next
00008086                            

00008086                            @length:
00008086 1828 0000                  		move.b	0(a0),d4
0000808A 7200                       		moveq	#0,d1
0000808C 45E8 0028                  		lea	obSubtype(a0),a2 ; move chain length to a2
00008090 1212                       		move.b	(a2),d1		; move a2 to d1
00008092 3F01                       		move.w	d1,-(sp)
00008094 0241 000F                  		andi.w	#$F,d1
00008098 14FC 0000                  		move.b	#0,(a2)+
0000809C 3601                       		move.w	d1,d3
0000809E E94B                       		lsl.w	#4,d3
000080A0 5003                       		addq.b	#8,d3
000080A2 1143 003C                  		move.b	d3,$3C(a0)
000080A6 5103                       		subq.b	#8,d3
000080A8 4A28 001A                  		tst.b	obFrame(a0)
000080AC 6700                       		beq.s	@makechain
000080AE 5003                       		addq.b	#8,d3
000080B0 5341                       		subq.w	#1,d1
000080B2                            

000080B2                            @makechain:
000080B2 6100 0000                  		bsr.w	FindFreeObj
000080B6 6600                       		bne.s	@fail
000080B8 5228 0028                  		addq.b	#1,obSubtype(a0)
000080BC 3A09                       		move.w	a1,d5
000080BE 0445 D000                  		subi.w	#v_objspace&$FFFF,d5
000080C2 EC4D                       		lsr.w	#6,d5
000080C4 0245 007F                  		andi.w	#$7F,d5
000080C8 14C5                       		move.b	d5,(a2)+
000080CA 137C 000A 0024             		move.b	#$A,obRoutine(a1) ; goto Swing_Display next
000080D0 1344 0000                  		move.b	d4,0(a1)	; load swinging	object
000080D4 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000080DA 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
000080E0 08A9 0006 0002             		bclr	#6,obGfx(a1)
000080E6 137C 0004 0001             		move.b	#4,obRender(a1)
000080EC 137C 0004 0018             		move.b	#4,obPriority(a1)
000080F2 137C 0008 0019             		move.b	#8,obActWid(a1)
000080F8 137C 0001 001A             		move.b	#1,obFrame(a1)
000080FE 1343 003C                  		move.b	d3,$3C(a1)
00008102 0403 0010                  		subi.b	#$10,d3
00008106 6400                       		bcc.s	@notanchor
00008108 137C 0002 001A             		move.b	#2,obFrame(a1)
0000810E 137C 0003 0018             		move.b	#3,obPriority(a1)
00008114 08E9 0006 0002             		bset	#6,obGfx(a1)
0000811A                            

0000811A                            	@notanchor:
0000811A 51C9 FF96                  		dbf	d1,@makechain ; repeat d1 times (chain length)
0000811E                            

0000811E                            	@fail:
0000811E 3A08                       		move.w	a0,d5
00008120 0445 D000                  		subi.w	#v_objspace&$FFFF,d5
00008124 EC4D                       		lsr.w	#6,d5
00008126 0245 007F                  		andi.w	#$7F,d5
0000812A 14C5                       		move.b	d5,(a2)+
0000812C 317C 4080 0026             		move.w	#$4080,obAngle(a0)
00008132 317C FE00 003E             		move.w	#-$200,$3E(a0)
00008138 321F                       		move.w	(sp)+,d1
0000813A 0801 0004                  		btst	#4,d1		; is object type $1X ?
0000813E 6700                       		beq.s	@not1X	; if not, branch
00008140 217C 0000 0000 0004        		move.l	#Map_GBall,obMap(a0) ; use GHZ ball mappings
00008148 317C 43AA 0002             		move.w	#$43AA,obGfx(a0)
0000814E 117C 0001 001A             		move.b	#1,obFrame(a0)
00008154 117C 0002 0018             		move.b	#2,obPriority(a0)
0000815A 117C 0081 0020             		move.b	#$81,obColType(a0) ; make object hurt when touched
00008160                            

00008160                            	@not1X:
00008160 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; is zone SBZ?
00008166 6700                       		beq.s	Swing_Action	; if yes, branch
00008168                            

00008168                            Swing_SetSolid:	; Routine 2
00008168 7200                       		moveq	#0,d1
0000816A 1228 0019                  		move.b	obActWid(a0),d1
0000816E 7600                       		moveq	#0,d3
00008170 1628 0016                  		move.b	obHeight(a0),d3
00008174 6100 FA72                  		bsr.w	Swing_Solid
00008178                            

00008178                            Swing_Action:	; Routine $C
00008178 6100 0000                  		bsr.w	Swing_Move
0000817C 6100 0000                  		bsr.w	DisplaySprite
00008180 6000 0000                  		bra.w	Swing_ChkDel
00008184                            ; ===========================================================================
00008184                            

00008184                            Swing_Action2:	; Routine 4
00008184 7200                       		moveq	#0,d1
00008186 1228 0019                  		move.b	obActWid(a0),d1
0000818A 6100 FAC0                  		bsr.w	ExitPlatform
0000818E 3F28 0008                  		move.w	obX(a0),-(sp)
00008192 6100 0000                  		bsr.w	Swing_Move
00008196 341F                       		move.w	(sp)+,d2
00008198 7600                       		moveq	#0,d3
0000819A 1628 0016                  		move.b	obHeight(a0),d3
0000819E 5203                       		addq.b	#1,d3
000081A0 6100 0000                  		bsr.w	MvSonicOnPtfm
000081A4 6100 0000                  		bsr.w	DisplaySprite
000081A8 6000 0000                  		bra.w	Swing_ChkDel
000081AC                            

000081AC 4E75                       		rts
000081AC 4E75                       		rts
000081AE                            

000081AE                            ; ---------------------------------------------------------------------------
000081AE                            ; Subroutine to	change Sonic's position with a platform
000081AE                            ; ---------------------------------------------------------------------------
000081AE                            

000081AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081AE                            

000081AE                            

000081AE                            MvSonicOnPtfm:
000081AE 43F8 D000                  		lea	(v_player).w,a1
000081B2 3028 000C                  		move.w	obY(a0),d0
000081B6 9043                       		sub.w	d3,d0
000081B8 6000                       		bra.s	MvSonic2
000081BA                            ; End of function MvSonicOnPtfm
000081BA                            

000081BA                            ; ---------------------------------------------------------------------------
000081BA                            ; Subroutine to	change Sonic's position with a platform
000081BA                            ; ---------------------------------------------------------------------------
000081BA                            

000081BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081BA                            

000081BA                            

000081BA                            MvSonicOnPtfm2:
000081BA 43F8 D000                  		lea	(v_player).w,a1
000081BE 3028 000C                  		move.w	obY(a0),d0
000081C2 0440 0009                  		subi.w	#9,d0
000081C6                            

000081C6                            MvSonic2:
000081C6 4A38 F7C8                  		tst.b	(f_playerctrl).w
000081CA 6B00                       		bmi.s	locret_7B62
000081CC 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000081D2 6400                       		bhs.s	locret_7B62
000081D4 4A78 FE08                  		tst.w	(v_debuguse).w
000081D8 6600                       		bne.s	locret_7B62
000081DA 7200                       		moveq	#0,d1
000081DC 1229 0016                  		move.b	obHeight(a1),d1
000081E0 9041                       		sub.w	d1,d0
000081E2 3340 000C                  		move.w	d0,obY(a1)
000081E6 9468 0008                  		sub.w	obX(a0),d2
000081EA 9569 0008                  		sub.w	d2,obX(a1)
000081EE                            

000081EE                            locret_7B62:
000081EE 4E75                       		rts	
000081F0                            ; End of function MvSonicOnPtfm2
000081F0                            

000081F0                            		include	"_incObj\15 Swinging Platforms (part 2).asm"
000081F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081F0                            

000081F0                            

000081F0                            Swing_Move:
000081F0 1038 FE78                  		move.b	(v_oscillate+$1A).w,d0
000081F4 323C 0080                  		move.w	#$80,d1
000081F8 0828 0000 0022             		btst	#0,obStatus(a0)
000081FE 6700                       		beq.s	loc_7B78
00008200 4440                       		neg.w	d0
00008202 D041                       		add.w	d1,d0
00008204                            

00008204                            loc_7B78:
00008204 6000                       		bra.s	Swing_Move2
00008206                            ; End of function Swing_Move
00008206                            

00008206                            

00008206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008206                            

00008206                            

00008206                            Obj48_Move:
00008206 4A28 003D                  		tst.b	standonobject(a0)
0000820A 6600                       		bne.s	loc_7B9C
0000820C 3028 003E                  		move.w	$3E(a0),d0
00008210 5040                       		addq.w	#8,d0
00008212 3140 003E                  		move.w	d0,$3E(a0)
00008216 D168 0026                  		add.w	d0,obAngle(a0)
0000821A 0C40 0200                  		cmpi.w	#$200,d0
0000821E 6600                       		bne.s	loc_7BB6
00008220 117C 0001 003D             		move.b	#1,standonobject(a0)
00008226 6000                       		bra.s	loc_7BB6
00008228                            ; ===========================================================================
00008228                            

00008228                            loc_7B9C:
00008228 3028 003E                  		move.w	$3E(a0),d0
0000822C 5140                       		subq.w	#8,d0
0000822E 3140 003E                  		move.w	d0,$3E(a0)
00008232 D168 0026                  		add.w	d0,obAngle(a0)
00008236 0C40 FE00                  		cmpi.w	#-$200,d0
0000823A 6600                       		bne.s	loc_7BB6
0000823C 117C 0000 003D             		move.b	#0,standonobject(a0)
00008242                            

00008242                            loc_7BB6:
00008242 1028 0026                  		move.b	obAngle(a0),d0
00008246                            ; End of function Obj48_Move
00008246                            

00008246                            

00008246                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008246                            

00008246                            

00008246                            Swing_Move2:
00008246 6100 A798                  		bsr.w	CalcSine
0000824A 3428 0038                  		move.w	$38(a0),d2
0000824E 3628 003A                  		move.w	$3A(a0),d3
00008252 45E8 0028                  		lea	obSubtype(a0),a2
00008256 7C00                       		moveq	#0,d6
00008258 1C1A                       		move.b	(a2)+,d6
0000825A                            

0000825A                            loc_7BCE:
0000825A 7800                       		moveq	#0,d4
0000825C 181A                       		move.b	(a2)+,d4
0000825E ED4C                       		lsl.w	#6,d4
00008260 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00008266 2244                       		movea.l	d4,a1
00008268 7800                       		moveq	#0,d4
0000826A 1829 003C                  		move.b	$3C(a1),d4
0000826E 2A04                       		move.l	d4,d5
00008270 C9C0                       		muls.w	d0,d4
00008272 E084                       		asr.l	#8,d4
00008274 CBC1                       		muls.w	d1,d5
00008276 E085                       		asr.l	#8,d5
00008278 D842                       		add.w	d2,d4
0000827A DA43                       		add.w	d3,d5
0000827C 3344 000C                  		move.w	d4,obY(a1)
00008280 3345 0008                  		move.w	d5,obX(a1)
00008284 51CE FFD4                  		dbf	d6,loc_7BCE
00008288 4E75                       		rts	
0000828A                            ; End of function Swing_Move2
0000828A                            

0000828A                            ; ===========================================================================
0000828A                            

0000828A                            Swing_ChkDel:
000082A8 4E75                       		rts	
000082AA                            ; ===========================================================================
000082AA                            

000082AA                            Swing_DelAll:
000082AA 7400                       		moveq	#0,d2
000082AC 45E8 0028                  		lea	obSubtype(a0),a2
000082B0 141A                       		move.b	(a2)+,d2
000082B2                            

000082B2                            Swing_DelLoop:
000082B2 7000                       		moveq	#0,d0
000082B4 101A                       		move.b	(a2)+,d0
000082B6 ED48                       		lsl.w	#6,d0
000082B8 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
000082BE 2240                       		movea.l	d0,a1
000082C0 6100 0000                  		bsr.w	DeleteChild
000082C4 51CA FFEC                  		dbf	d2,Swing_DelLoop ; repeat for length of	chain
000082C8 4E75                       		rts	
000082CA                            ; ===========================================================================
000082CA                            

000082CA                            Swing_Delete:	; Routine 6, 8
000082CA 6100 0000                  		bsr.w	DeleteObject
000082CE 4E75                       		rts	
000082D0                            ; ===========================================================================
000082D0                            

000082D0                            Swing_Display:	; Routine $A
000082D0 6000 0000                  		bra.w	DisplaySprite
000082D0 6000 0000                  		bra.w	DisplaySprite
000082D4                            Map_Swing_GHZ:	include	"_maps\Swinging Platforms (GHZ).asm"
000082D4                            ; ---------------------------------------------------------------------------
000082D4                            ; Sprite mappings - GHZ	and MZ swinging	platforms
000082D4                            ; ---------------------------------------------------------------------------
000082D4                            Map_Swing_GHZ_internal:
000082D4 0000                       		dc.w @block-Map_Swing_GHZ_internal
000082D6 0000                       		dc.w @chain-Map_Swing_GHZ_internal
000082D8 0000                       		dc.w @anchor-Map_Swing_GHZ_internal
000082DA 02                         @block:		dc.b 2
000082DB F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
000082E0 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000082E5 01                         @chain:		dc.b 1
000082E6 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000082EB 01                         @anchor:	dc.b 1
000082EC F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000082F2 00                         		even
000082F2 00                         		even
000082F2                            Map_Swing_SLZ:	include	"_maps\Swinging Platforms (SLZ).asm"
000082F2                            ; ---------------------------------------------------------------------------
000082F2                            ; Sprite mappings - SLZ	swinging platforms
000082F2                            ; ---------------------------------------------------------------------------
000082F2                            Map_Swing_SLZ_internal:
000082F2 0000                       		dc.w @block-Map_Swing_SLZ_internal
000082F4 0000                       		dc.w @chain-Map_Swing_SLZ_internal
000082F6 0000                       		dc.w @anchor-Map_Swing_SLZ_internal
000082F8 08                         @block:		dc.b 8
000082F9 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000082FE F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008303 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008308 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
0000830D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008312 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008317 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
0000831C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008321 01                         @chain:		dc.b 1
00008322 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008327 01                         @anchor:	dc.b 1
00008328 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
0000832E 00                         		even
0000832E 00                         		even
0000832E                            		include	"_incObj\17 Spiked Pole Helix.asm"
0000832E                            ; ---------------------------------------------------------------------------
0000832E                            ; Object 17 - helix of spikes on a pole	(GHZ)
0000832E                            ; ---------------------------------------------------------------------------
0000832E                            

0000832E                            Helix:
0000832E 7000                       		moveq	#0,d0
00008330 1028 0024                  		move.b	obRoutine(a0),d0
00008334 323B 0000                  		move.w	Hel_Index(pc,d0.w),d1
00008338 4EFB 1000                  		jmp	Hel_Index(pc,d1.w)
0000833C                            ; ===========================================================================
0000833C 0000                       Hel_Index:	dc.w Hel_Main-Hel_Index
0000833E 0000                       		dc.w Hel_Action-Hel_Index
00008340 0000                       		dc.w Hel_Action-Hel_Index
00008342 0000                       		dc.w Hel_Delete-Hel_Index
00008344 0000                       		dc.w Hel_Display-Hel_Index
00008346                            

00008346 =0000003E                  hel_frame:	equ $3E		; start frame (different for each spike)
00008346                            

00008346                            ;		$29-38 are used for child object addresses
00008346                            ; ===========================================================================
00008346                            

00008346                            Hel_Main:	; Routine 0
00008346 5428 0024                  		addq.b	#2,obRoutine(a0)
0000834A 217C 0000 0000 0004        		move.l	#Map_Hel,obMap(a0)
00008352 317C 4398 0002             		move.w	#$4398,obGfx(a0)
00008358 117C 0007 0022             		move.b	#7,obStatus(a0)
0000835E 117C 0004 0001             		move.b	#4,obRender(a0)
00008364 117C 0003 0018             		move.b	#3,obPriority(a0)
0000836A 117C 0008 0019             		move.b	#8,obActWid(a0)
00008370 3428 000C                  		move.w	obY(a0),d2
00008374 3628 0008                  		move.w	obX(a0),d3
00008378 1828 0000                  		move.b	0(a0),d4
0000837C 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
00008380 7200                       		moveq	#0,d1
00008382 1212                       		move.b	(a2),d1		; move helix length to d1
00008384 14FC 0000                  		move.b	#0,(a2)+	; clear subtype
00008388 3001                       		move.w	d1,d0
0000838A E248                       		lsr.w	#1,d0
0000838C E948                       		lsl.w	#4,d0
0000838E 9640                       		sub.w	d0,d3		; d3 is x-axis position of leftmost spike
00008390 5501                       		subq.b	#2,d1
00008392 6500                       		bcs.s	Hel_Action	; skip to action if length is only 1
00008394 7C00                       		moveq	#0,d6
00008396                            

00008396                            Hel_Build:
00008396 6100 0000                  		bsr.w	FindFreeObj
0000839A 6600                       		bne.s	Hel_Action
0000839C 5228 0028                  		addq.b	#1,obSubtype(a0)
000083A0 3A09                       		move.w	a1,d5
000083A2 0445 D000                  		subi.w	#v_objspace&$FFFF,d5
000083A6 EC4D                       		lsr.w	#6,d5
000083A8 0245 007F                  		andi.w	#$7F,d5
000083AC 14C5                       		move.b	d5,(a2)+	; copy child address to parent RAM
000083AE 137C 0008 0024             		move.b	#8,obRoutine(a1)
000083B4 1344 0000                  		move.b	d4,0(a1)
000083B8 3342 000C                  		move.w	d2,obY(a1)
000083BC 3343 0008                  		move.w	d3,obX(a1)
000083C0 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
000083C6 337C 4398 0002             		move.w	#$4398,obGfx(a1)
000083CC 137C 0004 0001             		move.b	#4,obRender(a1)
000083D2 137C 0003 0018             		move.b	#3,obPriority(a1)
000083D8 137C 0008 0019             		move.b	#8,obActWid(a1)
000083DE 1346 003E                  		move.b	d6,hel_frame(a1)
000083E2 5206                       		addq.b	#1,d6
000083E4 0206 0007                  		andi.b	#7,d6
000083E8 0643 0010                  		addi.w	#$10,d3
000083EC B668 0008                  		cmp.w	obX(a0),d3	; is this spike in the centre?
000083F0 6600                       		bne.s	Hel_NotCentre	; if not, branch
000083F2                            

000083F2 1146 003E                  		move.b	d6,hel_frame(a0) ; set parent spike frame
000083F6 5206                       		addq.b	#1,d6
000083F8 0206 0007                  		andi.b	#7,d6
000083FC 0643 0010                  		addi.w	#$10,d3		; skip to next spike
00008400 5228 0028                  		addq.b	#1,obSubtype(a0)
00008404                            

00008404                            	Hel_NotCentre:
00008404 51C9 FF90                  		dbf	d1,Hel_Build ; repeat d1 times (helix length)
00008408                            

00008408                            Hel_Action:	; Routine 2, 4
00008408 6100 0000                  		bsr.w	Hel_RotateSpikes
0000840C 6100 0000                  		bsr.w	DisplaySprite
00008410 6000 0000                  		bra.w	Hel_ChkDel
00008414                            

00008414                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008414                            

00008414                            

00008414                            Hel_RotateSpikes:
00008414 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
00008418 117C 0000 0020             		move.b	#0,obColType(a0) ; make object harmless
0000841E D028 003E                  		add.b	hel_frame(a0),d0
00008422 0200 0007                  		andi.b	#7,d0
00008426 1140 001A                  		move.b	d0,obFrame(a0)	; change current frame
0000842A 6600                       		bne.s	locret_7DA6
0000842C 117C 0084 0020             		move.b	#$84,obColType(a0) ; make object harmful
00008432                            

00008432                            locret_7DA6:
00008432 4E75                       		rts	
00008434                            ; End of function Hel_RotateSpikes
00008434                            

00008434                            ; ===========================================================================
00008434                            

00008434                            Hel_ChkDel:
00008452 4E75                       		rts	
00008454                            ; ===========================================================================
00008454                            

00008454                            Hel_DelAll:
00008454 7400                       		moveq	#0,d2
00008456 45E8 0028                  		lea	obSubtype(a0),a2 ; move helix length to a2
0000845A 141A                       		move.b	(a2)+,d2	; move helix length to d2
0000845C 5502                       		subq.b	#2,d2
0000845E 6500                       		bcs.s	Hel_Delete
00008460                            

00008460                            	Hel_DelLoop:
00008460 7000                       		moveq	#0,d0
00008462 101A                       		move.b	(a2)+,d0
00008464 ED48                       		lsl.w	#6,d0
00008466 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0000846C 2240                       		movea.l	d0,a1		; get child address
0000846E 6100 0000                  		bsr.w	DeleteChild	; delete object
00008472 51CA FFEC                  		dbf	d2,Hel_DelLoop ; repeat d2 times (helix length)
00008476                            

00008476                            Hel_Delete:	; Routine 6
00008476 6100 0000                  		bsr.w	DeleteObject
0000847A 4E75                       		rts	
0000847C                            ; ===========================================================================
0000847C                            

0000847C                            Hel_Display:	; Routine 8
0000847C 6100 FF96                  		bsr.w	Hel_RotateSpikes
00008480 6000 0000                  		bra.w	DisplaySprite
00008480 6000 0000                  		bra.w	DisplaySprite
00008484                            Map_Hel:	include	"_maps\Spiked Pole Helix.asm"
00008484                            ; ---------------------------------------------------------------------------
00008484                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008484                            ; ---------------------------------------------------------------------------
00008484                            Map_Hel_internal:
00008484 0000                       		dc.w byte_7E08-Map_Hel_internal
00008486 0000                       		dc.w byte_7E0E-Map_Hel_internal
00008488 0000                       		dc.w byte_7E14-Map_Hel_internal
0000848A 0000                       		dc.w byte_7E1A-Map_Hel_internal
0000848C 0000                       		dc.w byte_7E20-Map_Hel_internal
0000848E 0000                       		dc.w byte_7E26-Map_Hel_internal
00008490 0000                       		dc.w byte_7E2E-Map_Hel_internal
00008492 0000                       		dc.w byte_7E2C-Map_Hel_internal
00008494 01                         byte_7E08:	dc.b 1
00008495 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC	; points straight up (harmful)
0000849A 01                         byte_7E0E:	dc.b 1
0000849B F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8	; 45 degree
000084A0 01                         byte_7E14:	dc.b 1
000084A1 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8	; 90 degree
000084A6 01                         byte_7E1A:	dc.b 1
000084A7 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8	; 45 degree
000084AC 01                         byte_7E20:	dc.b 1
000084AD 0001 000E FC               		dc.b 0,	1, 0, $E, $FC	; straight down
000084B2 01                         byte_7E26:	dc.b 1
000084B3 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD	; 45 degree
000084B8 01                         byte_7E2C:	dc.b 1
000084B9 F4                         		dc.b $F4
000084BA                            byte_7E2E:	; reads the 0 below	; not visible
000084BA 0000 11FD                  		dc.b 0, 0,	$11, $FD ; 45 degree
000084BE                            		even
000084BE                            		even
000084BE                            		include	"_incObj\18 Platforms.asm"
000084BE                            ; ---------------------------------------------------------------------------
000084BE                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
000084BE                            ; ---------------------------------------------------------------------------
000084BE                            

000084BE                            BasicPlatform:
000084BE 7000                       		moveq	#0,d0
000084C0 1028 0024                  		move.b	obRoutine(a0),d0
000084C4 323B 0000                  		move.w	Plat_Index(pc,d0.w),d1
000084C8 4EFB 1000                  		jmp	Plat_Index(pc,d1.w)
000084CC                            ; ===========================================================================
000084CC 0000                       Plat_Index:	dc.w Plat_Main-Plat_Index
000084CE 0000                       		dc.w Plat_Solid-Plat_Index
000084D0 0000                       		dc.w Plat_Action2-Plat_Index
000084D2 0000                       		dc.w Plat_Delete-Plat_Index
000084D4 0000                       		dc.w Plat_Action-Plat_Index
000084D6                            ; ===========================================================================
000084D6                            

000084D6                            Plat_Main:	; Routine 0
000084D6 5428 0024                  		addq.b	#2,obRoutine(a0)
000084DA 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000084E0 217C 0000 0000 0004        		move.l	#Map_Plat_GHZ,obMap(a0)
000084E8 117C 0020 0019             		move.b	#$20,obActWid(a0)
000084EE 0C38 0004 FE10             		cmpi.b	#id_SYZ,(v_zone).w ; check if level is SYZ
000084F4 6600                       		bne.s	@notSYZ
000084F6                            

000084F6 217C 0000 0000 0004        		move.l	#Map_Plat_SYZ,obMap(a0) ; SYZ specific code
000084FE 117C 0020 0019             		move.b	#$20,obActWid(a0)
00008504                            

00008504                            	@notSYZ:
00008504 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
0000850A 6600                       		bne.s	@notSLZ
0000850C 217C 0000 0000 0004        		move.l	#Map_Plat_SLZ,obMap(a0) ; SLZ specific code
00008514 117C 0020 0019             		move.b	#$20,obActWid(a0)
0000851A 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00008520 117C 0003 0028             		move.b	#3,obSubtype(a0)
00008526                            

00008526                            	@notSLZ:
00008526 117C 0004 0001             		move.b	#4,obRender(a0)
0000852C 117C 0004 0018             		move.b	#4,obPriority(a0)
00008532 3168 000C 002C             		move.w	obY(a0),$2C(a0)
00008538 3168 000C 0034             		move.w	obY(a0),$34(a0)
0000853E 3168 0008 0032             		move.w	obX(a0),$32(a0)
00008544 317C 0080 0026             		move.w	#$80,obAngle(a0)
0000854A 7200                       		moveq	#0,d1
0000854C 1028 0028                  		move.b	obSubtype(a0),d0
00008550 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008554 6600                       		bne.s	@setframe	; if not, branch
00008556 5201                       		addq.b	#1,d1		; use frame #1
00008558 117C 0020 0019             		move.b	#$20,obActWid(a0) ; set width
0000855E                            

0000855E                            	@setframe:
0000855E 1141 001A                  		move.b	d1,obFrame(a0)	; set frame to d1
00008562                            

00008562                            Plat_Solid:	; Routine 2
00008562 4A28 0038                  		tst.b	$38(a0)
00008566 6700                       		beq.s	loc_7EE0
00008568 5928 0038                  		subq.b	#4,$38(a0)
0000856C                            

0000856C                            	loc_7EE0:
0000856C 7200                       		moveq	#0,d1
0000856E 1228 0019                  		move.b	obActWid(a0),d1
00008572 6100 F564                  		bsr.w	PlatformObject
00008576                            

00008576                            Plat_Action:	; Routine 8
00008576 6100 0000                  		bsr.w	Plat_Move
0000857A 6100 0000                  		bsr.w	Plat_Nudge
0000857E 6100 0000                  		bsr.w	DisplaySprite
00008582 6000 0000                  		bra.w	Plat_ChkDel
00008586                            ; ===========================================================================
00008586                            

00008586                            Plat_Action2:	; Routine 4
00008586 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
0000858C 6700                       		beq.s	loc_7F06
0000858E 5828 0038                  		addq.b	#4,$38(a0)
00008592                            

00008592                            	loc_7F06:
00008592 7200                       		moveq	#0,d1
00008594 1228 0019                  		move.b	obActWid(a0),d1
00008598 6100 F6B2                  		bsr.w	ExitPlatform
0000859C 3F28 0008                  		move.w	obX(a0),-(sp)
000085A0 6100 0000                  		bsr.w	Plat_Move
000085A4 6100 0000                  		bsr.w	Plat_Nudge
000085A8 341F                       		move.w	(sp)+,d2
000085AA 6100 FC0E                  		bsr.w	MvSonicOnPtfm2
000085AE 6100 0000                  		bsr.w	DisplaySprite
000085B2 6000 0000                  		bra.w	Plat_ChkDel
000085B6                            

000085B6 4E75                       		rts
000085B8                            

000085B8                            ; ---------------------------------------------------------------------------
000085B8                            ; Subroutine to	move platform slightly when you	stand on it
000085B8                            ; ---------------------------------------------------------------------------
000085B8                            

000085B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085B8                            

000085B8                            

000085B8                            Plat_Nudge:
000085B8 1028 0038                  		move.b	$38(a0),d0
000085BC 6100 A422                  		bsr.w	CalcSine
000085C0 323C 0400                  		move.w	#$400,d1
000085C4 C1C1                       		muls.w	d1,d0
000085C6 4840                       		swap	d0
000085C8 D068 002C                  		add.w	$2C(a0),d0
000085CC 3140 000C                  		move.w	d0,obY(a0)
000085D0 4E75                       		rts	
000085D2                            ; End of function Plat_Nudge
000085D2                            

000085D2                            ; ---------------------------------------------------------------------------
000085D2                            ; Subroutine to	move platforms
000085D2                            ; ---------------------------------------------------------------------------
000085D2                            

000085D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000085D2                            

000085D2                            

000085D2                            Plat_Move:
000085D2 7000                       		moveq	#0,d0
000085D4 1028 0028                  		move.b	obSubtype(a0),d0
000085D8 0240 000F                  		andi.w	#$F,d0
000085DC D040                       		add.w	d0,d0
000085DE 323B 0000                  		move.w	@index(pc,d0.w),d1
000085E2 4EFB 1000                  		jmp	@index(pc,d1.w)
000085E6                            ; End of function Plat_Move
000085E6                            

000085E6                            ; ===========================================================================
000085E6 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000085EA 0000 0000                  		dc.w @type02-@index, @type03-@index
000085EE 0000 0000                  		dc.w @type04-@index, @type05-@index
000085F2 0000 0000                  		dc.w @type06-@index, @type07-@index
000085F6 0000 0000                  		dc.w @type08-@index, @type00-@index
000085FA 0000 0000                  		dc.w @type0A-@index, @type0B-@index
000085FE 0000                       		dc.w @type0C-@index
00008600                            ; ===========================================================================
00008600                            

00008600                            @type00:
00008600 4E75                       		rts			; platform 00 doesn't move
00008602                            ; ===========================================================================
00008602                            

00008602                            @type05:
00008602 3028 0032                  		move.w	$32(a0),d0
00008606 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000860A 4401                       		neg.b	d1		; reverse platform-motion
0000860C 0601 0040                  		addi.b	#$40,d1
00008610 6000                       		bra.s	@type01_move
00008612                            ; ===========================================================================
00008612                            

00008612                            @type01:
00008612 3028 0032                  		move.w	$32(a0),d0
00008616 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000861A 0401 0040                  		subi.b	#$40,d1
0000861E                            

0000861E                            	@type01_move:
0000861E 4881                       		ext.w	d1
00008620 D041                       		add.w	d1,d0
00008622 3140 0008                  		move.w	d0,obX(a0)	; change position on x-axis
00008626 6000 0000                  		bra.w	@chgmotion
0000862A                            ; ===========================================================================
0000862A                            

0000862A                            @type0C:
0000862A 3028 0034                  		move.w	$34(a0),d0
0000862E 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00008632 4401                       		neg.b	d1		; reverse platform-motion
00008634 0601 0030                  		addi.b	#$30,d1
00008638 6000                       		bra.s	@type02_move
0000863A                            ; ===========================================================================
0000863A                            

0000863A                            @type0B:
0000863A 3028 0034                  		move.w	$34(a0),d0
0000863E 1238 FE6C                  		move.b	(v_oscillate+$E).w,d1 ; load platform-motion variable
00008642 0401 0030                  		subi.b	#$30,d1
00008646 6000                       		bra.s	@type02_move
00008648                            ; ===========================================================================
00008648                            

00008648                            @type06:
00008648 3028 0034                  		move.w	$34(a0),d0
0000864C 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00008650 4401                       		neg.b	d1		; reverse platform-motion
00008652 0601 0040                  		addi.b	#$40,d1
00008656 6000                       		bra.s	@type02_move
00008658                            ; ===========================================================================
00008658                            

00008658                            @type02:
00008658 3028 0034                  		move.w	$34(a0),d0
0000865C 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
00008660 0401 0040                  		subi.b	#$40,d1
00008664                            

00008664                            	@type02_move:
00008664 4881                       		ext.w	d1
00008666 D041                       		add.w	d1,d0
00008668 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000866C 6000 0000                  		bra.w	@chgmotion
00008670                            ; ===========================================================================
00008670                            

00008670                            @type03:
00008670 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008674 6600                       		bne.s	@type03_wait	; if yes, branch
00008676 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the platform?
0000867C 6700                       		beq.s	@type03_nomove	; if not, branch
0000867E 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008684                            

00008684                            	@type03_nomove:
00008684 4E75                       		rts	
00008686                            

00008686                            	@type03_wait:
00008686 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
0000868A 66F8                       		bne.s	@type03_nomove	; if time is > 0, branch
0000868C 317C 0020 003A             		move.w	#32,$3A(a0)
00008692 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 04 (falling)
00008696 4E75                       		rts	
00008698                            ; ===========================================================================
00008698                            

00008698                            @type04:
00008698 4A68 003A                  		tst.w	$3A(a0)
0000869C 6700                       		beq.s	@loc_8048
0000869E 5368 003A                  		subq.w	#1,$3A(a0)
000086A2 6600                       		bne.s	@loc_8048
000086A4 0828 0003 0022             		btst	#3,obStatus(a0)
000086AA 6700                       		beq.s	@loc_8042
000086AC 08E9 0001 0022             		bset	#1,obStatus(a1)
000086B2 08A9 0003 0022             		bclr	#3,obStatus(a1)
000086B8 137C 0002 0024             		move.b	#2,obRoutine(a1)
000086BE 08A8 0003 0022             		bclr	#3,obStatus(a0)
000086C4 4228 0025                  		clr.b	$25(a0)
000086C8 3368 0012 0012             		move.w	obVelY(a0),obVelY(a1)
000086CE                            

000086CE                            	@loc_8042:
000086CE 117C 0008 0024             		move.b	#8,obRoutine(a0)
000086D4                            

000086D4                            	@loc_8048:
000086D4 2628 002C                  		move.l	$2C(a0),d3
000086D8 3028 0012                  		move.w	obVelY(a0),d0
000086DC 48C0                       		ext.l	d0
000086DE E180                       		asl.l	#8,d0
000086E0 D680                       		add.l	d0,d3
000086E2 2143 002C                  		move.l	d3,$2C(a0)
000086E6 0668 0038 0012             		addi.w	#$38,obVelY(a0)
000086EC 3038 F72E                  		move.w	(v_limitbtm2).w,d0
000086F0 0640 00E0                  		addi.w	#$E0,d0
000086F4 B068 002C                  		cmp.w	$2C(a0),d0
000086F8 6400                       		bcc.s	@locret_8074
000086FA 117C 0006 0024             		move.b	#6,obRoutine(a0)
00008700                            

00008700                            	@locret_8074:
00008700 4E75                       		rts	
00008702                            ; ===========================================================================
00008702                            

00008702                            @type07:
00008702 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008706 6600                       		bne.s	@type07_wait	; if yes, branch
00008708 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000870C 7000                       		moveq	#0,d0
0000870E 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type ($x7) to d0
00008712 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008714 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008718 6700                       		beq.s	@type07_nomove	; if not, branch
0000871A 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008720                            

00008720                            	@type07_nomove:
00008720 4E75                       		rts	
00008722                            

00008722                            	@type07_wait:
00008722 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008726 66F8                       		bne.s	@type07_nomove	; if time is > 0, branch
00008728 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 08
0000872C 4E75                       		rts	
0000872E                            ; ===========================================================================
0000872E                            

0000872E                            @type08:
0000872E 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008732 3028 0034                  		move.w	$34(a0),d0
00008736 0440 0200                  		subi.w	#$200,d0
0000873A B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
0000873E 6600                       		bne.s	@type08_nostop	; if not, branch
00008740 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (stop moving)
00008744                            

00008744                            	@type08_nostop:
00008744 4E75                       		rts	
00008746                            ; ===========================================================================
00008746                            

00008746                            @type0A:
00008746 3028 0034                  		move.w	$34(a0),d0
0000874A 1228 0026                  		move.b	obAngle(a0),d1	; load platform-motion variable
0000874E 0401 0040                  		subi.b	#$40,d1
00008752 4881                       		ext.w	d1
00008754 E241                       		asr.w	#1,d1
00008756 D041                       		add.w	d1,d0
00008758 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
0000875C                            

0000875C                            @chgmotion:
0000875C 1178 FE78 0026             		move.b	(v_oscillate+$1A).w,$26(a0) ; update platform-movement variable
00008762 4E75                       		rts	
00008764                            ; ===========================================================================
00008764                            

00008764                            Plat_ChkDel:
00008780 4E75                       		rts	
00008782                            ; ===========================================================================
00008782                            

00008782                            Plat_Delete:	; Routine 6
00008782 6000 0000                  		bra.w	DeleteObject
00008782 6000 0000                  		bra.w	DeleteObject
00008786                            Map_Plat_Unused: include	"_maps\Platforms (unused).asm"
00008786                            ; ---------------------------------------------------------------------------
00008786                            ; Sprite mappings - unused
00008786                            ; ---------------------------------------------------------------------------
00008786                            Map_Plat_Unused_internal:
00008786 0000                       		dc.w @small-Map_Plat_Unused_internal
00008788 0000                       		dc.w @large-Map_Plat_Unused_internal
0000878A 02                         @small:		dc.b 2
0000878B F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008790 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008795 0A                         @large:		dc.b $A
00008796 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000879B 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000087A0 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000087A5 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
000087AA 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
000087AF F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
000087B4 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
000087B9 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
000087BE 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
000087C3 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
000087C8                            		even
000087C8                            		even
000087C8                            Map_Plat_GHZ:	include	"_maps\Platforms (GHZ).asm"
000087C8                            ; ---------------------------------------------------------------------------
000087C8                            ; Sprite mappings - GHZ	platforms
000087C8                            ; ---------------------------------------------------------------------------
000087C8                            Map_Plat_GHZ_internal:
000087C8 0000                       		dc.w @small-Map_Plat_GHZ_internal
000087CA 0000                       		dc.w @large-Map_Plat_GHZ_internal
000087CC 04                         @small:		dc.b 4
000087CD F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
000087D2 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
000087D7 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
000087DC F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
000087E1 0A                         @large:		dc.b $A
000087E2 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000087E7 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000087EC 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000087F1 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000087F6 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000087FB F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008800 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008805 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000880A 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000880F 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008814                            		even
00008814                            		even
00008814                            Map_Plat_SYZ:	include	"_maps\Platforms (SYZ).asm"
00008814                            ; ---------------------------------------------------------------------------
00008814                            ; Sprite mappings - SYZ	platforms
00008814                            ; ---------------------------------------------------------------------------
00008814                            Map_Plat_SYZ_internal:
00008814 0000                       		dc.w @platform-Map_Plat_SYZ_internal
00008816 03                         @platform:	dc.b 3
00008817 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000881C F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008821 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008826                            		even
00008826                            		even
00008826                            Map_Plat_SLZ:	include	"_maps\Platforms (SLZ).asm"
00008826                            ; ---------------------------------------------------------------------------
00008826                            ; Sprite mappings - SLZ	platforms
00008826                            ; ---------------------------------------------------------------------------
00008826                            Map_Plat_SLZ_internal:
00008826 0000                       		dc.w @platform-Map_Plat_SLZ_internal
00008828 02                         @platform:	dc.b 2
00008829 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000882E F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
00008834 00                         		even
00008834 00                         		even
00008834                            		include	"_incObj\19.asm"
00008834                            ; ---------------------------------------------------------------------------
00008834                            ; Object 19 - blank
00008834                            ; ---------------------------------------------------------------------------
00008834                            

00008834                            Obj19:
00008834 4E75                       		rts	
00008834 4E75                       		rts	
00008836                            Map_GBall:	include	"_maps\GHZ Ball.asm"
00008836                            ; ---------------------------------------------------------------------------
00008836                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008836                            ; ---------------------------------------------------------------------------
00008836                            Map_GBall_internal:
00008836 0000                       		dc.w @shiny-Map_GBall_internal
00008838 0000                       		dc.w @check1-Map_GBall_internal
0000883A 0000                       		dc.w @check2-Map_GBall_internal
0000883C 0000                       		dc.w @check3-Map_GBall_internal
0000883E 06                         @shiny:		dc.b 6
0000883F F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008844 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008849 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000884E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00008853 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00008858 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000885D 04                         @check1:	dc.b 4
0000885E E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00008863 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00008868 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000886D 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00008872 04                         @check2:	dc.b 4
00008873 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00008878 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000887D 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00008882 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00008887 04                         @check3:	dc.b 4
00008888 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000888D E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008892 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008897 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000889C                            		even
0000889C                            		even
0000889C                            		include	"_incObj\1A Collapsing Ledge (part 1).asm"
0000889C                            ; ---------------------------------------------------------------------------
0000889C                            ; Object 1A - GHZ collapsing ledge
0000889C                            ; ---------------------------------------------------------------------------
0000889C                            

0000889C                            CollapseLedge:
0000889C 7000                       		moveq	#0,d0
0000889E 1028 0024                  		move.b	obRoutine(a0),d0
000088A2 323B 0000                  		move.w	Ledge_Index(pc,d0.w),d1
000088A6 4EFB 1000                  		jmp	Ledge_Index(pc,d1.w)
000088AA                            ; ===========================================================================
000088AA 0000 0000                  Ledge_Index:	dc.w Ledge_Main-Ledge_Index, Ledge_Touch-Ledge_Index
000088AE 0000 0000                  		dc.w Ledge_Collapse-Ledge_Index, Ledge_Display-Ledge_Index
000088B2 0000 0000                  		dc.w Ledge_Delete-Ledge_Index, Ledge_WalkOff-Ledge_Index
000088B6                            

000088B6 =00000038                  ledge_timedelay:	equ $38		; time between touching the ledge and it collapsing
000088B6 =0000003A                  ledge_collapse_flag:	equ $3A		; collapse flag
000088B6                            ; ===========================================================================
000088B6                            

000088B6                            Ledge_Main:	; Routine 0
000088B6 5428 0024                  		addq.b	#2,obRoutine(a0)
000088BA 217C 0000 0000 0004        		move.l	#Map_Ledge,obMap(a0)
000088C2 317C 4000 0002             		move.w	#$4000,obGfx(a0)
000088C8 0028 0004 0001             		ori.b	#4,obRender(a0)
000088CE 117C 0004 0018             		move.b	#4,obPriority(a0)
000088D4 117C 0007 0038             		move.b	#7,ledge_timedelay(a0) ; set time delay for collapse
000088DA 117C 0064 0019             		move.b	#$64,obActWid(a0)
000088E0 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
000088E6 117C 0038 0016             		move.b	#$38,obHeight(a0)
000088EC 08E8 0004 0001             		bset	#4,obRender(a0)
000088F2                            

000088F2                            Ledge_Touch:	; Routine 2
000088F2 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
000088F6 6700                       		beq.s	@slope		; if not, branch
000088F8 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time reached zero?
000088FC 6700 0000                  		beq.w	Ledge_Fragment	; if yes, branch
00008900 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00008904                            

00008904                            	@slope:
00008904 323C 0030                  		move.w	#$30,d1
00008908 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
0000890E 6100 F29C                  		bsr.w	SlopeObject
00008912 6000 0000                  		bra.w	RememberState
00008916                            ; ===========================================================================
00008916                            

00008916                            Ledge_Collapse:	; Routine 4
00008916 4A28 0038                  		tst.b	ledge_timedelay(a0)
0000891A 6700 0000                  		beq.w	loc_847A
0000891E 117C 0001 003A             		move.b	#1,ledge_collapse_flag(a0)	; set collapse flag
00008924 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00008928                            

00008928                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008928                            

00008928                            

00008928                            Ledge_WalkOff:	; Routine $A
00008928 323C 0030                  		move.w	#$30,d1
0000892C 6100 F31E                  		bsr.w	ExitPlatform
00008930 323C 0030                  		move.w	#$30,d1
00008934 45F9 0000 0000             		lea	(Ledge_SlopeData).l,a2
0000893A 3428 0008                  		move.w	obX(a0),d2
0000893E 6100 0000                  		bsr.w	SlopeObject2
00008942 6000 0000                  		bra.w	RememberState
00008946                            ; End of function Ledge_WalkOff
00008946                            

00008946                            ; ===========================================================================
00008946                            

00008946                            Ledge_Display:	; Routine 6
00008946 4A28 0038                  		tst.b	ledge_timedelay(a0)	; has time delay reached zero?
0000894A 6700                       		beq.s	Ledge_TimeZero	; if yes, branch
0000894C 4A28 003A                  		tst.b	ledge_collapse_flag(a0)	; is ledge collapsing?
00008950 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00008954 5328 0038                  		subq.b	#1,ledge_timedelay(a0) ; subtract 1 from time
00008958 6000 0000                  		bra.w	DisplaySprite
0000895C                            ; ===========================================================================
0000895C                            

0000895C                            loc_82D0:
0000895C 5328 0038                  		subq.b	#1,ledge_timedelay(a0)
00008960 6100 FFC6                  		bsr.w	Ledge_WalkOff
00008964 43F8 D000                  		lea	(v_player).w,a1
00008968 0829 0003 0022             		btst	#3,obStatus(a1)
0000896E 6700                       		beq.s	loc_82FC
00008970 4A28 0038                  		tst.b	ledge_timedelay(a0)
00008974 6600                       		bne.s	locret_8308
00008976 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000897C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00008982 137C 0001 001D             		move.b	#1,obNextAni(a1)
00008988                            

00008988                            loc_82FC:
00008988 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
0000898E 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "Ledge_Display" routine
00008994                            

00008994                            locret_8308:
00008994 4E75                       		rts	
00008996                            ; ===========================================================================
00008996                            

00008996                            Ledge_TimeZero:
00008996 6100 0000                  		bsr.w	ObjectFall
0000899A 6100 0000                  		bsr.w	DisplaySprite
0000899E 4A28 0001                  		tst.b	obRender(a0)
000089A2 6A00                       		bpl.s	Ledge_Delete
000089A4 4E75                       		rts	
000089A6                            ; ===========================================================================
000089A6                            

000089A6                            Ledge_Delete:	; Routine 8
000089A6 6100 0000                  		bsr.w	DeleteObject
000089AA 4E75                       		rts	
000089AA 4E75                       		rts	
000089AC                            		include	"_incObj\53 Collapsing Floors.asm"
000089AC                            ; ---------------------------------------------------------------------------
000089AC                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000089AC                            ; ---------------------------------------------------------------------------
000089AC                            

000089AC                            CollapseFloor:
000089AC 7000                       		moveq	#0,d0
000089AE 1028 0024                  		move.b	obRoutine(a0),d0
000089B2 323B 0000                  		move.w	CFlo_Index(pc,d0.w),d1
000089B6 4EFB 1000                  		jmp	CFlo_Index(pc,d1.w)
000089BA                            ; ===========================================================================
000089BA 0000 0000                  CFlo_Index:	dc.w CFlo_Main-CFlo_Index, CFlo_Touch-CFlo_Index
000089BE 0000 0000                  		dc.w CFlo_Collapse-CFlo_Index, CFlo_Display-CFlo_Index
000089C2 0000 0000                  		dc.w CFlo_Delete-CFlo_Index, CFlo_WalkOff-CFlo_Index
000089C6                            

000089C6 =00000038                  cflo_timedelay:		equ $38
000089C6 =0000003A                  cflo_collapse_flag:	equ $3A
000089C6                            ; ===========================================================================
000089C6                            

000089C6                            CFlo_Main:	; Routine 0
000089C6 5428 0024                  		addq.b	#2,obRoutine(a0)
000089CA 217C 0000 0000 0004        		move.l	#Map_CFlo,obMap(a0)
000089D2 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000089D8 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; check if level is SLZ
000089DE 6600                       		bne.s	@notSLZ
000089E0                            

000089E0 317C 44E0 0002             		move.w	#$44E0,obGfx(a0) ; SLZ specific code
000089E6 5428 001A                  		addq.b	#2,obFrame(a0)
000089EA                            

000089EA                            	@notSLZ:
000089EA 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000089F0 6600                       		bne.s	@notSBZ
000089F2 317C 43F5 0002             		move.w	#$43F5,obGfx(a0) ; SBZ specific code
000089F8                            

000089F8                            	@notSBZ:
000089F8 0028 0004 0001             		ori.b	#4,obRender(a0)
000089FE 117C 0004 0018             		move.b	#4,obPriority(a0)
00008A04 117C 0007 0038             		move.b	#7,cflo_timedelay(a0)
00008A0A 117C 0044 0019             		move.b	#$44,obActWid(a0)
00008A10                            

00008A10                            CFlo_Touch:	; Routine 2
00008A10 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00008A14 6700                       		beq.s	@solid		; if not, branch
00008A16 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00008A1A 6700 0000                  		beq.w	CFlo_Fragment	; if yes, branch
00008A1E 5328 0038                  		subq.b	#1,cflo_timedelay(a0) ; subtract 1 from time
00008A22                            

00008A22                            	@solid:
00008A22 323C 0020                  		move.w	#$20,d1
00008A26 6100 F0B0                  		bsr.w	PlatformObject
00008A2A 4A28 0028                  		tst.b	obSubtype(a0)
00008A2E 6A00                       		bpl.s	@remstate
00008A30 0829 0003 0022             		btst	#3,obStatus(a1)
00008A36 6700                       		beq.s	@remstate
00008A38 08A8 0000 0001             		bclr	#0,obRender(a0)
00008A3E 3029 0008                  		move.w	obX(a1),d0
00008A42 9068 0008                  		sub.w	obX(a0),d0
00008A46 6400                       		bcc.s	@remstate
00008A48 08E8 0000 0001             		bset	#0,obRender(a0)
00008A4E                            

00008A4E                            	@remstate:
00008A4E 6000 0000                  		bra.w	RememberState
00008A52                            ; ===========================================================================
00008A52                            

00008A52                            CFlo_Collapse:	; Routine 4
00008A52 4A28 0038                  		tst.b	cflo_timedelay(a0)
00008A56 6700 0000                  		beq.w	loc_8458
00008A5A 117C 0001 003A             		move.b	#1,cflo_collapse_flag(a0)	; set object as	"touched"
00008A60 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00008A64                            

00008A64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A64                            

00008A64                            

00008A64                            CFlo_WalkOff:	; Routine $A
00008A64 323C 0020                  		move.w	#$20,d1
00008A68 6100 F1E2                  		bsr.w	ExitPlatform
00008A6C 3428 0008                  		move.w	obX(a0),d2
00008A70 6100 F748                  		bsr.w	MvSonicOnPtfm2
00008A74 6000 0000                  		bra.w	RememberState
00008A78                            ; End of function CFlo_WalkOff
00008A78                            

00008A78                            ; ===========================================================================
00008A78                            

00008A78                            CFlo_Display:	; Routine 6
00008A78 4A28 0038                  		tst.b	cflo_timedelay(a0)	; has time delay reached zero?
00008A7C 6700                       		beq.s	CFlo_TimeZero	; if yes, branch
00008A7E 4A28 003A                  		tst.b	cflo_collapse_flag(a0)	; has Sonic touched the	object?
00008A82 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008A86 5328 0038                  		subq.b	#1,cflo_timedelay(a0); subtract 1 from time
00008A8A 6000 0000                  		bra.w	DisplaySprite
00008A8E                            ; ===========================================================================
00008A8E                            

00008A8E                            loc_8402:
00008A8E 5328 0038                  		subq.b	#1,cflo_timedelay(a0)
00008A92 6100 FFD0                  		bsr.w	CFlo_WalkOff
00008A96 43F8 D000                  		lea	(v_player).w,a1
00008A9A 0829 0003 0022             		btst	#3,obStatus(a1)
00008AA0 6700                       		beq.s	loc_842E
00008AA2 4A28 0038                  		tst.b	cflo_timedelay(a0)
00008AA6 6600                       		bne.s	locret_843A
00008AA8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00008AAE 08A9 0005 0022             		bclr	#5,obStatus(a1)
00008AB4 137C 0001 001D             		move.b	#1,obNextAni(a1)
00008ABA                            

00008ABA                            loc_842E:
00008ABA 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00008AC0 117C 0006 0024             		move.b	#6,obRoutine(a0) ; run "CFlo_Display" routine
00008AC6                            

00008AC6                            locret_843A:
00008AC6 4E75                       		rts	
00008AC8                            ; ===========================================================================
00008AC8                            

00008AC8                            CFlo_TimeZero:
00008AC8 6100 0000                  		bsr.w	ObjectFall
00008ACC 6100 0000                  		bsr.w	DisplaySprite
00008AD0 4A28 0001                  		tst.b	obRender(a0)
00008AD4 6A00                       		bpl.s	CFlo_Delete
00008AD6 4E75                       		rts	
00008AD8                            ; ===========================================================================
00008AD8                            

00008AD8                            CFlo_Delete:	; Routine 8
00008AD8 6100 0000                  		bsr.w	DeleteObject
00008ADC 4E75                       		rts	
00008ADE                            ; ===========================================================================
00008ADE                            

00008ADE                            CFlo_Fragment:
00008ADE 117C 0000 003A             		move.b	#0,cflo_collapse_flag(a0)
00008AE4                            

00008AE4                            loc_8458:
00008AE4 49F9 0000 0000             		lea	(CFlo_Data2).l,a4
00008AEA 0828 0000 0028             		btst	#0,obSubtype(a0)
00008AF0 6700                       		beq.s	loc_846C
00008AF2 49F9 0000 0000             		lea	(CFlo_Data3).l,a4
00008AF8                            

00008AF8                            loc_846C:
00008AF8 7207                       		moveq	#7,d1
00008AFA 5228 001A                  		addq.b	#1,obFrame(a0)
00008AFE 6000                       		bra.s	loc_8486
00008AFE 6000                       		bra.s	loc_8486
00008B00                            

00008B00                            ; ===========================================================================
00008B00                            

00008B00                            Ledge_Fragment:
00008B00 117C 0000 003A             		move.b	#0,ledge_collapse_flag(a0)
00008B06                            

00008B06                            loc_847A:
00008B06 49F9 0000 0000             		lea	(CFlo_Data1).l,a4
00008B0C 7218                       		moveq	#$18,d1
00008B0E 5428 001A                  		addq.b	#2,obFrame(a0)
00008B12                            

00008B12                            loc_8486:
00008B12 7000                       		moveq	#0,d0
00008B14 1028 001A                  		move.b	obFrame(a0),d0
00008B18 D040                       		add.w	d0,d0
00008B1A 2668 0004                  		movea.l	obMap(a0),a3
00008B1E D6F3 0000                  		adda.w	(a3,d0.w),a3
00008B22 524B                       		addq.w	#1,a3
00008B24 08E8 0005 0001             		bset	#5,obRender(a0)
00008B2A 1828 0000                  		move.b	0(a0),d4
00008B2E 1A28 0001                  		move.b	obRender(a0),d5
00008B32 2248                       		movea.l	a0,a1
00008B34 6000                       		bra.s	loc_84B2
00008B36                            ; ===========================================================================
00008B36                            

00008B36                            loc_84AA:
00008B36 6100 0000                  		bsr.w	FindFreeObj
00008B3A 6600                       		bne.s	loc_84F2
00008B3C 5A4B                       		addq.w	#5,a3
00008B3E                            

00008B3E                            loc_84B2:
00008B3E 137C 0006 0024             		move.b	#6,obRoutine(a1)
00008B44 1344 0000                  		move.b	d4,0(a1)
00008B48 234B 0004                  		move.l	a3,obMap(a1)
00008B4C 1345 0001                  		move.b	d5,obRender(a1)
00008B50 3368 0008 0008             		move.w	obX(a0),obX(a1)
00008B56 3368 000C 000C             		move.w	obY(a0),obY(a1)
00008B5C 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00008B62 1368 0018 0018             		move.b	obPriority(a0),obPriority(a1)
00008B68 1368 0019 0019             		move.b	obActWid(a0),obActWid(a1)
00008B6E 135C 0038                  		move.b	(a4)+,ledge_timedelay(a1)
00008B72 B3C8                       		cmpa.l	a0,a1
00008B74 6400                       		bhs.s	loc_84EE
00008B76 6100 0000                  		bsr.w	DisplaySprite1
00008B7A                            

00008B7A                            loc_84EE:
00008B7A 51C9 FFBA                  		dbf	d1,loc_84AA
00008B7E                            

00008B7E                            loc_84F2:
00008B7E 6100 0000                  		bsr.w	DisplaySprite
00008B82 303C 0000                  		move.w	#sfx_Collapse,d0
00008B86 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	; play collapsing sound
00008B8C                            ; ===========================================================================
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008B8C                            ; ---------------------------------------------------------------------------
00008B8C 1C18 1410 1A16 120E 0A06+  CFlo_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008B9C 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008BA6 1E16 0E06 1A12 0A02        CFlo_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008BAE 161E 1A12 060E 0A02        CFlo_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008BB6                            

00008BB6                            ; ---------------------------------------------------------------------------
00008BB6                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008BB6                            ; ---------------------------------------------------------------------------
00008BB6                            

00008BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BB6                            

00008BB6                            

00008BB6                            SlopeObject2:
00008BB6 43F8 D000                  		lea	(v_player).w,a1
00008BBA 0829 0003 0022             		btst	#3,obStatus(a1)
00008BC0 6700                       		beq.s	locret_856E
00008BC2 3029 0008                  		move.w	obX(a1),d0
00008BC6 9068 0008                  		sub.w	obX(a0),d0
00008BCA D041                       		add.w	d1,d0
00008BCC E248                       		lsr.w	#1,d0
00008BCE 0828 0000 0001             		btst	#0,obRender(a0)
00008BD4 6700                       		beq.s	loc_854E
00008BD6 4640                       		not.w	d0
00008BD8 D041                       		add.w	d1,d0
00008BDA                            

00008BDA                            loc_854E:
00008BDA 7200                       		moveq	#0,d1
00008BDC 1232 0000                  		move.b	(a2,d0.w),d1
00008BE0 3028 000C                  		move.w	obY(a0),d0
00008BE4 9041                       		sub.w	d1,d0
00008BE6 7200                       		moveq	#0,d1
00008BE8 1229 0016                  		move.b	obHeight(a1),d1
00008BEC 9041                       		sub.w	d1,d0
00008BEE 3340 000C                  		move.w	d0,obY(a1)
00008BF2 9468 0008                  		sub.w	obX(a0),d2
00008BF6 9569 0008                  		sub.w	d2,obX(a1)
00008BFA                            

00008BFA                            locret_856E:
00008BFA 4E75                       		rts	
00008BFC                            ; End of function SlopeObject2
00008BFC                            

00008BFC                            ; ===========================================================================
00008BFC                            ; ---------------------------------------------------------------------------
00008BFC                            ; Collision data for GHZ collapsing ledge
00008BFC                            ; ---------------------------------------------------------------------------
00008BFC                            Ledge_SlopeData:
00008BFC                            		incbin	"misc\GHZ Collapsing Ledge Heightmap.bin"
00008C2C                            		even
00008C2C                            

00008C2C                            Map_Ledge:	include	"_maps\Collapsing Ledge.asm"
00008C2C                            ; ---------------------------------------------------------------------------
00008C2C                            ; Sprite mappings - GHZ	collapsing ledge
00008C2C                            ; ---------------------------------------------------------------------------
00008C2C                            Map_Ledge_internal:
00008C2C 0000                       		dc.w @left-Map_Ledge_internal
00008C2E 0000                       		dc.w @right-Map_Ledge_internal
00008C30 0000                       		dc.w @leftsmash-Map_Ledge_internal
00008C32 0000                       		dc.w @rightsmash-Map_Ledge_internal
00008C34 10                         @left:		dc.b $10
00008C35 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008C3A D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C3F E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C44 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C49 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C4E D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008C53 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008C58 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008C5D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008C62 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008C67 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008C6C 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008C71 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008C76 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008C7B 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008C80 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008C85 10                         @right:		dc.b $10
00008C86 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008C8B D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C90 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C95 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C9A D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C9F D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008CA4 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008CA9 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008CAE F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CB3 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008CB8 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CBD 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CC2 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CC7 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008CCC 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008CD1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CD6 19                         @leftsmash:	dc.b $19
00008CD7 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008CDC C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008CE1 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008CE6 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008CEB E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008CF0 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008CF5 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008CFA E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008CFF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D04 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008D09 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D0E F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D13 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D18 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D1D F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D22 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008D27 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D2C 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D31 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D36 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D3B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D40 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008D45 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008D4A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008D4F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D54 19                         @rightsmash:	dc.b $19
00008D55 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008D5A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D5F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D64 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D69 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D6E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D73 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D78 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D7D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D82 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008D87 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D8C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D91 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D96 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D9B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008DA0 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008DA5 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008DAA 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008DAF 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008DB4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008DB9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008DBE 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008DC3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008DC8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008DCD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008DD2                            		even
00008DD2                            		even
00008DD2                            Map_CFlo:	include	"_maps\Collapsing Floors.asm"
00008DD2                            ; ---------------------------------------------------------------------------
00008DD2                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008DD2                            ; ---------------------------------------------------------------------------
00008DD2                            Map_CFlo_internal:
00008DD2 0000                       		dc.w byte_874E-Map_CFlo_internal
00008DD4 0000                       		dc.w byte_8763-Map_CFlo_internal
00008DD6 0000                       		dc.w byte_878C-Map_CFlo_internal
00008DD8 0000                       		dc.w byte_87A1-Map_CFlo_internal
00008DDA 04                         byte_874E:	dc.b 4
00008DDB F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008DE0 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008DE5 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008DEA 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008DEF 08                         byte_8763:	dc.b 8
00008DF0 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008DF5 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008DFA F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008DFF F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008E04 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008E09 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008E0E 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008E13 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008E18 04                         byte_878C:	dc.b 4
00008E19 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008E1E 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008E23 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E28 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008E2D 08                         byte_87A1:	dc.b 8
00008E2E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E33 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008E38 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E3D F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008E42 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008E47 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008E4C 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008E51 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008E56                            		even
00008E56                            		even
00008E56                            

00008E56                            		include	"_incObj\1C Scenery.asm"
00008E56                            ; ---------------------------------------------------------------------------
00008E56                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008E56                            ; ---------------------------------------------------------------------------
00008E56                            

00008E56                            Scenery:
00008E56 7000                       		moveq	#0,d0
00008E58 1028 0024                  		move.b	obRoutine(a0),d0
00008E5C 323B 0000                  		move.w	Scen_Index(pc,d0.w),d1
00008E60 4EFB 1000                  		jmp	Scen_Index(pc,d1.w)
00008E64                            ; ===========================================================================
00008E64 0000                       Scen_Index:	dc.w Scen_Main-Scen_Index
00008E66 0000                       		dc.w Scen_ChkDel-Scen_Index
00008E68                            ; ===========================================================================
00008E68                            

00008E68                            Scen_Main:	; Routine 0
00008E68 5428 0024                  		addq.b	#2,obRoutine(a0)
00008E6C 7000                       		moveq	#0,d0
00008E6E 1028 0028                  		move.b	obSubtype(a0),d0 ; copy object subtype to d0
00008E72 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008E76 43FB 0000                  		lea	Scen_Values(pc,d0.w),a1
00008E7A 2159 0004                  		move.l	(a1)+,obMap(a0)
00008E7E 3159 0002                  		move.w	(a1)+,obGfx(a0)
00008E82 0028 0004 0001             		ori.b	#4,obRender(a0)
00008E88 1159 001A                  		move.b	(a1)+,obFrame(a0)
00008E8C 1159 0019                  		move.b	(a1)+,obActWid(a0)
00008E90 1159 0018                  		move.b	(a1)+,obPriority(a0)
00008E94 1159 0020                  		move.b	(a1)+,obColType(a0)
00008E98                            

00008E98                            Scen_ChkDel:	; Routine 2
00008EB6 6000 0000                  		bra.w	DisplaySprite
00008EBA                            ; ===========================================================================
00008EBA                            ; ---------------------------------------------------------------------------
00008EBA                            ; Variables for	object $1C are stored in an array
00008EBA                            ; ---------------------------------------------------------------------------
00008EBA 0000 0000                  Scen_Values:	dc.l Map_Scen		; mappings address
00008EBE 44D8                       		dc.w $44D8		; VRAM setting
00008EC0 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008EC4 0000 0000                  		dc.l Map_Scen
00008EC8 44D8                       		dc.w $44D8
00008ECA 0008 0200                  		dc.b 0,	8, 2, 0
00008ECE 0000 0000                  		dc.l Map_Scen
00008ED2 44D8                       		dc.w $44D8
00008ED4 0008 0200                  		dc.b 0,	8, 2, 0
00008ED8 0000 7FC0                  		dc.l Map_Bri
00008EDC 438E                       		dc.w $438E
00008EDE 0110 0100                  		dc.b 1,	$10, 1,	0
00008EE2                            		even
00008EE2                            		even
00008EE2                            Map_Scen:	include	"_maps\Scenery.asm"
00008EE2                            ; ---------------------------------------------------------------------------
00008EE2                            ; Sprite mappings - SLZ	lava thrower
00008EE2                            ; ---------------------------------------------------------------------------
00008EE2                            Map_Scen_internal:
00008EE2 0000                       		dc.w byte_8858-Map_Scen_internal
00008EE4 01                         byte_8858:	dc.b 1
00008EE5 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008EEA                            		even
00008EEA                            		even
00008EEA                            

00008EEA                            		include	"_incObj\1D Unused Switch.asm"
00008EEA                            ; ---------------------------------------------------------------------------
00008EEA                            ; Object 1D - switch that activates when Sonic touches it
00008EEA                            ; (this	is not used anywhere in	the game)
00008EEA                            ; ---------------------------------------------------------------------------
00008EEA                            

00008EEA                            MagicSwitch:
00008EEA 7000                       		moveq	#0,d0
00008EEC 1028 0024                  		move.b	obRoutine(a0),d0
00008EF0 323B 0000                  		move.w	Swi_Index(pc,d0.w),d1
00008EF4 4EFB 1000                  		jmp	Swi_Index(pc,d1.w)
00008EF8                            ; ===========================================================================
00008EF8 0000                       Swi_Index:	dc.w Swi_Main-Swi_Index
00008EFA 0000                       		dc.w Swi_Action-Swi_Index
00008EFC 0000                       		dc.w Swi_Delete-Swi_Index
00008EFE                            

00008EFE =00000030                  swi_origY:	equ $30		; original y-axis position
00008EFE                            ; ===========================================================================
00008EFE                            

00008EFE                            Swi_Main:	; Routine 0
00008EFE 5428 0024                  		addq.b	#2,obRoutine(a0)
00008F02 217C 0000 0000 0004        		move.l	#Map_Swi,obMap(a0)
00008F0A 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00008F10 117C 0004 0001             		move.b	#4,obRender(a0)
00008F16 3168 000C 0030             		move.w	obY(a0),swi_origY(a0) ; save position on y-axis
00008F1C 117C 0010 0019             		move.b	#$10,obActWid(a0)
00008F22 117C 0005 0018             		move.b	#5,obPriority(a0)
00008F28                            

00008F28                            Swi_Action:	; Routine 2
00008F28 3168 0030 000C             		move.w	swi_origY(a0),obY(a0) ; restore position on y-axis
00008F2E 323C 0010                  		move.w	#$10,d1
00008F32 6100 0000                  		bsr.w	Swi_ChkTouch	; check if Sonic touches the switch
00008F36 6700                       		beq.s	Swi_ChkDel	; if not, branch
00008F38                            

00008F38 5468 000C                  		addq.w	#2,obY(a0)	; move object 2	pixels
00008F3C 7001                       		moveq	#1,d0
00008F3E 31C0 F7E0                  		move.w	d0,(f_switch).w	; set switch 0 as "pressed"
00008F42                            

00008F42                            Swi_ChkDel:
00008F42 6100 0000                  		bsr.w	DisplaySprite
00008F64 4E75                       		rts	
00008F66                            ; ===========================================================================
00008F66                            

00008F66                            Swi_Delete:	; Routine 4
00008F66 6100 0000                  		bsr.w	DeleteObject
00008F6A 4E75                       		rts	
00008F6C                            

00008F6C                            ; ---------------------------------------------------------------------------
00008F6C                            ; Subroutine to	check if Sonic touches the object
00008F6C                            ; ---------------------------------------------------------------------------
00008F6C                            

00008F6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008F6C                            

00008F6C                            

00008F6C                            Swi_ChkTouch:
00008F6C 43F8 D000                  		lea	(v_player).w,a1
00008F70 3029 0008                  		move.w	obX(a1),d0
00008F74 9068 0008                  		sub.w	obX(a0),d0
00008F78 D041                       		add.w	d1,d0
00008F7A 6B00                       		bmi.s	Swi_NoTouch
00008F7C D241                       		add.w	d1,d1
00008F7E B041                       		cmp.w	d1,d0
00008F80 6400                       		bcc.s	Swi_NoTouch
00008F82 3429 000C                  		move.w	obY(a1),d2
00008F86 1229 0016                  		move.b	obHeight(a1),d1
00008F8A 4881                       		ext.w	d1
00008F8C D242                       		add.w	d2,d1
00008F8E 3028 000C                  		move.w	obY(a0),d0
00008F92 0440 0010                  		subi.w	#$10,d0
00008F96 9041                       		sub.w	d1,d0
00008F98 6200                       		bhi.s	Swi_NoTouch
00008F9A 0C40 FFF0                  		cmpi.w	#-$10,d0
00008F9E 6500                       		bcs.s	Swi_NoTouch
00008FA0 70FF                       		moveq	#-1,d0		; Sonic has touched it
00008FA2 4E75                       		rts	
00008FA4                            ; ===========================================================================
00008FA4                            

00008FA4                            Swi_NoTouch:
00008FA4 7000                       		moveq	#0,d0		; Sonic hasn't touched it
00008FA6 4E75                       		rts	
00008FA8                            ; End of function Swi_ChkTouch
00008FA8                            ; End of function Swi_ChkTouch
00008FA8                            Map_Swi:	include	"_maps\Unused Switch.asm"
00008FA8                            ; ---------------------------------------------------------------------------
00008FA8                            ; Sprite mappings - Unused switch thingy
00008FA8                            ; ---------------------------------------------------------------------------
00008FA8                            Map_Swi_internal:
00008FA8 0000                       		dc.w byte_891E-Map_Swi_internal
00008FAA 04                         byte_891E:	dc.b 4
00008FAB E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008FB0 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008FB5 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008FBA 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008FC0 00                         		even
00008FC0 00                         		even
00008FC0                            

00008FC0                            		include	"_incObj\2A SBZ Small Door.asm"
00008FC0                            ; ---------------------------------------------------------------------------
00008FC0                            ; Object 2A - small vertical door (SBZ)
00008FC0                            ; ---------------------------------------------------------------------------
00008FC0                            

00008FC0                            AutoDoor:
00008FC0 7000                       		moveq	#0,d0
00008FC2 1028 0024                  		move.b	obRoutine(a0),d0
00008FC6 323B 0000                  		move.w	ADoor_Index(pc,d0.w),d1
00008FCA 4EFB 1000                  		jmp	ADoor_Index(pc,d1.w)
00008FCE                            ; ===========================================================================
00008FCE 0000                       ADoor_Index:	dc.w ADoor_Main-ADoor_Index
00008FD0 0000                       		dc.w ADoor_OpenShut-ADoor_Index
00008FD2                            ; ===========================================================================
00008FD2                            

00008FD2                            ADoor_Main:	; Routine 0
00008FD2 5428 0024                  		addq.b	#2,obRoutine(a0)
00008FD6 217C 0000 0000 0004        		move.l	#Map_ADoor,obMap(a0)
00008FDE 317C 42E8 0002             		move.w	#$42E8,obGfx(a0)
00008FE4 0028 0004 0001             		ori.b	#4,obRender(a0)
00008FEA 117C 0008 0019             		move.b	#8,obActWid(a0)
00008FF0 117C 0004 0018             		move.b	#4,obPriority(a0)
00008FF6                            

00008FF6                            ADoor_OpenShut:	; Routine 2
00008FF6 323C 0040                  		move.w	#$40,d1		; set range for door detection
00008FFA 4228 001C                  		clr.b	obAnim(a0)	; use "closing"	animation
00008FFE 3038 D008                  		move.w	(v_player+obX).w,d0
00009002 D041                       		add.w	d1,d0
00009004 B068 0008                  		cmp.w	obX(a0),d0
00009008 6500                       		bcs.s	ADoor_Animate
0000900A 9041                       		sub.w	d1,d0
0000900C 9041                       		sub.w	d1,d0
0000900E B068 0008                  		cmp.w	obX(a0),d0	; is Sonic > $40 pixels from door?
00009012 6400                       		bcc.s	ADoor_Animate	; close door
00009014 D041                       		add.w	d1,d0
00009016 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic left of the door?
0000901A 6400                       		bcc.s	loc_899A	; if yes, branch
0000901C 0828 0000 0022             		btst	#0,obStatus(a0)
00009022 6600                       		bne.s	ADoor_Animate
00009024 6000                       		bra.s	ADoor_Open
00009026                            ; ===========================================================================
00009026                            

00009026                            loc_899A:
00009026 0828 0000 0022             		btst	#0,obStatus(a0)
0000902C 6700                       		beq.s	ADoor_Animate
0000902E                            

0000902E                            ADoor_Open:
0000902E 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "opening"	animation
00009034                            

00009034                            ADoor_Animate:
00009034 43F9 0000 0000             		lea	(Ani_ADoor).l,a1
0000903A 6100 0000                  		bsr.w	AnimateSprite
0000903E 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
00009042 6600                       		bne.s	@remember	; if yes, branch
00009044 323C 0011                  		move.w	#$11,d1
00009048 343C 0020                  		move.w	#$20,d2
0000904C 3602                       		move.w	d2,d3
0000904E 5243                       		addq.w	#1,d3
00009050 3828 0008                  		move.w	obX(a0),d4
00009054 6100 0000                  		bsr.w	SolidObject
00009058                            

00009058                            	@remember:
00009058 6000 0000                  		bra.w	RememberState
00009058 6000 0000                  		bra.w	RememberState
0000905C                            		include	"_anim\SBZ Small Door.asm"
0000905C                            ; ---------------------------------------------------------------------------
0000905C                            ; Animation script - doors (SBZ)
0000905C                            ; ---------------------------------------------------------------------------
0000905C 0000                       Ani_ADoor:	dc.w @close-Ani_ADoor
0000905E 0000                       		dc.w @open-Ani_ADoor
00009060 0008 0706 0504 0302 0100+  @close:		dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, afBack, 1
0000906C 0000 0102 0304 0506 0708+  @open:		dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, afBack, 1
00009078                            		even
00009078                            		even
00009078                            Map_ADoor:	include	"_maps\SBZ Small Door.asm"
00009078                            ; ---------------------------------------------------------------------------
00009078                            ; Sprite mappings - doors (SBZ)
00009078                            ; ---------------------------------------------------------------------------
00009078                            Map_ADoor_internal:
00009078 0000                       		dc.w @closed-Map_ADoor_internal
0000907A 0000                       		dc.w @01-Map_ADoor_internal
0000907C 0000                       		dc.w @02-Map_ADoor_internal
0000907E 0000                       		dc.w @03-Map_ADoor_internal
00009080 0000                       		dc.w @04-Map_ADoor_internal
00009082 0000                       		dc.w @05-Map_ADoor_internal
00009084 0000                       		dc.w @06-Map_ADoor_internal
00009086 0000                       		dc.w @07-Map_ADoor_internal
00009088 0000                       		dc.w @open-Map_ADoor_internal
0000908A 02                         @closed:	dc.b 2
0000908B E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00009090 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00009095 02                         @01:		dc.b 2
00009096 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
0000909B 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000090A0 02                         @02:		dc.b 2
000090A1 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000090A6 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000090AB 02                         @03:		dc.b 2
000090AC D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000090B1 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000090B6 02                         @04:		dc.b 2
000090B7 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000090BC 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000090C1 02                         @05:		dc.b 2
000090C2 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000090C7 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000090CC 02                         @06:		dc.b 2
000090CD C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000090D2 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000090D7 02                         @07:		dc.b 2
000090D8 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000090DD 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000090E2 02                         @open:		dc.b 2
000090E3 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000090E8 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000090EE 00                         		even
000090EE 00                         		even
000090EE                            

000090EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000090EE                            

000090EE                            

000090EE                            Obj44_SolidWall:
000090EE 6100 0000                  		bsr.w	Obj44_SolidWall2
000090F2 6700                       		beq.s	loc_8AA8
000090F4 6B00 0000                  		bmi.w	loc_8AC4
000090F8 4A40                       		tst.w	d0
000090FA 6700 0000                  		beq.w	loc_8A92
000090FE 6B00                       		bmi.s	loc_8A7C
00009100 4A69 0010                  		tst.w	obVelX(a1)
00009104 6B00                       		bmi.s	loc_8A92
00009106 6000                       		bra.s	loc_8A82
00009108                            ; ===========================================================================
00009108                            

00009108                            loc_8A7C:
00009108 4A69 0010                  		tst.w	obVelX(a1)
0000910C 6A00                       		bpl.s	loc_8A92
0000910E                            

0000910E                            loc_8A82:
0000910E 9169 0008                  		sub.w	d0,obX(a1)
00009112 337C 0000 0014             		move.w	#0,obInertia(a1)
00009118 337C 0000 0010             		move.w	#0,obVelX(a1)
0000911E                            

0000911E                            loc_8A92:
0000911E 0829 0001 0022             		btst	#1,obStatus(a1)
00009124 6600                       		bne.s	loc_8AB6
00009126 08E9 0005 0022             		bset	#5,obStatus(a1)
0000912C 08E8 0005 0022             		bset	#5,obStatus(a0)
00009132 4E75                       		rts	
00009134                            ; ===========================================================================
00009134                            

00009134                            loc_8AA8:
00009134 0828 0005 0022             		btst	#5,obStatus(a0)
0000913A 6700                       		beq.s	locret_8AC2
0000913C 337C 0000 001C             		move.w	#id_Run,obAnim(a1)
00009142                            

00009142                            loc_8AB6:
00009142 08A8 0005 0022             		bclr	#5,obStatus(a0)
00009148 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000914E                            

0000914E                            locret_8AC2:
0000914E 4E75                       		rts	
00009150                            ; ===========================================================================
00009150                            

00009150                            loc_8AC4:
00009150 4A69 0012                  		tst.w	obVelY(a1)
00009154 6A00                       		bpl.s	locret_8AD8
00009156 4A43                       		tst.w	d3
00009158 6A00                       		bpl.s	locret_8AD8
0000915A 9769 000C                  		sub.w	d3,obY(a1)
0000915E 337C 0000 0012             		move.w	#0,obVelY(a1)
00009164                            

00009164                            locret_8AD8:
00009164 4E75                       		rts	
00009166                            ; End of function Obj44_SolidWall
00009166                            

00009166                            

00009166                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009166                            

00009166                            

00009166                            Obj44_SolidWall2:
00009166 43F8 D000                  		lea	(v_player).w,a1
0000916A 3029 0008                  		move.w	obX(a1),d0
0000916E 9068 0008                  		sub.w	obX(a0),d0
00009172 D041                       		add.w	d1,d0
00009174 6B00                       		bmi.s	loc_8B48
00009176 3601                       		move.w	d1,d3
00009178 D643                       		add.w	d3,d3
0000917A B043                       		cmp.w	d3,d0
0000917C 6200                       		bhi.s	loc_8B48
0000917E 1629 0016                  		move.b	obHeight(a1),d3
00009182 4883                       		ext.w	d3
00009184 D443                       		add.w	d3,d2
00009186 3629 000C                  		move.w	obY(a1),d3
0000918A 9668 000C                  		sub.w	obY(a0),d3
0000918E D642                       		add.w	d2,d3
00009190 6B00                       		bmi.s	loc_8B48
00009192 3802                       		move.w	d2,d4
00009194 D844                       		add.w	d4,d4
00009196 B644                       		cmp.w	d4,d3
00009198 6400                       		bhs.s	loc_8B48
0000919A 4A38 F7C8                  		tst.b	(f_playerctrl).w
0000919E 6B00                       		bmi.s	loc_8B48
000091A0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
000091A6 6400                       		bhs.s	loc_8B48
000091A8 4A78 FE08                  		tst.w	(v_debuguse).w
000091AC 6600                       		bne.s	loc_8B48
000091AE 3A00                       		move.w	d0,d5
000091B0 B240                       		cmp.w	d0,d1
000091B2 6400                       		bhs.s	loc_8B30
000091B4 D241                       		add.w	d1,d1
000091B6 9041                       		sub.w	d1,d0
000091B8 3A00                       		move.w	d0,d5
000091BA 4445                       		neg.w	d5
000091BC                            

000091BC                            loc_8B30:
000091BC 3203                       		move.w	d3,d1
000091BE B443                       		cmp.w	d3,d2
000091C0 6400                       		bhs.s	loc_8B3C
000091C2 9644                       		sub.w	d4,d3
000091C4 3203                       		move.w	d3,d1
000091C6 4441                       		neg.w	d1
000091C8                            

000091C8                            loc_8B3C:
000091C8 BA41                       		cmp.w	d1,d5
000091CA 6200                       		bhi.s	loc_8B44
000091CC 7801                       		moveq	#1,d4
000091CE 4E75                       		rts	
000091D0                            ; ===========================================================================
000091D0                            

000091D0                            loc_8B44:
000091D0 78FF                       		moveq	#-1,d4
000091D2 4E75                       		rts	
000091D4                            ; ===========================================================================
000091D4                            

000091D4                            loc_8B48:
000091D4 7800                       		moveq	#0,d4
000091D6 4E75                       		rts	
000091D8                            ; End of function Obj44_SolidWall2
000091D8                            

000091D8                            ; ===========================================================================
000091D8                            

000091D8                            		include	"_incObj\1E Ball Hog.asm"
000091D8                            ; ---------------------------------------------------------------------------
000091D8                            ; Object 1E - Ball Hog enemy (SBZ)
000091D8                            ; ---------------------------------------------------------------------------
000091D8                            

000091D8                            BallHog:
000091D8 7000                       		moveq	#0,d0
000091DA 1028 0024                  		move.b	obRoutine(a0),d0
000091DE 323B 0000                  		move.w	Hog_Index(pc,d0.w),d1
000091E2 4EFB 1000                  		jmp	Hog_Index(pc,d1.w)
000091E6                            ; ===========================================================================
000091E6 0000                       Hog_Index:	dc.w Hog_Main-Hog_Index
000091E8 0000                       		dc.w Hog_Action-Hog_Index
000091EA                            

000091EA =00000032                  hog_launchflag:	equ $32		; 0 to launch a cannonball
000091EA                            ; ===========================================================================
000091EA                            

000091EA                            Hog_Main:	; Routine 0
000091EA 117C 0013 0016             		move.b	#$13,obHeight(a0)
000091F0 117C 0008 0017             		move.b	#8,obWidth(a0)
000091F6 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
000091FE 317C 2302 0002             		move.w	#$2302,obGfx(a0)
00009204 117C 0004 0001             		move.b	#4,obRender(a0)
0000920A 117C 0004 0018             		move.b	#4,obPriority(a0)
00009210 117C 0005 0020             		move.b	#5,obColType(a0)
00009216 117C 000C 0019             		move.b	#$C,obActWid(a0)
0000921C 6100 0000                  		bsr.w	ObjectFall
00009220 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
00009226 4A41                       		tst.w	d1
00009228 6A00                       		bpl.s	@floornotfound
0000922A D368 000C                  		add.w	d1,obY(a0)
0000922E 317C 0000 0012             		move.w	#0,obVelY(a0)
00009234 5428 0024                  		addq.b	#2,obRoutine(a0)
00009238                            

00009238                            	@floornotfound:
00009238 4E75                       		rts	
0000923A                            ; ===========================================================================
0000923A                            

0000923A                            Hog_Action:	; Routine 2
0000923A 43F9 0000 0000             		lea	(Ani_Hog).l,a1
00009240 6100 0000                  		bsr.w	AnimateSprite
00009244 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is final frame (01) displayed?
0000924A 6600                       		bne.s	@setlaunchflag	; if not, branch
0000924C 4A28 0032                  		tst.b	hog_launchflag(a0)	; is it	set to launch cannonball?
00009250 6700                       		beq.s	@makeball	; if yes, branch
00009252 6000                       		bra.s	@remember
00009254                            ; ===========================================================================
00009254                            

00009254                            @setlaunchflag:
00009254 4228 0032                  		clr.b	hog_launchflag(a0)	; set to launch	cannonball
00009258                            

00009258                            @remember:
00009258 6000 0000                  		bra.w	RememberState
0000925C                            ; ===========================================================================
0000925C                            

0000925C                            @makeball:
0000925C 117C 0001 0032             		move.b	#1,hog_launchflag(a0)
00009262 6100 0000                  		bsr.w	FindFreeObj
00009266 6600                       		bne.s	@fail
00009268 137C 0000 0000             		move.b	#id_Cannonball,0(a1) ; load cannonball object ($20)
0000926E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009274 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000927A 337C FF00 0010             		move.w	#-$100,obVelX(a1) ; cannonball bounces to the left
00009280 337C 0000 0012             		move.w	#0,obVelY(a1)
00009286 70FC                       		moveq	#-4,d0
00009288 0828 0000 0022             		btst	#0,obStatus(a0)	; is Ball Hog facing right?
0000928E 6700                       		beq.s	@noflip		; if not, branch
00009290 4440                       		neg.w	d0
00009292 4469 0010                  		neg.w	obVelX(a1)	; cannonball bounces to	the right
00009296                            

00009296                            	@noflip:
00009296 D169 0008                  		add.w	d0,obX(a1)
0000929A 0669 000C 000C             		addi.w	#$C,obY(a1)
000092A0 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1) ; copy object type from Ball Hog
000092A6                            

000092A6                            	@fail:
000092A6 60B0                       		bra.s	@remember
000092A6 60B0                       		bra.s	@remember
000092A8                            		include	"_incObj\20 Cannonball.asm"
000092A8                            ; ---------------------------------------------------------------------------
000092A8                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000092A8                            ; ---------------------------------------------------------------------------
000092A8                            

000092A8                            Cannonball:
000092A8 7000                       		moveq	#0,d0
000092AA 1028 0024                  		move.b	obRoutine(a0),d0
000092AE 323B 0000                  		move.w	Cbal_Index(pc,d0.w),d1
000092B2 4EFB 1000                  		jmp	Cbal_Index(pc,d1.w)
000092B6                            ; ===========================================================================
000092B6 0000                       Cbal_Index:	dc.w Cbal_Main-Cbal_Index
000092B8 0000                       		dc.w Cbal_Bounce-Cbal_Index
000092BA                            

000092BA =00000030                  cbal_time:	equ $30		; time until the cannonball explodes (2 bytes)
000092BA                            ; ===========================================================================
000092BA                            

000092BA                            Cbal_Main:	; Routine 0
000092BA 5428 0024                  		addq.b	#2,obRoutine(a0)
000092BE 117C 0007 0016             		move.b	#7,obHeight(a0)
000092C4 217C 0000 0000 0004        		move.l	#Map_Hog,obMap(a0)
000092CC 317C 2302 0002             		move.w	#$2302,obGfx(a0)
000092D2 117C 0004 0001             		move.b	#4,obRender(a0)
000092D8 117C 0003 0018             		move.b	#3,obPriority(a0)
000092DE 117C 0087 0020             		move.b	#$87,obColType(a0)
000092E4 117C 0008 0019             		move.b	#8,obActWid(a0)
000092EA 7000                       		moveq	#0,d0
000092EC 1028 0028                  		move.b	obSubtype(a0),d0 ; move subtype to d0
000092F0 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
000092F4 3140 0030                  		move.w	d0,cbal_time(a0) ; set explosion time
000092F8 117C 0004 001A             		move.b	#4,obFrame(a0)
000092FE                            

000092FE                            Cbal_Bounce:	; Routine 2
000092FE 4EB9 0000 0000             		jsr	(ObjectFall).l
00009304 4A68 0012                  		tst.w	obVelY(a0)
00009308 6B00                       		bmi.s	Cbal_ChkExplode
0000930A 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00009310 4A41                       		tst.w	d1		; has ball hit the floor?
00009312 6A00                       		bpl.s	Cbal_ChkExplode	; if not, branch
00009314                            

00009314 D368 000C                  		add.w	d1,obY(a0)
00009318 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; bounce
0000931E 4A03                       		tst.b	d3
00009320 6700                       		beq.s	Cbal_ChkExplode
00009322 6B00                       		bmi.s	loc_8CA4
00009324 4A68 0010                  		tst.w	obVelX(a0)
00009328 6A00                       		bpl.s	Cbal_ChkExplode
0000932A 4468 0010                  		neg.w	obVelX(a0)
0000932E 6000                       		bra.s	Cbal_ChkExplode
00009330                            ; ===========================================================================
00009330                            

00009330                            loc_8CA4:
00009330 4A68 0010                  		tst.w	obVelX(a0)
00009334 6B00                       		bmi.s	Cbal_ChkExplode
00009336 4468 0010                  		neg.w	obVelX(a0)
0000933A                            

0000933A                            Cbal_ChkExplode:
0000933A 5368 0030                  		subq.w	#1,cbal_time(a0) ; subtract 1 from explosion time
0000933E 6A00                       		bpl.s	Cbal_Animate	; if time is > 0, branch
00009340                            

00009340                            	Cbal_Explode:
00009340 117C 0000 0000             		move.b	#id_MissileDissolve,0(a0)
00009346 117C 0000 0000             		move.b	#id_ExplosionBomb,0(a0)	; change object	to an explosion	($3F)
0000934C 117C 0000 0024             		move.b	#0,obRoutine(a0) ; reset routine counter
00009352 6000 0000                  		bra.w	ExplosionBomb	; jump to explosion code
00009356                            ; ===========================================================================
00009356                            

00009356                            Cbal_Animate:
00009356 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000935A 6A00                       		bpl.s	Cbal_Display
0000935C 117C 0005 001E             		move.b	#5,obTimeFrame(a0) ; set frame duration to 5 frames
00009362 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
00009368                            

00009368                            Cbal_Display:
00009368 6100 0000                  		bsr.w	DisplaySprite
0000936C 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009370 0640 00E0                  		addi.w	#$E0,d0
00009374 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen off	the level?
00009378 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
0000937C 4E75                       		rts	
0000937C 4E75                       		rts	
0000937E                            		include	"_incObj\24, 27 & 3F Explosions.asm"
0000937E                            ; ---------------------------------------------------------------------------
0000937E                            ; Object 24 - buzz bomber missile vanishing (unused?)
0000937E                            ; ---------------------------------------------------------------------------
0000937E                            

0000937E                            MissileDissolve:
0000937E 7000                       		moveq	#0,d0
00009380 1028 0024                  		move.b	obRoutine(a0),d0
00009384 323B 0000                  		move.w	MDis_Index(pc,d0.w),d1
00009388 4EFB 1000                  		jmp	MDis_Index(pc,d1.w)
0000938C                            ; ===========================================================================
0000938C 0000                       MDis_Index:	dc.w MDis_Main-MDis_Index
0000938E 0000                       		dc.w MDis_Animate-MDis_Index
00009390                            ; ===========================================================================
00009390                            

00009390                            MDis_Main:	; Routine 0
00009390 5428 0024                  		addq.b	#2,obRoutine(a0)
00009394 217C 0000 0000 0004        		move.l	#Map_MisDissolve,obMap(a0)
0000939C 317C 041C 0002             		move.w	#$41C,obGfx(a0)
000093A2 117C 0004 0001             		move.b	#4,obRender(a0)
000093A8 117C 0001 0018             		move.b	#1,obPriority(a0)
000093AE 117C 0000 0020             		move.b	#0,obColType(a0)
000093B4 117C 000C 0019             		move.b	#$C,obActWid(a0)
000093BA 117C 0009 001E             		move.b	#9,obTimeFrame(a0)
000093C0 117C 0000 001A             		move.b	#0,obFrame(a0)
000093C6 303C 0000                  		move.w	#sfx_A5,d0
000093CA 4EB9 0000 13A2             		jsr	(PlaySound_Special).l		 ; play sound
000093D0                            

000093D0                            MDis_Animate:	; Routine 2
000093D0 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000093D4 6A00                       		bpl.s	@display
000093D6 117C 0009 001E             		move.b	#9,obTimeFrame(a0) ; set frame duration to 9 frames
000093DC 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
000093E0 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has animation completed?
000093E6 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000093EA                            

000093EA                            	@display:
000093EA 6000 0000                  		bra.w	DisplaySprite
000093EE                            ; ===========================================================================
000093EE                            

000093EE                            ; ---------------------------------------------------------------------------
000093EE                            ; Object 27 - explosion	from a destroyed enemy or monitor
000093EE                            ; ---------------------------------------------------------------------------
000093EE                            

000093EE                            ExplosionItem:
000093EE 7000                       		moveq	#0,d0
000093F0 1028 0024                  		move.b	obRoutine(a0),d0
000093F4 323B 0000                  		move.w	ExItem_Index(pc,d0.w),d1
000093F8 4EFB 1000                  		jmp	ExItem_Index(pc,d1.w)
000093FC                            ; ===========================================================================
000093FC 0000                       ExItem_Index:	dc.w ExItem_Animal-ExItem_Index
000093FE 0000                       		dc.w ExItem_Main-ExItem_Index
00009400 0000                       		dc.w ExItem_Animate-ExItem_Index
00009402                            ; ===========================================================================
00009402                            

00009402                            ExItem_Animal:	; Routine 0
00009402 5428 0024                  		addq.b	#2,obRoutine(a0)
00009406 6100 0000                  		bsr.w	FindFreeObj
0000940A 6600                       		bne.s	ExItem_Main
0000940C 137C 0000 0000             		move.b	#id_Animals,0(a1) ; load animal object
00009412 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009418 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000941E 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009424                            

00009424                            ExItem_Main:	; Routine 2
00009424 5428 0024                  		addq.b	#2,obRoutine(a0)
00009428 217C 0000 0000 0004        		move.l	#Map_ExplodeItem,obMap(a0)
00009430 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
00009436 117C 0004 0001             		move.b	#4,obRender(a0)
0000943C 117C 0001 0018             		move.b	#1,obPriority(a0)
00009442 117C 0000 0020             		move.b	#0,obColType(a0)
00009448 117C 000C 0019             		move.b	#$C,obActWid(a0)
0000944E 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
00009454 117C 0000 001A             		move.b	#0,obFrame(a0)
0000945A 303C 0000                  		move.w	#sfx_BreakItem,d0
0000945E 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play breaking enemy sound
00009464                            

00009464                            ExItem_Animate:	; Routine 4 (2 for ExplosionBomb)
00009464 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00009468 6A00                       		bpl.s	@display
0000946A 117C 0007 001E             		move.b	#7,obTimeFrame(a0) ; set frame duration to 7 frames
00009470 5228 001A                  		addq.b	#1,obFrame(a0)	; next frame
00009474 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is the final frame (05) displayed?
0000947A 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000947E                            

0000947E                            	@display:
0000947E 6000 0000                  		bra.w	DisplaySprite
00009482                            ; ===========================================================================
00009482                            ; ---------------------------------------------------------------------------
00009482                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009482                            ; ---------------------------------------------------------------------------
00009482                            

00009482                            ExplosionBomb:
00009482 7000                       		moveq	#0,d0
00009484 1028 0024                  		move.b	obRoutine(a0),d0
00009488 323B 0000                  		move.w	ExBom_Index(pc,d0.w),d1
0000948C 4EFB 1000                  		jmp	ExBom_Index(pc,d1.w)
00009490                            ; ===========================================================================
00009490 0000                       ExBom_Index:	dc.w ExBom_Main-ExBom_Index
00009492 FFD4                       		dc.w ExItem_Animate-ExBom_Index
00009494                            ; ===========================================================================
00009494                            

00009494                            ExBom_Main:	; Routine 0
00009494 5428 0024                  		addq.b	#2,obRoutine(a0)
00009498 217C 0000 0000 0004        		move.l	#Map_ExplodeBomb,obMap(a0)
000094A0 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
000094A6 117C 0004 0001             		move.b	#4,obRender(a0)
000094AC 117C 0001 0018             		move.b	#1,obPriority(a0)
000094B2 117C 0000 0020             		move.b	#0,obColType(a0)
000094B8 117C 000C 0019             		move.b	#$C,obActWid(a0)
000094BE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000094C4 117C 0000 001A             		move.b	#0,obFrame(a0)
000094CA 303C 0000                  		move.w	#sfx_Bomb,d0
000094CE 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	; play exploding bomb sound
000094CE 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	; play exploding bomb sound
000094D4                            		include	"_anim\Ball Hog.asm"
000094D4                            ; ---------------------------------------------------------------------------
000094D4                            ; Animation script - doors (SBZ)
000094D4                            ; ---------------------------------------------------------------------------
000094D4 0000                       Ani_Hog:	dc.w @hog-Ani_Hog
000094D6 0900 0002 0203 0200 0002+  @hog:		dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, afEnd
000094EE 00                         		even
000094EE 00                         		even
000094EE                            Map_Hog:	include	"_maps\Ball Hog.asm"
000094EE                            ; ---------------------------------------------------------------------------
000094EE                            ; Sprite mappings - Ball Hog enemy (SBZ)
000094EE                            ; ---------------------------------------------------------------------------
000094EE                            Map_Hog_internal:
000094EE 0000                       		dc.w M_Hog_Stand-Map_Hog_internal
000094F0 0000                       		dc.w M_Hog_Open-Map_Hog_internal
000094F2 0000                       		dc.w M_Hog_Squat-Map_Hog_internal
000094F4 0000                       		dc.w M_Hog_Leap-Map_Hog_internal
000094F6 0000                       		dc.w M_Hog_Ball1-Map_Hog_internal
000094F8 0000                       		dc.w M_Hog_Ball2-Map_Hog_internal
000094FA 02                         M_Hog_Stand:	dc.b 2
000094FB EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00009500 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4	; Ball hog standing
00009505 02                         M_Hog_Open:	dc.b 2
00009506 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
0000950B FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4 ; Ball hog with hatch open
00009510 02                         M_Hog_Squat:	dc.b 2
00009511 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00009516 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4	; Ball hog squatting
0000951B 02                         M_Hog_Leap:	dc.b 2
0000951C E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00009521 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4 ; Ball hog leaping
00009526 01                         M_Hog_Ball1:	dc.b 1
00009527 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8 ; Ball (black)
0000952C 01                         M_Hog_Ball2:	dc.b 1
0000952D F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8 ; Ball (red)
00009532                            		even
00009532                            		even
00009532                            Map_MisDissolve: include	"_maps\Buzz Bomber Missile Dissolve.asm"
00009532                            ; ---------------------------------------------------------------------------
00009532                            ; Sprite mappings - buzz bomber missile vanishing
00009532                            ; ---------------------------------------------------------------------------
00009532                            Map_MisDissolve_internal:
00009532 0000                       		dc.w byte_8EAE-Map_MisDissolve_internal
00009534 0000                       		dc.w byte_8EB4-Map_MisDissolve_internal
00009536 0000                       		dc.w byte_8EBA-Map_MisDissolve_internal
00009538 0000                       		dc.w byte_8EC0-Map_MisDissolve_internal
0000953A 01                         byte_8EAE:	dc.b 1
0000953B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009540 01                         byte_8EB4:	dc.b 1
00009541 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009546 01                         byte_8EBA:	dc.b 1
00009547 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0000954C 01                         byte_8EC0:	dc.b 1
0000954D F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009552                            		even
00009552                            		even
00009552                            		include	"_maps\Explosions.asm"
00009552                            ; ---------------------------------------------------------------------------
00009552                            ; Sprite mappings - explosion from a badnik or monitor
00009552                            ; ---------------------------------------------------------------------------
00009552 0000 0000                  Map_ExplodeItem: dc.w byte_8ED0-Map_ExplodeItem, byte_8ED6-Map_ExplodeItem
00009556 0000 0000                  		dc.w byte_8EDC-Map_ExplodeItem, byte_8EE2-Map_ExplodeItem
0000955A 0000                       		dc.w byte_8EF7-Map_ExplodeItem
0000955C 01                         byte_8ED0:	dc.b 1
0000955D F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009562 01                         byte_8ED6:	dc.b 1
00009563 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009568 01                         byte_8EDC:	dc.b 1
00009569 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
0000956E 04                         byte_8EE2:	dc.b 4
0000956F EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009574 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009579 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
0000957E FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009583 04                         byte_8EF7:	dc.b 4
00009584 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009589 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
0000958E 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009593 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009598                            		even
00009598                            ; ---------------------------------------------------------------------------
00009598                            ; Sprite mappings - explosion from when	a boss is destroyed
00009598                            ; ---------------------------------------------------------------------------
00009598 FFC4                       Map_ExplodeBomb: dc.w byte_8ED0-Map_ExplodeBomb
0000959A 0000                       		dc.w byte_8F16-Map_ExplodeBomb
0000959C 0000                       		dc.w byte_8F1C-Map_ExplodeBomb
0000959E FFD6                       		dc.w byte_8EE2-Map_ExplodeBomb
000095A0 FFEB                       		dc.w byte_8EF7-Map_ExplodeBomb
000095A2 01                         byte_8F16:	dc.b 1
000095A3 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
000095A8 01                         byte_8F1C:	dc.b 1
000095A9 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
000095AE                            		even
000095AE                            		even
000095AE                            

000095AE                            		include	"_incObj\28 Animals.asm"
000095AE                            ; ---------------------------------------------------------------------------
000095AE                            ; Object 28 - animals
000095AE                            ; ---------------------------------------------------------------------------
000095AE                            

000095AE                            Animals:
000095AE 7000                       		moveq	#0,d0
000095B0 1028 0024                  		move.b	obRoutine(a0),d0
000095B4 323B 0000                  		move.w	Anml_Index(pc,d0.w),d1
000095B8 4EFB 1000                  		jmp	Anml_Index(pc,d1.w)
000095BC                            ; ===========================================================================
000095BC 0000 0000                  Anml_Index:	dc.w Anml_Ending-Anml_Index, loc_912A-Anml_Index
000095C0 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
000095C4 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9184-Anml_Index
000095C8 0000 0000                  		dc.w loc_9184-Anml_Index, loc_91C0-Anml_Index
000095CC 0000 0000                  		dc.w loc_9184-Anml_Index, loc_9240-Anml_Index
000095D0 0000 0000                  		dc.w loc_9260-Anml_Index, loc_9260-Anml_Index
000095D4 0000 0000                  		dc.w loc_9280-Anml_Index, loc_92BA-Anml_Index
000095D8 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
000095DC 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9332-Anml_Index
000095E0 0000 0000                  		dc.w loc_9314-Anml_Index, loc_9370-Anml_Index
000095E4 0000                       		dc.w loc_92D6-Anml_Index
000095E6                            

000095E6 0005 0203 0603 0405 0401+  Anml_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
000095F2                            

000095F2 FE00 FC00                  Anml_Variables:	dc.w $FE00, $FC00
000095F6 0000 0000                  		dc.l Map_Animal1
000095FA FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
000095FE 0000 0000                  		dc.l Map_Animal2	; mappings address
00009602 FE80 FD00                  		dc.w $FE80, $FD00
00009606 0000 0000                  		dc.l Map_Animal1
0000960A FEC0 FE80                  		dc.w $FEC0, $FE80
0000960E 0000 0000                  		dc.l Map_Animal2
00009612 FE40 FD00                  		dc.w $FE40, $FD00
00009616 0000 0000                  		dc.l Map_Animal3
0000961A FD00 FC00                  		dc.w $FD00, $FC00
0000961E 0000 0000                  		dc.l Map_Animal2
00009622 FD80 FC80                  		dc.w $FD80, $FC80
00009626 0000 0000                  		dc.l Map_Animal3
0000962A                            

0000962A FBC0 FC00 FBC0 FC00 FBC0+  Anml_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
0000963A FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
0000964A FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009656                            

00009656 0000 0000 0000 0000 0000+  Anml_EndMap:	dc.l Map_Animal2, Map_Animal2, Map_Animal2, Map_Animal1, Map_Animal1
0000966A 0000 0000 0000 0000 0000+  		dc.l Map_Animal1, Map_Animal1, Map_Animal2, Map_Animal3, Map_Animal2
0000967E 0000 0000                  		dc.l Map_Animal3
00009682                            

00009682 05A5 05A5 05A5 0553 0553+  Anml_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009694 0565 05B3                  		dc.w $565, $5B3
00009698                            ; ===========================================================================
00009698                            

00009698                            Anml_Ending:	; Routine 0
00009698 4A28 0028                  		tst.b	obSubtype(a0)	; did animal come from a destroyed enemy?
0000969C 6700 0000                  		beq.w	Anml_FromEnemy	; if yes, branch
000096A0 7000                       		moveq	#0,d0
000096A2 1028 0028                  		move.b	obSubtype(a0),d0 ; move object type to d0
000096A6 D040                       		add.w	d0,d0		; multiply d0 by 2
000096A8 1140 0024                  		move.b	d0,obRoutine(a0) ; move d0 to routine counter
000096AC 0440 0014                  		subi.w	#$14,d0
000096B0 317B 00D0 0002             		move.w	Anml_EndVram(pc,d0.w),obGfx(a0)
000096B6 D040                       		add.w	d0,d0
000096B8 217B 009C 0004             		move.l	Anml_EndMap(pc,d0.w),obMap(a0)
000096BE 43FA FF6A                  		lea	Anml_EndSpeed(pc),a1
000096C2 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
000096C8 3171 0000 0010             		move.w	(a1,d0.w),obVelX(a0)
000096CE 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
000096D4 3171 0002 0012             		move.w	2(a1,d0.w),obVelY(a0)
000096DA 117C 000C 0016             		move.b	#$C,obHeight(a0)
000096E0 117C 0004 0001             		move.b	#4,obRender(a0)
000096E6 08E8 0000 0001             		bset	#0,obRender(a0)
000096EC 117C 0006 0018             		move.b	#6,obPriority(a0)
000096F2 117C 0008 0019             		move.b	#8,obActWid(a0)
000096F8 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000096FE 6000 0000                  		bra.w	DisplaySprite
00009702                            ; ===========================================================================
00009702                            

00009702                            Anml_FromEnemy:
00009702 5428 0024                  		addq.b	#2,obRoutine(a0)
00009706 6100 92B2                  		bsr.w	RandomNumber
0000970A 0240 0001                  		andi.w	#1,d0
0000970E 7200                       		moveq	#0,d1
00009710 1238 FE10                  		move.b	(v_zone).w,d1
00009714 D241                       		add.w	d1,d1
00009716 D240                       		add.w	d0,d1
00009718 43FA FECC                  		lea	Anml_VarIndex(pc),a1
0000971C 1031 1000                  		move.b	(a1,d1.w),d0
00009720 1140 0030                  		move.b	d0,$30(a0)
00009724 E748                       		lsl.w	#3,d0
00009726 43FA FECA                  		lea	Anml_Variables(pc),a1
0000972A D2C0                       		adda.w	d0,a1
0000972C 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009730 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
00009734 2159 0004                  		move.l	(a1)+,obMap(a0)	; load mappings
00009738 317C 0580 0002             		move.w	#$580,obGfx(a0)	; VRAM setting for 1st animal
0000973E 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
00009744 6700                       		beq.s	loc_90C0	; if yes, branch
00009746 317C 0592 0002             		move.w	#$592,obGfx(a0)	; VRAM setting for 2nd animal
0000974C                            

0000974C                            loc_90C0:
0000974C 117C 000C 0016             		move.b	#$C,obHeight(a0)
00009752 117C 0004 0001             		move.b	#4,obRender(a0)
00009758 08E8 0000 0001             		bset	#0,obRender(a0)
0000975E 117C 0006 0018             		move.b	#6,obPriority(a0)
00009764 117C 0008 0019             		move.b	#8,obActWid(a0)
0000976A 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00009770 117C 0002 001A             		move.b	#2,obFrame(a0)
00009776 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000977C 4A38 F7A7                  		tst.b	(v_bossstatus).w
00009780 6600                       		bne.s	loc_911C
00009782 6100 0000                  		bsr.w	FindFreeObj
00009786 6600                       		bne.s	Anml_Display
00009788 137C 0000 0000             		move.b	#id_Points,0(a1) ; load points object
0000978E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009794 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000979A 3028 003E                  		move.w	$3E(a0),d0
0000979E E248                       		lsr.w	#1,d0
000097A0 1340 001A                  		move.b	d0,obFrame(a1)
000097A4                            

000097A4                            Anml_Display:
000097A4 6000 0000                  		bra.w	DisplaySprite
000097A8                            ; ===========================================================================
000097A8                            

000097A8                            loc_911C:
000097A8 117C 0012 0024             		move.b	#$12,obRoutine(a0)
000097AE 4268 0010                  		clr.w	obVelX(a0)
000097B2 6000 0000                  		bra.w	DisplaySprite
000097B6                            ; ===========================================================================
000097B6                            

000097B6                            loc_912A:
000097B6 4A28 0001                  		tst.b	obRender(a0)
000097BA 6A00 0000                  		bpl.w	DeleteObject
000097BE 6100 0000                  		bsr.w	ObjectFall
000097C2 4A68 0012                  		tst.w	obVelY(a0)
000097C6 6B00                       		bmi.s	loc_9180
000097C8 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000097CE 4A41                       		tst.w	d1
000097D0 6A00                       		bpl.s	loc_9180
000097D2 D368 000C                  		add.w	d1,obY(a0)
000097D6 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
000097DC 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
000097E2 117C 0001 001A             		move.b	#1,obFrame(a0)
000097E8 1028 0030                  		move.b	$30(a0),d0
000097EC D000                       		add.b	d0,d0
000097EE 5800                       		addq.b	#4,d0
000097F0 1140 0024                  		move.b	d0,obRoutine(a0)
000097F4 4A38 F7A7                  		tst.b	(v_bossstatus).w
000097F8 6700                       		beq.s	loc_9180
000097FA 0838 0004 FE0F             		btst	#4,(v_vbla_byte).w
00009800 6700                       		beq.s	loc_9180
00009802 4468 0010                  		neg.w	obVelX(a0)
00009806 0868 0000 0001             		bchg	#0,obRender(a0)
0000980C                            

0000980C                            loc_9180:
0000980C 6000 0000                  		bra.w	DisplaySprite
00009810                            ; ===========================================================================
00009810                            

00009810                            loc_9184:
00009810 6100 0000                  		bsr.w	ObjectFall
00009814 117C 0001 001A             		move.b	#1,obFrame(a0)
0000981A 4A68 0012                  		tst.w	obVelY(a0)
0000981E 6B00                       		bmi.s	loc_91AE
00009820 117C 0000 001A             		move.b	#0,obFrame(a0)
00009826 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000982C 4A41                       		tst.w	d1
0000982E 6A00                       		bpl.s	loc_91AE
00009830 D368 000C                  		add.w	d1,obY(a0)
00009834 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000983A                            

0000983A                            loc_91AE:
0000983A 4A28 0028                  		tst.b	obSubtype(a0)
0000983E 6600                       		bne.s	loc_9224
00009840 4A28 0001                  		tst.b	obRender(a0)
00009844 6A00 0000                  		bpl.w	DeleteObject
00009848 6000 0000                  		bra.w	DisplaySprite
0000984C                            ; ===========================================================================
0000984C                            

0000984C                            loc_91C0:
0000984C 6100 0000                  		bsr.w	SpeedToPos
00009850 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00009856 4A68 0012                  		tst.w	obVelY(a0)
0000985A 6B00                       		bmi.s	loc_91FC
0000985C 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00009862 4A41                       		tst.w	d1
00009864 6A00                       		bpl.s	loc_91FC
00009866 D368 000C                  		add.w	d1,obY(a0)
0000986A 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
00009870 4A28 0028                  		tst.b	obSubtype(a0)
00009874 6700                       		beq.s	loc_91FC
00009876 0C28 000A 0028             		cmpi.b	#$A,obSubtype(a0)
0000987C 6700                       		beq.s	loc_91FC
0000987E 4468 0010                  		neg.w	obVelX(a0)
00009882 0868 0000 0001             		bchg	#0,obRender(a0)
00009888                            

00009888                            loc_91FC:
00009888 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000988C 6A00                       		bpl.s	loc_9212
0000988E 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
00009894 5228 001A                  		addq.b	#1,obFrame(a0)
00009898 0228 0001 001A             		andi.b	#1,obFrame(a0)
0000989E                            

0000989E                            loc_9212:
0000989E 4A28 0028                  		tst.b	obSubtype(a0)
000098A2 6600                       		bne.s	loc_9224
000098A4 4A28 0001                  		tst.b	obRender(a0)
000098A8 6A00 0000                  		bpl.w	DeleteObject
000098AC 6000 0000                  		bra.w	DisplaySprite
000098B0                            ; ===========================================================================
000098B0                            

000098B0                            loc_9224:
000098B0 3028 0008                  		move.w	obX(a0),d0
000098B4 9078 D008                  		sub.w	(v_player+obX).w,d0
000098B8 6500                       		bcs.s	loc_923C
000098BA 0440 0180                  		subi.w	#$180,d0
000098BE 6A00                       		bpl.s	loc_923C
000098C0 4A28 0001                  		tst.b	obRender(a0)
000098C4 6A00 0000                  		bpl.w	DeleteObject
000098C8                            

000098C8                            loc_923C:
000098C8 6000 0000                  		bra.w	DisplaySprite
000098CC                            ; ===========================================================================
000098CC                            

000098CC                            loc_9240:
000098CC 4A28 0001                  		tst.b	obRender(a0)
000098D0 6A00 0000                  		bpl.w	DeleteObject
000098D4 5368 0036                  		subq.w	#1,$36(a0)
000098D8 6600 0000                  		bne.w	loc_925C
000098DC 117C 0002 0024             		move.b	#2,obRoutine(a0)
000098E2 117C 0003 0018             		move.b	#3,obPriority(a0)
000098E8                            

000098E8                            loc_925C:
000098E8 6000 0000                  		bra.w	DisplaySprite
000098EC                            ; ===========================================================================
000098EC                            

000098EC                            loc_9260:
000098EC 6100 0000                  		bsr.w	sub_9404
000098F0 6400                       		bcc.s	loc_927C
000098F2 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
000098F8 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
000098FE 117C 000E 0024             		move.b	#$E,obRoutine(a0)
00009904 6000 FF46                  		bra.w	loc_91C0
00009908                            ; ===========================================================================
00009908                            

00009908                            loc_927C:
00009908 6000 FFA6                  		bra.w	loc_9224
0000990C                            ; ===========================================================================
0000990C                            

0000990C                            loc_9280:
0000990C 6100 0000                  		bsr.w	sub_9404
00009910 6A00                       		bpl.s	loc_92B6
00009912 4268 0010                  		clr.w	obVelX(a0)
00009916 4268 0032                  		clr.w	$32(a0)
0000991A 6100 0000                  		bsr.w	SpeedToPos
0000991E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00009924 6100 0000                  		bsr.w	loc_93C4
00009928 6100 0000                  		bsr.w	loc_93EC
0000992C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00009930 6A00                       		bpl.s	loc_92B6
00009932 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
00009938 5228 001A                  		addq.b	#1,obFrame(a0)
0000993C 0228 0001 001A             		andi.b	#1,obFrame(a0)
00009942                            

00009942                            loc_92B6:
00009942 6000 FF6C                  		bra.w	loc_9224
00009946                            ; ===========================================================================
00009946                            

00009946                            loc_92BA:
00009946 6100 0000                  		bsr.w	sub_9404
0000994A 6A00                       		bpl.s	loc_9310
0000994C 3168 0032 0010             		move.w	$32(a0),obVelX(a0)
00009952 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
00009958 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000995E 6000 FEB0                  		bra.w	loc_9184
00009962                            ; ===========================================================================
00009962                            

00009962                            loc_92D6:
00009962 6100 0000                  		bsr.w	ObjectFall
00009966 117C 0001 001A             		move.b	#1,obFrame(a0)
0000996C 4A68 0012                  		tst.w	obVelY(a0)
00009970 6B00                       		bmi.s	loc_9310
00009972 117C 0000 001A             		move.b	#0,obFrame(a0)
00009978 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000997E 4A41                       		tst.w	d1
00009980 6A00                       		bpl.s	loc_9310
00009982 4628 0029                  		not.b	$29(a0)
00009986 6600                       		bne.s	loc_9306
00009988 4468 0010                  		neg.w	obVelX(a0)
0000998C 0868 0000 0001             		bchg	#0,obRender(a0)
00009992                            

00009992                            loc_9306:
00009992 D368 000C                  		add.w	d1,obY(a0)
00009996 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
0000999C                            

0000999C                            loc_9310:
0000999C 6000 FF12                  		bra.w	loc_9224
000099A0                            ; ===========================================================================
000099A0                            

000099A0                            loc_9314:
000099A0 6100 0000                  		bsr.w	sub_9404
000099A4 6A00                       		bpl.s	loc_932E
000099A6 4268 0010                  		clr.w	obVelX(a0)
000099AA 4268 0032                  		clr.w	$32(a0)
000099AE 6100 0000                  		bsr.w	ObjectFall
000099B2 6100 0000                  		bsr.w	loc_93C4
000099B6 6100 0000                  		bsr.w	loc_93EC
000099BA                            

000099BA                            loc_932E:
000099BA 6000 FEF4                  		bra.w	loc_9224
000099BE                            ; ===========================================================================
000099BE                            

000099BE                            loc_9332:
000099BE 6100 0000                  		bsr.w	sub_9404
000099C2 6A00                       		bpl.s	loc_936C
000099C4 6100 0000                  		bsr.w	ObjectFall
000099C8 117C 0001 001A             		move.b	#1,obFrame(a0)
000099CE 4A68 0012                  		tst.w	obVelY(a0)
000099D2 6B00                       		bmi.s	loc_936C
000099D4 117C 0000 001A             		move.b	#0,obFrame(a0)
000099DA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
000099E0 4A41                       		tst.w	d1
000099E2 6A00                       		bpl.s	loc_936C
000099E4 4468 0010                  		neg.w	obVelX(a0)
000099E8 0868 0000 0001             		bchg	#0,obRender(a0)
000099EE D368 000C                  		add.w	d1,obY(a0)
000099F2 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
000099F8                            

000099F8                            loc_936C:
000099F8 6000 FEB6                  		bra.w	loc_9224
000099FC                            ; ===========================================================================
000099FC                            

000099FC                            loc_9370:
000099FC 6100 0000                  		bsr.w	sub_9404
00009A00 6A00                       		bpl.s	loc_93C0
00009A02 6100 0000                  		bsr.w	SpeedToPos
00009A06 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00009A0C 4A68 0012                  		tst.w	obVelY(a0)
00009A10 6B00                       		bmi.s	loc_93AA
00009A12 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00009A18 4A41                       		tst.w	d1
00009A1A 6A00                       		bpl.s	loc_93AA
00009A1C 4628 0029                  		not.b	$29(a0)
00009A20 6600                       		bne.s	loc_93A0
00009A22 4468 0010                  		neg.w	obVelX(a0)
00009A26 0868 0000 0001             		bchg	#0,obRender(a0)
00009A2C                            

00009A2C                            loc_93A0:
00009A2C D368 000C                  		add.w	d1,obY(a0)
00009A30 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
00009A36                            

00009A36                            loc_93AA:
00009A36 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00009A3A 6A00                       		bpl.s	loc_93C0
00009A3C 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
00009A42 5228 001A                  		addq.b	#1,obFrame(a0)
00009A46 0228 0001 001A             		andi.b	#1,obFrame(a0)
00009A4C                            

00009A4C                            loc_93C0:
00009A4C 6000 FE62                  		bra.w	loc_9224
00009A50                            ; ===========================================================================
00009A50                            

00009A50                            loc_93C4:
00009A50 117C 0001 001A             		move.b	#1,obFrame(a0)
00009A56 4A68 0012                  		tst.w	obVelY(a0)
00009A5A 6B00                       		bmi.s	locret_93EA
00009A5C 117C 0000 001A             		move.b	#0,obFrame(a0)
00009A62 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00009A68 4A41                       		tst.w	d1
00009A6A 6A00                       		bpl.s	locret_93EA
00009A6C D368 000C                  		add.w	d1,obY(a0)
00009A70 3168 0034 0012             		move.w	$34(a0),obVelY(a0)
00009A76                            

00009A76                            locret_93EA:
00009A76 4E75                       		rts	
00009A78                            ; ===========================================================================
00009A78                            

00009A78                            loc_93EC:
00009A78 08E8 0000 0001             		bset	#0,obRender(a0)
00009A7E 3028 0008                  		move.w	obX(a0),d0
00009A82 9078 D008                  		sub.w	(v_player+obX).w,d0
00009A86 6400                       		bcc.s	locret_9402
00009A88 08A8 0000 0001             		bclr	#0,obRender(a0)
00009A8E                            

00009A8E                            locret_9402:
00009A8E 4E75                       		rts	
00009A90                            

00009A90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A90                            

00009A90                            

00009A90                            sub_9404:
00009A90 3038 D008                  		move.w	(v_player+obX).w,d0
00009A94 9068 0008                  		sub.w	obX(a0),d0
00009A98 0440 00B8                  		subi.w	#$B8,d0
00009A9C 4E75                       		rts	
00009A9E                            ; End of function sub_9404
00009A9E                            ; End of function sub_9404
00009A9E                            		include	"_incObj\29 Points.asm"
00009A9E                            ; ---------------------------------------------------------------------------
00009A9E                            ; Object 29 - points that appear when you destroy something
00009A9E                            ; ---------------------------------------------------------------------------
00009A9E                            

00009A9E                            Points:
00009A9E 7000                       		moveq	#0,d0
00009AA0 1028 0024                  		move.b	obRoutine(a0),d0
00009AA4 323B 0000                  		move.w	Poi_Index(pc,d0.w),d1
00009AA8 4EBB 1000                  		jsr	Poi_Index(pc,d1.w)
00009AAC 6000 0000                  		bra.w	DisplaySprite
00009AB0                            ; ===========================================================================
00009AB0 0000                       Poi_Index:	dc.w Poi_Main-Poi_Index
00009AB2 0000                       		dc.w Poi_Slower-Poi_Index
00009AB4                            ; ===========================================================================
00009AB4                            

00009AB4                            Poi_Main:	; Routine 0
00009AB4 5428 0024                  		addq.b	#2,obRoutine(a0)
00009AB8 217C 0000 0000 0004        		move.l	#Map_Poi,obMap(a0)
00009AC0 317C 2797 0002             		move.w	#$2797,obGfx(a0)
00009AC6 117C 0004 0001             		move.b	#4,obRender(a0)
00009ACC 117C 0001 0018             		move.b	#1,obPriority(a0)
00009AD2 117C 0008 0019             		move.b	#8,obActWid(a0)
00009AD8 317C FD00 0012             		move.w	#-$300,obVelY(a0) ; move object upwards
00009ADE                            

00009ADE                            Poi_Slower:	; Routine 2
00009ADE 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
00009AE2 6A00 0000                  		bpl.w	DeleteObject	; if not, delete
00009AE6 6100 0000                  		bsr.w	SpeedToPos
00009AEA 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
00009AF0 4E75                       		rts	
00009AF0 4E75                       		rts	
00009AF2                            Map_Animal1:	include	"_maps\Animals 1.asm"
00009AF2                            ; ---------------------------------------------------------------------------
00009AF2                            ; Sprite mappings - animals
00009AF2                            ; ---------------------------------------------------------------------------
00009AF2                            Map_Animal1_internal:
00009AF2 0000                       		dc.w byte_9472-Map_Animal1_internal
00009AF4 0000                       		dc.w byte_9478-Map_Animal1_internal
00009AF6 0000                       		dc.w byte_946C-Map_Animal1_internal
00009AF8 01                         byte_946C:	dc.b 1
00009AF9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009AFE 01                         byte_9472:	dc.b 1
00009AFF F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009B04 01                         byte_9478:	dc.b 1
00009B05 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009B0A                            		even
00009B0A                            		even
00009B0A                            Map_Animal2:	include	"_maps\Animals 2.asm"
00009B0A                            ; ---------------------------------------------------------------------------
00009B0A                            ; Sprite mappings - animals
00009B0A                            ; ---------------------------------------------------------------------------
00009B0A                            Map_Animal2_internal:
00009B0A 0000                       		dc.w byte_948A-Map_Animal2_internal
00009B0C 0000                       		dc.w byte_9490-Map_Animal2_internal
00009B0E 0000                       		dc.w byte_9484-Map_Animal2_internal
00009B10 01                         byte_9484:	dc.b 1
00009B11 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B16 01                         byte_948A:	dc.b 1
00009B17 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009B1C 01                         byte_9490:	dc.b 1
00009B1D FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009B22                            		even
00009B22                            		even
00009B22                            Map_Animal3:	include	"_maps\Animals 3.asm"
00009B22                            ; ---------------------------------------------------------------------------
00009B22                            ; Sprite mappings - animals
00009B22                            ; ---------------------------------------------------------------------------
00009B22                            Map_Animal3_internal:
00009B22 0000                       		dc.w byte_94A2-Map_Animal3_internal
00009B24 0000                       		dc.w byte_94A8-Map_Animal3_internal
00009B26 0000                       		dc.w byte_949C-Map_Animal3_internal
00009B28 01                         byte_949C:	dc.b 1
00009B29 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B2E 01                         byte_94A2:	dc.b 1
00009B2F FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009B34 01                         byte_94A8:	dc.b 1
00009B35 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009B3A                            		even
00009B3A                            		even
00009B3A                            Map_Poi:	include	"_maps\Points.asm"
00009B3A                            ; ---------------------------------------------------------------------------
00009B3A                            ; Sprite mappings - points that	appear when you	destroy	something
00009B3A                            ; ---------------------------------------------------------------------------
00009B3A                            Map_Poi_internal:
00009B3A 0000                       		dc.w byte_94BC-Map_Poi_internal
00009B3C 0000                       		dc.w byte_94C2-Map_Poi_internal
00009B3E 0000                       		dc.w byte_94C8-Map_Poi_internal
00009B40 0000                       		dc.w byte_94CE-Map_Poi_internal
00009B42 0000                       		dc.w byte_94D4-Map_Poi_internal
00009B44 0000                       		dc.w byte_94DA-Map_Poi_internal
00009B46 0000                       		dc.w byte_94E5-Map_Poi_internal
00009B48 01                         byte_94BC:	dc.b 1
00009B49 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009B4E 01                         byte_94C2:	dc.b 1
00009B4F FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009B54 01                         byte_94C8:	dc.b 1
00009B55 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009B5A 01                         byte_94CE:	dc.b 1
00009B5B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009B60 01                         byte_94D4:	dc.b 1
00009B61 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009B66 02                         byte_94DA:	dc.b 2
00009B67 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009B6C FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009B71 02                         byte_94E5:	dc.b 2
00009B72 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009B77 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009B7C                            		even
00009B7C                            		even
00009B7C                            

00009B7C                            		include	"_incObj\1F Crabmeat.asm"
00009B7C                            ; ---------------------------------------------------------------------------
00009B7C                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009B7C                            ; ---------------------------------------------------------------------------
00009B7C                            

00009B7C                            Crabmeat:
00009B7C 7000                       		moveq	#0,d0
00009B7E 1028 0024                  		move.b	obRoutine(a0),d0
00009B82 323B 0000                  		move.w	Crab_Index(pc,d0.w),d1
00009B86 4EFB 1000                  		jmp	Crab_Index(pc,d1.w)
00009B8A                            ; ===========================================================================
00009B8A                            Crab_Index:
00009B8A 0000                       ptr_Crab_Main:		dc.w Crab_Main-Crab_Index
00009B8C 0000                       ptr_Crab_Action:	dc.w Crab_Action-Crab_Index
00009B8E 0000                       ptr_Crab_Delete:	dc.w Crab_Delete-Crab_Index
00009B90 0000                       ptr_Crab_BallMain:	dc.w Crab_BallMain-Crab_Index
00009B92 0000                       ptr_Crab_BallMove:	dc.w Crab_BallMove-Crab_Index
00009B94                            

00009B94 =00000000                  id_Crab_Main:		equ ptr_Crab_Main-Crab_Index	; 0
00009B94 =00000002                  id_Crab_Action:		equ ptr_Crab_Action-Crab_Index	; 2
00009B94 =00000004                  id_Crab_Delete:		equ ptr_Crab_Delete-Crab_Index	; 4
00009B94 =00000006                  id_Crab_BallMain:	equ ptr_Crab_BallMain-Crab_Index	; 6
00009B94 =00000008                  id_Crab_BallMove:	equ ptr_Crab_BallMove-Crab_Index	; 8
00009B94                            

00009B94 =00000030                  crab_timedelay:	equ $30
00009B94 =00000032                  crab_mode:	equ $32
00009B94                            ; ===========================================================================
00009B94                            

00009B94                            Crab_Main:	; Routine 0
00009B94 117C 0010 0016             		move.b	#$10,obHeight(a0)
00009B9A 117C 0008 0017             		move.b	#8,obWidth(a0)
00009BA0 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
00009BA8 317C 0400 0002             		move.w	#$400,obGfx(a0)
00009BAE 117C 0004 0001             		move.b	#4,obRender(a0)
00009BB4 117C 0003 0018             		move.b	#3,obPriority(a0)
00009BBA 117C 0006 0020             		move.b	#6,obColType(a0)
00009BC0 117C 0015 0019             		move.b	#$15,obActWid(a0)
00009BC6 6100 0000                  		bsr.w	ObjectFall
00009BCA 4EB9 0000 0000             		jsr	(ObjFloorDist).l	; find floor
00009BD0 4A41                       		tst.w	d1
00009BD2 6A00                       		bpl.s	@floornotfound
00009BD4 D368 000C                  		add.w	d1,obY(a0)
00009BD8 1143 0026                  		move.b	d3,obAngle(a0)
00009BDC 317C 0000 0012             		move.w	#0,obVelY(a0)
00009BE2 5428 0024                  		addq.b	#2,obRoutine(a0)
00009BE6                            

00009BE6                            	@floornotfound:
00009BE6 4E75                       		rts	
00009BE8                            ; ===========================================================================
00009BE8                            

00009BE8                            Crab_Action:	; Routine 2
00009BE8 7000                       		moveq	#0,d0
00009BEA 1028 0025                  		move.b	ob2ndRout(a0),d0
00009BEE 323B 0000                  		move.w	@index(pc,d0.w),d1
00009BF2 4EBB 1000                  		jsr	@index(pc,d1.w)
00009BF6 43F9 0000 0000             		lea	(Ani_Crab).l,a1
00009BFC 6100 0000                  		bsr.w	AnimateSprite
00009C00 6000 0000                  		bra.w	RememberState
00009C04                            ; ===========================================================================
00009C04 0000                       @index:		dc.w @waittofire-@index
00009C06 0000                       		dc.w @walkonfloor-@index
00009C08                            ; ===========================================================================
00009C08                            

00009C08                            @waittofire:
00009C08 5368 0030                  		subq.w	#1,crab_timedelay(a0) ; subtract 1 from time delay
00009C0C 6A00                       		bpl.s	@dontmove
00009C0E 4A28 0001                  		tst.b	obRender(a0)
00009C12 6A00                       		bpl.s	@movecrab
00009C14 0868 0001 0032             		bchg	#1,crab_mode(a0)
00009C1A 6600                       		bne.s	@fire
00009C1C                            

00009C1C                            	@movecrab:
00009C1C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00009C20 317C 007F 0030             		move.w	#127,crab_timedelay(a0) ; set time delay to approx 2 seconds
00009C26 317C 0080 0010             		move.w	#$80,obVelX(a0)	; move Crabmeat	to the right
00009C2C 6100 0000                  		bsr.w	Crab_SetAni
00009C30 5600                       		addq.b	#3,d0
00009C32 1140 001C                  		move.b	d0,obAnim(a0)
00009C36 0868 0000 0022             		bchg	#0,obStatus(a0)
00009C3C 6600                       		bne.s	@noflip
00009C3E 4468 0010                  		neg.w	obVelX(a0)	; change direction
00009C42                            

00009C42                            	@dontmove:
00009C42                            	@noflip:
00009C42 4E75                       		rts	
00009C44                            ; ===========================================================================
00009C44                            

00009C44                            @fire:
00009C44 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
00009C4A 117C 0006 001C             		move.b	#6,obAnim(a0)	; use firing animation
00009C50 6100 0000                  		bsr.w	FindFreeObj
00009C54 6600                       		bne.s	@failleft
00009C56 137C 0000 0000             		move.b	#id_Crabmeat,0(a1) ; load left fireball
00009C5C 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
00009C62 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009C68 0469 0010 0008             		subi.w	#$10,obX(a1)
00009C6E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009C74 337C FF00 0010             		move.w	#-$100,obVelX(a1)
00009C7A                            

00009C7A                            	@failleft:
00009C7A 6100 0000                  		bsr.w	FindFreeObj
00009C7E 6600                       		bne.s	@failright
00009C80 137C 0000 0000             		move.b	#id_Crabmeat,0(a1) ; load right fireball
00009C86 137C 0006 0024             		move.b	#id_Crab_BallMain,obRoutine(a1)
00009C8C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009C92 0669 0010 0008             		addi.w	#$10,obX(a1)
00009C98 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009C9E 337C 0100 0010             		move.w	#$100,obVelX(a1)
00009CA4                            

00009CA4                            	@failright:
00009CA4 4E75                       		rts	
00009CA6                            ; ===========================================================================
00009CA6                            

00009CA6                            @walkonfloor:
00009CA6 5368 0030                  		subq.w	#1,crab_timedelay(a0)
00009CAA 6B00                       		bmi.s	loc_966E
00009CAC 6100 0000                  		bsr.w	SpeedToPos
00009CB0 0868 0000 0032             		bchg	#0,crab_mode(a0)
00009CB6 6600                       		bne.s	loc_9654
00009CB8 3628 0008                  		move.w	obX(a0),d3
00009CBC 0643 0010                  		addi.w	#$10,d3
00009CC0 0828 0000 0022             		btst	#0,obStatus(a0)
00009CC6 6700                       		beq.s	loc_9640
00009CC8 0443 0020                  		subi.w	#$20,d3
00009CCC                            

00009CCC                            loc_9640:
00009CCC 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
00009CD2 0C41 FFF8                  		cmpi.w	#-8,d1
00009CD6 6D00                       		blt.s	loc_966E
00009CD8 0C41 000C                  		cmpi.w	#$C,d1
00009CDC 6C00                       		bge.s	loc_966E
00009CDE 4E75                       		rts	
00009CE0                            ; ===========================================================================
00009CE0                            

00009CE0                            loc_9654:
00009CE0 4EB9 0000 0000             		jsr	(ObjFloorDist).l
00009CE6 D368 000C                  		add.w	d1,obY(a0)
00009CEA 1143 0026                  		move.b	d3,obAngle(a0)
00009CEE 6100 0000                  		bsr.w	Crab_SetAni
00009CF2 5600                       		addq.b	#3,d0
00009CF4 1140 001C                  		move.b	d0,obAnim(a0)
00009CF8 4E75                       		rts	
00009CFA                            ; ===========================================================================
00009CFA                            

00009CFA                            loc_966E:
00009CFA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00009CFE 317C 003B 0030             		move.w	#59,crab_timedelay(a0)
00009D04 317C 0000 0010             		move.w	#0,obVelX(a0)
00009D0A 6100 0000                  		bsr.w	Crab_SetAni
00009D0E 1140 001C                  		move.b	d0,obAnim(a0)
00009D12 4E75                       		rts	
00009D14                            ; ---------------------------------------------------------------------------
00009D14                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009D14                            ; ---------------------------------------------------------------------------
00009D14                            

00009D14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D14                            

00009D14                            

00009D14                            Crab_SetAni:
00009D14 7000                       		moveq	#0,d0
00009D16 1628 0026                  		move.b	obAngle(a0),d3
00009D1A 6B00                       		bmi.s	loc_96A4
00009D1C 0C03 0006                  		cmpi.b	#6,d3
00009D20 6500                       		bcs.s	locret_96A2
00009D22 7001                       		moveq	#1,d0
00009D24 0828 0000 0022             		btst	#0,obStatus(a0)
00009D2A 6600                       		bne.s	locret_96A2
00009D2C 7002                       		moveq	#2,d0
00009D2E                            

00009D2E                            locret_96A2:
00009D2E 4E75                       		rts	
00009D30                            ; ===========================================================================
00009D30                            

00009D30                            loc_96A4:
00009D30 0C03 00FA                  		cmpi.b	#-6,d3
00009D34 6200                       		bhi.s	locret_96B6
00009D36 7002                       		moveq	#2,d0
00009D38 0828 0000 0022             		btst	#0,obStatus(a0)
00009D3E 6600                       		bne.s	locret_96B6
00009D40 7001                       		moveq	#1,d0
00009D42                            

00009D42                            locret_96B6:
00009D42 4E75                       		rts	
00009D44                            ; End of function Crab_SetAni
00009D44                            

00009D44                            ; ===========================================================================
00009D44                            

00009D44                            Crab_Delete:	; Routine 4
00009D44 6100 0000                  		bsr.w	DeleteObject
00009D48 4E75                       		rts	
00009D4A                            ; ===========================================================================
00009D4A                            ; ---------------------------------------------------------------------------
00009D4A                            ; Sub-object - missile that the	Crabmeat throws
00009D4A                            ; ---------------------------------------------------------------------------
00009D4A                            

00009D4A                            Crab_BallMain:	; Routine 6
00009D4A 5428 0024                  		addq.b	#2,obRoutine(a0)
00009D4E 217C 0000 0000 0004        		move.l	#Map_Crab,obMap(a0)
00009D56 317C 0400 0002             		move.w	#$400,obGfx(a0)
00009D5C 117C 0004 0001             		move.b	#4,obRender(a0)
00009D62 117C 0003 0018             		move.b	#3,obPriority(a0)
00009D68 117C 0087 0020             		move.b	#$87,obColType(a0)
00009D6E 117C 0008 0019             		move.b	#8,obActWid(a0)
00009D74 317C FC00 0012             		move.w	#-$400,obVelY(a0)
00009D7A 117C 0007 001C             		move.b	#7,obAnim(a0)
00009D80                            

00009D80                            Crab_BallMove:	; Routine 8
00009D80 43F9 0000 0000             		lea	(Ani_Crab).l,a1
00009D86 6100 0000                  		bsr.w	AnimateSprite
00009D8A 6100 0000                  		bsr.w	ObjectFall
00009D8E 6100 0000                  		bsr.w	DisplaySprite
00009D92 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00009D96 0640 00E0                  		addi.w	#$E0,d0
00009D9A B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
00009D9E 6500                       		bcs.s	@delete		; if yes, branch
00009DA0 4E75                       		rts	
00009DA2                            

00009DA2                            	@delete:
00009DA2 6000 0000                  		bra.w	DeleteObject
00009DA2 6000 0000                  		bra.w	DeleteObject
00009DA6                            		include	"_anim\Crabmeat.asm"
00009DA6                            ; ---------------------------------------------------------------------------
00009DA6                            ; Animation script - Crabmeat enemy
00009DA6                            ; ---------------------------------------------------------------------------
00009DA6 0000 0000 0000             Ani_Crab:	dc.w @stand-Ani_Crab, @standslope-Ani_Crab, @standsloperev-Ani_Crab
00009DAC 0000 0000 0000             		dc.w @walk-Ani_Crab, @walkslope-Ani_Crab, @walksloperev-Ani_Crab
00009DB2 0000 0000                  		dc.w @firing-Ani_Crab, @ball-Ani_Crab
00009DB6 0F00 FF                    @stand:		dc.b $F, 0, afEnd
00009DBA 00                         		even
00009DBA 0F02 FF                    @standslope:	dc.b $F, 2, afEnd
00009DBE 00                         		even
00009DBE 0F22 FF                    @standsloperev:	dc.b $F, $22, afEnd
00009DC2 00                         		even
00009DC2 0F01 2100 FF               @walk:		dc.b $F, 1, $21, 0, afEnd
00009DC8 00                         		even
00009DC8 0F21 0302 FF               @walkslope:	dc.b $F, $21, 3, 2, afEnd
00009DCE 00                         		even
00009DCE 0F01 2322 FF               @walksloperev:	dc.b $F, 1, $23, $22, afEnd
00009DD4 00                         		even
00009DD4 0F04 FF                    @firing:	dc.b $F, 4, afEnd
00009DD8 00                         		even
00009DD8 0105 06FF                  @ball:		dc.b 1,	5, 6, afEnd
00009DDC                            		even
00009DDC                            		even
00009DDC                            Map_Crab:	include	"_maps\Crabmeat.asm"
00009DDC                            ; ---------------------------------------------------------------------------
00009DDC                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009DDC                            ; ---------------------------------------------------------------------------
00009DDC                            Map_Crab_internal:
00009DDC 0000                       		dc.w @stand-Map_Crab_internal
00009DDE 0000                       		dc.w @walk-Map_Crab_internal
00009DE0 0000                       		dc.w @slope1-Map_Crab_internal
00009DE2 0000                       		dc.w @slope2-Map_Crab_internal
00009DE4 0000                       		dc.w @firing-Map_Crab_internal
00009DE6 0000                       		dc.w @ball1-Map_Crab_internal
00009DE8 0000                       		dc.w @ball2-Map_Crab_internal
00009DEA 04                         @stand:		dc.b 4
00009DEB F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8	; standing/middle walking frame
00009DF0 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009DF5 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
00009DFA 0005 0806 00               		dc.b 0,	5, 8, 6, 0
00009DFF 04                         @walk:		dc.b 4
00009E00 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8	; walking
00009E05 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
00009E0A 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
00009E0F 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009E14 04                         @slope1:	dc.b 4
00009E15 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8	; walking on slope
00009E1A EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
00009E1F FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009E24 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009E29 04                         @slope2:	dc.b 4
00009E2A EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8	; walking on slope
00009E2F EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009E34 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009E39 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
00009E3E 06                         @firing:	dc.b 6
00009E3F F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0 ; firing projectiles
00009E44 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
00009E49 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
00009E4E F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
00009E53 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
00009E58 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
00009E5D 01                         @ball1:		dc.b 1
00009E5E F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8 ; projectile
00009E63 01                         @ball2:		dc.b 1
00009E64 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8 ; projectile
00009E6A 00                         		even
00009E6A 00                         		even
00009E6A                            		include	"_incObj\22 Buzz Bomber.asm"
00009E6A                            ; ===========================================================================
00009E6A                            ; ---------------------------------------------------------------------------
00009E6A                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009E6A                            ; ---------------------------------------------------------------------------
00009E6A                            

00009E6A                            BuzzBomber:
00009E6A 7000                       		moveq	#0,d0
00009E6C 1028 0024                  		move.b	obRoutine(a0),d0
00009E70 323B 0000                  		move.w	Buzz_Index(pc,d0.w),d1
00009E74 4EFB 1000                  		jmp	Buzz_Index(pc,d1.w)
00009E78                            ; ===========================================================================
00009E78 0000                       Buzz_Index:	dc.w Buzz_Main-Buzz_Index
00009E7A 0000                       		dc.w Buzz_Action-Buzz_Index
00009E7C 0000                       		dc.w Buzz_Delete-Buzz_Index
00009E7E                            

00009E7E =00000032                  buzz_timedelay:	equ $32
00009E7E =00000034                  buzz_buzzstatus:	equ $34
00009E7E =0000003C                  buzz_parent:	equ $3C
00009E7E                            ; ===========================================================================
00009E7E                            

00009E7E                            Buzz_Main:	; Routine 0
00009E7E 5428 0024                  		addq.b	#2,obRoutine(a0)
00009E82 217C 0000 0000 0004        		move.l	#Map_Buzz,obMap(a0)
00009E8A 317C 0444 0002             		move.w	#$444,obGfx(a0)
00009E90 117C 0004 0001             		move.b	#4,obRender(a0)
00009E96 117C 0003 0018             		move.b	#3,obPriority(a0)
00009E9C 117C 0008 0020             		move.b	#8,obColType(a0)
00009EA2 117C 0018 0019             		move.b	#$18,obActWid(a0)
00009EA8                            

00009EA8                            Buzz_Action:	; Routine 2
00009EA8 7000                       		moveq	#0,d0
00009EAA 1028 0025                  		move.b	ob2ndRout(a0),d0
00009EAE 323B 0000                  		move.w	@index(pc,d0.w),d1
00009EB2 4EBB 1000                  		jsr	@index(pc,d1.w)
00009EB6 43F9 0000 0000             		lea	(Ani_Buzz).l,a1
00009EBC 6100 0000                  		bsr.w	AnimateSprite
00009EC0 6000 0000                  		bra.w	RememberState
00009EC4                            ; ===========================================================================
00009EC4 0000                       @index:		dc.w @move-@index
00009EC6 0000                       		dc.w @chknearsonic-@index
00009EC8                            ; ===========================================================================
00009EC8                            

00009EC8                            @move:
00009EC8 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
00009ECC 6A00                       		bpl.s	@noflip		; if time remains, branch
00009ECE 0828 0001 0034             		btst	#1,buzz_buzzstatus(a0) ; is Buzz Bomber near Sonic?
00009ED4 6600                       		bne.s	@fire		; if yes, branch
00009ED6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00009EDA 317C 007F 0032             		move.w	#127,buzz_timedelay(a0) ; set time delay to just over 2 seconds
00009EE0 317C 0400 0010             		move.w	#$400,obVelX(a0) ; move Buzz Bomber to the right
00009EE6 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "flying" animation
00009EEC 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
00009EF2 6600                       		bne.s	@noflip		; if not, branch
00009EF4 4468 0010                  		neg.w	obVelX(a0)	; move Buzz Bomber to the left
00009EF8                            

00009EF8                            	@noflip:
00009EF8 4E75                       		rts	
00009EFA                            ; ===========================================================================
00009EFA                            

00009EFA                            	@fire:
00009EFA 6100 0000                  		bsr.w	FindFreeObj
00009EFE 6600                       		bne.s	@fail
00009F00 137C 0000 0000             		move.b	#id_Missile,0(a1) ; load missile object
00009F06 3368 0008 0008             		move.w	obX(a0),obX(a1)
00009F0C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00009F12 0669 001C 000C             		addi.w	#$1C,obY(a1)
00009F18 337C 0200 0012             		move.w	#$200,obVelY(a1) ; move missile downwards
00009F1E 337C 0200 0010             		move.w	#$200,obVelX(a1) ; move missile to the right
00009F24 303C 0018                  		move.w	#$18,d0
00009F28 0828 0000 0022             		btst	#0,obStatus(a0)	; is Buzz Bomber facing	left?
00009F2E 6600                       		bne.s	@noflip2	; if not, branch
00009F30 4440                       		neg.w	d0
00009F32 4469 0010                  		neg.w	obVelX(a1)	; move missile to the left
00009F36                            

00009F36                            	@noflip2:
00009F36 D169 0008                  		add.w	d0,obX(a1)
00009F3A 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00009F40 337C 000E 0032             		move.w	#$E,buzz_timedelay(a1)
00009F46 2348 003C                  		move.l	a0,buzz_parent(a1)
00009F4A 117C 0001 0034             		move.b	#1,buzz_buzzstatus(a0) ; set to "already fired" to prevent refiring
00009F50 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
00009F56 117C 0002 001C             		move.b	#2,obAnim(a0)	; use "firing" animation
00009F5C                            

00009F5C                            	@fail:
00009F5C 4E75                       		rts	
00009F5E                            ; ===========================================================================
00009F5E                            

00009F5E                            @chknearsonic:
00009F5E 5368 0032                  		subq.w	#1,buzz_timedelay(a0) ; subtract 1 from time delay
00009F62 6B00                       		bmi.s	@chgdirection
00009F64 6100 0000                  		bsr.w	SpeedToPos
00009F68 4A28 0034                  		tst.b	buzz_buzzstatus(a0)
00009F6C 6600                       		bne.s	@keepgoing
00009F6E 3038 D008                  		move.w	(v_player+obX).w,d0
00009F72 9068 0008                  		sub.w	obX(a0),d0
00009F76 6A00                       		bpl.s	@isleft
00009F78 4440                       		neg.w	d0
00009F7A                            

00009F7A                            	@isleft:
00009F7A 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009F7E 6400                       		bcc.s	@keepgoing	; if not, branch
00009F80 4A28 0001                  		tst.b	obRender(a0)
00009F84 6A00                       		bpl.s	@keepgoing
00009F86 117C 0002 0034             		move.b	#2,buzz_buzzstatus(a0) ; set Buzz Bomber to "near Sonic"
00009F8C 317C 001D 0032             		move.w	#29,buzz_timedelay(a0) ; set time delay to half a second
00009F92 6000                       		bra.s	@stop
00009F94                            ; ===========================================================================
00009F94                            

00009F94                            	@chgdirection:
00009F94 117C 0000 0034             		move.b	#0,buzz_buzzstatus(a0) ; set Buzz Bomber to "normal"
00009F9A 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction
00009FA0 317C 003B 0032             		move.w	#59,buzz_timedelay(a0)
00009FA6                            

00009FA6                            	@stop:
00009FA6 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00009FAA 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Buzz Bomber moving
00009FB0 117C 0000 001C             		move.b	#0,obAnim(a0)	; use "hovering" animation
00009FB6                            

00009FB6                            @keepgoing:
00009FB6 4E75                       		rts	
00009FB8                            ; ===========================================================================
00009FB8                            

00009FB8                            Buzz_Delete:	; Routine 4
00009FB8 6100 0000                  		bsr.w	DeleteObject
00009FBC 4E75                       		rts	
00009FBC 4E75                       		rts	
00009FBE                            		include	"_incObj\23 Buzz Bomber Missile.asm"
00009FBE                            ; ---------------------------------------------------------------------------
00009FBE                            ; Object 23 - missile that Buzz	Bomber throws
00009FBE                            ; ---------------------------------------------------------------------------
00009FBE                            

00009FBE                            Missile:
00009FBE 7000                       		moveq	#0,d0
00009FC0 1028 0024                  		move.b	obRoutine(a0),d0
00009FC4 323B 0000                  		move.w	Msl_Index(pc,d0.w),d1
00009FC8 4EFB 1000                  		jmp	Msl_Index(pc,d1.w)
00009FCC                            ; ===========================================================================
00009FCC 0000                       Msl_Index:	dc.w Msl_Main-Msl_Index
00009FCE 0000                       		dc.w Msl_Animate-Msl_Index
00009FD0 0000                       		dc.w Msl_FromBuzz-Msl_Index
00009FD2 0000                       		dc.w Msl_Delete-Msl_Index
00009FD4 0000                       		dc.w Msl_FromNewt-Msl_Index
00009FD6                            

00009FD6 =0000003C                  msl_parent:	equ $3C
00009FD6                            ; ===========================================================================
00009FD6                            

00009FD6                            Msl_Main:	; Routine 0
00009FD6 5368 0032                  		subq.w	#1,$32(a0)
00009FDA 6A00                       		bpl.s	Msl_ChkCancel
00009FDC 5428 0024                  		addq.b	#2,obRoutine(a0)
00009FE0 217C 0000 0000 0004        		move.l	#Map_Missile,obMap(a0)
00009FE8 317C 2444 0002             		move.w	#$2444,obGfx(a0)
00009FEE 117C 0004 0001             		move.b	#4,obRender(a0)
00009FF4 117C 0003 0018             		move.b	#3,obPriority(a0)
00009FFA 117C 0008 0019             		move.b	#8,obActWid(a0)
0000A000 0228 0003 0022             		andi.b	#3,obStatus(a0)
0000A006 4A28 0028                  		tst.b	obSubtype(a0)	; was object created by	a Newtron?
0000A00A 6700                       		beq.s	Msl_Animate	; if not, branch
0000A00C                            

0000A00C 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Msl_FromNewt" routine
0000A012 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A018 117C 0001 001C             		move.b	#1,obAnim(a0)
0000A01E 6000                       		bra.s	Msl_Animate2
0000A020                            ; ===========================================================================
0000A020                            

0000A020                            Msl_Animate:	; Routine 2
0000A020 6100                       		bsr.s	Msl_ChkCancel
0000A022 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000A028 6100 0000                  		bsr.w	AnimateSprite
0000A02C 6000 0000                  		bra.w	DisplaySprite
0000A030                            

0000A030                            ; ---------------------------------------------------------------------------
0000A030                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A030                            ; destroyed, and if it has, then cancel	the missile
0000A030                            ; ---------------------------------------------------------------------------
0000A030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A030                            

0000A030                            

0000A030                            Msl_ChkCancel:
0000A030 2268 003C                  		movea.l	msl_parent(a0),a1
0000A034 0C29 0000 0000             		cmpi.b	#id_ExplosionItem,0(a1) ; has Buzz Bomber been destroyed?
0000A03A 6700                       		beq.s	Msl_Delete	; if yes, branch
0000A03C 4E75                       		rts	
0000A03E                            ; End of function Msl_ChkCancel
0000A03E                            

0000A03E                            ; ===========================================================================
0000A03E                            

0000A03E                            Msl_FromBuzz:	; Routine 4
0000A03E 0828 0007 0022             		btst	#7,obStatus(a0)
0000A044 6600                       		bne.s	@explode
0000A046 117C 0087 0020             		move.b	#$87,obColType(a0)
0000A04C 117C 0001 001C             		move.b	#1,obAnim(a0)
0000A052 6100 0000                  		bsr.w	SpeedToPos
0000A056 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000A05C 6100 0000                  		bsr.w	AnimateSprite
0000A060 6100 0000                  		bsr.w	DisplaySprite
0000A064 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A068 0640 00E0                  		addi.w	#$E0,d0
0000A06C B068 000C                  		cmp.w	obY(a0),d0	; has object moved below the level boundary?
0000A070 6500                       		bcs.s	Msl_Delete	; if yes, branch
0000A072 4E75                       		rts	
0000A074                            ; ===========================================================================
0000A074                            

0000A074                            	@explode:
0000A074 117C 0000 0000             		move.b	#id_MissileDissolve,0(a0) ; change object to an explosion (Obj24)
0000A07A 117C 0000 0024             		move.b	#0,obRoutine(a0)
0000A080 6000 F2FC                  		bra.w	MissileDissolve
0000A084                            ; ===========================================================================
0000A084                            

0000A084                            Msl_Delete:	; Routine 6
0000A084 6100 0000                  		bsr.w	DeleteObject
0000A088 4E75                       		rts	
0000A08A                            ; ===========================================================================
0000A08A                            

0000A08A                            Msl_FromNewt:	; Routine 8
0000A08A 4A28 0001                  		tst.b	obRender(a0)
0000A08E 6AF4                       		bpl.s	Msl_Delete
0000A090 6100 0000                  		bsr.w	SpeedToPos
0000A094                            

0000A094                            Msl_Animate2:
0000A094 43F9 0000 0000             		lea	(Ani_Missile).l,a1
0000A09A 6100 0000                  		bsr.w	AnimateSprite
0000A09E 6100 0000                  		bsr.w	DisplaySprite
0000A0A2 4E75                       		rts	
0000A0A2 4E75                       		rts	
0000A0A4                            		include	"_anim\Buzz Bomber.asm"
0000A0A4                            ; ---------------------------------------------------------------------------
0000A0A4                            ; Animation script - Buzz Bomber enemy
0000A0A4                            ; ---------------------------------------------------------------------------
0000A0A4 0000                       Ani_Buzz:	dc.w @fly1-Ani_Buzz
0000A0A6 0000                       		dc.w @fly2-Ani_Buzz
0000A0A8 0000                       		dc.w @fires-Ani_Buzz
0000A0AA 0100 01FF                  @fly1:		dc.b 1,	0, 1, afEnd
0000A0AE 0102 03FF                  @fly2:		dc.b 1,	2, 3, afEnd
0000A0B2 0104 05FF                  @fires:		dc.b 1,	4, 5, afEnd
0000A0B6                            		even
0000A0B6                            		even
0000A0B6                            		include	"_anim\Buzz Bomber Missile.asm"
0000A0B6                            ; ---------------------------------------------------------------------------
0000A0B6                            ; Animation script - missile that Buzz Bomber throws
0000A0B6                            ; ---------------------------------------------------------------------------
0000A0B6 0000                       Ani_Missile:	dc.w @flare-Ani_Missile
0000A0B8 0000                       		dc.w @missile-Ani_Missile
0000A0BA 0700 01FC                  @flare:		dc.b 7,	0, 1, afRoutine
0000A0BE 0102 03FF                  @missile:	dc.b 1,	2, 3, afEnd
0000A0C2                            		even
0000A0C2                            		even
0000A0C2                            Map_Buzz:	include	"_maps\Buzz Bomber.asm"
0000A0C2                            ; ---------------------------------------------------------------------------
0000A0C2                            ; Sprite mappings - Buzz Bomber	enemy
0000A0C2                            ; ---------------------------------------------------------------------------
0000A0C2                            Map_Buzz_internal:
0000A0C2 0000                       		dc.w @Fly1-Map_Buzz_internal
0000A0C4 0000                       		dc.w @Fly2-Map_Buzz_internal
0000A0C6 0000                       		dc.w @Fly3-Map_Buzz_internal
0000A0C8 0000                       		dc.w @Fly4-Map_Buzz_internal
0000A0CA 0000                       		dc.w @Fire1-Map_Buzz_internal
0000A0CC 0000                       		dc.w @Fire2-Map_Buzz_internal
0000A0CE 06                         @Fly1:		dc.b 6
0000A0CF F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8	; flying
0000A0D4 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A0D9 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A0DE 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A0E3 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A0E8 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A0ED 06                         @Fly2:		dc.b 6
0000A0EE F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A0F3 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A0F8 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A0FD 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A102 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A107 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A10C 07                         @Fly3:		dc.b 7
0000A10D 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
0000A112 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A117 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A11C 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A121 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A126 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A12B F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A130 07                         @Fly4:		dc.b 7
0000A131 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
0000A136 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
0000A13B F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
0000A140 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
0000A145 0404 0018 00               		dc.b 4,	4, 0, $18, 0
0000A14A F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A14F F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A154 06                         @Fire1:		dc.b 6
0000A155 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC	; stopping and firing
0000A15A 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A15F 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A164 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A169 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
0000A16E F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
0000A173 04                         @Fire2:		dc.b 4
0000A174 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
0000A179 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
0000A17E 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
0000A183 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
0000A188 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
0000A18D F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
0000A192                            		even
0000A192                            		even
0000A192                            Map_Missile:	include	"_maps\Buzz Bomber Missile.asm"
0000A192                            ; ---------------------------------------------------------------------------
0000A192                            ; Sprite mappings - missile that Buzz Bomber throws
0000A192                            ; ---------------------------------------------------------------------------
0000A192                            Map_Missile_internal:
0000A192 0000                       		dc.w @Flare1-Map_Missile_internal
0000A194 0000                       		dc.w @Flare2-Map_Missile_internal
0000A196 0000                       		dc.w @Ball1-Map_Missile_internal
0000A198 0000                       		dc.w @Ball2-Map_Missile_internal
0000A19A 01                         @Flare1:	dc.b 1
0000A19B F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8 ; buzz bomber firing flare
0000A1A0 01                         @Flare2:	dc.b 1
0000A1A1 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A1A6 01                         @Ball1:		dc.b 1
0000A1A7 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8 ; missile itself
0000A1AC 01                         @Ball2:		dc.b 1
0000A1AD F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A1B2                            		even
0000A1B2                            		even
0000A1B2                            

0000A1B2                            		include	"_incObj\25 & 37 Rings.asm"
0000A1B2                            ; ---------------------------------------------------------------------------
0000A1B2                            ; Object 25 - rings
0000A1B2                            ; ---------------------------------------------------------------------------
0000A1B2                            

0000A1B2                            Rings:
0000A1B2 7000                       		moveq	#0,d0
0000A1B4 1028 0024                  		move.b	obRoutine(a0),d0
0000A1B8 323B 0000                  		move.w	Ring_Index(pc,d0.w),d1
0000A1BC 4EFB 1000                  		jmp	Ring_Index(pc,d1.w)
0000A1C0                            ; ===========================================================================
0000A1C0                            Ring_Index:
0000A1C0 0000                       ptr_Ring_Main:		dc.w Ring_Main-Ring_Index
0000A1C2 0000                       ptr_Ring_Animate:	dc.w Ring_Animate-Ring_Index
0000A1C4 0000                       ptr_Ring_Collect:	dc.w Ring_Collect-Ring_Index
0000A1C6 0000                       ptr_Ring_Sparkle:	dc.w Ring_Sparkle-Ring_Index
0000A1C8 0000                       ptr_Ring_Delete:	dc.w Ring_Delete-Ring_Index
0000A1CA                            

0000A1CA =00000000                  id_Ring_Main:		equ ptr_Ring_Main-Ring_Index	; 0
0000A1CA =00000002                  id_Ring_Animate:		equ ptr_Ring_Animate-Ring_Index	; 2
0000A1CA =00000004                  id_Ring_Collect:		equ ptr_Ring_Collect-Ring_Index	; 4
0000A1CA =00000006                  id_Ring_Sparkle:		equ ptr_Ring_Sparkle-Ring_Index	; 6
0000A1CA =00000008                  id_Ring_Delete:		equ ptr_Ring_Delete-Ring_Index	; 8
0000A1CA                            ; ---------------------------------------------------------------------------
0000A1CA                            ; Distances between rings (format: horizontal, vertical)
0000A1CA                            ; ---------------------------------------------------------------------------
0000A1CA 1000                       Ring_PosData:	dc.b $10, 0		; horizontal tight
0000A1CC 1800                       		dc.b $18, 0		; horizontal normal
0000A1CE 2000                       		dc.b $20, 0		; horizontal wide
0000A1D0 0010                       		dc.b 0,	$10		; vertical tight
0000A1D2 0018                       		dc.b 0,	$18		; vertical normal
0000A1D4 0020                       		dc.b 0,	$20		; vertical wide
0000A1D6 1010                       		dc.b $10, $10		; diagonal
0000A1D8 1818                       		dc.b $18, $18
0000A1DA 2020                       		dc.b $20, $20
0000A1DC F010                       		dc.b $F0, $10
0000A1DE E818                       		dc.b $E8, $18
0000A1E0 E020                       		dc.b $E0, $20
0000A1E2 1008                       		dc.b $10, 8
0000A1E4 1810                       		dc.b $18, $10
0000A1E6 F008                       		dc.b $F0, 8
0000A1E8 E810                       		dc.b $E8, $10
0000A1EA                            ; ===========================================================================
0000A1EA                            

0000A1EA                            Ring_Main:	; Routine 0
0000A1EA 45F8 FC00                  		lea	(v_objstate).w,a2
0000A1EE 7000                       		moveq	#0,d0
0000A1F0 1028 0023                  		move.b	obRespawnNo(a0),d0
0000A1F4 45F2 0002                  		lea	2(a2,d0.w),a2
0000A1F8 1812                       		move.b	(a2),d4
0000A1FA 1228 0028                  		move.b	obSubtype(a0),d1
0000A1FE 1001                       		move.b	d1,d0
0000A200 0241 0007                  		andi.w	#7,d1
0000A204 0C41 0007                  		cmpi.w	#7,d1
0000A208 6600                       		bne.s	loc_9B80
0000A20A 7206                       		moveq	#6,d1
0000A20C                            

0000A20C                            	loc_9B80:
0000A20C 4841                       		swap	d1
0000A20E 323C 0000                  		move.w	#0,d1
0000A212 E808                       		lsr.b	#4,d0
0000A214 D040                       		add.w	d0,d0
0000A216 1A3B 00B2                  		move.b	Ring_PosData(pc,d0.w),d5 ; load ring spacing data
0000A21A 4885                       		ext.w	d5
0000A21C 1C3B 00AD                  		move.b	Ring_PosData+1(pc,d0.w),d6
0000A220 4886                       		ext.w	d6
0000A222 2248                       		movea.l	a0,a1
0000A224 3428 0008                  		move.w	obX(a0),d2
0000A228 3628 000C                  		move.w	obY(a0),d3
0000A22C E20C                       		lsr.b	#1,d4
0000A22E 6500                       		bcs.s	loc_9C02
0000A230 0892 0007                  		bclr	#7,(a2)
0000A234 6000                       		bra.s	loc_9BBA
0000A236                            ; ===========================================================================
0000A236                            

0000A236                            Ring_MakeRings:
0000A236 4841                       		swap	d1
0000A238 E20C                       		lsr.b	#1,d4
0000A23A 6500                       		bcs.s	loc_9C02
0000A23C 0892 0007                  		bclr	#7,(a2)
0000A240 6100 0000                  		bsr.w	FindFreeObj
0000A244 6600                       		bne.s	loc_9C0E
0000A246                            

0000A246                            loc_9BBA:
0000A246 137C 0000 0000             		move.b	#id_Rings,0(a1)	; load ring object
0000A24C 5429 0024                  		addq.b	#2,obRoutine(a1)
0000A250 3342 0008                  		move.w	d2,obX(a1)	; set x-axis position based on d2
0000A254 3368 0008 0032             		move.w	obX(a0),$32(a1)
0000A25A 3343 000C                  		move.w	d3,obY(a1)	; set y-axis position based on d3
0000A25E 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000A266 337C 27B2 0002             		move.w	#$27B2,obGfx(a1)
0000A26C 137C 0004 0001             		move.b	#4,obRender(a1)
0000A272 137C 0002 0018             		move.b	#2,obPriority(a1)
0000A278 137C 0047 0020             		move.b	#$47,obColType(a1)
0000A27E 137C 0008 0019             		move.b	#8,obActWid(a1)
0000A284 1368 0023 0023             		move.b	obRespawnNo(a0),obRespawnNo(a1)
0000A28A 1341 0034                  		move.b	d1,$34(a1)
0000A28E                            

0000A28E                            loc_9C02:
0000A28E 5241                       		addq.w	#1,d1
0000A290 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A292 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A294 4841                       		swap	d1
0000A296 51C9 FF9E                  		dbf	d1,Ring_MakeRings ; repeat for	number of rings
0000A29A                            

0000A29A                            loc_9C0E:
0000A29A 0812 0000                  		btst	#0,(a2)
0000A29E 6600 0000                  		bne.w	DeleteObject
0000A2A2                            

0000A2A2                            Ring_Animate:	; Routine 2
0000A2A2 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0) ; set frame
0000A2A8 6100 0000                  		bsr.w	DisplaySprite
0000A2C8 4E75                       		rts	
0000A2CA                            ; ===========================================================================
0000A2CA                            

0000A2CA                            Ring_Collect:	; Routine 4
0000A2CA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A2CE 117C 0000 0020             		move.b	#0,obColType(a0)
0000A2D4 117C 0001 0018             		move.b	#1,obPriority(a0)
0000A2DA 6100 0000                  		bsr.w	CollectRing
0000A2DE 45F8 FC00                  		lea	(v_objstate).w,a2
0000A2E2 7000                       		moveq	#0,d0
0000A2E4 1028 0023                  		move.b	obRespawnNo(a0),d0
0000A2E8 1228 0034                  		move.b	$34(a0),d1
0000A2EC 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A2F0                            

0000A2F0                            Ring_Sparkle:	; Routine 6
0000A2F0 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000A2F6 6100 0000                  		bsr.w	AnimateSprite
0000A2FA 6000 0000                  		bra.w	DisplaySprite
0000A2FE                            ; ===========================================================================
0000A2FE                            

0000A2FE                            Ring_Delete:	; Routine 8
0000A2FE 6000 0000                  		bra.w	DeleteObject
0000A302                            

0000A302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A302                            

0000A302                            

0000A302                            CollectRing:
0000A302 5278 FE20                  		addq.w	#1,(v_rings).w	; add 1 to rings
0000A306 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the rings counter
0000A30C 303C 0000                  		move.w	#sfx_Ring,d0	; play ring sound
0000A310 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; do you have < 100 rings?
0000A316 6500                       		bcs.s	@playsnd	; if yes, branch
0000A318 08F8 0001 FE1B             		bset	#1,(v_lifecount).w ; update lives counter
0000A31E 6700                       		beq.s	@got100
0000A320 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; do you have < 200 rings?
0000A326 6500                       		bcs.s	@playsnd	; if yes, branch
0000A328 08F8 0002 FE1B             		bset	#2,(v_lifecount).w ; update lives counter
0000A32E 6600                       		bne.s	@playsnd
0000A330                            

0000A330                            	@got100:
0000A330 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000A334 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000A338 303C 0000                  		move.w	#bgm_ExtraLife,d0 ; play extra life music
0000A33C                            

0000A33C                            	@playsnd:
0000A33C 4EF9 0000 13A2             		jmp	(PlaySound_Special).l
0000A342                            ; End of function CollectRing
0000A342                            

0000A342                            ; ===========================================================================
0000A342                            ; ---------------------------------------------------------------------------
0000A342                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A342                            ; ---------------------------------------------------------------------------
0000A342                            

0000A342                            RingLoss:
0000A342 7000                       		moveq	#0,d0
0000A344 1028 0024                  		move.b	obRoutine(a0),d0
0000A348 323B 0000                  		move.w	RLoss_Index(pc,d0.w),d1
0000A34C 4EFB 1000                  		jmp	RLoss_Index(pc,d1.w)
0000A350                            ; ===========================================================================
0000A350 0000                       RLoss_Index:	dc.w RLoss_Count-RLoss_Index
0000A352 0000                       		dc.w RLoss_Bounce-RLoss_Index
0000A354 0000                       		dc.w RLoss_Collect-RLoss_Index
0000A356 0000                       		dc.w RLoss_Sparkle-RLoss_Index
0000A358 0000                       		dc.w RLoss_Delete-RLoss_Index
0000A35A                            ; ===========================================================================
0000A35A                            

0000A35A                            RLoss_Count:	; Routine 0
0000A35A 2248                       		movea.l	a0,a1
0000A35C 7A00                       		moveq	#0,d5
0000A35E 3A38 FE20                  		move.w	(v_rings).w,d5	; check number of rings you have
0000A362 7020                       		moveq	#32,d0
0000A364 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A366 6500                       		bcs.s	@belowmax	; if not, branch
0000A368 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A36A                            

0000A36A                            	@belowmax:
0000A36A 5345                       		subq.w	#1,d5
0000A36C 383C 0288                  		move.w	#$288,d4
0000A370 6000                       		bra.s	@makerings
0000A372                            ; ===========================================================================
0000A372                            

0000A372                            	@loop:
0000A372 6100 0000                  		bsr.w	FindFreeObj
0000A376 6600 0000                  		bne.w	@resetcounter
0000A37A                            

0000A37A                            @makerings:
0000A37A 137C 0000 0000             		move.b	#id_RingLoss,0(a1) ; load bouncing ring object
0000A380 5429 0024                  		addq.b	#2,obRoutine(a1)
0000A384 137C 0008 0016             		move.b	#8,obHeight(a1)
0000A38A 137C 0008 0017             		move.b	#8,obWidth(a1)
0000A390 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A396 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A39C 237C 0000 0000 0004        		move.l	#Map_Ring,obMap(a1)
0000A3A4 337C 27B2 0002             		move.w	#$27B2,obGfx(a1)
0000A3AA 137C 0004 0001             		move.b	#4,obRender(a1)
0000A3B0 137C 0003 0018             		move.b	#3,obPriority(a1)
0000A3B6 137C 0047 0020             		move.b	#$47,obColType(a1)
0000A3BC 137C 0008 0019             		move.b	#8,obActWid(a1)
0000A3C2 11FC 00FF FEC6             		move.b	#-1,(v_ani3_time).w
0000A3C8 4A44                       		tst.w	d4
0000A3CA 6B00                       		bmi.s	@loc_9D62
0000A3CC 3004                       		move.w	d4,d0
0000A3CE 6100 8610                  		bsr.w	CalcSine
0000A3D2 3404                       		move.w	d4,d2
0000A3D4 E04A                       		lsr.w	#8,d2
0000A3D6 E560                       		asl.w	d2,d0
0000A3D8 E561                       		asl.w	d2,d1
0000A3DA 3400                       		move.w	d0,d2
0000A3DC 3601                       		move.w	d1,d3
0000A3DE 0604 0010                  		addi.b	#$10,d4
0000A3E2 6400                       		bcc.s	@loc_9D62
0000A3E4 0444 0080                  		subi.w	#$80,d4
0000A3E8 6400                       		bcc.s	@loc_9D62
0000A3EA 383C 0288                  		move.w	#$288,d4
0000A3EE                            

0000A3EE                            	@loc_9D62:
0000A3EE 3342 0010                  		move.w	d2,obVelX(a1)
0000A3F2 3343 0012                  		move.w	d3,obVelY(a1)
0000A3F6 4442                       		neg.w	d2
0000A3F8 4444                       		neg.w	d4
0000A3FA 51CD FF76                  		dbf	d5,@loop	; repeat for number of rings (max 31)
0000A3FE                            

0000A3FE                            @resetcounter:
0000A3FE 31FC 0000 FE20             		move.w	#0,(v_rings).w	; reset number of rings to zero
0000A404 11FC 0080 FE1D             		move.b	#$80,(f_ringcount).w ; update ring counter
0000A40A 11FC 0000 FE1B             		move.b	#0,(v_lifecount).w
0000A410 303C 0000                  		move.w	#sfx_RingLoss,d0
0000A414 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play ring loss sound
0000A41A                            

0000A41A                            RLoss_Bounce:	; Routine 2
0000A41A 1178 FEC7 001A             		move.b	(v_ani3_frame).w,obFrame(a0)
0000A420 6100 0000                  		bsr.w	SpeedToPos
0000A424 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000A42A 6B00                       		bmi.s	@chkdel
0000A42C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000A430 D007                       		add.b	d7,d0
0000A432 0200 0003                  		andi.b	#3,d0
0000A436 6600                       		bne.s	@chkdel
0000A438 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A43E 4A41                       		tst.w	d1
0000A440 6A00                       		bpl.s	@chkdel
0000A442 D368 000C                  		add.w	d1,obY(a0)
0000A446 3028 0012                  		move.w	obVelY(a0),d0
0000A44A E440                       		asr.w	#2,d0
0000A44C 9168 0012                  		sub.w	d0,obVelY(a0)
0000A450 4468 0012                  		neg.w	obVelY(a0)
0000A454                            

0000A454                            	@chkdel:
0000A454 4A38 FEC6                  		tst.b	(v_ani3_time).w
0000A458 6700                       		beq.s	RLoss_Delete
0000A45A 3038 F72E                  		move.w	(v_limitbtm2).w,d0
0000A45E 0640 00E0                  		addi.w	#$E0,d0
0000A462 B068 000C                  		cmp.w	obY(a0),d0	; has object moved below level boundary?
0000A466 6500                       		bcs.s	RLoss_Delete	; if yes, branch
0000A468 6000 0000                  		bra.w	DisplaySprite
0000A46C                            ; ===========================================================================
0000A46C                            

0000A46C                            RLoss_Collect:	; Routine 4
0000A46C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A470 117C 0000 0020             		move.b	#0,obColType(a0)
0000A476 117C 0001 0018             		move.b	#1,obPriority(a0)
0000A47C 6100 FE84                  		bsr.w	CollectRing
0000A480                            

0000A480                            RLoss_Sparkle:	; Routine 6
0000A480 43F9 0000 0000             		lea	(Ani_Ring).l,a1
0000A486 6100 0000                  		bsr.w	AnimateSprite
0000A48A 6000 0000                  		bra.w	DisplaySprite
0000A48E                            ; ===========================================================================
0000A48E                            

0000A48E                            RLoss_Delete:	; Routine 8
0000A48E 6000 0000                  		bra.w	DeleteObject
0000A48E 6000 0000                  		bra.w	DeleteObject
0000A492                            		include	"_incObj\4B Giant Ring.asm"
0000A492                            ; ---------------------------------------------------------------------------
0000A492                            ; Object 4B - giant ring for entry to special stage
0000A492                            ; ---------------------------------------------------------------------------
0000A492                            

0000A492                            GiantRing:
0000A492 7000                       		moveq	#0,d0
0000A494 1028 0024                  		move.b	obRoutine(a0),d0
0000A498 323B 0000                  		move.w	GRing_Index(pc,d0.w),d1
0000A49C 4EFB 1000                  		jmp	GRing_Index(pc,d1.w)
0000A4A0                            ; ===========================================================================
0000A4A0 0000                       GRing_Index:	dc.w GRing_Main-GRing_Index
0000A4A2 0000                       		dc.w GRing_Animate-GRing_Index
0000A4A4 0000                       		dc.w GRing_Collect-GRing_Index
0000A4A6 0000                       		dc.w GRing_Delete-GRing_Index
0000A4A8                            ; ===========================================================================
0000A4A8                            

0000A4A8                            GRing_Main:	; Routine 0
0000A4A8 217C 0000 0000 0004        		move.l	#Map_GRing,obMap(a0)
0000A4B0 317C 2400 0002             		move.w	#$2400,obGfx(a0)
0000A4B6 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A4BC 117C 0040 0019             		move.b	#$40,obActWid(a0)
0000A4C2 4A28 0001                  		tst.b	obRender(a0)
0000A4C6 6A00                       		bpl.s	GRing_Animate
0000A4C8 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have 6 emeralds?
0000A4CE 6700 0000                  		beq.w	GRing_Delete	; if yes, branch
0000A4D2 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000A4D8 6400                       		bcc.s	GRing_Okay	; if yes, branch
0000A4DA 4E75                       		rts	
0000A4DC                            ; ===========================================================================
0000A4DC                            

0000A4DC                            GRing_Okay:
0000A4DC 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A4E0 117C 0002 0018             		move.b	#2,obPriority(a0)
0000A4E6 117C 0052 0020             		move.b	#$52,obColType(a0)
0000A4EC 31FC 0C40 F7BE             		move.w	#$C40,(v_gfxbigring).w	; Signal that Art_BigRing should be loaded ($C40 is the size of Art_BigRing)
0000A4F2                            

0000A4F2                            GRing_Animate:	; Routine 2
0000A4F2 1178 FEC3 001A             		move.b	(v_ani1_frame).w,obFrame(a0)
0000A516 6000 0000                  		bra.w	DisplaySprite
0000A51A                            ; ===========================================================================
0000A51A                            

0000A51A                            GRing_Collect:	; Routine 4
0000A51A 5528 0024                  		subq.b	#2,obRoutine(a0)
0000A51E 117C 0000 0020             		move.b	#0,obColType(a0)
0000A524 6100 0000                  		bsr.w	FindFreeObj
0000A528 6600 0000                  		bne.w	GRing_PlaySnd
0000A52C 137C 0000 0000             		move.b	#id_RingFlash,0(a1) ; load giant ring flash object
0000A532 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A538 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A53E 2348 003C                  		move.l	a0,$3C(a1)
0000A542 3038 D008                  		move.w	(v_player+obX).w,d0
0000A546 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic come from the left?
0000A54A 6500                       		bcs.s	GRing_PlaySnd	; if yes, branch
0000A54C 08E9 0000 0001             		bset	#0,obRender(a1)	; reverse flash	object
0000A552                            

0000A552                            GRing_PlaySnd:
0000A552 303C 0000                  		move.w	#sfx_GiantRing,d0
0000A556 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play giant ring sound
0000A55C 6094                       		bra.s	GRing_Animate
0000A55E                            ; ===========================================================================
0000A55E                            

0000A55E                            GRing_Delete:	; Routine 6
0000A55E 6000 0000                  		bra.w	DeleteObject
0000A55E 6000 0000                  		bra.w	DeleteObject
0000A562                            		include	"_incObj\7C Ring Flash.asm"
0000A562                            ; ---------------------------------------------------------------------------
0000A562                            ; Object 7C - flash effect when	you collect the	giant ring
0000A562                            ; ---------------------------------------------------------------------------
0000A562                            

0000A562                            RingFlash:
0000A562 7000                       		moveq	#0,d0
0000A564 1028 0024                  		move.b	obRoutine(a0),d0
0000A568 323B 0000                  		move.w	Flash_Index(pc,d0.w),d1
0000A56C 4EFB 1000                  		jmp	Flash_Index(pc,d1.w)
0000A570                            ; ===========================================================================
0000A570 0000                       Flash_Index:	dc.w Flash_Main-Flash_Index
0000A572 0000                       		dc.w Flash_ChkDel-Flash_Index
0000A574 0000                       		dc.w Flash_Delete-Flash_Index
0000A576                            ; ===========================================================================
0000A576                            

0000A576                            Flash_Main:	; Routine 0
0000A576 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A57A 217C 0000 0000 0004        		move.l	#Map_Flash,obMap(a0)
0000A582 317C 2462 0002             		move.w	#$2462,obGfx(a0)
0000A588 0028 0004 0001             		ori.b	#4,obRender(a0)
0000A58E 117C 0000 0018             		move.b	#0,obPriority(a0)
0000A594 117C 0020 0019             		move.b	#$20,obActWid(a0)
0000A59A 117C 00FF 001A             		move.b	#$FF,obFrame(a0)
0000A5A0                            

0000A5A0                            Flash_ChkDel:	; Routine 2
0000A5A0 6100                       		bsr.s	Flash_Collect
0000A5C0 6000 0000                  		bra.w	DisplaySprite
0000A5C4                            

0000A5C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A5C4                            

0000A5C4                            

0000A5C4                            Flash_Collect:
0000A5C4 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000A5C8 6A00                       		bpl.s	locret_9F76
0000A5CA 117C 0001 001E             		move.b	#1,obTimeFrame(a0)
0000A5D0 5228 001A                  		addq.b	#1,obFrame(a0)
0000A5D4 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)	; has animation	finished?
0000A5DA 6400                       		bcc.s	Flash_End	; if yes, branch
0000A5DC 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is 3rd frame displayed?
0000A5E2 6600                       		bne.s	locret_9F76	; if not, branch
0000A5E4 2268 003C                  		movea.l	$3C(a0),a1	; get parent object address
0000A5E8 137C 0006 0024             		move.b	#6,obRoutine(a1) ; delete parent object
0000A5EE 11FC 0000 D01C             		move.b	#id_Null,(v_player+obAnim).w ; make Sonic invisible
0000A5F4 11FC 0001 F7CD             		move.b	#1,(f_bigring).w ; stop	Sonic getting bonuses
0000A5FA 4238 FE2D                  		clr.b	(v_invinc).w	; remove invincibility
0000A5FE 4238 FE2C                  		clr.b	(v_shield).w	; remove shield
0000A602                            

0000A602                            locret_9F76:
0000A602 4E75                       		rts	
0000A604                            ; ===========================================================================
0000A604                            

0000A604                            Flash_End:
0000A604 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A608 31FC 0000 D000             		move.w	#0,(v_player).w ; remove Sonic object
0000A60E 588F                       		addq.l	#4,sp
0000A610 4E75                       		rts	
0000A612                            ; End of function Flash_Collect
0000A612                            

0000A612                            ; ===========================================================================
0000A612                            

0000A612                            Flash_Delete:	; Routine 4
0000A612 6000 0000                  		bra.w	DeleteObject
0000A612 6000 0000                  		bra.w	DeleteObject
0000A616                            

0000A616                            		include	"_anim\Rings.asm"
0000A616                            ; ---------------------------------------------------------------------------
0000A616                            ; Animation script - ring
0000A616                            ; ---------------------------------------------------------------------------
0000A616 0000                       Ani_Ring:	dc.w @ring-Ani_Ring
0000A618 0504 0506 07FC             @ring:		dc.b 5,	4, 5, 6, 7, afRoutine
0000A61E                            		even
0000A61E                            		even
0000A61E                            Map_Ring:		include	"_maps\Rings (JP1).asm"
0000A61E                            ; ---------------------------------------------------------------------------
0000A61E                            ; Sprite mappings - rings
0000A61E                            ; ---------------------------------------------------------------------------
0000A61E                            Map_Ring_internal:
0000A61E 0000                       		dc.w @front-Map_Ring_internal
0000A620 0000                       		dc.w @angle1-Map_Ring_internal
0000A622 0000                       		dc.w @edge-Map_Ring_internal
0000A624 0000                       		dc.w @angle2-Map_Ring_internal
0000A626 0000                       		dc.w @sparkle1-Map_Ring_internal
0000A628 0000                       		dc.w @sparkle2-Map_Ring_internal
0000A62A 0000                       		dc.w @sparkle3-Map_Ring_internal
0000A62C 0000                       		dc.w @sparkle4-Map_Ring_internal
0000A62E 0000                       		dc.w @blank-Map_Ring_internal
0000A630 01                         @front:		dc.b 1
0000A631 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; ring front
0000A636 01                         @angle1:	dc.b 1
0000A637 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8	; ring angle
0000A63C 01                         @edge:		dc.b 1
0000A63D F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC	; ring perpendicular
0000A642 01                         @angle2:	dc.b 1
0000A643 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8	; ring angle
0000A648 01                         @sparkle1:	dc.b 1
0000A649 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8	; sparkle
0000A64E 01                         @sparkle2:	dc.b 1
0000A64F F805 180A F8               		dc.b $F8, 5, $18, $A, $F8 ; sparkle
0000A654 01                         @sparkle3:	dc.b 1
0000A655 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8	;sparkle
0000A65A 01                         @sparkle4:	dc.b 1
0000A65B F805 100A F8               		dc.b $F8, 5, $10, $A, $F8 ; sparkle
0000A660 00                         @blank:		dc.b 0
0000A662 00                         		even
0000A662 00                         		even
0000A662                            Map_GRing:	include	"_maps\Giant Ring.asm"
0000A662                            ; ---------------------------------------------------------------------------
0000A662                            ; Sprite mappings - giant ring
0000A662                            ; ---------------------------------------------------------------------------
0000A662                            Map_GRing_internal:
0000A662 0000                       		dc.w byte_9FDA-Map_GRing_internal
0000A664 0000                       		dc.w byte_A00D-Map_GRing_internal
0000A666 0000                       		dc.w byte_A036-Map_GRing_internal
0000A668 0000                       		dc.w byte_A04B-Map_GRing_internal
0000A66A 0A                         byte_9FDA:	dc.b $A
0000A66B E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8	; ring front
0000A670 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A675 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A67A E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A67F F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A684 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A689 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A68E 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A693 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A698 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A69D 08                         byte_A00D:	dc.b 8
0000A69E E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0 ; ring angle
0000A6A3 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A6A8 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A6AD F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A6B2 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A6B7 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A6BC 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A6C1 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A6C6 04                         byte_A036:	dc.b 4
0000A6C7 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4 ; ring perpendicular
0000A6CC E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A6D1 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A6D6 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A6DB 08                         byte_A04B:	dc.b 8
0000A6DC E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0 ; ring angle
0000A6E1 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A6E6 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A6EB F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A6F0 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A6F5 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A6FA 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A6FF 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A704                            		even
0000A704                            		even
0000A704                            Map_Flash:	include	"_maps\Ring Flash.asm"
0000A704                            ; ---------------------------------------------------------------------------
0000A704                            ; Sprite mappings - flash effect when you collect the giant ring
0000A704                            ; ---------------------------------------------------------------------------
0000A704                            Map_Flash_internal:
0000A704 0000                       		dc.w byte_A084-Map_Flash_internal
0000A706 0000                       		dc.w byte_A08F-Map_Flash_internal
0000A708 0000                       		dc.w byte_A0A4-Map_Flash_internal
0000A70A 0000                       		dc.w byte_A0B9-Map_Flash_internal
0000A70C 0000                       		dc.w byte_A0CE-Map_Flash_internal
0000A70E 0000                       		dc.w byte_A0E3-Map_Flash_internal
0000A710 0000                       		dc.w byte_A0F8-Map_Flash_internal
0000A712 0000                       		dc.w byte_A103-Map_Flash_internal
0000A714 02                         byte_A084:	dc.b 2
0000A715 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A71A 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A71F 04                         byte_A08F:	dc.b 4
0000A720 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A725 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A72A 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A72F 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A734 04                         byte_A0A4:	dc.b 4
0000A735 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A73A E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A73F 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A744 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A749 04                         byte_A0B9:	dc.b 4
0000A74A E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A74F E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A754 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A759 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A75E 04                         byte_A0CE:	dc.b 4
0000A75F E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A764 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A769 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A76E 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A773 04                         byte_A0E3:	dc.b 4
0000A774 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A779 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A77E 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A783 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A788 02                         byte_A0F8:	dc.b 2
0000A789 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A78E 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A793 04                         byte_A103:	dc.b 4
0000A794 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A799 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A79E 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A7A3 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A7A8                            		even
0000A7A8                            		even
0000A7A8                            		include	"_incObj\26 Monitor.asm"
0000A7A8                            ; ---------------------------------------------------------------------------
0000A7A8                            ; Object 26 - monitors
0000A7A8                            ; ---------------------------------------------------------------------------
0000A7A8                            

0000A7A8                            Monitor:
0000A7A8 7000                       		moveq	#0,d0
0000A7AA 1028 0024                  		move.b	obRoutine(a0),d0
0000A7AE 323B 0000                  		move.w	Mon_Index(pc,d0.w),d1
0000A7B2 4EFB 1000                  		jmp	Mon_Index(pc,d1.w)
0000A7B6                            ; ===========================================================================
0000A7B6 0000                       Mon_Index:	dc.w Mon_Main-Mon_Index
0000A7B8 0000                       		dc.w Mon_Solid-Mon_Index
0000A7BA 0000                       		dc.w Mon_BreakOpen-Mon_Index
0000A7BC 0000                       		dc.w Mon_Animate-Mon_Index
0000A7BE 0000                       		dc.w Mon_Display-Mon_Index
0000A7C0                            ; ===========================================================================
0000A7C0                            

0000A7C0                            Mon_Main:	; Routine 0
0000A7C0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A7C4 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000A7CA 117C 000E 0017             		move.b	#$E,obWidth(a0)
0000A7D0 217C 0000 0000 0004        		move.l	#Map_Monitor,obMap(a0)
0000A7D8 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000A7DE 117C 0004 0001             		move.b	#4,obRender(a0)
0000A7E4 117C 0003 0018             		move.b	#3,obPriority(a0)
0000A7EA 117C 000F 0019             		move.b	#$F,obActWid(a0)
0000A7F0 45F8 FC00                  		lea	(v_objstate).w,a2
0000A7F4 7000                       		moveq	#0,d0
0000A7F6 1028 0023                  		move.b	obRespawnNo(a0),d0
0000A7FA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A800 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A806 6700                       		beq.s	@notbroken	; if not, branch
0000A808 117C 0008 0024             		move.b	#8,obRoutine(a0) ; run "Mon_Display" routine
0000A80E 117C 000B 001A             		move.b	#$B,obFrame(a0)	; use broken monitor frame
0000A814 4E75                       		rts	
0000A816                            ; ===========================================================================
0000A816                            

0000A816                            	@notbroken:
0000A816 117C 0046 0020             		move.b	#$46,obColType(a0)
0000A81C 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0)
0000A822                            

0000A822                            Mon_Solid:	; Routine 2
0000A822 1028 0025                  		move.b	ob2ndRout(a0),d0 ; is monitor set to fall?
0000A826 6700                       		beq.s	@normal		; if not, branch
0000A828 5500                       		subq.b	#2,d0
0000A82A 6600                       		bne.s	@fall
0000A82C                            

0000A82C                            		; 2nd Routine 2
0000A82C 7200                       		moveq	#0,d1
0000A82E 1228 0019                  		move.b	obActWid(a0),d1
0000A832 0641 000B                  		addi.w	#$B,d1
0000A836 6100 D414                  		bsr.w	ExitPlatform
0000A83A 0829 0003 0022             		btst	#3,obStatus(a1) ; is Sonic on top of the monitor?
0000A840 6600 0000                  		bne.w	@ontop		; if yes, branch
0000A844 4228 0025                  		clr.b	ob2ndRout(a0)
0000A848 6000 0000                  		bra.w	Mon_Animate
0000A84C                            ; ===========================================================================
0000A84C                            

0000A84C                            	@ontop:
0000A84C 363C 0010                  		move.w	#$10,d3
0000A850 3428 0008                  		move.w	obX(a0),d2
0000A854 6100 D958                  		bsr.w	MvSonicOnPtfm
0000A858 6000 0000                  		bra.w	Mon_Animate
0000A85C                            ; ===========================================================================
0000A85C                            

0000A85C                            @fall:		; 2nd Routine 4
0000A85C 6100 0000                  		bsr.w	ObjectFall
0000A860 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000A866 4A41                       		tst.w	d1
0000A868 6A00 0000                  		bpl.w	Mon_Animate
0000A86C D368 000C                  		add.w	d1,obY(a0)
0000A870 4268 0012                  		clr.w	obVelY(a0)
0000A874 4228 0025                  		clr.b	ob2ndRout(a0)
0000A878 6000 0000                  		bra.w	Mon_Animate
0000A87C                            ; ===========================================================================
0000A87C                            

0000A87C                            @normal:	; 2nd Routine 0
0000A87C 323C 001A                  		move.w	#$1A,d1
0000A880 343C 000F                  		move.w	#$F,d2
0000A884 6100 0000                  		bsr.w	Mon_SolidSides
0000A888 6700 0000                  		beq.w	loc_A25C
0000A88C 4A69 0012                  		tst.w	obVelY(a1)
0000A890 6B00                       		bmi.s	loc_A20A
0000A892 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000A898 6700                       		beq.s	loc_A25C	; if yes, branch
0000A89A                            

0000A89A                            loc_A20A:
0000A89A 4A41                       		tst.w	d1
0000A89C 6A00                       		bpl.s	loc_A220
0000A89E 9769 000C                  		sub.w	d3,obY(a1)
0000A8A2 6100 D296                  		bsr.w	loc_74AE
0000A8A6 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000A8AC 6000 0000                  		bra.w	Mon_Animate
0000A8B0                            ; ===========================================================================
0000A8B0                            

0000A8B0                            loc_A220:
0000A8B0 4A40                       		tst.w	d0
0000A8B2 6700 0000                  		beq.w	loc_A246
0000A8B6 6B00                       		bmi.s	loc_A230
0000A8B8 4A69 0010                  		tst.w	obVelX(a1)
0000A8BC 6B00                       		bmi.s	loc_A246
0000A8BE 6000                       		bra.s	loc_A236
0000A8C0                            ; ===========================================================================
0000A8C0                            

0000A8C0                            loc_A230:
0000A8C0 4A69 0010                  		tst.w	obVelX(a1)
0000A8C4 6A00                       		bpl.s	loc_A246
0000A8C6                            

0000A8C6                            loc_A236:
0000A8C6 9169 0008                  		sub.w	d0,obX(a1)
0000A8CA 337C 0000 0014             		move.w	#0,obInertia(a1)
0000A8D0 337C 0000 0010             		move.w	#0,obVelX(a1)
0000A8D6                            

0000A8D6                            loc_A246:
0000A8D6 0829 0001 0022             		btst	#1,obStatus(a1)
0000A8DC 6600                       		bne.s	loc_A26A
0000A8DE 08E9 0005 0022             		bset	#5,obStatus(a1)
0000A8E4 08E8 0005 0022             		bset	#5,obStatus(a0)
0000A8EA 6000                       		bra.s	Mon_Animate
0000A8EC                            ; ===========================================================================
0000A8EC                            

0000A8EC                            loc_A25C:
0000A8EC 0828 0005 0022             		btst	#5,obStatus(a0)
0000A8F2 6700                       		beq.s	Mon_Animate
0000A8F4 337C 0001 001C             		move.w	#1,obAnim(a1)	; clear obAnim and set obNextAni to 1
0000A8FA                            

0000A8FA                            loc_A26A:
0000A8FA 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000A900 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000A906                            

0000A906                            Mon_Animate:	; Routine 6
0000A906 43F9 0000 0000             		lea	(Ani_Monitor).l,a1
0000A90C 6100 0000                  		bsr.w	AnimateSprite
0000A910                            

0000A910                            Mon_Display:	; Routine 8
0000A910 6100 0000                  		bsr.w	DisplaySprite
0000A932 4E75                       		rts	
0000A934                            ; ===========================================================================
0000A934                            

0000A934                            Mon_BreakOpen:	; Routine 4
0000A934 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A938 117C 0000 0020             		move.b	#0,obColType(a0)
0000A93E 6100 0000                  		bsr.w	FindFreeObj
0000A942 6600                       		bne.s	Mon_Explode
0000A944 137C 0000 0000             		move.b	#id_PowerUp,0(a1) ; load monitor contents object
0000A94A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A950 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A956 1368 001C 001C             		move.b	obAnim(a0),obAnim(a1)
0000A95C                            

0000A95C                            Mon_Explode:
0000A95C 6100 0000                  		bsr.w	FindFreeObj
0000A960 6600                       		bne.s	@fail
0000A962 137C 0000 0000             		move.b	#id_ExplosionItem,0(a1) ; load explosion object
0000A968 5429 0024                  		addq.b	#2,obRoutine(a1) ; don't create an animal
0000A96C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000A972 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000A978                            

0000A978                            	@fail:
0000A978 45F8 FC00                  		lea	(v_objstate).w,a2
0000A97C 7000                       		moveq	#0,d0
0000A97E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000A982 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A988 117C 0009 001C             		move.b	#9,obAnim(a0)	; set monitor type to broken
0000A98E 6000 0000                  		bra.w	DisplaySprite
0000A98E 6000 0000                  		bra.w	DisplaySprite
0000A992                            		include	"_incObj\2E Monitor Content Power-Up.asm"
0000A992                            ; ---------------------------------------------------------------------------
0000A992                            ; Object 2E - contents of monitors
0000A992                            ; ---------------------------------------------------------------------------
0000A992                            

0000A992                            PowerUp:
0000A992 7000                       		moveq	#0,d0
0000A994 1028 0024                  		move.b	obRoutine(a0),d0
0000A998 323B 0000                  		move.w	Pow_Index(pc,d0.w),d1
0000A99C 4EBB 1000                  		jsr	Pow_Index(pc,d1.w)
0000A9A0 6000 0000                  		bra.w	DisplaySprite
0000A9A4                            ; ===========================================================================
0000A9A4 0000                       Pow_Index:	dc.w Pow_Main-Pow_Index
0000A9A6 0000                       		dc.w Pow_Move-Pow_Index
0000A9A8 0000                       		dc.w Pow_Delete-Pow_Index
0000A9AA                            ; ===========================================================================
0000A9AA                            

0000A9AA                            Pow_Main:	; Routine 0
0000A9AA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000A9AE 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000A9B4 117C 0024 0001             		move.b	#$24,obRender(a0)
0000A9BA 117C 0003 0018             		move.b	#3,obPriority(a0)
0000A9C0 117C 0008 0019             		move.b	#8,obActWid(a0)
0000A9C6 317C FD00 0012             		move.w	#-$300,obVelY(a0)
0000A9CC 7000                       		moveq	#0,d0
0000A9CE 1028 001C                  		move.b	obAnim(a0),d0	; get subtype
0000A9D2 5400                       		addq.b	#2,d0
0000A9D4 1140 001A                  		move.b	d0,obFrame(a0)	; use correct frame
0000A9D8 227C 0000 0000             		movea.l	#Map_Monitor,a1
0000A9DE D000                       		add.b	d0,d0
0000A9E0 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A9E4 5249                       		addq.w	#1,a1
0000A9E6 2149 0004                  		move.l	a1,obMap(a0)
0000A9EA                            

0000A9EA                            Pow_Move:	; Routine 2
0000A9EA 4A68 0012                  		tst.w	obVelY(a0)	; is object moving?
0000A9EE 6A00 0000                  		bpl.w	Pow_Checks	; if not, branch
0000A9F2 6100 0000                  		bsr.w	SpeedToPos
0000A9F6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce object	speed
0000A9FC 4E75                       		rts	
0000A9FE                            ; ===========================================================================
0000A9FE                            

0000A9FE                            Pow_Checks:
0000A9FE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AA02 317C 001D 001E             		move.w	#29,obTimeFrame(a0) ; display icon for half a second
0000AA08                            

0000AA08                            Pow_ChkEggman:
0000AA08 1028 001C                  		move.b	obAnim(a0),d0
0000AA0C 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AA10 6600                       		bne.s	Pow_ChkSonic
0000AA12 4E75                       		rts			; Eggman monitor does nothing
0000AA14                            ; ===========================================================================
0000AA14                            

0000AA14                            Pow_ChkSonic:
0000AA14 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AA18 6600                       		bne.s	Pow_ChkShoes
0000AA1A                            

0000AA1A                            	ExtraLife:
0000AA1A 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to the number of lives you have
0000AA1E 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0000AA22 303C 0000                  		move.w	#bgm_ExtraLife,d0
0000AA26 4EF9 0000 139C             		jmp	(PlaySound).l	; play extra life music
0000AA2C                            ; ===========================================================================
0000AA2C                            

0000AA2C                            Pow_ChkShoes:
0000AA2C 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AA30 6600                       		bne.s	Pow_ChkShield
0000AA32                            

0000AA32 11FC 0001 FE2E             		move.b	#1,(v_shoes).w	; speed up the BG music
0000AA38 31FC 04B0 D034             		move.w	#$4B0,(v_player+$34).w	; time limit for the power-up
0000AA3E 31FC 0C00 F760             		move.w	#$C00,(v_sonspeedmax).w ; change Sonic's top speed
0000AA44 31FC 0018 F762             		move.w	#$18,(v_sonspeedacc).w	; change Sonic's acceleration
0000AA4A 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w	; change Sonic's deceleration
0000AA50 303C 0000                  		move.w	#bgm_Speedup,d0
0000AA54 4EF9 0000 139C             		jmp	(PlaySound).l		; Speed	up the music
0000AA5A                            ; ===========================================================================
0000AA5A                            

0000AA5A                            Pow_ChkShield:
0000AA5A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AA5E 6600                       		bne.s	Pow_ChkInvinc
0000AA60                            

0000AA60 11FC 0001 FE2C             		move.b	#1,(v_shield).w	; give Sonic a shield
0000AA66 11FC 0000 D180             		move.b	#id_ShieldItem,(v_shieldobj).w ; load shield object ($38)
0000AA6C 303C 0000                  		move.w	#sfx_Shield,d0
0000AA70 4EF9 0000 139C             		jmp	(PlaySound).l	; play shield sound
0000AA76                            ; ===========================================================================
0000AA76                            

0000AA76                            Pow_ChkInvinc:
0000AA76 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AA7A 6600                       		bne.s	Pow_ChkRings
0000AA7C                            

0000AA7C 11FC 0001 FE2D             		move.b	#1,(v_invinc).w	; make Sonic invincible
0000AA82 31FC 04B0 D032             		move.w	#$4B0,(v_player+$32).w ; time limit for the power-up
0000AA88 11FC 0000 D200             		move.b	#id_ShieldItem,(v_starsobj1).w ; load stars object ($3801)
0000AA8E 11FC 0001 D21C             		move.b	#1,(v_starsobj1+obAnim).w
0000AA94 11FC 0000 D240             		move.b	#id_ShieldItem,(v_starsobj2).w ; load stars object ($3802)
0000AA9A 11FC 0002 D25C             		move.b	#2,(v_starsobj2+obAnim).w
0000AAA0 11FC 0000 D280             		move.b	#id_ShieldItem,(v_starsobj3).w ; load stars object ($3803)
0000AAA6 11FC 0003 D29C             		move.b	#3,(v_starsobj3+obAnim).w
0000AAAC 11FC 0000 D2C0             		move.b	#id_ShieldItem,(v_starsobj4).w ; load stars object ($3804)
0000AAB2 11FC 0004 D2DC             		move.b	#4,(v_starsobj4+obAnim).w
0000AAB8 4A38 F7AA                  		tst.b	(f_lockscreen).w ; is boss mode on?
0000AABC 6600                       		bne.s	Pow_NoMusic	; if yes, branch
0000AABE 0C78 000C FE14             			cmpi.w	#$C,(v_air).w
0000AAC4 6300                       			bls.s	Pow_NoMusic
0000AAC6 303C 0000                  		move.w	#bgm_Invincible,d0
0000AACA 4EF9 0000 139C             		jmp	(PlaySound).l ; play invincibility music
0000AAD0                            ; ===========================================================================
0000AAD0                            

0000AAD0                            Pow_NoMusic:
0000AAD0 4E75                       		rts	
0000AAD2                            ; ===========================================================================
0000AAD2                            

0000AAD2                            Pow_ChkRings:
0000AAD2 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AAD6 6600                       		bne.s	Pow_ChkS
0000AAD8                            

0000AAD8 0678 000A FE20             		addi.w	#10,(v_rings).w	; add 10 rings to the number of rings you have
0000AADE 0038 0001 FE1D             		ori.b	#1,(f_ringcount).w ; update the ring counter
0000AAE4 0C78 0064 FE20             		cmpi.w	#100,(v_rings).w ; check if you have 100 rings
0000AAEA 6500                       		bcs.s	Pow_RingSound
0000AAEC 08F8 0001 FE1B             		bset	#1,(v_lifecount).w
0000AAF2 6700 FF26                  		beq.w	ExtraLife
0000AAF6 0C78 00C8 FE20             		cmpi.w	#200,(v_rings).w ; check if you have 200 rings
0000AAFC 6500                       		bcs.s	Pow_RingSound
0000AAFE 08F8 0002 FE1B             		bset	#2,(v_lifecount).w
0000AB04 6700 FF14                  		beq.w	ExtraLife
0000AB08                            

0000AB08                            	Pow_RingSound:
0000AB08 303C 0000                  		move.w	#sfx_Ring,d0
0000AB0C 4EF9 0000 139C             		jmp	(PlaySound).l	; play ring sound
0000AB12                            ; ===========================================================================
0000AB12                            

0000AB12                            Pow_ChkS:
0000AB12 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'?
0000AB16 6600                       		bne.s	Pow_ChkEnd
0000AB18 4E71                       		nop	
0000AB1A                            

0000AB1A                            Pow_ChkEnd:
0000AB1A 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AB1C                            ; ===========================================================================
0000AB1C                            

0000AB1C                            Pow_Delete:	; Routine 4
0000AB1C 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0000AB20 6B00 0000                  		bmi.w	DeleteObject	; delete after half a second
0000AB24 4E75                       		rts	
0000AB24 4E75                       		rts	
0000AB26                            		include	"_incObj\26 Monitor (SolidSides subroutine).asm"
0000AB26                            ; ---------------------------------------------------------------------------
0000AB26                            ; Subroutine to	make the sides of a monitor solid
0000AB26                            ; ---------------------------------------------------------------------------
0000AB26                            

0000AB26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB26                            

0000AB26                            

0000AB26                            Mon_SolidSides:
0000AB26 43F8 D000                  		lea	(v_player).w,a1
0000AB2A 3029 0008                  		move.w	obX(a1),d0
0000AB2E 9068 0008                  		sub.w	obX(a0),d0
0000AB32 D041                       		add.w	d1,d0
0000AB34 6B00                       		bmi.s	loc_A4E6
0000AB36 3601                       		move.w	d1,d3
0000AB38 D643                       		add.w	d3,d3
0000AB3A B043                       		cmp.w	d3,d0
0000AB3C 6200                       		bhi.s	loc_A4E6
0000AB3E 1629 0016                  		move.b	obHeight(a1),d3
0000AB42 4883                       		ext.w	d3
0000AB44 D443                       		add.w	d3,d2
0000AB46 3629 000C                  		move.w	obY(a1),d3
0000AB4A 9668 000C                  		sub.w	obY(a0),d3
0000AB4E D642                       		add.w	d2,d3
0000AB50 6B00                       		bmi.s	loc_A4E6
0000AB52 D442                       		add.w	d2,d2
0000AB54 B642                       		cmp.w	d2,d3
0000AB56 6400                       		bcc.s	loc_A4E6
0000AB58 4A38 F7C8                  		tst.b	(f_playerctrl).w
0000AB5C 6B00                       		bmi.s	loc_A4E6
0000AB5E 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000AB64 6400                       		bcc.s	loc_A4E6
0000AB66 4A78 FE08                  		tst.w	(v_debuguse).w
0000AB6A 6600                       		bne.s	loc_A4E6
0000AB6C B240                       		cmp.w	d0,d1
0000AB6E 6400                       		bcc.s	loc_A4DC
0000AB70 D241                       		add.w	d1,d1
0000AB72 9041                       		sub.w	d1,d0
0000AB74                            

0000AB74                            loc_A4DC:
0000AB74 0C43 0010                  		cmpi.w	#$10,d3
0000AB78 6500                       		bcs.s	loc_A4EA
0000AB7A                            

0000AB7A                            loc_A4E2:
0000AB7A 7201                       		moveq	#1,d1
0000AB7C 4E75                       		rts	
0000AB7E                            ; ===========================================================================
0000AB7E                            

0000AB7E                            loc_A4E6:
0000AB7E 7200                       		moveq	#0,d1
0000AB80 4E75                       		rts	
0000AB82                            ; ===========================================================================
0000AB82                            

0000AB82                            loc_A4EA:
0000AB82 7200                       		moveq	#0,d1
0000AB84 1228 0019                  		move.b	obActWid(a0),d1
0000AB88 5841                       		addq.w	#4,d1
0000AB8A 3401                       		move.w	d1,d2
0000AB8C D442                       		add.w	d2,d2
0000AB8E D269 0008                  		add.w	obX(a1),d1
0000AB92 9268 0008                  		sub.w	obX(a0),d1
0000AB96 6BE2                       		bmi.s	loc_A4E2
0000AB98 B242                       		cmp.w	d2,d1
0000AB9A 64DE                       		bcc.s	loc_A4E2
0000AB9C 72FF                       		moveq	#-1,d1
0000AB9E 4E75                       		rts	
0000ABA0                            ; End of function Mon_SolidSides
0000ABA0                            ; End of function Mon_SolidSides
0000ABA0                            		include	"_anim\Monitor.asm"
0000ABA0                            ; ---------------------------------------------------------------------------
0000ABA0                            ; Animation script - monitors
0000ABA0                            ; ---------------------------------------------------------------------------
0000ABA0 0000 0000 0000             Ani_Monitor:	dc.w @static-Ani_Monitor, @eggman-Ani_Monitor, @sonic-Ani_Monitor
0000ABA6 0000 0000 0000             		dc.w @shoes-Ani_Monitor, @shield-Ani_Monitor, @invincible-Ani_Monitor
0000ABAC 0000 0000 0000             		dc.w @rings-Ani_Monitor, @s-Ani_Monitor, @goggles-Ani_Monitor
0000ABB2 0000                       		dc.w @breaking-Ani_Monitor
0000ABB4 0100 0102 FF               @static:	dc.b 1,	0, 1, 2, afEnd
0000ABBA 00                         		even
0000ABBA 0100 0303 0103 0302 0303+  @eggman:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, afEnd
0000ABC6 00                         		even
0000ABC6 0100 0404 0104 0402 0404+  @sonic:		dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, afEnd
0000ABD2 00                         		even
0000ABD2 0100 0505 0105 0502 0505+  @shoes:		dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, afEnd
0000ABDE 00                         		even
0000ABDE 0100 0606 0106 0602 0606+  @shield:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, afEnd
0000ABEA 00                         		even
0000ABEA 0100 0707 0107 0702 0707+  @invincible:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, afEnd
0000ABF6 00                         		even
0000ABF6 0100 0808 0108 0802 0808+  @rings:		dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, afEnd
0000AC02 00                         		even
0000AC02 0100 0909 0109 0902 0909+  @s:		dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, afEnd
0000AC0E 00                         		even
0000AC0E 0100 0A0A 010A 0A02 0A0A+  @goggles:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, afEnd
0000AC1A 00                         		even
0000AC1A 0200 0102 0BFE 01          @breaking:	dc.b 2,	0, 1, 2, $B, afBack, 1
0000AC22 00                         		even
0000AC22 00                         		even
0000AC22                            Map_Monitor:	include	"_maps\Monitor.asm"
0000AC22                            ; ---------------------------------------------------------------------------
0000AC22                            ; Sprite mappings - monitors
0000AC22                            ; ---------------------------------------------------------------------------
0000AC22                            Map_Monitor_internal:
0000AC22 0000                       		dc.w @static0-Map_Monitor_internal
0000AC24 0000                       		dc.w @static1-Map_Monitor_internal
0000AC26 0000                       		dc.w @static2-Map_Monitor_internal
0000AC28 0000                       		dc.w @eggman-Map_Monitor_internal
0000AC2A 0000                       		dc.w @sonic-Map_Monitor_internal
0000AC2C 0000                       		dc.w @shoes-Map_Monitor_internal
0000AC2E 0000                       		dc.w @shield-Map_Monitor_internal
0000AC30 0000                       		dc.w @invincible-Map_Monitor_internal
0000AC32 0000                       		dc.w @rings-Map_Monitor_internal
0000AC34 0000                       		dc.w @s-Map_Monitor_internal
0000AC36 0000                       		dc.w @goggles-Map_Monitor_internal
0000AC38 0000                       		dc.w @broken-Map_Monitor_internal
0000AC3A 01                         @static0:	dc.b 1			; static monitor
0000AC3B EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000AC40 02                         @static1:	dc.b 2			; static monitor
0000AC41 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000AC46 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000AC4B 02                         @static2:	dc.b 2			; static monitor
0000AC4C F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000AC51 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000AC56 02                         @eggman:	dc.b 2			; Eggman monitor
0000AC57 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000AC5C EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000AC61 02                         @sonic:		dc.b 2			; Sonic	monitor
0000AC62 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000AC67 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000AC6C 02                         @shoes:		dc.b 2			; speed	shoes monitor
0000AC6D F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000AC72 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000AC77 02                         @shield:	dc.b 2			; shield monitor
0000AC78 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000AC7D EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000AC82 02                         @invincible:	dc.b 2			; invincibility	monitor
0000AC83 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000AC88 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000AC8D 02                         @rings:		dc.b 2			; 10 rings monitor
0000AC8E F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000AC93 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000AC98 02                         @s:		dc.b 2			; 'S' monitor
0000AC99 F505 0034 F8               		dc.b $F5, 5, 0,	$34, $F8
0000AC9E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000ACA3 02                         @goggles:	dc.b 2			; goggles monitor
0000ACA4 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000ACA9 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000ACAE 01                         @broken:	dc.b 1			; broken monitor
0000ACAF FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000ACB4                            		even
0000ACB4                            		even
0000ACB4                            

0000ACB4                            		include	"_incObj\0E Title Screen Sonic.asm"
0000ACB4                            ; ---------------------------------------------------------------------------
0000ACB4                            ; Object 0E - Sonic on the title screen
0000ACB4                            ; ---------------------------------------------------------------------------
0000ACB4                            

0000ACB4                            TitleSonic:
0000ACB4 7000                       		moveq	#0,d0
0000ACB6 1028 0024                  		move.b	obRoutine(a0),d0
0000ACBA 323B 0000                  		move.w	TSon_Index(pc,d0.w),d1
0000ACBE 4EFB 1000                  		jmp	TSon_Index(pc,d1.w)
0000ACC2                            ; ===========================================================================
0000ACC2 0000                       TSon_Index:	dc.w TSon_Main-TSon_Index
0000ACC4 0000                       		dc.w TSon_Delay-TSon_Index
0000ACC6 0000                       		dc.w TSon_Move-TSon_Index
0000ACC8 0000                       		dc.w TSon_Animate-TSon_Index
0000ACCA                            ; ===========================================================================
0000ACCA                            

0000ACCA                            TSon_Main:	; Routine 0
0000ACCA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000ACCE 317C 00F0 0008             		move.w	#$F0,obX(a0)
0000ACD4 317C 00DE 000A             		move.w	#$DE,obScreenY(a0) ; position is fixed to screen
0000ACDA 217C 0000 0000 0004        		move.l	#Map_TSon,obMap(a0)
0000ACE2 317C 2300 0002             		move.w	#$2300,obGfx(a0)
0000ACE8 117C 0001 0018             		move.b	#1,obPriority(a0)
0000ACEE 117C 001D 001F             		move.b	#29,obDelayAni(a0) ; set time delay to 0.5 seconds
0000ACF4 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000ACFA 6100 0000                  		bsr.w	AnimateSprite
0000ACFE                            

0000ACFE                            TSon_Delay:	;Routine 2
0000ACFE 5328 001F                  		subq.b	#1,obDelayAni(a0) ; subtract 1 from time delay
0000AD02 6A00                       		bpl.s	@wait		; if time remains, branch
0000AD04 5428 0024                  		addq.b	#2,obRoutine(a0) ; go to next routine
0000AD08 6000 0000                  		bra.w	DisplaySprite
0000AD0C                            

0000AD0C                            	@wait:
0000AD0C 4E75                       		rts	
0000AD0E                            ; ===========================================================================
0000AD0E                            

0000AD0E                            TSon_Move:	; Routine 4
0000AD0E 5168 000A                  		subq.w	#8,obScreenY(a0) ; move Sonic up
0000AD12 0C68 0096 000A             		cmpi.w	#$96,obScreenY(a0) ; has Sonic reached final position?
0000AD18 6600                       		bne.s	@display	; if not, branch
0000AD1A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AD1E                            

0000AD1E                            	@display:
0000AD1E 6000 0000                  		bra.w	DisplaySprite
0000AD22                            

0000AD22 4E75                       		rts	
0000AD24                            ; ===========================================================================
0000AD24                            

0000AD24                            TSon_Animate:	; Routine 6
0000AD24 43F9 0000 0000             		lea	(Ani_TSon).l,a1
0000AD2A 6100 0000                  		bsr.w	AnimateSprite
0000AD2E 6000 0000                  		bra.w	DisplaySprite
0000AD32                            

0000AD32 4E75                       		rts	
0000AD32 4E75                       		rts	
0000AD34                            		include	"_incObj\0F Press Start and TM.asm"
0000AD34                            ; ---------------------------------------------------------------------------
0000AD34                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AD34                            ; ---------------------------------------------------------------------------
0000AD34                            

0000AD34                            PSBTM:
0000AD34 7000                       		moveq	#0,d0
0000AD36 1028 0024                  		move.b	obRoutine(a0),d0
0000AD3A 323B 0000                  		move.w	PSB_Index(pc,d0.w),d1
0000AD3E 4EBB 1000                  		jsr	PSB_Index(pc,d1.w)
0000AD42 6000 0000                  		bra.w	DisplaySprite
0000AD46                            ; ===========================================================================
0000AD46 0000                       PSB_Index:	dc.w PSB_Main-PSB_Index
0000AD48 0000                       		dc.w PSB_PrsStart-PSB_Index
0000AD4A 0000                       		dc.w PSB_Exit-PSB_Index
0000AD4C                            ; ===========================================================================
0000AD4C                            

0000AD4C                            PSB_Main:	; Routine 0
0000AD4C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AD50 317C 00D0 0008             		move.w	#$D0,obX(a0)
0000AD56 317C 0130 000A             		move.w	#$130,obScreenY(a0)
0000AD5C 217C 0000 0000 0004        		move.l	#Map_PSB,obMap(a0)
0000AD64 317C 0200 0002             		move.w	#$200,obGfx(a0)
0000AD6A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)	; is object "PRESS START"?
0000AD70 6500                       		bcs.s	PSB_PrsStart	; if yes, branch
0000AD72                            

0000AD72 5428 0024                  		addq.b	#2,obRoutine(a0)
0000AD76 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)	; is the object	"TM"?
0000AD7C 6600                       		bne.s	PSB_Exit	; if not, branch
0000AD7E                            

0000AD7E 317C 2510 0002             		move.w	#$2510,obGfx(a0) ; "TM" specific code
0000AD84 317C 0170 0008             		move.w	#$170,obX(a0)
0000AD8A 317C 00F8 000A             		move.w	#$F8,obScreenY(a0)
0000AD90                            

0000AD90                            PSB_Exit:	; Routine 4
0000AD90 4E75                       		rts	
0000AD92                            ; ===========================================================================
0000AD92                            

0000AD92                            PSB_PrsStart:	; Routine 2
0000AD92 43F9 0000 0000             		lea	(Ani_PSBTM).l,a1
0000AD98 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000AD98 6000 0000                  		bra.w	AnimateSprite	; "PRESS START" is animated
0000AD9C                            

0000AD9C                            		include	"_anim\Title Screen Sonic.asm"
0000AD9C                            ; ---------------------------------------------------------------------------
0000AD9C                            ; Animation script - Sonic on the title screen
0000AD9C                            ; ---------------------------------------------------------------------------
0000AD9C 0000                       Ani_TSon:	dc.w byte_A706-Ani_TSon
0000AD9E 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	afBack, 2
0000ADAA 00                         		even
0000ADAA 00                         		even
0000ADAA                            		include	"_anim\Press Start and TM.asm"
0000ADAA                            ; ---------------------------------------------------------------------------
0000ADAA                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000ADAA                            ; ---------------------------------------------------------------------------
0000ADAA 0000                       Ani_PSBTM:	dc.w @flash-Ani_PSBTM
0000ADAC 1F00 01FF                  @flash:		dc.b $1F, 0, 1,	afEnd
0000ADB0                            		even
0000ADB0                            		even
0000ADB0                            

0000ADB0                            		include	"_incObj\sub AnimateSprite.asm"
0000ADB0                            ; ---------------------------------------------------------------------------
0000ADB0                            ; Subroutine to	animate	a sprite using an animation script
0000ADB0                            ; ---------------------------------------------------------------------------
0000ADB0                            

0000ADB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADB0                            

0000ADB0                            

0000ADB0                            AnimateSprite:
0000ADB0 7000                       		moveq	#0,d0
0000ADB2 1028 001C                  		move.b	obAnim(a0),d0	; move animation number	to d0
0000ADB6 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
0000ADBA 6700                       		beq.s	Anim_Run	; if not, branch
0000ADBC                            

0000ADBC 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
0000ADC0 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000ADC6 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
0000ADCC                            

0000ADCC                            Anim_Run:
0000ADCC 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
0000ADD0 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000ADD2 D040                       		add.w	d0,d0
0000ADD4 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000ADD8 1151 001E                  		move.b	(a1),obTimeFrame(a0) ; load frame duration
0000ADDC 7200                       		moveq	#0,d1
0000ADDE 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
0000ADE2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000ADE6 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000ADE8                            

0000ADE8                            Anim_Next:
0000ADE8 1200                       		move.b	d0,d1
0000ADEA 0200 001F                  		andi.b	#$1F,d0
0000ADEE 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
0000ADF2 1028 0022                  		move.b	obStatus(a0),d0
0000ADF6 E719                       		rol.b	#3,d1
0000ADF8 B101                       		eor.b	d0,d1
0000ADFA 0201 0003                  		andi.b	#3,d1
0000ADFE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0000AE04 8328 0001                  		or.b	d1,obRender(a0)
0000AE08 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
0000AE0C                            

0000AE0C                            Anim_Wait:
0000AE0C 4E75                       		rts	
0000AE0E                            ; ===========================================================================
0000AE0E                            

0000AE0E                            Anim_End_FF:
0000AE0E 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AE10 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AE12 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0000AE18 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AE1C 60CA                       		bra.s	Anim_Next
0000AE1E                            ; ===========================================================================
0000AE1E                            

0000AE1E                            Anim_End_FE:
0000AE1E 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AE20 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AE22 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AE26 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
0000AE2A 9200                       		sub.b	d0,d1
0000AE2C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AE30 60B6                       		bra.s	Anim_Next
0000AE32                            ; ===========================================================================
0000AE32                            

0000AE32                            Anim_End_FD:
0000AE32 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AE34 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AE36 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
0000AE3C                            

0000AE3C                            Anim_End_FC:
0000AE3C 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AE3E 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AE40 5428 0024                  		addq.b	#2,obRoutine(a0) ; jump to next routine
0000AE44                            

0000AE44                            Anim_End_FB:
0000AE44 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AE46 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AE48 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
0000AE4E 4228 0025                  		clr.b	ob2ndRout(a0)	; reset	2nd routine counter
0000AE52                            

0000AE52                            Anim_End_FA:
0000AE52 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AE54 6600                       		bne.s	Anim_End	; if not, branch
0000AE56 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; jump to next routine
0000AE5A                            

0000AE5A                            Anim_End:
0000AE5A 4E75                       		rts	
0000AE5C                            ; End of function AnimateSprite
0000AE5C                            ; End of function AnimateSprite
0000AE5C                            

0000AE5C                            Map_PSB:	include	"_maps\Press Start and TM.asm"
0000AE5C                            ; ---------------------------------------------------------------------------
0000AE5C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AE5C                            ; ---------------------------------------------------------------------------
0000AE5C                            Map_PSB_internal:
0000AE5C 0000                       		dc.w byte_A7CD-Map_PSB_internal
0000AE5E 0000                       		dc.w M_PSB_PSB-Map_PSB_internal
0000AE60 0000                       		dc.w M_PSB_Limiter-Map_PSB_internal
0000AE62 0000                       		dc.w M_PSB_TM-Map_PSB_internal
0000AE64 06                         M_PSB_PSB:	dc.b 6			; "PRESS START BUTTON"
0000AE65 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AE6A 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AE6F 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AE74 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AE79 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AE7E 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AE83 1E                         M_PSB_Limiter:	dc.b $1E		; sprite line limiter
0000AE84 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE89 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE8E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE93 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE98 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AE9D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AEA2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AEA7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AEAC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AEB1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AEB6 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEBB D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEC0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEC5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AECA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AECF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AED4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AED9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEDE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEE3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AEE8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEED F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEF2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEF7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AEFC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF01 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF06 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF0B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF10 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF15 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000AF1A 01                         M_PSB_TM:	dc.b 1			; "TM"
0000AF1B FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000AF20                            		even
0000AF20                            		even
0000AF20                            Map_TSon:	include	"_maps\Title Screen Sonic.asm"
0000AF20                            ; ---------------------------------------------------------------------------
0000AF20                            ; Sprite mappings - Sonic on the title screen
0000AF20                            ; ---------------------------------------------------------------------------
0000AF20                            Map_TSon_internal:
0000AF20 0000                       		dc.w byte_A898-Map_TSon_internal
0000AF22 0000                       		dc.w byte_A8CB-Map_TSon_internal
0000AF24 0000                       		dc.w byte_A917-Map_TSon_internal
0000AF26 0000                       		dc.w byte_A96D-Map_TSon_internal
0000AF28 0000                       		dc.w byte_A9AF-Map_TSon_internal
0000AF2A 0000                       		dc.w byte_A9E7-Map_TSon_internal
0000AF2C 0000                       		dc.w byte_AA47-Map_TSon_internal
0000AF2E 0000                       		dc.w byte_AAB1-Map_TSon_internal
0000AF30 0A                         byte_A898:	dc.b $A
0000AF31 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000AF36 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000AF3B 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000AF40 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000AF45 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000AF4A 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000AF4F 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000AF54 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000AF59 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000AF5E 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000AF63 0F                         byte_A8CB:	dc.b $F
0000AF64 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000AF69 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000AF6E 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000AF73 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000AF78 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000AF7D 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000AF82 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000AF87 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000AF8C 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000AF91 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000AF96 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000AF9B 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000AFA0 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000AFA5 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000AFAA 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000AFAF 11                         byte_A917:	dc.b $11
0000AFB0 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000AFB5 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000AFBA 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000AFBF 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000AFC4 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000AFC9 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000AFCE 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000AFD3 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000AFD8 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000AFDD 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000AFE2 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000AFE7 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000AFEC 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000AFF1 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000AFF6 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000AFFB 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000B000 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000B005 0D                         byte_A96D:	dc.b $D
0000B006 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000B00B 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000B010 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000B015 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000B01A 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000B01F 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000B024 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000B029 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000B02E 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000B033 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000B038 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000B03D 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000B042 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000B047 0B                         byte_A9AF:	dc.b $B
0000B048 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000B04D 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000B052 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000B057 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000B05C 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000B061 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000B066 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000B06B 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000B070 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000B075 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000B07A 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000B07F 13                         byte_A9E7:	dc.b $13
0000B080 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B085 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B08A 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B08F 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B094 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B099 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B09E 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B0A3 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B0A8 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B0AD 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B0B2 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B0B7 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B0BC 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B0C1 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B0C6 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B0CB 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B0D0 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B0D5 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B0DA 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B0DF 15                         byte_AA47:	dc.b $15
0000B0E0 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000B0E5 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000B0EA 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000B0EF 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000B0F4 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B0F9 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B0FE 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B103 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B108 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B10D 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B112 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B117 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B11C 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B121 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B126 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B12B 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B130 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B135 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B13A 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B13F 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B144 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B149 16                         byte_AAB1:	dc.b $16
0000B14A 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000B14F 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000B154 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000B159 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000B15E 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000B163 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000B168 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000B16D 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000B172 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000B177 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000B17C 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000B181 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000B186 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000B18B 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000B190 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000B195 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000B19A 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000B19F 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000B1A4 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000B1A9 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000B1AE 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000B1B3 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000B1B8                            		even
0000B1B8                            		even
0000B1B8                            

0000B1B8                            		include	"_incObj\2B Chopper.asm"
0000B1B8                            ; ---------------------------------------------------------------------------
0000B1B8                            ; Object 2B - Chopper enemy (GHZ)
0000B1B8                            ; ---------------------------------------------------------------------------
0000B1B8                            

0000B1B8                            Chopper:
0000B1B8 7000                       		moveq	#0,d0
0000B1BA 1028 0024                  		move.b	obRoutine(a0),d0
0000B1BE 323B 0000                  		move.w	Chop_Index(pc,d0.w),d1
0000B1C2 4EBB 1000                  		jsr	Chop_Index(pc,d1.w)
0000B1C6 6000 0000                  		bra.w	RememberState
0000B1CA                            ; ===========================================================================
0000B1CA 0000                       Chop_Index:	dc.w Chop_Main-Chop_Index
0000B1CC 0000                       		dc.w Chop_ChgSpeed-Chop_Index
0000B1CE                            

0000B1CE =00000030                  chop_origY:	equ $30
0000B1CE                            ; ===========================================================================
0000B1CE                            

0000B1CE                            Chop_Main:	; Routine 0
0000B1CE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B1D2 217C 0000 0000 0004        		move.l	#Map_Chop,obMap(a0)
0000B1DA 317C 047B 0002             		move.w	#$47B,obGfx(a0)
0000B1E0 117C 0004 0001             		move.b	#4,obRender(a0)
0000B1E6 117C 0004 0018             		move.b	#4,obPriority(a0)
0000B1EC 117C 0009 0020             		move.b	#9,obColType(a0)
0000B1F2 117C 0010 0019             		move.b	#$10,obActWid(a0)
0000B1F8 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000B1FE 3168 000C 0030             		move.w	obY(a0),chop_origY(a0) ; save original position
0000B204                            

0000B204                            Chop_ChgSpeed:	; Routine 2
0000B204 43F9 0000 0000             		lea	(Ani_Chop).l,a1
0000B20A 6100 FBA4                  		bsr.w	AnimateSprite
0000B20E 6100 0000                  		bsr.w	SpeedToPos
0000B212 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; reduce speed
0000B218 3028 0030                  		move.w	chop_origY(a0),d0
0000B21C B068 000C                  		cmp.w	obY(a0),d0	; has Chopper returned to its original position?
0000B220 6400                       		bcc.s	@chganimation	; if not, branch
0000B222 3140 000C                  		move.w	d0,obY(a0)
0000B226 317C F900 0012             		move.w	#-$700,obVelY(a0) ; set vertical speed
0000B22C                            

0000B22C                            	@chganimation:
0000B22C 117C 0001 001C             		move.b	#1,obAnim(a0)	; use fast animation
0000B232 0440 00C0                  		subi.w	#$C0,d0
0000B236 B068 000C                  		cmp.w	obY(a0),d0
0000B23A 6400                       		bcc.s	@nochg
0000B23C 117C 0000 001C             		move.b	#0,obAnim(a0)	; use slow animation
0000B242 4A68 0012                  		tst.w	obVelY(a0)	; is Chopper at	its highest point?
0000B246 6B00                       		bmi.s	@nochg		; if not, branch
0000B248 117C 0002 001C             		move.b	#2,obAnim(a0)	; use stationary animation
0000B24E                            

0000B24E                            	@nochg:
0000B24E 4E75                       		rts	
0000B24E 4E75                       		rts	
0000B250                            		include	"_anim\Chopper.asm"
0000B250                            ; ---------------------------------------------------------------------------
0000B250                            ; Animation script - Chopper enemy
0000B250                            ; ---------------------------------------------------------------------------
0000B250 0000                       Ani_Chop:	dc.w @slow-Ani_Chop
0000B252 0000                       		dc.w @fast-Ani_Chop
0000B254 0000                       		dc.w @still-Ani_Chop
0000B256 0700 01FF                  @slow:		dc.b 7,	0, 1, afEnd
0000B25A 0300 01FF                  @fast:		dc.b 3,	0, 1, afEnd
0000B25E 0700 FF                    @still:		dc.b 7,	0, afEnd
0000B262 00                         		even
0000B262 00                         		even
0000B262                            Map_Chop:	include	"_maps\Chopper.asm"
0000B262                            ; ---------------------------------------------------------------------------
0000B262                            ; Sprite mappings - Chopper enemy (GHZ)
0000B262                            ; ---------------------------------------------------------------------------
0000B262                            Map_Chop_internal:
0000B262 0000                       		dc.w @mouthshut-Map_Chop_internal
0000B264 0000                       		dc.w @mouthopen-Map_Chop_internal
0000B266 01                         @mouthshut:	dc.b 1
0000B267 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000B26C 01                         @mouthopen:	dc.b 1
0000B26D F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000B272                            		even
0000B272                            		even
0000B272                            		include	"_incObj\2C Jaws.asm"
0000B272                            ; ---------------------------------------------------------------------------
0000B272                            ; Object 2C - Jaws enemy (LZ)
0000B272                            ; ---------------------------------------------------------------------------
0000B272                            

0000B272                            Jaws:
0000B272 7000                       		moveq	#0,d0
0000B274 1028 0024                  		move.b	obRoutine(a0),d0
0000B278 323B 0000                  		move.w	Jaws_Index(pc,d0.w),d1
0000B27C 4EFB 1000                  		jmp	Jaws_Index(pc,d1.w)
0000B280                            ; ===========================================================================
0000B280 0000                       Jaws_Index:	dc.w Jaws_Main-Jaws_Index
0000B282 0000                       		dc.w Jaws_Turn-Jaws_Index
0000B284                            

0000B284 =00000030                  jaws_timecount:	equ $30
0000B284 =00000032                  jaws_timedelay:	equ $32
0000B284                            ; ===========================================================================
0000B284                            

0000B284                            Jaws_Main:	; Routine 0
0000B284 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B288 217C 0000 0000 0004        		move.l	#Map_Jaws,obMap(a0)
0000B290 317C 2486 0002             		move.w	#$2486,obGfx(a0)
0000B296 0028 0004 0001             		ori.b	#4,obRender(a0)
0000B29C 117C 000A 0020             		move.b	#$A,obColType(a0)
0000B2A2 117C 0004 0018             		move.b	#4,obPriority(a0)
0000B2A8 117C 0010 0019             		move.b	#$10,obActWid(a0)
0000B2AE 7000                       		moveq	#0,d0
0000B2B0 1028 0028                  		move.b	obSubtype(a0),d0 ; load object subtype number
0000B2B4 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B2B6 5340                       		subq.w	#1,d0
0000B2B8 3140 0030                  		move.w	d0,jaws_timecount(a0) ; set turn delay time
0000B2BC 3140 0032                  		move.w	d0,jaws_timedelay(a0)
0000B2C0 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move Jaws to the left
0000B2C6 0828 0000 0022             		btst	#0,obStatus(a0)	; is Jaws facing left?
0000B2CC 6700                       		beq.s	Jaws_Turn	; if yes, branch
0000B2CE 4468 0010                  		neg.w	obVelX(a0)	; move Jaws to the right
0000B2D2                            

0000B2D2                            Jaws_Turn:	; Routine 2
0000B2D2 5368 0030                  		subq.w	#1,jaws_timecount(a0) ; subtract 1 from turn delay time
0000B2D6 6A00                       		bpl.s	@animate	; if time remains, branch
0000B2D8 3168 0032 0030             		move.w	jaws_timedelay(a0),jaws_timecount(a0) ; reset turn delay time
0000B2DE 4468 0010                  		neg.w	obVelX(a0)	; change speed direction
0000B2E2 0868 0000 0022             		bchg	#0,obStatus(a0)	; change Jaws facing direction
0000B2E8 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000B2EE                            

0000B2EE                            	@animate:
0000B2EE 43F9 0000 0000             		lea	(Ani_Jaws).l,a1
0000B2F4 6100 FABA                  		bsr.w	AnimateSprite
0000B2F8 6100 0000                  		bsr.w	SpeedToPos
0000B2FC 6000 0000                  		bra.w	RememberState
0000B2FC 6000 0000                  		bra.w	RememberState
0000B300                            		include	"_anim\Jaws.asm"
0000B300                            ; ---------------------------------------------------------------------------
0000B300                            ; Animation script - Jaws enemy
0000B300                            ; ---------------------------------------------------------------------------
0000B300 0000                       Ani_Jaws:	dc.w @swim-Ani_Jaws
0000B302 0700 0102 03FF             @swim:		dc.b 7,	0, 1, 2, 3, afEnd
0000B308                            		even
0000B308                            		even
0000B308                            Map_Jaws:	include	"_maps\Jaws.asm"
0000B308                            ; ---------------------------------------------------------------------------
0000B308                            ; Sprite mappings - Jaws enemy (LZ)
0000B308                            ; ---------------------------------------------------------------------------
0000B308                            Map_Jaws_internal:
0000B308 0000                       		dc.w @open1-Map_Jaws_internal
0000B30A 0000                       		dc.w @shut1-Map_Jaws_internal
0000B30C 0000                       		dc.w @open2-Map_Jaws_internal
0000B30E 0000                       		dc.w @shut2-Map_Jaws_internal
0000B310 02                         @open1:		dc.b 2
0000B311 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0	; mouth open
0000B316 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B31B 02                         @shut1:		dc.b 2
0000B31C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0 ; mouth shut
0000B321 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B326 02                         @open2:		dc.b 2
0000B327 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B32C F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B331 02                         @shut2:		dc.b 2
0000B332 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B337 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B33C                            		even
0000B33C                            		even
0000B33C                            		include	"_incObj\2D Burrobot.asm"
0000B33C                            ; ---------------------------------------------------------------------------
0000B33C                            ; Object 2D - Burrobot enemy (LZ)
0000B33C                            ; ---------------------------------------------------------------------------
0000B33C                            

0000B33C                            Burrobot:
0000B33C 7000                       		moveq	#0,d0
0000B33E 1028 0024                  		move.b	obRoutine(a0),d0
0000B342 323B 0000                  		move.w	Burro_Index(pc,d0.w),d1
0000B346 4EFB 1000                  		jmp	Burro_Index(pc,d1.w)
0000B34A                            ; ===========================================================================
0000B34A 0000                       Burro_Index:	dc.w Burro_Main-Burro_Index
0000B34C 0000                       		dc.w Burro_Action-Burro_Index
0000B34E                            

0000B34E =00000030                  burro_timedelay:	equ $30		; time between direction changes
0000B34E                            ; ===========================================================================
0000B34E                            

0000B34E                            Burro_Main:	; Routine 0
0000B34E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B352 117C 0013 0016             		move.b	#$13,obHeight(a0)
0000B358 117C 0008 0017             		move.b	#8,obWidth(a0)
0000B35E 217C 0000 0000 0004        		move.l	#Map_Burro,obMap(a0)
0000B366 317C 04A6 0002             		move.w	#$4A6,obGfx(a0)
0000B36C 0028 0004 0001             		ori.b	#4,obRender(a0)
0000B372 117C 0004 0018             		move.b	#4,obPriority(a0)
0000B378 117C 0005 0020             		move.b	#5,obColType(a0)
0000B37E 117C 000C 0019             		move.b	#$C,obActWid(a0)
0000B384 5C28 0025                  		addq.b	#6,ob2ndRout(a0) ; run "Burro_ChkSonic" routine
0000B388 117C 0002 001C             		move.b	#2,obAnim(a0)
0000B38E                            

0000B38E                            Burro_Action:	; Routine 2
0000B38E 7000                       		moveq	#0,d0
0000B390 1028 0025                  		move.b	ob2ndRout(a0),d0
0000B394 323B 0000                  		move.w	@index(pc,d0.w),d1
0000B398 4EBB 1000                  		jsr	@index(pc,d1.w)
0000B39C 43F9 0000 0000             		lea	(Ani_Burro).l,a1
0000B3A2 6100 FA0C                  		bsr.w	AnimateSprite
0000B3A6 6000 0000                  		bra.w	RememberState
0000B3AA                            ; ===========================================================================
0000B3AA 0000                       @index:		dc.w @changedir-@index
0000B3AC 0000                       		dc.w Burro_Move-@index
0000B3AE 0000                       		dc.w Burro_Jump-@index
0000B3B0 0000                       		dc.w Burro_ChkSonic-@index
0000B3B2                            ; ===========================================================================
0000B3B2                            

0000B3B2                            @changedir:
0000B3B2 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000B3B6 6A00                       		bpl.s	@nochg
0000B3B8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B3BC 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000B3C2 317C 0080 0010             		move.w	#$80,obVelX(a0)
0000B3C8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B3CE 0868 0000 0022             		bchg	#0,obStatus(a0)	; change direction the Burrobot	is facing
0000B3D4 6700                       		beq.s	@nochg
0000B3D6 4468 0010                  		neg.w	obVelX(a0)	; change direction the Burrobot	is moving
0000B3DA                            

0000B3DA                            	@nochg:
0000B3DA 4E75                       		rts	
0000B3DC                            ; ===========================================================================
0000B3DC                            

0000B3DC                            Burro_Move:
0000B3DC 5368 0030                  		subq.w	#1,burro_timedelay(a0)
0000B3E0 6B00                       		bmi.s	loc_AD84
0000B3E2 6100 0000                  		bsr.w	SpeedToPos
0000B3E6 0868 0000 0032             		bchg	#0,$32(a0)
0000B3EC 6600                       		bne.s	loc_AD78
0000B3EE 3628 0008                  		move.w	obX(a0),d3
0000B3F2 0643 000C                  		addi.w	#$C,d3
0000B3F6 0828 0000 0022             		btst	#0,obStatus(a0)
0000B3FC 6600                       		bne.s	loc_AD6A
0000B3FE 0443 0018                  		subi.w	#$18,d3
0000B402                            

0000B402                            loc_AD6A:
0000B402 4EB9 0000 0000             		jsr	(ObjFloorDist2).l
0000B408 0C41 000C                  		cmpi.w	#$C,d1
0000B40C 6C00                       		bge.s	loc_AD84
0000B40E 4E75                       		rts	
0000B410                            ; ===========================================================================
0000B410                            

0000B410                            loc_AD78:
0000B410 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B416 D368 000C                  		add.w	d1,obY(a0)
0000B41A 4E75                       		rts	
0000B41C                            ; ===========================================================================
0000B41C                            

0000B41C                            loc_AD84:
0000B41C 0838 0002 FE0F             		btst	#2,(v_vbla_byte).w
0000B422 6700                       		beq.s	loc_ADA4
0000B424 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B428 317C 003B 0030             		move.w	#59,burro_timedelay(a0)
0000B42E 317C 0000 0010             		move.w	#0,obVelX(a0)
0000B434 117C 0000 001C             		move.b	#0,obAnim(a0)
0000B43A 4E75                       		rts	
0000B43C                            ; ===========================================================================
0000B43C                            

0000B43C                            loc_ADA4:
0000B43C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000B440 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B446 117C 0002 001C             		move.b	#2,obAnim(a0)
0000B44C 4E75                       		rts	
0000B44E                            ; ===========================================================================
0000B44E                            

0000B44E                            Burro_Jump:
0000B44E 6100 0000                  		bsr.w	SpeedToPos
0000B452 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000B458 6B00                       		bmi.s	locret_ADF0
0000B45A 117C 0003 001C             		move.b	#3,obAnim(a0)
0000B460 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000B466 4A41                       		tst.w	d1
0000B468 6A00                       		bpl.s	locret_ADF0
0000B46A D368 000C                  		add.w	d1,obY(a0)
0000B46E 317C 0000 0012             		move.w	#0,obVelY(a0)
0000B474 117C 0001 001C             		move.b	#1,obAnim(a0)
0000B47A 317C 00FF 0030             		move.w	#255,burro_timedelay(a0)
0000B480 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B484 6100 0000                  		bsr.w	Burro_ChkSonic2
0000B488                            

0000B488                            locret_ADF0:
0000B488 4E75                       		rts	
0000B48A                            ; ===========================================================================
0000B48A                            

0000B48A                            Burro_ChkSonic:
0000B48A 343C 0060                  		move.w	#$60,d2
0000B48E 6100 0000                  		bsr.w	Burro_ChkSonic2
0000B492 6400                       		bcc.s	locret_AE20
0000B494 3038 D00C                  		move.w	(v_player+obY).w,d0
0000B498 9068 000C                  		sub.w	obY(a0),d0
0000B49C 6400                       		bcc.s	locret_AE20
0000B49E 0C40 FF80                  		cmpi.w	#-$80,d0
0000B4A2 6500                       		bcs.s	locret_AE20
0000B4A4 4A78 FE08                  		tst.w	(v_debuguse).w
0000B4A8 6600                       		bne.s	locret_AE20
0000B4AA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000B4AE 3141 0010                  		move.w	d1,obVelX(a0)
0000B4B2 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0000B4B8                            

0000B4B8                            locret_AE20:
0000B4B8 4E75                       		rts	
0000B4BA                            

0000B4BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B4BA                            

0000B4BA                            

0000B4BA                            Burro_ChkSonic2:
0000B4BA 323C 0080                  		move.w	#$80,d1
0000B4BE 08E8 0000 0022             		bset	#0,obStatus(a0)
0000B4C4 3038 D008                  		move.w	(v_player+obX).w,d0
0000B4C8 9068 0008                  		sub.w	obX(a0),d0
0000B4CC 6400                       		bcc.s	loc_AE40
0000B4CE 4440                       		neg.w	d0
0000B4D0 4441                       		neg.w	d1
0000B4D2 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000B4D8                            

0000B4D8                            loc_AE40:
0000B4D8 B042                       		cmp.w	d2,d0
0000B4DA 4E75                       		rts	
0000B4DC                            ; End of function Burro_ChkSonic2
0000B4DC                            ; End of function Burro_ChkSonic2
0000B4DC                            		include	"_anim\Burrobot.asm"
0000B4DC                            ; ---------------------------------------------------------------------------
0000B4DC                            ; Animation script - Burrobot enemy
0000B4DC                            ; ---------------------------------------------------------------------------
0000B4DC 0000                       Ani_Burro:	dc.w @walk1-Ani_Burro
0000B4DE 0000                       		dc.w @walk2-Ani_Burro
0000B4E0 0000                       		dc.w @digging-Ani_Burro
0000B4E2 0000                       		dc.w @fall-Ani_Burro
0000B4E4 0300 06FF                  @walk1:		dc.b 3,	0, 6, afEnd
0000B4E8 0300 01FF                  @walk2:		dc.b 3,	0, 1, afEnd
0000B4EC 0302 03FF                  @digging:	dc.b 3,	2, 3, afEnd
0000B4F0 0304 FF                    @fall:		dc.b 3,	4, afEnd
0000B4F4 00                         		even
0000B4F4 00                         		even
0000B4F4                            Map_Burro:	include	"_maps\Burrobot.asm"
0000B4F4                            ; ---------------------------------------------------------------------------
0000B4F4                            ; Sprite mappings - Burrobot enemy (LZ)
0000B4F4                            ; ---------------------------------------------------------------------------
0000B4F4                            Map_Burro_internal:
0000B4F4 0000                       		dc.w @walk1-Map_Burro_internal
0000B4F6 0000                       		dc.w @walk2-Map_Burro_internal
0000B4F8 0000                       		dc.w @digging1-Map_Burro_internal
0000B4FA 0000                       		dc.w @digging2-Map_Burro_internal
0000B4FC 0000                       		dc.w @fall-Map_Burro_internal
0000B4FE 0000                       		dc.w @facedown-Map_Burro_internal
0000B500 0000                       		dc.w @walk3-Map_Burro_internal
0000B502 02                         @walk1:		dc.b 2
0000B503 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0	; walking
0000B508 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B50D 02                         @walk2:		dc.b 2
0000B50E EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B513 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000B518 02                         @digging1:	dc.b 2
0000B519 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4 ; digging
0000B51E 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000B523 02                         @digging2:	dc.b 2
0000B524 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000B529 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000B52E 02                         @fall:		dc.b 2
0000B52F E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0 ; falling after jumping up
0000B534 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000B539 02                         @facedown:	dc.b 2
0000B53A F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8 ; facing down (unused)
0000B53F F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000B544 02                         @walk3:		dc.b 2
0000B545 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000B54A 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000B550 00                         		even
0000B550 00                         		even
0000B550                            

0000B550                            		include	"_incObj\2F MZ Large Grassy Platforms.asm"
0000B550                            ; ---------------------------------------------------------------------------
0000B550                            ; Object 2F - large grass-covered platforms (MZ)
0000B550                            ; ---------------------------------------------------------------------------
0000B550                            

0000B550                            LargeGrass:
0000B550 7000                       		moveq	#0,d0
0000B552 1028 0024                  		move.b	obRoutine(a0),d0
0000B556 323B 0000                  		move.w	LGrass_Index(pc,d0.w),d1
0000B55A 4EFB 1000                  		jmp	LGrass_Index(pc,d1.w)
0000B55E                            ; ===========================================================================
0000B55E 0000                       LGrass_Index:	dc.w LGrass_Main-LGrass_Index
0000B560 0000                       		dc.w LGrass_Action-LGrass_Index
0000B562                            

0000B562 =0000002A                  lgrass_origX:	equ $2A
0000B562 =0000002C                  lgrass_origY:	equ $2C
0000B562                            

0000B562 0000                       LGrass_Data:	dc.w LGrass_Data1-LGrass_Data 	; collision angle data
0000B564 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B566 0000                       		dc.w LGrass_Data3-LGrass_Data
0000B568 0140                       		dc.b 1,	$40
0000B56A 0000                       		dc.w LGrass_Data2-LGrass_Data
0000B56C 0220                       		dc.b 2,	$20
0000B56E                            ; ===========================================================================
0000B56E                            

0000B56E                            LGrass_Main:	; Routine 0
0000B56E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B572 217C 0000 0000 0004        		move.l	#Map_LGrass,obMap(a0)
0000B57A 317C C000 0002             		move.w	#$C000,obGfx(a0)
0000B580 117C 0004 0001             		move.b	#4,obRender(a0)
0000B586 117C 0005 0018             		move.b	#5,obPriority(a0)
0000B58C 3168 000C 002C             		move.w	obY(a0),lgrass_origY(a0)
0000B592 3168 0008 002A             		move.w	obX(a0),lgrass_origX(a0)
0000B598 7000                       		moveq	#0,d0
0000B59A 1028 0028                  		move.b	obSubtype(a0),d0
0000B59E E448                       		lsr.w	#2,d0
0000B5A0 0240 001C                  		andi.w	#$1C,d0
0000B5A4 43FB 00BC                  		lea	LGrass_Data(pc,d0.w),a1
0000B5A8 3019                       		move.w	(a1)+,d0
0000B5AA 45FB 00B6                  		lea	LGrass_Data(pc,d0.w),a2
0000B5AE 214A 0030                  		move.l	a2,$30(a0)
0000B5B2 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000B5B6 1151 0019                  		move.b	(a1),obActWid(a0)
0000B5BA 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000B5C0 117C 0040 0016             		move.b	#$40,obHeight(a0)
0000B5C6 08E8 0004 0001             		bset	#4,1(a0)
0000B5CC                            

0000B5CC                            LGrass_Action:	; Routine 2
0000B5CC 6100 0000                  		bsr.w	LGrass_Types
0000B5D0 4A28 0025                  		tst.b	ob2ndRout(a0)
0000B5D4 6700                       		beq.s	LGrass_Solid
0000B5D6 7200                       		moveq	#0,d1
0000B5D8 1228 0019                  		move.b	obActWid(a0),d1
0000B5DC 0641 000B                  		addi.w	#$B,d1
0000B5E0 6100 C66A                  		bsr.w	ExitPlatform
0000B5E4 0829 0003 0022             		btst	#3,obStatus(a1)
0000B5EA 6600 0000                  		bne.w	LGrass_Slope
0000B5EE 4228 0025                  		clr.b	ob2ndRout(a0)
0000B5F2 6000                       		bra.s	LGrass_Display
0000B5F4                            ; ===========================================================================
0000B5F4                            

0000B5F4                            LGrass_Slope:
0000B5F4 7200                       		moveq	#0,d1
0000B5F6 1228 0019                  		move.b	obActWid(a0),d1
0000B5FA 0641 000B                  		addi.w	#$B,d1
0000B5FE 2468 0030                  		movea.l	$30(a0),a2
0000B602 3428 0008                  		move.w	obX(a0),d2
0000B606 6100 D5AE                  		bsr.w	SlopeObject2
0000B60A 6000                       		bra.s	LGrass_Display
0000B60C                            ; ===========================================================================
0000B60C                            

0000B60C                            LGrass_Solid:
0000B60C 7200                       		moveq	#0,d1
0000B60E 1228 0019                  		move.b	obActWid(a0),d1
0000B612 0641 000B                  		addi.w	#$B,d1
0000B616 343C 0020                  		move.w	#$20,d2
0000B61A 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000B620 6600                       		bne.s	loc_AF8E
0000B622 343C 0030                  		move.w	#$30,d2
0000B626                            

0000B626                            loc_AF8E:
0000B626 2468 0030                  		movea.l	$30(a0),a2
0000B62A 6100 0000                  		bsr.w	SolidObject2F
0000B62E                            

0000B62E                            LGrass_Display:
0000B62E 6100 0000                  		bsr.w	DisplaySprite
0000B632 6000 0000                  		bra.w	LGrass_ChkDel
0000B636                            

0000B636                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B636                            

0000B636                            

0000B636                            LGrass_Types:
0000B636 7000                       		moveq	#0,d0
0000B638 1028 0028                  		move.b	obSubtype(a0),d0
0000B63C 0240 0007                  		andi.w	#7,d0
0000B640 D040                       		add.w	d0,d0
0000B642 323B 0000                  		move.w	LGrass_TypeIndex(pc,d0.w),d1
0000B646 4EFB 1000                  		jmp	LGrass_TypeIndex(pc,d1.w)
0000B64A                            ; End of function LGrass_Types
0000B64A                            

0000B64A                            ; ===========================================================================
0000B64A 0000                       LGrass_TypeIndex: dc.w LGrass_Type00-LGrass_TypeIndex
0000B64C 0000                       		dc.w LGrass_Type01-LGrass_TypeIndex
0000B64E 0000                       		dc.w LGrass_Type02-LGrass_TypeIndex
0000B650 0000                       		dc.w LGrass_Type03-LGrass_TypeIndex
0000B652 0000                       		dc.w LGrass_Type04-LGrass_TypeIndex
0000B654 0000                       		dc.w LGrass_Type05-LGrass_TypeIndex
0000B656                            ; ===========================================================================
0000B656                            

0000B656                            LGrass_Type00:
0000B656 4E75                       		rts			; type 00 platform doesn't move
0000B658                            ; ===========================================================================
0000B658                            

0000B658                            LGrass_Type01:
0000B658 1038 FE60                  		move.b	(v_oscillate+2).w,d0
0000B65C 323C 0020                  		move.w	#$20,d1
0000B660 6000                       		bra.s	LGrass_Move
0000B662                            ; ===========================================================================
0000B662                            

0000B662                            LGrass_Type02:
0000B662 1038 FE64                  		move.b	(v_oscillate+6).w,d0
0000B666 323C 0030                  		move.w	#$30,d1
0000B66A 6000                       		bra.s	LGrass_Move
0000B66C                            ; ===========================================================================
0000B66C                            

0000B66C                            LGrass_Type03:
0000B66C 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
0000B670 323C 0040                  		move.w	#$40,d1
0000B674 6000                       		bra.s	LGrass_Move
0000B676                            ; ===========================================================================
0000B676                            

0000B676                            LGrass_Type04:
0000B676 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0000B67A 323C 0060                  		move.w	#$60,d1
0000B67E                            

0000B67E                            LGrass_Move:
0000B67E 0828 0003 0028             		btst	#3,obSubtype(a0)
0000B684 6700                       		beq.s	loc_AFF2
0000B686 4440                       		neg.w	d0
0000B688 D041                       		add.w	d1,d0
0000B68A                            

0000B68A                            loc_AFF2:
0000B68A 3228 002C                  		move.w	lgrass_origY(a0),d1
0000B68E 9240                       		sub.w	d0,d1
0000B690 3141 000C                  		move.w	d1,obY(a0)	; update position on y-axis
0000B694 4E75                       		rts	
0000B696                            ; ===========================================================================
0000B696                            

0000B696                            LGrass_Type05:
0000B696 1028 0034                  		move.b	$34(a0),d0
0000B69A 4A28 0025                  		tst.b	ob2ndRout(a0)
0000B69E 6600                       		bne.s	loc_B010
0000B6A0 5500                       		subq.b	#2,d0
0000B6A2 6400                       		bcc.s	loc_B01C
0000B6A4 7000                       		moveq	#0,d0
0000B6A6 6000                       		bra.s	loc_B01C
0000B6A8                            ; ===========================================================================
0000B6A8                            

0000B6A8                            loc_B010:
0000B6A8 5800                       		addq.b	#4,d0
0000B6AA 0C00 0040                  		cmpi.b	#$40,d0
0000B6AE 6500                       		bcs.s	loc_B01C
0000B6B0 103C 0040                  		move.b	#$40,d0
0000B6B4                            

0000B6B4                            loc_B01C:
0000B6B4 1140 0034                  		move.b	d0,$34(a0)
0000B6B8 4EB9 0000 29E0             		jsr	(CalcSine).l
0000B6BE E848                       		lsr.w	#4,d0
0000B6C0 3200                       		move.w	d0,d1
0000B6C2 D068 002C                  		add.w	lgrass_origY(a0),d0
0000B6C6 3140 000C                  		move.w	d0,obY(a0)
0000B6CA 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B6D0 6600                       		bne.s	loc_B07A
0000B6D2 4A28 0035                  		tst.b	$35(a0)
0000B6D6 6600                       		bne.s	loc_B07A
0000B6D8 117C 0001 0035             		move.b	#1,$35(a0)
0000B6DE 6100 0000                  		bsr.w	FindNextFreeObj
0000B6E2 6600                       		bne.s	loc_B07A
0000B6E4 137C 0000 0000             		move.b	#id_GrassFire,0(a1) ; load sitting flame object
0000B6EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B6F0 3368 002C 002C             		move.w	lgrass_origY(a0),lgrass_origY(a1)
0000B6F6 5069 002C                  		addq.w	#8,lgrass_origY(a1)
0000B6FA 5769 002C                  		subq.w	#3,lgrass_origY(a1)
0000B6FE 0469 0040 0008             		subi.w	#$40,obX(a1)
0000B704 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B70A 2348 0038                  		move.l	a0,$38(a1)
0000B70E 2448                       		movea.l	a0,a2
0000B710 6100                       		bsr.s	sub_B09C
0000B712                            

0000B712                            loc_B07A:
0000B712 7400                       		moveq	#0,d2
0000B714 45E8 0036                  		lea	$36(a0),a2
0000B718 141A                       		move.b	(a2)+,d2
0000B71A 5302                       		subq.b	#1,d2
0000B71C 6500                       		bcs.s	locret_B09A
0000B71E                            

0000B71E                            loc_B086:
0000B71E 7000                       		moveq	#0,d0
0000B720 101A                       		move.b	(a2)+,d0
0000B722 ED48                       		lsl.w	#6,d0
0000B724 0640 D000                  		addi.w	#v_objspace&$FFFF,d0
0000B728 3240                       		movea.w	d0,a1
0000B72A 3341 003C                  		move.w	d1,$3C(a1)
0000B72E 51CA FFEE                  		dbf	d2,loc_B086
0000B732                            

0000B732                            locret_B09A:
0000B732 4E75                       		rts	
0000B734                            

0000B734                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B734                            

0000B734                            

0000B734                            sub_B09C:
0000B734 45EA 0036                  		lea	$36(a2),a2
0000B738 7000                       		moveq	#0,d0
0000B73A 1012                       		move.b	(a2),d0
0000B73C 5212                       		addq.b	#1,(a2)
0000B73E 45F2 0001                  		lea	1(a2,d0.w),a2
0000B742 3009                       		move.w	a1,d0
0000B744 0440 D000                  		subi.w	#v_objspace&$FFFF,d0
0000B748 EC48                       		lsr.w	#6,d0
0000B74A 0240 007F                  		andi.w	#$7F,d0
0000B74E 1480                       		move.b	d0,(a2)
0000B750 4E75                       		rts	
0000B752                            ; End of function sub_B09C
0000B752                            

0000B752                            ; ===========================================================================
0000B752                            

0000B752                            LGrass_ChkDel:
0000B752 4A28 0035                  		tst.b	$35(a0)
0000B756 6700                       		beq.s	loc_B0C6
0000B758 4A28 0001                  		tst.b	obRender(a0)
0000B75C 6A00                       		bpl.s	LGrass_DelFlames
0000B75E                            

0000B75E                            loc_B0C6:
0000B77C 4E75                       		rts	
0000B77E                            ; ===========================================================================
0000B77E                            

0000B77E                            LGrass_DelFlames:
0000B77E 7400                       		moveq	#0,d2
0000B780                            

0000B780                            loc_B0E8:
0000B780 45E8 0036                  		lea	$36(a0),a2
0000B784 1412                       		move.b	(a2),d2
0000B786 421A                       		clr.b	(a2)+
0000B788 5302                       		subq.b	#1,d2
0000B78A 6500                       		bcs.s	locret_B116
0000B78C                            

0000B78C                            loc_B0F4:
0000B78C 7000                       		moveq	#0,d0
0000B78E 1012                       		move.b	(a2),d0
0000B790 421A                       		clr.b	(a2)+
0000B792 ED48                       		lsl.w	#6,d0
0000B794 0640 D000                  		addi.w	#v_objspace&$FFFF,d0
0000B798 3240                       		movea.w	d0,a1
0000B79A 6100 0000                  		bsr.w	DeleteChild
0000B79E 51CA FFEC                  		dbf	d2,loc_B0F4
0000B7A2 117C 0000 0035             		move.b	#0,$35(a0)
0000B7A8 117C 0000 0034             		move.b	#0,$34(a0)
0000B7AE                            

0000B7AE                            locret_B116:
0000B7AE 4E75                       		rts	
0000B7B0                            ; ===========================================================================
0000B7B0                            ; ---------------------------------------------------------------------------
0000B7B0                            ; Collision data for large moving platforms (MZ)
0000B7B0                            ; ---------------------------------------------------------------------------
0000B7B0                            LGrass_Data1:	incbin	"misc\mz_pfm1.bin"
0000B7FC                            		even
0000B7FC                            LGrass_Data2:	incbin	"misc\mz_pfm2.bin"
0000B828                            		even
0000B828                            LGrass_Data3:	incbin	"misc\mz_pfm3.bin"
0000B874                            		even
0000B874                            		even
0000B874                            		include	"_incObj\35 Burning Grass.asm"
0000B874                            ; ---------------------------------------------------------------------------
0000B874                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B874                            ; (appears when	you walk on sinking platforms)
0000B874                            ; ---------------------------------------------------------------------------
0000B874                            

0000B874                            GrassFire:
0000B874 7000                       		moveq	#0,d0
0000B876 1028 0024                  		move.b	obRoutine(a0),d0
0000B87A 323B 0000                  		move.w	GFire_Index(pc,d0.w),d1
0000B87E 4EFB 1000                  		jmp	GFire_Index(pc,d1.w)
0000B882                            ; ===========================================================================
0000B882 0000                       GFire_Index:	dc.w GFire_Main-GFire_Index
0000B884 0000                       		dc.w loc_B238-GFire_Index
0000B886 0000                       		dc.w GFire_Move-GFire_Index
0000B888                            

0000B888 =0000002A                  gfire_origX:	equ $2A
0000B888                            ; ===========================================================================
0000B888                            

0000B888                            GFire_Main:	; Routine 0
0000B888 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B88C 217C 0000 0000 0004        		move.l	#Map_Fire,obMap(a0)
0000B894 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000B89A 3168 0008 002A             		move.w	obX(a0),gfire_origX(a0)
0000B8A0 117C 0004 0001             		move.b	#4,obRender(a0)
0000B8A6 117C 0001 0018             		move.b	#1,obPriority(a0)
0000B8AC 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000B8B2 117C 0008 0019             		move.b	#8,obActWid(a0)
0000B8B8 303C 0000                  		move.w	#sfx_Burning,d0
0000B8BC 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	 ; play burning sound
0000B8C2 4A28 0028                  		tst.b	obSubtype(a0)
0000B8C6 6700                       		beq.s	loc_B238
0000B8C8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000B8CC 6000 0000                  		bra.w	GFire_Move
0000B8D0                            ; ===========================================================================
0000B8D0                            

0000B8D0                            loc_B238:	; Routine 2
0000B8D0 2268 0030                  		movea.l	$30(a0),a1
0000B8D4 3228 0008                  		move.w	obX(a0),d1
0000B8D8 9268 002A                  		sub.w	gfire_origX(a0),d1
0000B8DC 0641 000C                  		addi.w	#$C,d1
0000B8E0 3001                       		move.w	d1,d0
0000B8E2 E248                       		lsr.w	#1,d0
0000B8E4 1031 0000                  		move.b	(a1,d0.w),d0
0000B8E8 4440                       		neg.w	d0
0000B8EA D068 002C                  		add.w	$2C(a0),d0
0000B8EE 3400                       		move.w	d0,d2
0000B8F0 D068 003C                  		add.w	$3C(a0),d0
0000B8F4 3140 000C                  		move.w	d0,obY(a0)
0000B8F8 0C41 0084                  		cmpi.w	#$84,d1
0000B8FC 6400                       		bcc.s	loc_B2B0
0000B8FE 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000B906 0C41 0080                  		cmpi.w	#$80,d1
0000B90A 6400                       		bcc.s	loc_B2B0
0000B90C 2028 0008                  		move.l	obX(a0),d0
0000B910 0680 0008 0000             		addi.l	#$80000,d0
0000B916 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B91C 6600                       		bne.s	loc_B2B0
0000B91E 6100 0000                  		bsr.w	FindNextFreeObj
0000B922 6600                       		bne.s	loc_B2B0
0000B924 137C 0000 0000             		move.b	#id_GrassFire,0(a1)
0000B92A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000B930 3342 002C                  		move.w	d2,$2C(a1)
0000B934 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B93A 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000B940 2468 0038                  		movea.l	$38(a0),a2
0000B944 6100 FDEE                  		bsr.w	sub_B09C
0000B948                            

0000B948                            loc_B2B0:
0000B948 6000                       		bra.s	GFire_Animate
0000B94A                            ; ===========================================================================
0000B94A                            

0000B94A                            GFire_Move:	; Routine 4
0000B94A 3028 002C                  		move.w	$2C(a0),d0
0000B94E D068 003C                  		add.w	$3C(a0),d0
0000B952 3140 000C                  		move.w	d0,obY(a0)
0000B956                            

0000B956                            GFire_Animate:
0000B956 43F9 0000 0000             		lea	(Ani_GFire).l,a1
0000B95C 6100 F452                  		bsr.w	AnimateSprite
0000B960 6000 0000                  		bra.w	DisplaySprite
0000B960 6000 0000                  		bra.w	DisplaySprite
0000B964                            		include	"_anim\Burning Grass.asm"
0000B964                            ; ---------------------------------------------------------------------------
0000B964                            ; Animation script - burning grass that sits on the floor (MZ)
0000B964                            ; ---------------------------------------------------------------------------
0000B964 0000                       Ani_GFire:	dc.w @burn-Ani_GFire
0000B966 0500 2001 21FF             @burn:		dc.b 5,	0, $20,	1, $21,	afEnd
0000B96C                            		even
0000B96C                            		even
0000B96C                            Map_LGrass:	include	"_maps\MZ Large Grassy Platforms.asm"
0000B96C                            ; ---------------------------------------------------------------------------
0000B96C                            ; Sprite mappings - large moving grass-covered platforms (MZ)
0000B96C                            ; ---------------------------------------------------------------------------
0000B96C                            Map_LGrass_internal:
0000B96C 0000                       		dc.w @wide-Map_LGrass_internal
0000B96E 0000                       		dc.w @sloped-Map_LGrass_internal
0000B970 0000                       		dc.w @narrow-Map_LGrass_internal
0000B972 0D                         @wide:		dc.b $D
0000B973 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0 ; wide platform
0000B978 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B97D 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B982 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B987 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B98C F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B991 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B996 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B99B F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B9A0 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B9A5 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B9AA D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B9AF F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B9B4 0A                         @sloped:	dc.b $A
0000B9B5 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0 ; sloped platform (catches fire)
0000B9BA F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B9BF 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B9C4 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B9C9 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B9CE F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B9D3 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B9D8 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B9DD C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B9E2 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B9E7 06                         @narrow:	dc.b 6
0000B9E8 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0 ; narrow platform
0000B9ED F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B9F2 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B9F7 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B9FC F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA01 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BA06                            		even
0000BA06                            		even
0000BA06                            Map_Fire:	include	"_maps\Fireballs.asm"
0000BA06                            ; ---------------------------------------------------------------------------
0000BA06                            ; Sprite mappings - fire balls (MZ, SLZ)
0000BA06                            ; ---------------------------------------------------------------------------
0000BA06                            Map_Fire_internal:
0000BA06 0000                       		dc.w @vertical1-Map_Fire_internal
0000BA08 0000                       		dc.w @vertical2-Map_Fire_internal
0000BA0A 0000                       		dc.w @vertcollide-Map_Fire_internal
0000BA0C 0000                       		dc.w @horizontal1-Map_Fire_internal
0000BA0E 0000                       		dc.w @horizontal2-Map_Fire_internal
0000BA10 0000                       		dc.w @horicollide-Map_Fire_internal
0000BA12 01                         @vertical1:	dc.b 1
0000BA13 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000BA18 01                         @vertical2:	dc.b 1
0000BA19 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000BA1E 01                         @vertcollide:	dc.b 1
0000BA1F F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000BA24 01                         @horizontal1:	dc.b 1
0000BA25 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000BA2A 01                         @horizontal2:	dc.b 1
0000BA2B F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000BA30 01                         @horicollide:	dc.b 1
0000BA31 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000BA36                            		even
0000BA36                            		even
0000BA36                            		include	"_incObj\30 MZ Large Green Glass Blocks.asm"
0000BA36                            ; ---------------------------------------------------------------------------
0000BA36                            ; Object 30 - large green glass blocks (MZ)
0000BA36                            ; ---------------------------------------------------------------------------
0000BA36                            

0000BA36                            GlassBlock:
0000BA36 7000                       		moveq	#0,d0
0000BA38 1028 0024                  		move.b	obRoutine(a0),d0
0000BA3C 323B 0000                  		move.w	Glass_Index(pc,d0.w),d1
0000BA40 4EBB 1000                  		jsr	Glass_Index(pc,d1.w)
0000BA62 6000 0000                  		bra.w	DisplaySprite
0000BA66                            ; ===========================================================================
0000BA66                            

0000BA66                            Glass_Delete:
0000BA66 6000 0000                  		bra.w	DeleteObject
0000BA6A                            ; ===========================================================================
0000BA6A 0000                       Glass_Index:	dc.w Glass_Main-Glass_Index
0000BA6C 0000                       		dc.w Glass_Block012-Glass_Index
0000BA6E 0000                       		dc.w Glass_Reflect012-Glass_Index
0000BA70 0000                       		dc.w Glass_Block34-Glass_Index
0000BA72 0000                       		dc.w Glass_Reflect34-Glass_Index
0000BA74                            

0000BA74 =00000032                  glass_dist:	equ $32		; distance block moves when switch is pressed
0000BA74 =0000003C                  glass_parent:	equ $3C		; address of parent object
0000BA74                            

0000BA74 0200 00                    Glass_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BA77 0400 01                    		dc.b 4,	0, 1
0000BA7A 0600 02                    Glass_Vars2:	dc.b 6,	0, 2
0000BA7D 0800 01                    		dc.b 8,	0, 1
0000BA80                            ; ===========================================================================
0000BA80                            

0000BA80                            Glass_Main:	; Routine 0
0000BA80 45F9 0000 BA74             		lea	(Glass_Vars1).l,a2
0000BA86 7201                       		moveq	#1,d1
0000BA88 117C 0048 0016             		move.b	#$48,obHeight(a0)
0000BA8E 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object type 0/1/2 ?
0000BA94 6500                       		bcs.s	@IsType012	; if yes, branch
0000BA96                            

0000BA96 45F9 0000 BA7A             		lea	(Glass_Vars2).l,a2
0000BA9C 7201                       		moveq	#1,d1
0000BA9E 117C 0038 0016             		move.b	#$38,obHeight(a0)
0000BAA4                            

0000BAA4                            	@IsType012:
0000BAA4 2248                       		movea.l	a0,a1
0000BAA6 6000                       		bra.s	@Load		; load main object
0000BAA8                            ; ===========================================================================
0000BAA8                            

0000BAA8                            	@Repeat:
0000BAA8 6100 0000                  		bsr.w	FindNextFreeObj
0000BAAC 6600                       		bne.s	@Fail
0000BAAE                            

0000BAAE                            @Load:
0000BAAE 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000BAB2 137C 0000 0000             		move.b	#id_GlassBlock,0(a1)
0000BAB8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BABE 101A                       		move.b	(a2)+,d0
0000BAC0 4880                       		ext.w	d0
0000BAC2 D068 000C                  		add.w	obY(a0),d0
0000BAC6 3340 000C                  		move.w	d0,obY(a1)
0000BACA 237C 0000 0000 0004        		move.l	#Map_Glass,obMap(a1)
0000BAD2 337C C38E 0002             		move.w	#$C38E,obGfx(a1)
0000BAD8 137C 0004 0001             		move.b	#4,obRender(a1)
0000BADE 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000BAE4 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000BAEA 137C 0020 0019             		move.b	#$20,obActWid(a1)
0000BAF0 137C 0004 0018             		move.b	#4,obPriority(a1)
0000BAF6 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000BAFA 2348 003C                  		move.l	a0,glass_parent(a1)
0000BAFE 51C9 FFA8                  		dbf	d1,@Repeat	; repeat once to load "reflection object"
0000BB02                            

0000BB02 137C 0010 0019             		move.b	#$10,obActWid(a1)
0000BB08 137C 0003 0018             		move.b	#3,obPriority(a1)
0000BB0E 5029 0028                  		addq.b	#8,obSubtype(a1)
0000BB12 0229 000F 0028             		andi.b	#$F,obSubtype(a1)
0000BB18                            

0000BB18                            	@Fail:
0000BB18 317C 0090 0032             		move.w	#$90,glass_dist(a0)
0000BB1E 08E8 0004 0001             		bset	#4,obRender(a0)
0000BB24                            

0000BB24                            Glass_Block012:	; Routine 2
0000BB24 6100 0000                  		bsr.w	Glass_Types
0000BB28 323C 002B                  		move.w	#$2B,d1
0000BB2C 343C 0048                  		move.w	#$48,d2
0000BB30 363C 0049                  		move.w	#$49,d3
0000BB34 3828 0008                  		move.w	obX(a0),d4
0000BB38 6000 0000                  		bra.w	SolidObject
0000BB3C                            ; ===========================================================================
0000BB3C                            

0000BB3C                            Glass_Reflect012:
0000BB3C                            		; Routine 4
0000BB3C 2268 003C                  		movea.l	$3C(a0),a1
0000BB40 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000BB46 6000 0000                  		bra.w	Glass_Types
0000BB4A                            ; ===========================================================================
0000BB4A                            

0000BB4A                            Glass_Block34:	; Routine 6
0000BB4A 6100 0000                  		bsr.w	Glass_Types
0000BB4E 323C 002B                  		move.w	#$2B,d1
0000BB52 343C 0038                  		move.w	#$38,d2
0000BB56 363C 0039                  		move.w	#$39,d3
0000BB5A 3828 0008                  		move.w	obX(a0),d4
0000BB5E 6000 0000                  		bra.w	SolidObject
0000BB62                            ; ===========================================================================
0000BB62                            

0000BB62                            Glass_Reflect34:
0000BB62                            		; Routine 8
0000BB62 2268 003C                  		movea.l	$3C(a0),a1
0000BB66 3169 0032 0032             		move.w	glass_dist(a1),glass_dist(a0)
0000BB6C 3169 000C 0030             		move.w	obY(a1),$30(a0)
0000BB72 6000 0000                  		bra.w	Glass_Types
0000BB76                            

0000BB76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB76                            

0000BB76                            

0000BB76                            Glass_Types:
0000BB76 7000                       		moveq	#0,d0
0000BB78 1028 0028                  		move.b	obSubtype(a0),d0
0000BB7C 0240 0007                  		andi.w	#7,d0
0000BB80 D040                       		add.w	d0,d0
0000BB82 323B 0000                  		move.w	Glass_TypeIndex(pc,d0.w),d1
0000BB86 4EFB 1000                  		jmp	Glass_TypeIndex(pc,d1.w)
0000BB8A                            ; End of function Glass_Types
0000BB8A                            

0000BB8A                            ; ===========================================================================
0000BB8A 0000                       Glass_TypeIndex: dc.w Glass_Type00-Glass_TypeIndex
0000BB8C 0000                       		dc.w Glass_Type01-Glass_TypeIndex
0000BB8E 0000                       		dc.w Glass_Type02-Glass_TypeIndex
0000BB90 0000                       		dc.w Glass_Type03-Glass_TypeIndex
0000BB92 0000                       		dc.w Glass_Type04-Glass_TypeIndex
0000BB94                            ; ===========================================================================
0000BB94                            

0000BB94                            Glass_Type00:
0000BB94 4E75                       		rts	
0000BB96                            ; ===========================================================================
0000BB96                            

0000BB96                            Glass_Type01:
0000BB96 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000BB9A 323C 0040                  		move.w	#$40,d1
0000BB9E 6000                       		bra.s	loc_B514
0000BBA0                            ; ===========================================================================
0000BBA0                            

0000BBA0                            Glass_Type02:
0000BBA0 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000BBA4 323C 0040                  		move.w	#$40,d1
0000BBA8 4440                       		neg.w	d0
0000BBAA D041                       		add.w	d1,d0
0000BBAC                            

0000BBAC                            loc_B514:
0000BBAC 0828 0003 0028             		btst	#3,obSubtype(a0)
0000BBB2 6700                       		beq.s	loc_B526
0000BBB4 4440                       		neg.w	d0
0000BBB6 D041                       		add.w	d1,d0
0000BBB8 E208                       		lsr.b	#1,d0
0000BBBA 0640 0020                  		addi.w	#$20,d0
0000BBBE                            

0000BBBE                            loc_B526:
0000BBBE 6000 0000                  		bra.w	loc_B5EE
0000BBC2                            ; ===========================================================================
0000BBC2                            

0000BBC2                            Glass_Type03:
0000BBC2 0828 0003 0028             		btst	#3,obSubtype(a0)
0000BBC8 6700                       		beq.s	loc_B53E
0000BBCA 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000BBCE 0440 0010                  		subi.w	#$10,d0
0000BBD2 6000 0000                  		bra.w	loc_B5EE
0000BBD6                            ; ===========================================================================
0000BBD6                            

0000BBD6                            loc_B53E:
0000BBD6 0828 0003 0022             		btst	#3,obStatus(a0)
0000BBDC 6600                       		bne.s	loc_B54E
0000BBDE 08A8 0000 0034             		bclr	#0,$34(a0)
0000BBE4 6000                       		bra.s	loc_B582
0000BBE6                            ; ===========================================================================
0000BBE6                            

0000BBE6                            loc_B54E:
0000BBE6 4A28 0034                  		tst.b	$34(a0)
0000BBEA 6600                       		bne.s	loc_B582
0000BBEC 117C 0001 0034             		move.b	#1,$34(a0)
0000BBF2 08E8 0000 0035             		bset	#0,$35(a0)
0000BBF8 6700                       		beq.s	loc_B582
0000BBFA 08E8 0007 0034             		bset	#7,$34(a0)
0000BC00 317C 0010 0036             		move.w	#$10,$36(a0)
0000BC06 117C 000A 0038             		move.b	#$A,$38(a0)
0000BC0C 0C68 0040 0032             		cmpi.w	#$40,glass_dist(a0)
0000BC12 6600                       		bne.s	loc_B582
0000BC14 317C 0040 0036             		move.w	#$40,$36(a0)
0000BC1A                            

0000BC1A                            loc_B582:
0000BC1A 4A28 0034                  		tst.b	$34(a0)
0000BC1E 6A00                       		bpl.s	loc_B5AA
0000BC20 4A28 0038                  		tst.b	$38(a0)
0000BC24 6700                       		beq.s	loc_B594
0000BC26 5328 0038                  		subq.b	#1,$38(a0)
0000BC2A 6600                       		bne.s	loc_B5AA
0000BC2C                            

0000BC2C                            loc_B594:
0000BC2C 4A68 0032                  		tst.w	glass_dist(a0)
0000BC30 6700                       		beq.s	loc_B5A4
0000BC32 5368 0032                  		subq.w	#1,glass_dist(a0)
0000BC36 5368 0036                  		subq.w	#1,$36(a0)
0000BC3A 6600                       		bne.s	loc_B5AA
0000BC3C                            

0000BC3C                            loc_B5A4:
0000BC3C 08A8 0007 0034             		bclr	#7,$34(a0)
0000BC42                            

0000BC42                            loc_B5AA:
0000BC42 3028 0032                  		move.w	glass_dist(a0),d0
0000BC46 6000                       		bra.s	loc_B5EE
0000BC48                            ; ===========================================================================
0000BC48                            

0000BC48                            Glass_Type04:
0000BC48 0828 0003 0028             		btst	#3,obSubtype(a0)
0000BC4E 6700                       		beq.s	Glass_ChkSwitch
0000BC50 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000BC54 0440 0010                  		subi.w	#$10,d0
0000BC58 6000                       		bra.s	loc_B5EE
0000BC5A                            ; ===========================================================================
0000BC5A                            

0000BC5A                            Glass_ChkSwitch:
0000BC5A 4A28 0034                  		tst.b	$34(a0)
0000BC5E 6600                       		bne.s	loc_B5E0
0000BC60 45F8 F7E0                  		lea	(f_switch).w,a2
0000BC64 7000                       		moveq	#0,d0
0000BC66 1028 0028                  		move.b	obSubtype(a0),d0 ; load object type number
0000BC6A E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BC6C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BC70 6700                       		beq.s	loc_B5EA	; if not, branch
0000BC72 117C 0001 0034             		move.b	#1,$34(a0)
0000BC78                            

0000BC78                            loc_B5E0:
0000BC78 4A68 0032                  		tst.w	glass_dist(a0)
0000BC7C 6700                       		beq.s	loc_B5EA
0000BC7E 5568 0032                  		subq.w	#2,glass_dist(a0)
0000BC82                            

0000BC82                            loc_B5EA:
0000BC82 3028 0032                  		move.w	glass_dist(a0),d0
0000BC86                            

0000BC86                            loc_B5EE:
0000BC86 3228 0030                  		move.w	$30(a0),d1
0000BC8A 9240                       		sub.w	d0,d1
0000BC8C 3141 000C                  		move.w	d1,obY(a0)
0000BC90 4E75                       		rts	
0000BC90 4E75                       		rts	
0000BC92                            Map_Glass:	include	"_maps\MZ Large Green Glass Blocks.asm"
0000BC92                            ; ---------------------------------------------------------------------------
0000BC92                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BC92                            ; ---------------------------------------------------------------------------
0000BC92                            Map_Glass_internal:
0000BC92 0000                       		dc.w @tall-Map_Glass_internal
0000BC94 0000                       		dc.w @shine-Map_Glass_internal
0000BC96 0000                       		dc.w @short-Map_Glass_internal
0000BC98 0C                         @tall:		dc.b $C
0000BC99 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0	; tall block
0000BC9E B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BCA3 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BCA8 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BCAD E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BCB2 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BCB7 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BCBC 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BCC1 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BCC6 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BCCB 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BCD0 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BCD5 02                         @shine:		dc.b 2
0000BCD6 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0	; reflected shine on block
0000BCDB 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BCE0 0A                         @short:		dc.b $A
0000BCE1 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0	; short block
0000BCE6 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BCEB D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BCF0 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BCF5 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BCFA F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BCFF 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BD04 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BD09 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BD0E 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BD14 00                         		even
0000BD14 00                         		even
0000BD14                            		include	"_incObj\31 Chained Stompers.asm"
0000BD14                            ; ---------------------------------------------------------------------------
0000BD14                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BD14                            ; ---------------------------------------------------------------------------
0000BD14                            

0000BD14                            ChainStomp:
0000BD14 7000                       		moveq	#0,d0
0000BD16 1028 0024                  		move.b	obRoutine(a0),d0
0000BD1A 323B 0000                  		move.w	CStom_Index(pc,d0.w),d1
0000BD1E 4EFB 1000                  		jmp	CStom_Index(pc,d1.w)
0000BD22                            ; ===========================================================================
0000BD22 0000                       CStom_Index:	dc.w CStom_Main-CStom_Index
0000BD24 0000                       		dc.w loc_B798-CStom_Index
0000BD26 0000                       		dc.w loc_B7FE-CStom_Index
0000BD28 0000                       		dc.w CStom_Display2-CStom_Index
0000BD2A 0000                       		dc.w loc_B7E2-CStom_Index
0000BD2C                            

0000BD2C =0000003A                  CStom_switch:	equ $3A			; switch number for the current stomper
0000BD2C                            

0000BD2C 0000                       CStom_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BD2E 0100                       		dc.b 1,	0
0000BD30                            

0000BD30 0200 00                    CStom_Var:	dc.b 2,	0, 0		; routine number, y-position, frame number
0000BD33 041C 01                    		dc.b 4,	$1C, 1
0000BD36 08CC 03                    		dc.b 8,	$CC, 3
0000BD39 06F0 02                    		dc.b 6,	$F0, 2
0000BD3C                            

0000BD3C 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BD40 5000 7800                  		dc.w $5000, $7800
0000BD44 3800 5800                  		dc.w $3800, $5800
0000BD48 B800                       		dc.w $B800
0000BD4A                            ; ===========================================================================
0000BD4A                            

0000BD4A                            CStom_Main:	; Routine 0
0000BD4A 7000                       		moveq	#0,d0
0000BD4C 1028 0028                  		move.b	obSubtype(a0),d0
0000BD50 6A00                       		bpl.s	loc_B6CE
0000BD52 0240 007F                  		andi.w	#$7F,d0
0000BD56 D040                       		add.w	d0,d0
0000BD58 45FB 00D2                  		lea	CStom_SwchNums(pc,d0.w),a2
0000BD5C 115A 003A                  		move.b	(a2)+,CStom_switch(a0)
0000BD60 101A                       		move.b	(a2)+,d0
0000BD62 1140 0028                  		move.b	d0,obSubtype(a0)
0000BD66                            

0000BD66                            loc_B6CE:
0000BD66 0200 000F                  		andi.b	#$F,d0
0000BD6A D040                       		add.w	d0,d0
0000BD6C 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BD70 4A40                       		tst.w	d0
0000BD72 6600                       		bne.s	loc_B6E0
0000BD74 3142 0032                  		move.w	d2,$32(a0)
0000BD78                            

0000BD78                            loc_B6E0:
0000BD78 45F9 0000 BD30             		lea	(CStom_Var).l,a2
0000BD7E 2248                       		movea.l	a0,a1
0000BD80 7203                       		moveq	#3,d1
0000BD82 6000                       		bra.s	CStom_MakeStomper
0000BD84                            ; ===========================================================================
0000BD84                            

0000BD84                            CStom_Loop:
0000BD84 6100 0000                  		bsr.w	FindNextFreeObj
0000BD88 6600 0000                  		bne.w	CStom_SetSize
0000BD8C                            

0000BD8C                            CStom_MakeStomper:
0000BD8C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000BD90 137C 0000 0000             		move.b	#id_ChainStomp,0(a1)
0000BD96 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000BD9C 101A                       		move.b	(a2)+,d0
0000BD9E 4880                       		ext.w	d0
0000BDA0 D068 000C                  		add.w	obY(a0),d0
0000BDA4 3340 000C                  		move.w	d0,obY(a1)
0000BDA8 237C 0000 0000 0004        		move.l	#Map_CStom,obMap(a1)
0000BDB0 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000BDB6 137C 0004 0001             		move.b	#4,obRender(a1)
0000BDBC 3369 000C 0030             		move.w	obY(a1),$30(a1)
0000BDC2 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000BDC8 137C 0010 0019             		move.b	#$10,obActWid(a1)
0000BDCE 3342 0034                  		move.w	d2,$34(a1)
0000BDD2 137C 0004 0018             		move.b	#4,obPriority(a1)
0000BDD8 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000BDDC 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
0000BDE2 6600                       		bne.s	loc_B76A
0000BDE4 5341                       		subq.w	#1,d1
0000BDE6 1028 0028                  		move.b	obSubtype(a0),d0
0000BDEA 0240 00F0                  		andi.w	#$F0,d0
0000BDEE 0C40 0020                  		cmpi.w	#$20,d0
0000BDF2 6798                       		beq.s	CStom_MakeStomper
0000BDF4 137C 0038 0019             		move.b	#$38,obActWid(a1)
0000BDFA 137C 0090 0020             		move.b	#$90,obColType(a1)
0000BE00 5241                       		addq.w	#1,d1
0000BE02                            

0000BE02                            loc_B76A:
0000BE02 2348 003C                  		move.l	a0,$3C(a1)
0000BE06 51C9 FF7C                  		dbf	d1,CStom_Loop
0000BE0A                            

0000BE0A 137C 0003 0018             		move.b	#3,obPriority(a1)
0000BE10                            

0000BE10                            CStom_SetSize:
0000BE10 7000                       		moveq	#0,d0
0000BE12 1028 0028                  		move.b	obSubtype(a0),d0
0000BE16 E648                       		lsr.w	#3,d0
0000BE18 0200 000E                  		andi.b	#$E,d0
0000BE1C 45FB 0000                  		lea	CStom_Var2(pc,d0.w),a2
0000BE20 115A 0019                  		move.b	(a2)+,obActWid(a0)
0000BE24 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000BE28 6000                       		bra.s	loc_B798
0000BE2A                            ; ===========================================================================
0000BE2A 3800                       CStom_Var2:	dc.b $38, 0		; width, frame number
0000BE2C 3009                       		dc.b $30, 9
0000BE2E 100A                       		dc.b $10, $A
0000BE30                            ; ===========================================================================
0000BE30                            

0000BE30                            loc_B798:	; Routine 2
0000BE30 6100 0000                  		bsr.w	CStom_Types
0000BE34 31E8 000C F7A4             		move.w	obY(a0),(v_obj31ypos).w
0000BE3A 7200                       		moveq	#0,d1
0000BE3C 1228 0019                  		move.b	obActWid(a0),d1
0000BE40 0641 000B                  		addi.w	#$B,d1
0000BE44 343C 000C                  		move.w	#$C,d2
0000BE48 363C 000D                  		move.w	#$D,d3
0000BE4C 3828 0008                  		move.w	obX(a0),d4
0000BE50 6100 0000                  		bsr.w	SolidObject
0000BE54 0828 0003 0022             		btst	#3,obStatus(a0)
0000BE5A 6700                       		beq.s	CStom_Display
0000BE5C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BE62 6400                       		bcc.s	CStom_Display
0000BE64 2448                       		movea.l	a0,a2
0000BE66 41F8 D000                  		lea	(v_player).w,a0
0000BE6A 4EB9 0000 0000             		jsr	(KillSonic).l
0000BE70 204A                       		movea.l	a2,a0
0000BE72                            

0000BE72                            CStom_Display:
0000BE72 6100 0000                  		bsr.w	DisplaySprite
0000BE76 6000 0000                  		bra.w	CStom_ChkDel
0000BE7A                            ; ===========================================================================
0000BE7A                            

0000BE7A                            loc_B7E2:	; Routine 8
0000BE7A 117C 0080 0016             		move.b	#$80,obHeight(a0)
0000BE80 08E8 0004 0001             		bset	#4,obRender(a0)
0000BE86 2268 003C                  		movea.l	$3C(a0),a1
0000BE8A 1029 0032                  		move.b	$32(a1),d0
0000BE8E EA08                       		lsr.b	#5,d0
0000BE90 5600                       		addq.b	#3,d0
0000BE92 1140 001A                  		move.b	d0,obFrame(a0)
0000BE96                            

0000BE96                            loc_B7FE:	; Routine 4
0000BE96 2268 003C                  		movea.l	$3C(a0),a1
0000BE9A 7000                       		moveq	#0,d0
0000BE9C 1029 0032                  		move.b	$32(a1),d0
0000BEA0 D068 0030                  		add.w	$30(a0),d0
0000BEA4 3140 000C                  		move.w	d0,obY(a0)
0000BEA8                            

0000BEA8                            CStom_Display2:	; Routine 6
0000BEA8 6100 0000                  		bsr.w	DisplaySprite
0000BEAC                            

0000BEAC                            CStom_ChkDel:
0000BECA 4E75                       		rts	
0000BECC                            ; ===========================================================================
0000BECC                            

0000BECC                            CStom_Types:
0000BECC 1028 0028                  		move.b	obSubtype(a0),d0
0000BED0 0240 000F                  		andi.w	#$F,d0
0000BED4 D040                       		add.w	d0,d0
0000BED6 323B 0000                  		move.w	CStom_TypeIndex(pc,d0.w),d1
0000BEDA 4EFB 1000                  		jmp	CStom_TypeIndex(pc,d1.w)
0000BEDE                            ; ===========================================================================
0000BEDE 0000                       CStom_TypeIndex: dc.w CStom_Type00-CStom_TypeIndex
0000BEE0 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000BEE2 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000BEE4 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000BEE6 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000BEE8 0000                       		dc.w CStom_Type03-CStom_TypeIndex
0000BEEA 0000                       		dc.w CStom_Type01-CStom_TypeIndex
0000BEEC                            ; ===========================================================================
0000BEEC                            

0000BEEC                            CStom_Type00:
0000BEEC 45F8 F7E0                  		lea	(f_switch).w,a2	; load switch statuses
0000BEF0 7000                       		moveq	#0,d0
0000BEF2 1028 003A                  		move.b	CStom_switch(a0),d0 ; move number 0 or 1 to d0
0000BEF6 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BEFA 6700                       		beq.s	loc_B8A8	; if not, branch
0000BEFC 4A78 F7A4                  		tst.w	(v_obj31ypos).w
0000BF00 6A00                       		bpl.s	loc_B872
0000BF02 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF08 6700                       		beq.s	loc_B8A0
0000BF0A                            

0000BF0A                            loc_B872:
0000BF0A 4A68 0032                  		tst.w	$32(a0)
0000BF0E 6700                       		beq.s	loc_B8A0
0000BF10 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BF14 0200 000F                  		andi.b	#$F,d0
0000BF18 6600                       		bne.s	loc_B892
0000BF1A 4A28 0001                  		tst.b	1(a0)
0000BF1E 6A00                       		bpl.s	loc_B892
0000BF20 303C 0000                  		move.w	#sfx_ChainRise,d0
0000BF24 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play rising chain sound
0000BF2A                            

0000BF2A                            loc_B892:
0000BF2A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BF30 6400                       		bcc.s	CStom_Restart
0000BF32 317C 0000 0032             		move.w	#0,$32(a0)
0000BF38                            

0000BF38                            loc_B8A0:
0000BF38 317C 0000 0012             		move.w	#0,obVelY(a0)
0000BF3E 6000                       		bra.s	CStom_Restart
0000BF40                            ; ===========================================================================
0000BF40                            

0000BF40                            loc_B8A8:
0000BF40 3228 0034                  		move.w	$34(a0),d1
0000BF44 B268 0032                  		cmp.w	$32(a0),d1
0000BF48 6700                       		beq.s	CStom_Restart
0000BF4A 3028 0012                  		move.w	obVelY(a0),d0
0000BF4E 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000BF54 D168 0032                  		add.w	d0,$32(a0)
0000BF58 B268 0032                  		cmp.w	$32(a0),d1
0000BF5C 6200                       		bhi.s	CStom_Restart
0000BF5E 3141 0032                  		move.w	d1,$32(a0)
0000BF62 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000BF68 4A28 0001                  		tst.b	obRender(a0)
0000BF6C 6A00                       		bpl.s	CStom_Restart
0000BF6E 303C 0000                  		move.w	#sfx_ChainStomp,d0
0000BF72 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play stomping sound
0000BF78                            

0000BF78                            CStom_Restart:
0000BF78 7000                       		moveq	#0,d0
0000BF7A 1028 0032                  		move.b	$32(a0),d0
0000BF7E D068 0030                  		add.w	$30(a0),d0
0000BF82 3140 000C                  		move.w	d0,obY(a0)
0000BF86 4E75                       		rts	
0000BF88                            ; ===========================================================================
0000BF88                            

0000BF88                            CStom_Type01:
0000BF88 4A68 0036                  		tst.w	$36(a0)
0000BF8C 6700                       		beq.s	loc_B938
0000BF8E 4A68 0038                  		tst.w	$38(a0)
0000BF92 6700                       		beq.s	loc_B902
0000BF94 5368 0038                  		subq.w	#1,$38(a0)
0000BF98 6000                       		bra.s	loc_B97C
0000BF9A                            ; ===========================================================================
0000BF9A                            

0000BF9A                            loc_B902:
0000BF9A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000BF9E 0200 000F                  		andi.b	#$F,d0
0000BFA2 6600                       		bne.s	loc_B91C
0000BFA4 4A28 0001                  		tst.b	obRender(a0)
0000BFA8 6A00                       		bpl.s	loc_B91C
0000BFAA 303C 0000                  		move.w	#sfx_ChainRise,d0
0000BFAE 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play rising chain sound
0000BFB4                            

0000BFB4                            loc_B91C:
0000BFB4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BFBA 6400                       		bcc.s	loc_B97C
0000BFBC 317C 0000 0032             		move.w	#0,$32(a0)
0000BFC2 317C 0000 0012             		move.w	#0,obVelY(a0)
0000BFC8 317C 0000 0036             		move.w	#0,$36(a0)
0000BFCE 6000                       		bra.s	loc_B97C
0000BFD0                            ; ===========================================================================
0000BFD0                            

0000BFD0                            loc_B938:
0000BFD0 3228 0034                  		move.w	$34(a0),d1
0000BFD4 B268 0032                  		cmp.w	$32(a0),d1
0000BFD8 6700                       		beq.s	loc_B97C
0000BFDA 3028 0012                  		move.w	obVelY(a0),d0
0000BFDE 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make object fall
0000BFE4 D168 0032                  		add.w	d0,$32(a0)
0000BFE8 B268 0032                  		cmp.w	$32(a0),d1
0000BFEC 6200                       		bhi.s	loc_B97C
0000BFEE 3141 0032                  		move.w	d1,$32(a0)
0000BFF2 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop object falling
0000BFF8 317C 0001 0036             		move.w	#1,$36(a0)
0000BFFE 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C004 4A28 0001                  		tst.b	obRender(a0)
0000C008 6A00                       		bpl.s	loc_B97C
0000C00A 303C 0000                  		move.w	#sfx_ChainStomp,d0
0000C00E 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play stomping sound
0000C014                            

0000C014                            loc_B97C:
0000C014 6000 FF62                  		bra.w	CStom_Restart
0000C018                            ; ===========================================================================
0000C018                            

0000C018                            CStom_Type03:
0000C018 3038 D008                  		move.w	(v_player+obX).w,d0
0000C01C 9068 0008                  		sub.w	obX(a0),d0
0000C020 6400                       		bcc.s	loc_B98C
0000C022 4440                       		neg.w	d0
0000C024                            

0000C024                            loc_B98C:
0000C024 0C40 0090                  		cmpi.w	#$90,d0
0000C028 6400                       		bcc.s	loc_B996
0000C02A 5228 0028                  		addq.b	#1,obSubtype(a0)
0000C02E                            

0000C02E                            loc_B996:
0000C02E 6000 FF48                  		bra.w	CStom_Restart
0000C02E 6000 FF48                  		bra.w	CStom_Restart
0000C032                            		include	"_incObj\45 Sideways Stomper.asm"
0000C032                            ; ---------------------------------------------------------------------------
0000C032                            ; Object 45 - spiked metal block from beta version (MZ)
0000C032                            ; ---------------------------------------------------------------------------
0000C032                            

0000C032                            SideStomp:
0000C032 7000                       		moveq	#0,d0
0000C034 1028 0024                  		move.b	obRoutine(a0),d0
0000C038 323B 0000                  		move.w	SStom_Index(pc,d0.w),d1
0000C03C 4EFB 1000                  		jmp	SStom_Index(pc,d1.w)
0000C040                            ; ===========================================================================
0000C040 0000                       SStom_Index:	dc.w SStom_Main-SStom_Index
0000C042 0000                       		dc.w SStom_Solid-SStom_Index
0000C044 0000                       		dc.w loc_BA8E-SStom_Index
0000C046 0000                       		dc.w SStom_Display-SStom_Index
0000C048 0000                       		dc.w SStom_Pole-SStom_Index
0000C04A                            

0000C04A                            		;	routine		frame
0000C04A                            		;		 xpos
0000C04A 0204 00                    SStom_Var:	dc.b	2,  	 4,	0	; main block
0000C04D 04E4 01                    		dc.b	4,	-$1C,	1	; spikes
0000C050 0834 03                    		dc.b	8,	 $34,	3	; pole
0000C053 0628 02                    		dc.b	6,	 $28,	2	; wall bracket
0000C056                            

0000C056                            ;word_B9BE:	; Note that this indicates three subtypes
0000C056 3800                       SStom_Len:	dc.w $3800	; short
0000C058 A000                       		dc.w $A000	; long
0000C05A 5000                       		dc.w $5000	; medium
0000C05C                            ; ===========================================================================
0000C05C                            

0000C05C                            SStom_Main:	; Routine 0
0000C05C 7000                       		moveq	#0,d0
0000C05E 1028 0028                  		move.b	obSubtype(a0),d0
0000C062 D040                       		add.w	d0,d0
0000C064 343B 00F0                  		move.w	SStom_Len(pc,d0.w),d2
0000C068 45F9 0000 C04A             		lea	(SStom_Var).l,a2
0000C06E 2248                       		movea.l	a0,a1
0000C070 7203                       		moveq	#3,d1
0000C072 6000                       		bra.s	@load
0000C074                            

0000C074                            	@loop:
0000C074 6100 0000                  		bsr.w	FindNextFreeObj
0000C078 6600                       		bne.s	@fail
0000C07A                            

0000C07A                            	@load:
0000C07A 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000C07E 137C 0000 0000             		move.b	#id_SideStomp,0(a1)
0000C084 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C08A 101A                       		move.b	(a2)+,d0
0000C08C 4880                       		ext.w	d0
0000C08E D068 0008                  		add.w	obX(a0),d0
0000C092 3340 0008                  		move.w	d0,obX(a1)
0000C096 237C 0000 0000 0004        		move.l	#Map_SStom,obMap(a1)
0000C09E 337C 0300 0002             		move.w	#$300,obGfx(a1)
0000C0A4 137C 0004 0001             		move.b	#4,obRender(a1)
0000C0AA 3369 0008 0030             		move.w	obX(a1),$30(a1)
0000C0B0 3368 0008 003A             		move.w	obX(a0),$3A(a1)
0000C0B6 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000C0BC 137C 0020 0019             		move.b	#$20,obActWid(a1)
0000C0C2 3342 0034                  		move.w	d2,$34(a1)
0000C0C6 137C 0004 0018             		move.b	#4,obPriority(a1)
0000C0CC 0C12 0001                  		cmpi.b	#1,(a2)		; is subobject spikes?
0000C0D0 6600                       		bne.s	@notspikes	; if not, branch
0000C0D2 137C 0091 0020             		move.b	#$91,obColType(a1) ; use harmful collision type
0000C0D8                            

0000C0D8                            	@notspikes:
0000C0D8 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000C0DC 2348 003C                  		move.l	a0,$3C(a1)
0000C0E0 51C9 FF92                  		dbf	d1,@loop	; repeat 3 times
0000C0E4                            

0000C0E4 137C 0003 0018             		move.b	#3,obPriority(a1)
0000C0EA                            

0000C0EA                            	@fail:
0000C0EA 117C 0010 0019             		move.b	#$10,obActWid(a0)
0000C0F0                            

0000C0F0                            SStom_Solid:	; Routine 2
0000C0F0 3F28 0008                  		move.w	obX(a0),-(sp)
0000C0F4 6100 0000                  		bsr.w	SStom_Move
0000C0F8 323C 0017                  		move.w	#$17,d1
0000C0FC 343C 0020                  		move.w	#$20,d2
0000C100 363C 0020                  		move.w	#$20,d3
0000C104 381F                       		move.w	(sp)+,d4
0000C106 6100 0000                  		bsr.w	SolidObject
0000C10A 6100 0000                  		bsr.w	DisplaySprite
0000C10E 6000 0000                  		bra.w	SStom_ChkDel
0000C112                            ; ===========================================================================
0000C112                            

0000C112                            SStom_Pole:	; Routine 8
0000C112 2268 003C                  		movea.l	$3C(a0),a1
0000C116 1029 0032                  		move.b	$32(a1),d0
0000C11A 0600 0010                  		addi.b	#$10,d0
0000C11E EA08                       		lsr.b	#5,d0
0000C120 5600                       		addq.b	#3,d0
0000C122 1140 001A                  		move.b	d0,obFrame(a0)
0000C126                            

0000C126                            loc_BA8E:	; Routine 4
0000C126 2268 003C                  		movea.l	$3C(a0),a1
0000C12A 7000                       		moveq	#0,d0
0000C12C 1029 0032                  		move.b	$32(a1),d0
0000C130 4440                       		neg.w	d0
0000C132 D068 0030                  		add.w	$30(a0),d0
0000C136 3140 0008                  		move.w	d0,obX(a0)
0000C13A                            

0000C13A                            SStom_Display:	; Routine 6
0000C13A 6100 0000                  		bsr.w	DisplaySprite
0000C13E                            

0000C13E                            SStom_ChkDel:
0000C15C 4E75                       		rts	
0000C15E                            

0000C15E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C15E                            

0000C15E                            

0000C15E                            SStom_Move:
0000C15E 7000                       		moveq	#0,d0
0000C160 1028 0028                  		move.b	obSubtype(a0),d0
0000C164 D040                       		add.w	d0,d0
0000C166 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C16A 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C16E                            ; End of function SStom_Move
0000C16E                            

0000C16E                            ; ===========================================================================
0000C16E                            		; This indicates only two subtypes... that do the same thing
0000C16E                            		; Compare to SStom_Len. This breaks subtype 02
0000C16E 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C170 0000                       		dc.w loc_BADA-off_BAD6
0000C172                            ; ===========================================================================
0000C172                            

0000C172                            loc_BADA:
0000C172 4A68 0036                  		tst.w	$36(a0)
0000C176 6700                       		beq.s	loc_BB08
0000C178 4A68 0038                  		tst.w	$38(a0)
0000C17C 6700                       		beq.s	loc_BAEC
0000C17E 5368 0038                  		subq.w	#1,$38(a0)
0000C182 6000                       		bra.s	loc_BB3C
0000C184                            ; ===========================================================================
0000C184                            

0000C184                            loc_BAEC:
0000C184 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C18A 6400                       		bcc.s	loc_BB3C
0000C18C 317C 0000 0032             		move.w	#0,$32(a0)
0000C192 317C 0000 0010             		move.w	#0,obVelX(a0)
0000C198 317C 0000 0036             		move.w	#0,$36(a0)
0000C19E 6000                       		bra.s	loc_BB3C
0000C1A0                            ; ===========================================================================
0000C1A0                            

0000C1A0                            loc_BB08:
0000C1A0 3228 0034                  		move.w	$34(a0),d1
0000C1A4 B268 0032                  		cmp.w	$32(a0),d1
0000C1A8 6700                       		beq.s	loc_BB3C
0000C1AA 3028 0010                  		move.w	obVelX(a0),d0
0000C1AE 0668 0070 0010             		addi.w	#$70,obVelX(a0)
0000C1B4 D168 0032                  		add.w	d0,$32(a0)
0000C1B8 B268 0032                  		cmp.w	$32(a0),d1
0000C1BC 6200                       		bhi.s	loc_BB3C
0000C1BE 3141 0032                  		move.w	d1,$32(a0)
0000C1C2 317C 0000 0010             		move.w	#0,obVelX(a0)
0000C1C8 317C 0001 0036             		move.w	#1,$36(a0)
0000C1CE 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C1D4                            

0000C1D4                            loc_BB3C:
0000C1D4 7000                       		moveq	#0,d0
0000C1D6 1028 0032                  		move.b	$32(a0),d0
0000C1DA 4440                       		neg.w	d0
0000C1DC D068 0030                  		add.w	$30(a0),d0
0000C1E0 3140 0008                  		move.w	d0,obX(a0)
0000C1E4 4E75                       		rts	
0000C1E4 4E75                       		rts	
0000C1E6                            Map_CStom:	include	"_maps\Chained Stompers.asm"
0000C1E6                            ; ---------------------------------------------------------------------------
0000C1E6                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C1E6                            ; ---------------------------------------------------------------------------
0000C1E6                            Map_CStom_internal:
0000C1E6 0000                       		dc.w @wideblock-Map_CStom_internal
0000C1E8 0000                       		dc.w @spikes-Map_CStom_internal
0000C1EA 0000                       		dc.w @ceiling-Map_CStom_internal
0000C1EC 0000                       		dc.w @chain1-Map_CStom_internal
0000C1EE 0000                       		dc.w @chain2-Map_CStom_internal
0000C1F0 0000                       		dc.w @chain3-Map_CStom_internal
0000C1F2 0000                       		dc.w @chain4-Map_CStom_internal
0000C1F4 0000                       		dc.w @chain5-Map_CStom_internal
0000C1F6 0000                       		dc.w @chain5-Map_CStom_internal
0000C1F8 0000                       		dc.w @mediumblock-Map_CStom_internal
0000C1FA 0000                       		dc.w @smallblock-Map_CStom_internal
0000C1FC 05                         @wideblock:	dc.b 5
0000C1FD F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C202 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C207 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C20C F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C211 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C216 05                         @spikes:	dc.b 5
0000C217 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C21C F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C221 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C226 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C22B F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C230 01                         @ceiling:	dc.b 1
0000C231 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C236 02                         @chain1:	dc.b 2
0000C237 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C23C 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C241 04                         @chain2:	dc.b 4
0000C242 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C247 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C24C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C251 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C256 06                         @chain3:	dc.b 6
0000C257 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C25C D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C261 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C266 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C26B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C270 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C275 08                         @chain4:	dc.b 8
0000C276 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C27B B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C280 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C285 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C28A E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C28F F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C294 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C299 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C29E 0A                         @chain5:	dc.b $A
0000C29F 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C2A4 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C2A9 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C2AE B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C2B3 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C2B8 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C2BD E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C2C2 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C2C7 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C2CC 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C2D1 05                         @mediumblock:	dc.b 5
0000C2D2 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C2D7 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C2DC F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C2E1 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C2E6 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C2EB 01                         @smallblock:	dc.b 1
0000C2EC EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C2F2 00                         		even
0000C2F2 00                         		even
0000C2F2                            Map_SStom:	include	"_maps\Sideways Stomper.asm"
0000C2F2                            ; ---------------------------------------------------------------------------
0000C2F2                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C2F2                            ; ---------------------------------------------------------------------------
0000C2F2                            Map_SStom_internal:
0000C2F2 0000                       		dc.w @block-Map_SStom_internal
0000C2F4 0000                       		dc.w @spikes-Map_SStom_internal
0000C2F6 0000                       		dc.w @wallbracket-Map_SStom_internal
0000C2F8 0000                       		dc.w @pole1-Map_SStom_internal
0000C2FA 0000                       		dc.w @pole2-Map_SStom_internal
0000C2FC 0000                       		dc.w @pole3-Map_SStom_internal
0000C2FE 0000                       		dc.w @pole4-Map_SStom_internal
0000C300 0000                       		dc.w @pole5-Map_SStom_internal
0000C302 0000                       		dc.w @pole5-Map_SStom_internal
0000C304 03                         @block:		dc.b 3
0000C305 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4 ; main metal block
0000C30A 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C30F F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C314 03                         @spikes:	dc.b 3
0000C315 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0 ; three spikes
0000C31A FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C31F 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C324 01                         @wallbracket:	dc.b 1
0000C325 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC ; thing holding it to the wall
0000C32A 02                         @pole1:		dc.b 2
0000C32B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0 ; poles of various lengths
0000C330 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C335 04                         @pole2:		dc.b 4
0000C336 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C33B F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C340 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C345 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C34A 06                         @pole3:		dc.b 6
0000C34B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C350 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C355 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C35A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C35F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C364 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C369 08                         @pole4:		dc.b 8
0000C36A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C36F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C374 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C379 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C37E F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C383 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C388 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C38D F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C392 08                         @pole5:		dc.b 8		; Incorrect: this should be $A
0000C393 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C398 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C39D F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C3A2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C3A7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C3AC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C3B1 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C3B6 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C3BB F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C3C0 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C3C5                            		; @pole6 should be here, but it isn't...
0000C3C6 00                         		even
0000C3C6 00                         		even
0000C3C6                            

0000C3C6                            		include	"_incObj\32 Button.asm"
0000C3C6                            ; ---------------------------------------------------------------------------
0000C3C6                            ; Object 32 - buttons (MZ, SYZ, LZ, SBZ)
0000C3C6                            ; ---------------------------------------------------------------------------
0000C3C6                            

0000C3C6                            Button:
0000C3C6 7000                       		moveq	#0,d0
0000C3C8 1028 0024                  		move.b	obRoutine(a0),d0
0000C3CC 323B 0000                  		move.w	But_Index(pc,d0.w),d1
0000C3D0 4EFB 1000                  		jmp	But_Index(pc,d1.w)
0000C3D4                            ; ===========================================================================
0000C3D4 0000                       But_Index:	dc.w But_Main-But_Index
0000C3D6 0000                       		dc.w But_Pressed-But_Index
0000C3D8                            ; ===========================================================================
0000C3D8                            

0000C3D8                            But_Main:	; Routine 0
0000C3D8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C3DC 217C 0000 0000 0004        		move.l	#Map_But,obMap(a0)
0000C3E4 317C 4513 0002             		move.w	#$4513,obGfx(a0) ; MZ specific code
0000C3EA 0C38 0002 FE10             		cmpi.b	#id_MZ,(v_zone).w ; is level Marble Zone?
0000C3F0 6700                       		beq.s	But_IsMZ	; if yes, branch
0000C3F2                            

0000C3F2 317C 0513 0002             		move.w	#$513,obGfx(a0)	; SYZ, LZ and SBZ specific code
0000C3F8                            

0000C3F8                            	But_IsMZ:
0000C3F8 117C 0004 0001             		move.b	#4,obRender(a0)
0000C3FE 117C 0010 0019             		move.b	#$10,obActWid(a0)
0000C404 117C 0004 0018             		move.b	#4,obPriority(a0)
0000C40A 5668 000C                  		addq.w	#3,obY(a0)
0000C40E                            

0000C40E                            But_Pressed:	; Routine 2
0000C40E 4A28 0001                  		tst.b	obRender(a0)
0000C412 6A00                       		bpl.s	But_Display
0000C414 323C 001B                  		move.w	#$1B,d1
0000C418 343C 0005                  		move.w	#5,d2
0000C41C 363C 0005                  		move.w	#5,d3
0000C420 3828 0008                  		move.w	obX(a0),d4
0000C424 6100 0000                  		bsr.w	SolidObject
0000C428 08A8 0000 001A             		bclr	#0,obFrame(a0)	; use "unpressed" frame
0000C42E 1028 0028                  		move.b	obSubtype(a0),d0
0000C432 0240 000F                  		andi.w	#$F,d0
0000C436 47F8 F7E0                  		lea	(f_switch).w,a3
0000C43A 47F3 0000                  		lea	(a3,d0.w),a3
0000C43E 7600                       		moveq	#0,d3
0000C440 0828 0006 0028             		btst	#6,obSubtype(a0)
0000C446 6700                       		beq.s	loc_BDB2
0000C448 7607                       		moveq	#7,d3
0000C44A                            

0000C44A                            loc_BDB2:
0000C44A 4A28 0028                  		tst.b	obSubtype(a0)
0000C44E 6A00                       		bpl.s	loc_BDBE
0000C450 6100 0000                  		bsr.w	But_MZBlock
0000C454 6600                       		bne.s	loc_BDC8
0000C456                            

0000C456                            loc_BDBE:
0000C456 4A28 0025                  		tst.b	ob2ndRout(a0)
0000C45A 6600                       		bne.s	loc_BDC8
0000C45C 0793                       		bclr	d3,(a3)
0000C45E 6000                       		bra.s	loc_BDDE
0000C460                            ; ===========================================================================
0000C460                            

0000C460                            loc_BDC8:
0000C460 4A13                       		tst.b	(a3)
0000C462 6600                       		bne.s	loc_BDD6
0000C464 303C 0000                  		move.w	#sfx_Switch,d0
0000C468 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play switch sound
0000C46E                            

0000C46E                            loc_BDD6:
0000C46E 07D3                       		bset	d3,(a3)
0000C470 08E8 0000 001A             		bset	#0,obFrame(a0)	; use "pressed"	frame
0000C476                            

0000C476                            loc_BDDE:
0000C476 0828 0005 0028             		btst	#5,obSubtype(a0)
0000C47C 6700                       		beq.s	But_Display
0000C47E 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000C482 6A00                       		bpl.s	But_Display
0000C484 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000C48A 0868 0001 001A             		bchg	#1,obFrame(a0)
0000C490                            

0000C490                            But_Display:
0000C490 6100 0000                  		bsr.w	DisplaySprite
0000C4B2 4E75                       		rts	
0000C4B4                            ; ===========================================================================
0000C4B4                            

0000C4B4                            But_Delete:
0000C4B4 6100 0000                  		bsr.w	DeleteObject
0000C4B8 4E75                       		rts	
0000C4BA                            

0000C4BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C4BA                            

0000C4BA                            

0000C4BA                            But_MZBlock:
0000C4BA 3F03                       		move.w	d3,-(sp)
0000C4BC 3428 0008                  		move.w	obX(a0),d2
0000C4C0 3628 000C                  		move.w	obY(a0),d3
0000C4C4 0442 0010                  		subi.w	#$10,d2
0000C4C8 5143                       		subq.w	#8,d3
0000C4CA 383C 0020                  		move.w	#$20,d4
0000C4CE 3A3C 0010                  		move.w	#$10,d5
0000C4D2 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; begin checking object RAM
0000C4D6 3C3C 005F                  		move.w	#$5F,d6
0000C4DA                            

0000C4DA                            But_MZLoop:
0000C4DA 4A29 0001                  		tst.b	obRender(a1)
0000C4DE 6A00                       		bpl.s	loc_BE4E
0000C4E0 0C11 0000                  		cmpi.b	#id_PushBlock,(a1) ; is the object a green MZ block?
0000C4E4 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C4E6                            

0000C4E6                            loc_BE4E:
0000C4E6 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C4EA 51CE FFEE                  		dbf	d6,But_MZLoop	; repeat $5F times
0000C4EE                            

0000C4EE 361F                       		move.w	(sp)+,d3
0000C4F0 7000                       		moveq	#0,d0
0000C4F2                            

0000C4F2                            locret_BE5A:
0000C4F2 4E75                       		rts	
0000C4F4                            ; ===========================================================================
0000C4F4 1010                       But_MZData:	dc.b $10, $10
0000C4F6                            ; ===========================================================================
0000C4F6                            

0000C4F6                            loc_BE5E:
0000C4F6 7001                       		moveq	#1,d0
0000C4F8 0240 003F                  		andi.w	#$3F,d0
0000C4FC D040                       		add.w	d0,d0
0000C4FE 45FB 00F2                  		lea	But_MZData-2(pc,d0.w),a2
0000C502 121A                       		move.b	(a2)+,d1
0000C504 4881                       		ext.w	d1
0000C506 3029 0008                  		move.w	obX(a1),d0
0000C50A 9041                       		sub.w	d1,d0
0000C50C 9042                       		sub.w	d2,d0
0000C50E 6400                       		bcc.s	loc_BE80
0000C510 D241                       		add.w	d1,d1
0000C512 D041                       		add.w	d1,d0
0000C514 6500                       		bcs.s	loc_BE84
0000C516 60CE                       		bra.s	loc_BE4E
0000C518                            ; ===========================================================================
0000C518                            

0000C518                            loc_BE80:
0000C518 B044                       		cmp.w	d4,d0
0000C51A 62CA                       		bhi.s	loc_BE4E
0000C51C                            

0000C51C                            loc_BE84:
0000C51C 121A                       		move.b	(a2)+,d1
0000C51E 4881                       		ext.w	d1
0000C520 3029 000C                  		move.w	obY(a1),d0
0000C524 9041                       		sub.w	d1,d0
0000C526 9043                       		sub.w	d3,d0
0000C528 6400                       		bcc.s	loc_BE9A
0000C52A D241                       		add.w	d1,d1
0000C52C D041                       		add.w	d1,d0
0000C52E 6500                       		bcs.s	loc_BE9E
0000C530 60B4                       		bra.s	loc_BE4E
0000C532                            ; ===========================================================================
0000C532                            

0000C532                            loc_BE9A:
0000C532 B045                       		cmp.w	d5,d0
0000C534 62B0                       		bhi.s	loc_BE4E
0000C536                            

0000C536                            loc_BE9E:
0000C536 361F                       		move.w	(sp)+,d3
0000C538 7001                       		moveq	#1,d0
0000C53A 4E75                       		rts	
0000C53C                            ; End of function But_MZBlock
0000C53C                            ; End of function But_MZBlock
0000C53C                            Map_But:	include	"_maps\Button.asm"
0000C53C                            ; ---------------------------------------------------------------------------
0000C53C                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C53C                            ; ---------------------------------------------------------------------------
0000C53C                            Map_But_internal:
0000C53C 0000                       		dc.w byte_BEAC-Map_But_internal
0000C53E 0000                       		dc.w byte_BEB7-Map_But_internal
0000C540 0000                       		dc.w byte_BEC2-Map_But_internal
0000C542 0000                       		dc.w byte_BEB7-Map_But_internal
0000C544 02                         byte_BEAC:	dc.b 2
0000C545 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C54A F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C54F 02                         byte_BEB7:	dc.b 2
0000C550 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C555 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C55A 02                         byte_BEC2:	dc.b 2
0000C55B F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C560 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C565 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C56A                            		even
0000C56A                            		even
0000C56A                            

0000C56A                            		include	"_incObj\33 Pushable Blocks.asm"
0000C56A                            ; ---------------------------------------------------------------------------
0000C56A                            ; Object 33 - pushable blocks (MZ, LZ)
0000C56A                            ; ---------------------------------------------------------------------------
0000C56A                            

0000C56A                            PushBlock:
0000C56A 7000                       		moveq	#0,d0
0000C56C 1028 0024                  		move.b	obRoutine(a0),d0
0000C570 323B 0000                  		move.w	PushB_Index(pc,d0.w),d1
0000C574 4EFB 1000                  		jmp	PushB_Index(pc,d1.w)
0000C578                            ; ===========================================================================
0000C578 0000                       PushB_Index:	dc.w PushB_Main-PushB_Index
0000C57A 0000                       		dc.w loc_BF6E-PushB_Index
0000C57C 0000                       		dc.w loc_C02C-PushB_Index
0000C57E                            

0000C57E 1000                       PushB_Var:	dc.b $10, 0	; object width,	frame number
0000C580 4001                       		dc.b $40, 1
0000C582                            ; ===========================================================================
0000C582                            

0000C582                            PushB_Main:	; Routine 0
0000C582 5428 0024                  		addq.b	#2,obRoutine(a0)
0000C586 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000C58C 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000C592 217C 0000 0000 0004        		move.l	#Map_Push,obMap(a0)
0000C59A 317C 42B8 0002             		move.w	#$42B8,obGfx(a0) ; MZ specific code
0000C5A0 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w
0000C5A6 6600                       		bne.s	@notLZ
0000C5A8 317C 43DE 0002             		move.w	#$43DE,obGfx(a0) ; LZ specific code
0000C5AE                            

0000C5AE                            	@notLZ:
0000C5AE 117C 0004 0001             		move.b	#4,obRender(a0)
0000C5B4 117C 0003 0018             		move.b	#3,obPriority(a0)
0000C5BA 3168 0008 0034             		move.w	obX(a0),$34(a0)
0000C5C0 3168 000C 0036             		move.w	obY(a0),$36(a0)
0000C5C6 7000                       		moveq	#0,d0
0000C5C8 1028 0028                  		move.b	obSubtype(a0),d0
0000C5CC D040                       		add.w	d0,d0
0000C5CE 0240 000E                  		andi.w	#$E,d0
0000C5D2 45FB 00AA                  		lea	PushB_Var(pc,d0.w),a2
0000C5D6 115A 0019                  		move.b	(a2)+,obActWid(a0)
0000C5DA 115A 001A                  		move.b	(a2)+,obFrame(a0)
0000C5DE 4A28 0028                  		tst.b	obSubtype(a0)
0000C5E2 6700                       		beq.s	@chkgone
0000C5E4 317C C2B8 0002             		move.w	#$C2B8,obGfx(a0)
0000C5EA                            

0000C5EA                            	@chkgone:
0000C5EA 45F8 FC00                  		lea	(v_objstate).w,a2
0000C5EE 7000                       		moveq	#0,d0
0000C5F0 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C5F4 6700                       		beq.s	loc_BF6E
0000C5F6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C5FC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C602 6600 0000                  		bne.w	DeleteObject
0000C606                            

0000C606                            loc_BF6E:	; Routine 2
0000C606 4A28 0032                  		tst.b	$32(a0)
0000C60A 6600 0000                  		bne.w	loc_C046
0000C60E 7200                       		moveq	#0,d1
0000C610 1228 0019                  		move.b	obActWid(a0),d1
0000C614 0641 000B                  		addi.w	#$B,d1
0000C618 343C 0010                  		move.w	#$10,d2
0000C61C 363C 0011                  		move.w	#$11,d3
0000C620 3828 0008                  		move.w	obX(a0),d4
0000C624 6100 0000                  		bsr.w	loc_C186
0000C628 0C78 0200 FE10             		cmpi.w	#(id_MZ<<8)+0,(v_zone).w ; is the level MZ act 1?
0000C62E 6600                       		bne.s	loc_BFC6	; if not, branch
0000C630 08A8 0007 0028             		bclr	#7,obSubtype(a0)
0000C636 3028 0008                  		move.w	obX(a0),d0
0000C63A 0C40 0A20                  		cmpi.w	#$A20,d0
0000C63E 6500                       		bcs.s	loc_BFC6
0000C640 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C644 6400                       		bcc.s	loc_BFC6
0000C646 3038 F7A4                  		move.w	(v_obj31ypos).w,d0
0000C64A 0440 001C                  		subi.w	#$1C,d0
0000C64E 3140 000C                  		move.w	d0,obY(a0)
0000C652 08F8 0007 F7A4             		bset	#7,(v_obj31ypos).w
0000C658 08E8 0007 0028             		bset	#7,obSubtype(a0)
0000C65E                            

0000C65E                            	loc_BFC6:
0000C67A 6000 0000                  		bra.w	DisplaySprite
0000C67E                            ; ===========================================================================
0000C67E                            

0000C67E                            loc_ppppp:
0000C69A 3168 0034 0008             		move.w	$34(a0),obX(a0)
0000C6A0 3168 0036 000C             		move.w	$36(a0),obY(a0)
0000C6A6 117C 0004 0024             		move.b	#4,obRoutine(a0)
0000C6AC 6000                       		bra.s	loc_C02C
0000C6AE                            ; ===========================================================================
0000C6AE                            

0000C6AE                            loc_C016:
0000C6AE 45F8 FC00                  		lea	(v_objstate).w,a2
0000C6B2 7000                       		moveq	#0,d0
0000C6B4 1028 0023                  		move.b	obRespawnNo(a0),d0
0000C6B8 6700                       		beq.s	loc_C028
0000C6BA 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C6C0                            

0000C6C0                            loc_C028:
0000C6C0 6000 0000                  		bra.w	DeleteObject
0000C6C4                            ; ===========================================================================
0000C6C4                            

0000C6C4                            loc_C02C:	; Routine 4
0000C6C4 6100 0000                  		bsr.w	ChkPartiallyVisible
0000C6C8 6700                       		beq.s	locret_C044
0000C6CA 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000C6D0 4228 0032                  		clr.b	$32(a0)
0000C6D4 4268 0010                  		clr.w	obVelX(a0)
0000C6D8 4268 0012                  		clr.w	obVelY(a0)
0000C6DC                            

0000C6DC                            locret_C044:
0000C6DC 4E75                       		rts	
0000C6DE                            ; ===========================================================================
0000C6DE                            

0000C6DE                            loc_C046:
0000C6DE 3F28 0008                  		move.w	obX(a0),-(sp)
0000C6E2 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
0000C6E8 6400                       		bcc.s	loc_C056
0000C6EA 6100 0000                  		bsr.w	SpeedToPos
0000C6EE                            

0000C6EE                            loc_C056:
0000C6EE 0828 0001 0022             		btst	#1,obStatus(a0)
0000C6F4 6700                       		beq.s	loc_C0A0
0000C6F6 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000C6FC 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C702 4A41                       		tst.w	d1
0000C704 6A00 0000                  		bpl.w	loc_C09E
0000C708 D368 000C                  		add.w	d1,obY(a0)
0000C70C 4268 0012                  		clr.w	obVelY(a0)
0000C710 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000C716 3011                       		move.w	(a1),d0
0000C718 0240 03FF                  		andi.w	#$3FF,d0
0000C71C 0C40 016A                  		cmpi.w	#$16A,d0
0000C720 6500                       		bcs.s	loc_C09E
0000C722 3028 0030                  		move.w	$30(a0),d0
0000C726 E640                       		asr.w	#3,d0
0000C728 3140 0010                  		move.w	d0,obVelX(a0)
0000C72C 117C 0001 0032             		move.b	#1,$32(a0)
0000C732 4268 000E                  		clr.w	$E(a0)
0000C736                            

0000C736                            loc_C09E:
0000C736 6000                       		bra.s	loc_C0E6
0000C738                            ; ===========================================================================
0000C738                            

0000C738                            loc_C0A0:
0000C738 4A68 0010                  		tst.w	obVelX(a0)
0000C73C 6700 0000                  		beq.w	loc_C0D6
0000C740 6B00                       		bmi.s	loc_C0BC
0000C742 7600                       		moveq	#0,d3
0000C744 1628 0019                  		move.b	obActWid(a0),d3
0000C748 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000C74E 4A41                       		tst.w	d1		; has block touched a wall?
0000C750 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000C752 6000                       		bra.s	loc_C0E6
0000C754                            ; ===========================================================================
0000C754                            

0000C754                            loc_C0BC:
0000C754 7600                       		moveq	#0,d3
0000C756 1628 0019                  		move.b	obActWid(a0),d3
0000C75A 4643                       		not.w	d3
0000C75C 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000C762 4A41                       		tst.w	d1		; has block touched a wall?
0000C764 6B00                       		bmi.s	PushB_StopPush	; if yes, branch
0000C766 6000                       		bra.s	loc_C0E6
0000C768                            ; ===========================================================================
0000C768                            

0000C768                            PushB_StopPush:
0000C768 4268 0010                  		clr.w	obVelX(a0)		; stop block moving
0000C76C 6000                       		bra.s	loc_C0E6
0000C76E                            ; ===========================================================================
0000C76E                            

0000C76E                            loc_C0D6:
0000C76E 06A8 0000 2001 000C        		addi.l	#$2001,obY(a0)
0000C776 0C28 00A0 000F             		cmpi.b	#$A0,obY+3(a0)
0000C77C 6400                       		bcc.s	loc_C104
0000C77E                            

0000C77E                            loc_C0E6:
0000C77E 7200                       		moveq	#0,d1
0000C780 1228 0019                  		move.b	obActWid(a0),d1
0000C784 0641 000B                  		addi.w	#$B,d1
0000C788 343C 0010                  		move.w	#$10,d2
0000C78C 363C 0011                  		move.w	#$11,d3
0000C790 381F                       		move.w	(sp)+,d4
0000C792 6100 0000                  		bsr.w	loc_C186
0000C796 6100                       		bsr.s	PushB_ChkLava
0000C798 6000 FEC4                  		bra.w	loc_BFC6
0000C79C                            ; ===========================================================================
0000C79C                            

0000C79C                            loc_C104:
0000C79C 381F                       		move.w	(sp)+,d4
0000C79E 43F8 D000                  		lea	(v_player).w,a1
0000C7A2 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000C7A8 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000C7AE 6000 FECE                  		bra.w	loc_ppppp
0000C7B2                            ; ===========================================================================
0000C7B2                            

0000C7B2                            PushB_ChkLava:
0000C7B2 0C78 0201 FE10             		cmpi.w	#(id_MZ<<8)+1,(v_zone).w ; is the level MZ act 2?
0000C7B8 6600                       		bne.s	PushB_ChkLava2	; if not, branch
0000C7BA 343C FFE0                  		move.w	#-$20,d2
0000C7BE 0C68 0DD0 0008             		cmpi.w	#$DD0,obX(a0)
0000C7C4 6700                       		beq.s	PushB_LoadLava
0000C7C6 0C68 0CC0 0008             		cmpi.w	#$CC0,obX(a0)
0000C7CC 6700                       		beq.s	PushB_LoadLava
0000C7CE 0C68 0BA0 0008             		cmpi.w	#$BA0,obX(a0)
0000C7D4 6700                       		beq.s	PushB_LoadLava
0000C7D6 4E75                       		rts	
0000C7D8                            ; ===========================================================================
0000C7D8                            

0000C7D8                            PushB_ChkLava2:
0000C7D8 0C78 0202 FE10             		cmpi.w	#(id_MZ<<8)+2,(v_zone).w ; is the level MZ act 3?
0000C7DE 6600                       		bne.s	PushB_NoLava	; if not, branch
0000C7E0 343C 0020                  		move.w	#$20,d2
0000C7E4 0C68 0560 0008             		cmpi.w	#$560,obX(a0)
0000C7EA 6700                       		beq.s	PushB_LoadLava
0000C7EC 0C68 05C0 0008             		cmpi.w	#$5C0,obX(a0)
0000C7F2 6700                       		beq.s	PushB_LoadLava
0000C7F4                            

0000C7F4                            PushB_NoLava:
0000C7F4 4E75                       		rts	
0000C7F6                            ; ===========================================================================
0000C7F6                            

0000C7F6                            PushB_LoadLava:
0000C7F6 6100 0000                  		bsr.w	FindFreeObj
0000C7FA 6600                       		bne.s	locret_C184
0000C7FC 137C 0000 0000             		move.b	#id_GeyserMaker,0(a1) ; load lava geyser object
0000C802 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000C808 D569 0008                  		add.w	d2,obX(a1)
0000C80C 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000C812 0669 0010 000C             		addi.w	#$10,obY(a1)
0000C818 2348 003C                  		move.l	a0,$3C(a1)
0000C81C                            

0000C81C                            locret_C184:
0000C81C 4E75                       		rts	
0000C81E                            ; ===========================================================================
0000C81E                            

0000C81E                            loc_C186:
0000C81E 1028 0025                  		move.b	ob2ndRout(a0),d0
0000C822 6700 0000                  		beq.w	loc_C218
0000C826 5500                       		subq.b	#2,d0
0000C828 6600                       		bne.s	loc_C1AA
0000C82A 6100 B420                  		bsr.w	ExitPlatform
0000C82E 0829 0003 0022             		btst	#3,obStatus(a1)
0000C834 6600                       		bne.s	loc_C1A4
0000C836 4228 0025                  		clr.b	ob2ndRout(a0)
0000C83A 4E75                       		rts	
0000C83C                            ; ===========================================================================
0000C83C                            

0000C83C                            loc_C1A4:
0000C83C 3404                       		move.w	d4,d2
0000C83E 6000 B96E                  		bra.w	MvSonicOnPtfm
0000C842                            ; ===========================================================================
0000C842                            

0000C842                            loc_C1AA:
0000C842 5500                       		subq.b	#2,d0
0000C844 6600                       		bne.s	loc_C1F2
0000C846 6100 0000                  		bsr.w	SpeedToPos
0000C84A 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0000C850 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C856 4A41                       		tst.w	d1
0000C858 6A00 0000                  		bpl.w	locret_C1F0
0000C85C D368 000C                  		add.w	d1,obY(a0)
0000C860 4268 0012                  		clr.w	obVelY(a0)
0000C864 4228 0025                  		clr.b	ob2ndRout(a0)
0000C868 3011                       		move.w	(a1),d0
0000C86A 0240 03FF                  		andi.w	#$3FF,d0
0000C86E 0C40 016A                  		cmpi.w	#$16A,d0
0000C872 6500                       		bcs.s	locret_C1F0
0000C874 3028 0030                  		move.w	$30(a0),d0
0000C878 E640                       		asr.w	#3,d0
0000C87A 3140 0010                  		move.w	d0,obVelX(a0)
0000C87E 117C 0001 0032             		move.b	#1,$32(a0)
0000C884 4268 000E                  		clr.w	obY+2(a0)
0000C888                            

0000C888                            locret_C1F0:
0000C888 4E75                       		rts	
0000C88A                            ; ===========================================================================
0000C88A                            

0000C88A                            loc_C1F2:
0000C88A 6100 0000                  		bsr.w	SpeedToPos
0000C88E 3028 0008                  		move.w	obX(a0),d0
0000C892 0240 000C                  		andi.w	#$C,d0
0000C896 6600 0000                  		bne.w	locret_C2E4
0000C89A 0268 FFF0 0008             		andi.w	#-$10,obX(a0)
0000C8A0 3168 0010 0030             		move.w	obVelX(a0),$30(a0)
0000C8A6 4268 0010                  		clr.w	obVelX(a0)
0000C8AA 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000C8AE 4E75                       		rts	
0000C8B0                            ; ===========================================================================
0000C8B0                            

0000C8B0                            loc_C218:
0000C8B0 6100 0000                  		bsr.w	Solid_ChkEnter
0000C8B4 4A44                       		tst.w	d4
0000C8B6 6700 0000                  		beq.w	locret_C2E4
0000C8BA 6B00 0000                  		bmi.w	locret_C2E4
0000C8BE 4A28 0032                  		tst.b	$32(a0)
0000C8C2 6700                       		beq.s	loc_C230
0000C8C4 6000 0000                  		bra.w	locret_C2E4
0000C8C8                            ; ===========================================================================
0000C8C8                            

0000C8C8                            loc_C230:
0000C8C8 4A40                       		tst.w	d0
0000C8CA 6700 0000                  		beq.w	locret_C2E4
0000C8CE 6B00                       		bmi.s	loc_C268
0000C8D0 0829 0000 0022             		btst	#0,obStatus(a1)
0000C8D6 6600 0000                  		bne.w	locret_C2E4
0000C8DA 3F00                       		move.w	d0,-(sp)
0000C8DC 7600                       		moveq	#0,d3
0000C8DE 1628 0019                  		move.b	obActWid(a0),d3
0000C8E2 4EB9 0000 0000             		jsr	(ObjHitWallRight).l
0000C8E8 301F                       		move.w	(sp)+,d0
0000C8EA 4A41                       		tst.w	d1
0000C8EC 6B00 0000                  		bmi.w	locret_C2E4
0000C8F0 06A8 0001 0000 0008        		addi.l	#$10000,obX(a0)
0000C8F8 7001                       		moveq	#1,d0
0000C8FA 323C 0040                  		move.w	#$40,d1
0000C8FE 6000                       		bra.s	loc_C294
0000C900                            ; ===========================================================================
0000C900                            

0000C900                            loc_C268:
0000C900 0829 0000 0022             		btst	#0,obStatus(a1)
0000C906 6700                       		beq.s	locret_C2E4
0000C908 3F00                       		move.w	d0,-(sp)
0000C90A 7600                       		moveq	#0,d3
0000C90C 1628 0019                  		move.b	obActWid(a0),d3
0000C910 4643                       		not.w	d3
0000C912 4EB9 0000 0000             		jsr	(ObjHitWallLeft).l
0000C918 301F                       		move.w	(sp)+,d0
0000C91A 4A41                       		tst.w	d1
0000C91C 6B00                       		bmi.s	locret_C2E4
0000C91E 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
0000C926 70FF                       		moveq	#-1,d0
0000C928 323C FFC0                  		move.w	#-$40,d1
0000C92C                            

0000C92C                            loc_C294:
0000C92C 43F8 D000                  		lea	(v_player).w,a1
0000C930 D169 0008                  		add.w	d0,obX(a1)
0000C934 3341 0014                  		move.w	d1,obInertia(a1)
0000C938 337C 0000 0010             		move.w	#0,obVelX(a1)
0000C93E 3F00                       		move.w	d0,-(sp)
0000C940 303C 0000                  		move.w	#sfx_Push,d0
0000C944 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	 ; play pushing sound
0000C94A 301F                       		move.w	(sp)+,d0
0000C94C 4A28 0028                  		tst.b	obSubtype(a0)
0000C950 6B00                       		bmi.s	locret_C2E4
0000C952 3F00                       		move.w	d0,-(sp)
0000C954 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000C95A 301F                       		move.w	(sp)+,d0
0000C95C 0C41 0004                  		cmpi.w	#4,d1
0000C960 6F00                       		ble.s	loc_C2E0
0000C962 317C 0400 0010             		move.w	#$400,obVelX(a0)
0000C968 4A40                       		tst.w	d0
0000C96A 6A00                       		bpl.s	loc_C2D8
0000C96C 4468 0010                  		neg.w	obVelX(a0)
0000C970                            

0000C970                            loc_C2D8:
0000C970 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
0000C976 6000                       		bra.s	locret_C2E4
0000C978                            ; ===========================================================================
0000C978                            

0000C978                            loc_C2E0:
0000C978 D368 000C                  		add.w	d1,obY(a0)
0000C97C                            

0000C97C                            locret_C2E4:
0000C97C 4E75                       		rts	
0000C97C 4E75                       		rts	
0000C97E                            Map_Push:	include	"_maps\Pushable Blocks.asm"
0000C97E                            ; ---------------------------------------------------------------------------
0000C97E                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C97E                            ; ---------------------------------------------------------------------------
0000C97E                            Map_Push_internal:
0000C97E 0000                       		dc.w @single-Map_Push_internal
0000C980 0000                       		dc.w @four-Map_Push_internal
0000C982 01                         @single:	dc.b 1
0000C983 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C988 04                         @four:		dc.b 4
0000C989 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C98E F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C993 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C998 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C99E 00                         		even
0000C99E 00                         		even
0000C99E                            

0000C99E                            		include	"_incObj\34 Title Cards.asm"
0000C99E                            ; ---------------------------------------------------------------------------
0000C99E                            ; Object 34 - zone title cards
0000C99E                            ; ---------------------------------------------------------------------------
0000C99E                            

0000C99E                            TitleCard:
0000C99E 7000                       		moveq	#0,d0
0000C9A0 1028 0024                  		move.b	obRoutine(a0),d0
0000C9A4 323B 0000                  		move.w	Card_Index(pc,d0.w),d1
0000C9A8 4EFB 1000                  		jmp	Card_Index(pc,d1.w)
0000C9AC                            ; ===========================================================================
0000C9AC 0000                       Card_Index:	dc.w Card_CheckSBZ3-Card_Index
0000C9AE 0000                       		dc.w Card_ChkPos-Card_Index
0000C9B0 0000                       		dc.w Card_Wait-Card_Index
0000C9B2 0000                       		dc.w Card_Wait-Card_Index
0000C9B4                            

0000C9B4 =00000030                  card_mainX:	equ $30		; position for card to display on
0000C9B4 =00000032                  card_finalX:	equ $32		; position for card to finish on
0000C9B4                            ; ===========================================================================
0000C9B4                            

0000C9B4                            Card_CheckSBZ3:	; Routine 0
0000C9B4 2248                       		movea.l	a0,a1
0000C9B6 7000                       		moveq	#0,d0
0000C9B8 1038 FE10                  		move.b	(v_zone).w,d0
0000C9BC 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ 3
0000C9C2 6600                       		bne.s	Card_CheckFZ
0000C9C4 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C9C6                            

0000C9C6                            	Card_CheckFZ:
0000C9C6 3400                       		move.w	d0,d2
0000C9C8 0C78 0502 FE10             		cmpi.w	#(id_SBZ<<8)+2,(v_zone).w ; check if level is FZ
0000C9CE 6600                       		bne.s	Card_LoadConfig
0000C9D0 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C9D2 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C9D4                            

0000C9D4                            	Card_LoadConfig:
0000C9D4 47F9 0000 0000             		lea	(Card_ConData).l,a3
0000C9DA E948                       		lsl.w	#4,d0
0000C9DC D6C0                       		adda.w	d0,a3
0000C9DE 45F9 0000 0000             		lea	(Card_ItemData).l,a2
0000C9E4 7203                       		moveq	#3,d1
0000C9E6                            

0000C9E6                            Card_Loop:
0000C9E6 137C 0000 0000             		move.b	#id_TitleCard,0(a1)
0000C9EC 3353 0008                  		move.w	(a3),obX(a1)	; load start x-position
0000C9F0 335B 0032                  		move.w	(a3)+,card_finalX(a1) ; load finish x-position (same as start)
0000C9F4 335B 0030                  		move.w	(a3)+,card_mainX(a1) ; load main x-position
0000C9F8 335A 000A                  		move.w	(a2)+,obScreenY(a1)
0000C9FC 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000CA00 101A                       		move.b	(a2)+,d0
0000CA02 6600                       		bne.s	Card_ActNumber
0000CA04 1002                       		move.b	d2,d0
0000CA06                            

0000CA06                            	Card_ActNumber:
0000CA06 0C00 0007                  		cmpi.b	#7,d0
0000CA0A 6600                       		bne.s	Card_MakeSprite
0000CA0C D038 FE11                  		add.b	(v_act).w,d0
0000CA10 0C38 0003 FE11             		cmpi.b	#3,(v_act).w
0000CA16 6600                       		bne.s	Card_MakeSprite
0000CA18 5300                       		subq.b	#1,d0
0000CA1A                            

0000CA1A                            	Card_MakeSprite:
0000CA1A 1340 001A                  		move.b	d0,obFrame(a1)	; display frame	number d0
0000CA1E 237C 0000 0000 0004        		move.l	#Map_Card,obMap(a1)
0000CA26 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000CA2C 137C 0078 0019             		move.b	#$78,obActWid(a1)
0000CA32 137C 0000 0001             		move.b	#0,obRender(a1)
0000CA38 137C 0000 0018             		move.b	#0,obPriority(a1)
0000CA3E 337C 003C 001E             		move.w	#60,obTimeFrame(a1) ; set time delay to 1 second
0000CA44 43E9 0040                  		lea	$40(a1),a1	; next object
0000CA48 51C9 FF9C                  		dbf	d1,Card_Loop	; repeat sequence another 3 times
0000CA4C                            

0000CA4C                            Card_ChkPos:	; Routine 2
0000CA4C 7210                       		moveq	#$10,d1		; set horizontal speed
0000CA4E 3028 0030                  		move.w	card_mainX(a0),d0
0000CA52 B068 0008                  		cmp.w	obX(a0),d0	; has item reached the target position?
0000CA56 6700                       		beq.s	Card_NoMove	; if yes, branch
0000CA58 6C00                       		bge.s	Card_Move
0000CA5A 4441                       		neg.w	d1
0000CA5C                            

0000CA5C                            Card_Move:
0000CA5C D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000CA60                            

0000CA60                            Card_NoMove:
0000CA60 3028 0008                  		move.w	obX(a0),d0
0000CA64 6B00                       		bmi.s	locret_C3D8
0000CA66 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CA6A 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CA6C 6000 0000                  		bra.w	DisplaySprite
0000CA70                            ; ===========================================================================
0000CA70                            

0000CA70                            locret_C3D8:
0000CA70 4E75                       		rts	
0000CA72                            ; ===========================================================================
0000CA72                            

0000CA72                            Card_Wait:	; Routine 4/6
0000CA72 4A68 001E                  		tst.w	obTimeFrame(a0)	; is time remaining zero?
0000CA76 6700                       		beq.s	Card_ChkPos2	; if yes, branch
0000CA78 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time
0000CA7C 6000 0000                  		bra.w	DisplaySprite
0000CA80                            ; ===========================================================================
0000CA80                            

0000CA80                            Card_ChkPos2:
0000CA80 4A28 0001                  		tst.b	obRender(a0)
0000CA84 6A00                       		bpl.s	Card_ChangeArt
0000CA86 7220                       		moveq	#$20,d1
0000CA88 3028 0032                  		move.w	card_finalX(a0),d0
0000CA8C B068 0008                  		cmp.w	obX(a0),d0	; has item reached the finish position?
0000CA90 6700                       		beq.s	Card_ChangeArt	; if yes, branch
0000CA92 6C00                       		bge.s	Card_Move2
0000CA94 4441                       		neg.w	d1
0000CA96                            

0000CA96                            Card_Move2:
0000CA96 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000CA9A 3028 0008                  		move.w	obX(a0),d0
0000CA9E 6B00                       		bmi.s	locret_C412
0000CAA0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CAA4 6400                       		bcc.s	locret_C412	; if yes, branch
0000CAA6 6000 0000                  		bra.w	DisplaySprite
0000CAAA                            ; ===========================================================================
0000CAAA                            

0000CAAA                            locret_C412:
0000CAAA 4E75                       		rts	
0000CAAC                            ; ===========================================================================
0000CAAC                            

0000CAAC                            Card_ChangeArt:
0000CAAC 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000CAB2 6600                       		bne.s	Card_Delete
0000CAB4 7000                       		moveq	#plcid_Explode,d0
0000CAB6 4EB9 0000 1586             		jsr	(AddPLC).l	; load explosion patterns
0000CABC 7000                       		moveq	#0,d0
0000CABE 1038 FE10                  		move.b	(v_zone).w,d0
0000CAC2 0640 0000                  		addi.w	#plcid_GHZAnimals,d0
0000CAC6 4EB9 0000 1586             		jsr	(AddPLC).l	; load animal patterns
0000CACC                            

0000CACC                            Card_Delete:
0000CACC 6000 0000                  		bra.w	DeleteObject
0000CAD0                            ; ===========================================================================
0000CAD0 00D0                       Card_ItemData:	dc.w $D0	; y-axis position
0000CAD2 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CAD4 00E4                       		dc.w $E4
0000CAD6 0206                       		dc.b 2,	6
0000CAD8 00EA                       		dc.w $EA
0000CADA 0207                       		dc.b 2,	7
0000CADC 00E0                       		dc.w $E0
0000CADE 020A                       		dc.b 2,	$A
0000CAE0                            ; ---------------------------------------------------------------------------
0000CAE0                            ; Title	card configuration data
0000CAE0                            ; Format:
0000CAE0                            ; 4 bytes per item (YYYY XXXX)
0000CAE0                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CAE0                            ; ---------------------------------------------------------------------------
0000CAE0 0000 0120 FEFC 013C 0414+  Card_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CAF0 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CB00 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CB10 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CB20 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CB30 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CB40 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CB50                            ; ===========================================================================
0000CB50                            ; ===========================================================================
0000CB50                            		include	"_incObj\39 Game Over.asm"
0000CB50                            ; ---------------------------------------------------------------------------
0000CB50                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CB50                            ; ---------------------------------------------------------------------------
0000CB50                            

0000CB50                            GameOverCard:
0000CB50 7000                       		moveq	#0,d0
0000CB52 1028 0024                  		move.b	obRoutine(a0),d0
0000CB56 323B 0000                  		move.w	Over_Index(pc,d0.w),d1
0000CB5A 4EFB 1000                  		jmp	Over_Index(pc,d1.w)
0000CB5E                            ; ===========================================================================
0000CB5E 0000                       Over_Index:	dc.w Over_ChkPLC-Over_Index
0000CB60 0000                       		dc.w Over_Move-Over_Index
0000CB62 0000                       		dc.w Over_Wait-Over_Index
0000CB64                            ; ===========================================================================
0000CB64                            

0000CB64                            Over_ChkPLC:	; Routine 0
0000CB64 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000CB68 6700                       		beq.s	Over_Main	; if yes, branch
0000CB6A 4E75                       		rts	
0000CB6C                            ; ===========================================================================
0000CB6C                            

0000CB6C                            Over_Main:
0000CB6C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CB70 317C 0050 0008             		move.w	#$50,obX(a0)	; set x-position
0000CB76 0828 0000 001A             		btst	#0,obFrame(a0)	; is the object	"OVER"?
0000CB7C 6700                       		beq.s	Over_1stWord	; if not, branch
0000CB7E 317C 01F0 0008             		move.w	#$1F0,obX(a0)	; set x-position for "OVER"
0000CB84                            

0000CB84                            	Over_1stWord:
0000CB84 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
0000CB8A 217C 0000 0000 0004        		move.l	#Map_Over,obMap(a0)
0000CB92 317C 855E 0002             		move.w	#$855E,obGfx(a0)
0000CB98 117C 0000 0001             		move.b	#0,obRender(a0)
0000CB9E 117C 0000 0018             		move.b	#0,obPriority(a0)
0000CBA4                            

0000CBA4                            Over_Move:	; Routine 2
0000CBA4 7210                       		moveq	#$10,d1		; set horizontal speed
0000CBA6 0C68 0120 0008             		cmpi.w	#$120,obX(a0)	; has item reached its target position?
0000CBAC 6700                       		beq.s	Over_SetWait	; if yes, branch
0000CBAE 6500                       		bcs.s	Over_UpdatePos
0000CBB0 4441                       		neg.w	d1
0000CBB2                            

0000CBB2                            	Over_UpdatePos:
0000CBB2 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000CBB6 6000 0000                  		bra.w	DisplaySprite
0000CBBA                            ; ===========================================================================
0000CBBA                            

0000CBBA                            Over_SetWait:
0000CBBA 317C 02D0 001E             		move.w	#720,obTimeFrame(a0) ; set time delay to 12 seconds
0000CBC0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CBC4 4E75                       		rts	
0000CBC6                            ; ===========================================================================
0000CBC6                            

0000CBC6                            Over_Wait:	; Routine 4
0000CBC6 1038 F605                  		move.b	(v_jpadpress1).w,d0
0000CBCA 0200 0070                  		andi.b	#btnABC,d0	; is button A, B or C pressed?
0000CBCE 6600                       		bne.s	Over_ChgMode	; if yes, branch
0000CBD0 0828 0000 001A             		btst	#0,obFrame(a0)
0000CBD6 6600                       		bne.s	Over_Display
0000CBD8 4A68 001E                  		tst.w	obTimeFrame(a0)	; has time delay reached zero?
0000CBDC 6700                       		beq.s	Over_ChgMode	; if yes, branch
0000CBDE 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000CBE2 6000 0000                  		bra.w	DisplaySprite
0000CBE6                            ; ===========================================================================
0000CBE6                            

0000CBE6                            Over_ChgMode:
0000CBE6 4A38 FE1A                  		tst.b	(f_timeover).w	; is time over flag set?
0000CBEA 6600                       		bne.s	Over_ResetLvl	; if yes, branch
0000CBEC 11FC 0000 F600             		move.b	#id_Continue,(v_gamemode).w ; set mode to $14 (continue screen)
0000CBF2 4A38 FE18                  		tst.b	(v_continues).w	; do you have any continues?
0000CBF6 6600                       		bne.s	Over_Display	; if yes, branch
0000CBF8 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w ; set mode to 0 (Sega screen)
0000CBFE 6000                       		bra.s	Over_Display
0000CC00                            ; ===========================================================================
0000CC00                            

0000CC00                            Over_ResetLvl:
0000CC00 42B8 FE38                  			clr.l	(v_lamp_time).w
0000CC04 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000CC0A                            

0000CC0A                            Over_Display:
0000CC0A 6000 0000                  		bra.w	DisplaySprite
0000CC0A 6000 0000                  		bra.w	DisplaySprite
0000CC0E                            		include	"_incObj\3A Got Through Card.asm"
0000CC0E                            ; ---------------------------------------------------------------------------
0000CC0E                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CC0E                            ; ---------------------------------------------------------------------------
0000CC0E                            

0000CC0E                            GotThroughCard:
0000CC0E 7000                       		moveq	#0,d0
0000CC10 1028 0024                  		move.b	obRoutine(a0),d0
0000CC14 323B 0000                  		move.w	Got_Index(pc,d0.w),d1
0000CC18 4EFB 1000                  		jmp	Got_Index(pc,d1.w)
0000CC1C                            ; ===========================================================================
0000CC1C 0000                       Got_Index:	dc.w Got_ChkPLC-Got_Index
0000CC1E 0000                       		dc.w Got_Move-Got_Index
0000CC20 0000                       		dc.w Got_Wait-Got_Index
0000CC22 0000                       		dc.w Got_TimeBonus-Got_Index
0000CC24 0000                       		dc.w Got_Wait-Got_Index
0000CC26 0000                       		dc.w Got_NextLevel-Got_Index
0000CC28 0000                       		dc.w Got_Wait-Got_Index
0000CC2A 0000                       		dc.w Got_Move2-Got_Index
0000CC2C 0000                       		dc.w loc_C766-Got_Index
0000CC2E                            

0000CC2E =00000030                  got_mainX:	equ $30		; position for card to display on
0000CC2E =00000032                  got_finalX:	equ $32		; position for card to finish on
0000CC2E                            ; ===========================================================================
0000CC2E                            

0000CC2E                            Got_ChkPLC:	; Routine 0
0000CC2E 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000CC32 6700                       		beq.s	Got_Main	; if yes, branch
0000CC34 4E75                       		rts	
0000CC36                            ; ===========================================================================
0000CC36                            

0000CC36                            Got_Main:
0000CC36 2248                       		movea.l	a0,a1
0000CC38 45F9 0000 0000             		lea	(Got_Config).l,a2
0000CC3E 7206                       		moveq	#6,d1
0000CC40                            

0000CC40                            Got_Loop:
0000CC40 137C 0000 0000             		move.b	#id_GotThroughCard,0(a1)
0000CC46 3352 0008                  		move.w	(a2),obX(a1)	; load start x-position
0000CC4A 335A 0032                  		move.w	(a2)+,got_finalX(a1) ; load finish x-position (same as start)
0000CC4E 335A 0030                  		move.w	(a2)+,got_mainX(a1) ; load main x-position
0000CC52 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000CC56 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000CC5A 101A                       		move.b	(a2)+,d0
0000CC5C 0C00 0006                  		cmpi.b	#6,d0
0000CC60 6600                       		bne.s	loc_C5CA
0000CC62 D038 FE11                  		add.b	(v_act).w,d0	; add act number to frame number
0000CC66                            

0000CC66                            	loc_C5CA:
0000CC66 1340 001A                  		move.b	d0,obFrame(a1)
0000CC6A 237C 0000 0000 0004        		move.l	#Map_Got,obMap(a1)
0000CC72 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000CC78 137C 0000 0001             		move.b	#0,obRender(a1)
0000CC7E 43E9 0040                  		lea	$40(a1),a1
0000CC82 51C9 FFBC                  		dbf	d1,Got_Loop	; repeat 6 times
0000CC86                            

0000CC86                            Got_Move:	; Routine 2
0000CC86 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC88 3028 0030                  		move.w	got_mainX(a0),d0
0000CC8C B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000CC90 6700                       		beq.s	loc_C61A	; if yes, branch
0000CC92 6C00                       		bge.s	Got_ChgPos
0000CC94 4441                       		neg.w	d1
0000CC96                            

0000CC96                            	Got_ChgPos:
0000CC96 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000CC9A                            

0000CC9A                            	loc_C5FE:
0000CC9A 3028 0008                  		move.w	obX(a0),d0
0000CC9E 6B00                       		bmi.s	locret_C60E
0000CCA0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CCA4 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CCA6 6000 0000                  		bra.w	DisplaySprite
0000CCAA                            ; ===========================================================================
0000CCAA                            

0000CCAA                            locret_C60E:
0000CCAA 4E75                       		rts	
0000CCAC                            ; ===========================================================================
0000CCAC                            

0000CCAC                            loc_C610:
0000CCAC 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000CCB2 6000 0000                  		bra.w	Got_Move2
0000CCB6                            ; ===========================================================================
0000CCB6                            

0000CCB6                            loc_C61A:
0000CCB6 0C38 000E D724             		cmpi.b	#$E,(v_endcardring+obRoutine).w
0000CCBC 67EE                       		beq.s	loc_C610
0000CCBE 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000CCC4 66D4                       		bne.s	loc_C5FE
0000CCC6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CCCA 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000CCD0                            

0000CCD0                            Got_Wait:	; Routine 4, 8, $C
0000CCD0 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000CCD4 6600                       		bne.s	Got_Display
0000CCD6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CCDA                            

0000CCDA                            Got_Display:
0000CCDA 6000 0000                  		bra.w	DisplaySprite
0000CCDE                            ; ===========================================================================
0000CCDE                            

0000CCDE                            Got_TimeBonus:	; Routine 6
0000CCDE 6100 0000                  		bsr.w	DisplaySprite
0000CCE2 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set time/ring bonus update flag
0000CCE8 7000                       		moveq	#0,d0
0000CCEA 4A78 F7D2                  		tst.w	(v_timebonus).w	; is time bonus	= zero?
0000CCEE 6700                       		beq.s	Got_RingBonus	; if yes, branch
0000CCF0 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CCF4 0478 000A F7D2             		subi.w	#10,(v_timebonus).w ; subtract 10 from time bonus
0000CCFA                            

0000CCFA                            Got_RingBonus:
0000CCFA 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000CCFE 6700                       		beq.s	Got_ChkBonus	; if yes, branch
0000CD00 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CD04 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000CD0A                            

0000CD0A                            Got_ChkBonus:
0000CD0A 4A40                       		tst.w	d0		; is there any bonus?
0000CD0C 6600                       		bne.s	Got_AddBonus	; if yes, branch
0000CD0E 303C 0000                  		move.w	#sfx_Cash,d0
0000CD12 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play "ker-ching" sound
0000CD18 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CD1C 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w
0000CD22 6600                       		bne.s	Got_SetDelay
0000CD24 5828 0024                  		addq.b	#4,obRoutine(a0)
0000CD28                            

0000CD28                            Got_SetDelay:
0000CD28 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000CD2E                            

0000CD2E                            locret_C692:
0000CD2E 4E75                       		rts	
0000CD30                            ; ===========================================================================
0000CD30                            

0000CD30                            Got_AddBonus:
0000CD30 4EB9 0000 0000             		jsr	(AddPoints).l
0000CD36 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000CD3A 0200 0003                  		andi.b	#3,d0
0000CD3E 66EE                       		bne.s	locret_C692
0000CD40 303C 0000                  		move.w	#sfx_Switch,d0
0000CD44 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	; play "blip" sound
0000CD4A                            ; ===========================================================================
0000CD4A                            

0000CD4A                            Got_NextLevel:	; Routine $A
0000CD4A 1038 FE10                  		move.b	(v_zone).w,d0
0000CD4E 0240 0007                  		andi.w	#7,d0
0000CD52 E748                       		lsl.w	#3,d0
0000CD54 1238 FE11                  		move.b	(v_act).w,d1
0000CD58 0241 0003                  		andi.w	#3,d1
0000CD5C D241                       		add.w	d1,d1
0000CD5E D041                       		add.w	d1,d0
0000CD60 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CD64 31C0 FE10                  		move.w	d0,(v_zone).w	; set level number
0000CD68 4A40                       		tst.w	d0
0000CD6A 6600                       		bne.s	Got_ChkSS
0000CD6C 11FC 0000 F600             		move.b	#id_Sega,(v_gamemode).w
0000CD72 6000                       		bra.s	Got_Display2
0000CD74                            ; ===========================================================================
0000CD74                            

0000CD74                            Got_ChkSS:
0000CD74 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
0000CD78 4A38 F7CD                  		tst.b	(f_bigring).w	; has Sonic jumped into	a giant	ring?
0000CD7C 6700                       		beq.s	VBla_08A	; if not, branch
0000CD7E 11FC 0000 F600             		move.b	#id_Special,(v_gamemode).w ; set game mode to Special Stage (10)
0000CD84 6000                       		bra.s	Got_Display2
0000CD86                            ; ===========================================================================
0000CD86                            

0000CD86                            VBla_08A:
0000CD86 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000CD8C                            

0000CD8C                            Got_Display2:
0000CD8C 6000 0000                  		bra.w	DisplaySprite
0000CD90                            ; ===========================================================================
0000CD90                            ; ---------------------------------------------------------------------------
0000CD90                            ; Level	order array
0000CD90                            ; ---------------------------------------------------------------------------
0000CD90                            LevelOrder:
0000CD90                            		; Green Hill Zone
0000CD90 0001                       		dc.b id_GHZ, 1	; Act 1
0000CD92 0002                       		dc.b id_GHZ, 2	; Act 2
0000CD94 0200                       		dc.b id_MZ, 0	; Act 3
0000CD96 0000                       		dc.b 0, 0
0000CD98                            

0000CD98                            		; Labyrinth Zone
0000CD98 0101                       		dc.b id_LZ, 1	; Act 1
0000CD9A 0102                       		dc.b id_LZ, 2	; Act 2
0000CD9C 0300                       		dc.b id_SLZ, 0	; Act 3
0000CD9E 0502                       		dc.b id_SBZ, 2	; Scrap Brain Zone Act 3
0000CDA0                            

0000CDA0                            		; Marble Zone
0000CDA0 0201                       		dc.b id_MZ, 1	; Act 1
0000CDA2 0202                       		dc.b id_MZ, 2	; Act 2
0000CDA4 0400                       		dc.b id_SYZ, 0	; Act 3
0000CDA6 0000                       		dc.b 0, 0
0000CDA8                            

0000CDA8                            		; Star Light Zone
0000CDA8 0301                       		dc.b id_SLZ, 1	; Act 1
0000CDAA 0302                       		dc.b id_SLZ, 2	; Act 2
0000CDAC 0500                       		dc.b id_SBZ, 0	; Act 3
0000CDAE 0000                       		dc.b 0, 0
0000CDB0                            

0000CDB0                            		; Spring Yard Zone
0000CDB0 0401                       		dc.b id_SYZ, 1	; Act 1
0000CDB2 0402                       		dc.b id_SYZ, 2	; Act 2
0000CDB4 0100                       		dc.b id_LZ, 0	; Act 3
0000CDB6 0000                       		dc.b 0, 0
0000CDB8                            

0000CDB8                            		; Scrap Brain Zone
0000CDB8 0501                       		dc.b id_SBZ, 1	; Act 1
0000CDBA 0103                       		dc.b id_LZ, 3	; Act 2
0000CDBC 0000                       		dc.b 0, 0	; Final Zone
0000CDBE 0000                       		dc.b 0, 0
0000CDC0                            		even
0000CDC0                            ; ===========================================================================
0000CDC0                            

0000CDC0                            Got_Move2:	; Routine $E
0000CDC0 7220                       		moveq	#$20,d1		; set horizontal speed
0000CDC2 3028 0032                  		move.w	got_finalX(a0),d0
0000CDC6 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its finish position?
0000CDCA 6700                       		beq.s	Got_SBZ2	; if yes, branch
0000CDCC 6C00                       		bge.s	Got_ChgPos2
0000CDCE 4441                       		neg.w	d1
0000CDD0                            

0000CDD0                            	Got_ChgPos2:
0000CDD0 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000CDD4 3028 0008                  		move.w	obX(a0),d0
0000CDD8 6B00                       		bmi.s	locret_C748
0000CDDA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CDDE 6400                       		bcc.s	locret_C748	; if yes, branch
0000CDE0 6000 0000                  		bra.w	DisplaySprite
0000CDE4                            ; ===========================================================================
0000CDE4                            

0000CDE4                            locret_C748:
0000CDE4 4E75                       		rts	
0000CDE6                            ; ===========================================================================
0000CDE6                            

0000CDE6                            Got_SBZ2:
0000CDE6 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)
0000CDEC 6600 0000                  		bne.w	DeleteObject
0000CDF0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CDF4 4238 F7CC                  		clr.b	(f_lockctrl).w	; unlock controls
0000CDF8 303C 0000                  		move.w	#bgm_FZ,d0
0000CDFC 4EF9 0000 139C             		jmp	(PlaySound).l	; play FZ music
0000CE02                            ; ===========================================================================
0000CE02                            

0000CE02                            loc_C766:	; Routine $10
0000CE02 5478 F72A                  		addq.w	#2,(v_limitright2).w
0000CE06 0C78 2100 F72A             		cmpi.w	#$2100,(v_limitright2).w
0000CE0C 6700 0000                  		beq.w	DeleteObject
0000CE10 4E75                       		rts	
0000CE12                            ; ===========================================================================
0000CE12                            		;    x-start,	x-main,	y-main,
0000CE12                            		;				routine, frame number
0000CE12                            

0000CE12 0004 0124 00BC             Got_Config:	dc.w 4,		$124,	$BC			; "SONIC HAS"
0000CE18 0200                       		dc.b 				2,	0
0000CE1A                            

0000CE1A FEE0 0120 00D0             		dc.w -$120,	$120,	$D0			; "PASSED"
0000CE20 0201                       		dc.b 				2,	1
0000CE22                            

0000CE22 040C 014C 00D6             		dc.w $40C,	$14C,	$D6			; "ACT" 1/2/3
0000CE28 0206                       		dc.b 				2,	6
0000CE2A                            

0000CE2A 0520 0120 00EC             		dc.w $520,	$120,	$EC			; score
0000CE30 0202                       		dc.b 				2,	2
0000CE32                            

0000CE32 0540 0120 00FC             		dc.w $540,	$120,	$FC			; time bonus
0000CE38 0203                       		dc.b 				2,	3
0000CE3A                            

0000CE3A 0560 0120 010C             		dc.w $560,	$120,	$10C			; ring bonus
0000CE40 0204                       		dc.b 				2,	4
0000CE42                            

0000CE42 020C 014C 00CC             		dc.w $20C,	$14C,	$CC			; oval
0000CE48 0205                       		dc.b 				2,	5
0000CE48 0205                       		dc.b 				2,	5
0000CE4A                            		include	"_incObj\7E Special Stage Results.asm"
0000CE4A                            ; ---------------------------------------------------------------------------
0000CE4A                            ; Object 7E - special stage results screen
0000CE4A                            ; ---------------------------------------------------------------------------
0000CE4A                            

0000CE4A                            SSResult:
0000CE4A 7000                       		moveq	#0,d0
0000CE4C 1028 0024                  		move.b	obRoutine(a0),d0
0000CE50 323B 0000                  		move.w	SSR_Index(pc,d0.w),d1
0000CE54 4EFB 1000                  		jmp	SSR_Index(pc,d1.w)
0000CE58                            ; ===========================================================================
0000CE58 0000                       SSR_Index:	dc.w SSR_ChkPLC-SSR_Index
0000CE5A 0000                       		dc.w SSR_Move-SSR_Index
0000CE5C 0000                       		dc.w SSR_Wait-SSR_Index
0000CE5E 0000                       		dc.w SSR_RingBonus-SSR_Index
0000CE60 0000                       		dc.w SSR_Wait-SSR_Index
0000CE62 0000                       		dc.w SSR_Exit-SSR_Index
0000CE64 0000                       		dc.w SSR_Wait-SSR_Index
0000CE66 0000                       		dc.w SSR_Continue-SSR_Index
0000CE68 0000                       		dc.w SSR_Wait-SSR_Index
0000CE6A 0000                       		dc.w SSR_Exit-SSR_Index
0000CE6C 0000                       		dc.w loc_C91A-SSR_Index
0000CE6E                            

0000CE6E =00000030                  ssr_mainX:	equ $30		; position for card to display on
0000CE6E                            ; ===========================================================================
0000CE6E                            

0000CE6E                            SSR_ChkPLC:	; Routine 0
0000CE6E 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are the pattern load cues empty?
0000CE72 6700                       		beq.s	SSR_Main	; if yes, branch
0000CE74 4E75                       		rts	
0000CE76                            ; ===========================================================================
0000CE76                            

0000CE76                            SSR_Main:
0000CE76 2248                       		movea.l	a0,a1
0000CE78 45F9 0000 0000             		lea	(SSR_Config).l,a2
0000CE7E 7203                       		moveq	#3,d1
0000CE80 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have 50 or more rings?
0000CE86 6500                       		bcs.s	SSR_Loop	; if no, branch
0000CE88 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CE8A                            

0000CE8A                            	SSR_Loop:
0000CE8A 137C 0000 0000             		move.b	#id_SSResult,0(a1)
0000CE90 335A 0008                  		move.w	(a2)+,obX(a1)	; load start x-position
0000CE94 335A 0030                  		move.w	(a2)+,ssr_mainX(a1) ; load main x-position
0000CE98 335A 000A                  		move.w	(a2)+,obScreenY(a1) ; load y-position
0000CE9C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0000CEA0 135A 001A                  		move.b	(a2)+,obFrame(a1)
0000CEA4 237C 0000 0000 0004        		move.l	#Map_SSR,obMap(a1)
0000CEAC 337C 8580 0002             		move.w	#$8580,obGfx(a1)
0000CEB2 137C 0000 0001             		move.b	#0,obRender(a1)
0000CEB8 43E9 0040                  		lea	$40(a1),a1
0000CEBC 51C9 FFCC                  		dbf	d1,SSR_Loop	; repeat sequence 3 or 4 times
0000CEC0                            

0000CEC0 7007                       		moveq	#7,d0
0000CEC2 1238 FE57                  		move.b	(v_emeralds).w,d1
0000CEC6 6700                       		beq.s	loc_C842
0000CEC8 7000                       		moveq	#0,d0
0000CECA 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CECE 6600                       		bne.s	loc_C842	; if not, branch
0000CED0 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CED2 317C 0018 0008             		move.w	#$18,obX(a0)
0000CED8 317C 0118 0030             		move.w	#$118,ssr_mainX(a0) ; change position of text
0000CEDE                            

0000CEDE                            loc_C842:
0000CEDE 1140 001A                  		move.b	d0,obFrame(a0)
0000CEE2                            

0000CEE2                            SSR_Move:	; Routine 2
0000CEE2 7210                       		moveq	#$10,d1		; set horizontal speed
0000CEE4 3028 0030                  		move.w	ssr_mainX(a0),d0
0000CEE8 B068 0008                  		cmp.w	obX(a0),d0	; has item reached its target position?
0000CEEC 6700                       		beq.s	loc_C86C	; if yes, branch
0000CEEE 6C00                       		bge.s	SSR_ChgPos
0000CEF0 4441                       		neg.w	d1
0000CEF2                            

0000CEF2                            SSR_ChgPos:
0000CEF2 D368 0008                  		add.w	d1,obX(a0)	; change item's position
0000CEF6                            

0000CEF6                            loc_C85A:
0000CEF6 3028 0008                  		move.w	obX(a0),d0
0000CEFA 6B00                       		bmi.s	locret_C86A
0000CEFC 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CF00 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CF02 6000 0000                  		bra.w	DisplaySprite
0000CF06                            ; ===========================================================================
0000CF06                            

0000CF06                            locret_C86A:
0000CF06 4E75                       		rts	
0000CF08                            ; ===========================================================================
0000CF08                            

0000CF08                            loc_C86C:
0000CF08 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000CF0E 66E6                       		bne.s	loc_C85A
0000CF10 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CF14 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000CF1A 11FC 0000 D800             		move.b	#id_SSRChaos,(v_ssresemeralds).w ; load chaos emerald object
0000CF20                            

0000CF20                            SSR_Wait:	; Routine 4, 8, $C, $10
0000CF20 5368 001E                  		subq.w	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000CF24 6600                       		bne.s	SSR_Display
0000CF26 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CF2A                            

0000CF2A                            SSR_Display:
0000CF2A 6000 0000                  		bra.w	DisplaySprite
0000CF2E                            ; ===========================================================================
0000CF2E                            

0000CF2E                            SSR_RingBonus:	; Routine 6
0000CF2E 6100 0000                  		bsr.w	DisplaySprite
0000CF32 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w ; set ring bonus update flag
0000CF38 4A78 F7D4                  		tst.w	(v_ringbonus).w	; is ring bonus	= zero?
0000CF3C 6700                       		beq.s	loc_C8C4	; if yes, branch
0000CF3E 0478 000A F7D4             		subi.w	#10,(v_ringbonus).w ; subtract 10 from ring bonus
0000CF44 700A                       		moveq	#10,d0		; add 10 to score
0000CF46 4EB9 0000 0000             		jsr	(AddPoints).l
0000CF4C 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000CF50 0200 0003                  		andi.b	#3,d0
0000CF54 6600                       		bne.s	locret_C8EA
0000CF56 303C 0000                  		move.w	#sfx_Switch,d0
0000CF5A 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	; play "blip" sound
0000CF60                            ; ===========================================================================
0000CF60                            

0000CF60                            loc_C8C4:
0000CF60 303C 0000                  		move.w	#sfx_Cash,d0
0000CF64 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play "ker-ching" sound
0000CF6A 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CF6E 317C 00B4 001E             		move.w	#180,obTimeFrame(a0) ; set time delay to 3 seconds
0000CF74 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; do you have at least 50 rings?
0000CF7A 6500                       		bcs.s	locret_C8EA	; if not, branch
0000CF7C 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time delay to 1 second
0000CF82 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto "SSR_Continue" routine
0000CF86                            

0000CF86                            locret_C8EA:
0000CF86 4E75                       		rts	
0000CF88                            ; ===========================================================================
0000CF88                            

0000CF88                            SSR_Exit:	; Routine $A, $12
0000CF88 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart level
0000CF8E 6000 0000                  		bra.w	DisplaySprite
0000CF92                            ; ===========================================================================
0000CF92                            

0000CF92                            SSR_Continue:	; Routine $E
0000CF92 11FC 0004 D6DA             		move.b	#4,(v_ssrescontinue+obFrame).w
0000CF98 11FC 0014 D6E4             		move.b	#$14,(v_ssrescontinue+obRoutine).w
0000CF9E 303C 0000                  		move.w	#sfx_Continue,d0
0000CFA2 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play continues jingle
0000CFA8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000CFAC 317C 0168 001E             		move.w	#360,obTimeFrame(a0) ; set time delay to 6 seconds
0000CFB2 6000 0000                  		bra.w	DisplaySprite
0000CFB6                            ; ===========================================================================
0000CFB6                            

0000CFB6                            loc_C91A:	; Routine $14
0000CFB6 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0000CFBA 0200 000F                  		andi.b	#$F,d0
0000CFBE 6600                       		bne.s	SSR_Display2
0000CFC0 0868 0000 001A             		bchg	#0,obFrame(a0)
0000CFC6                            

0000CFC6                            SSR_Display2:
0000CFC6 6000 0000                  		bra.w	DisplaySprite
0000CFCA                            ; ===========================================================================
0000CFCA 0020 0120 00C4             SSR_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000CFD0 0200                       		dc.b 2,	0		; rountine number, frame number
0000CFD2 0320 0120 0118             		dc.w $320, $120, $118
0000CFD8 0201                       		dc.b 2,	1
0000CFDA 0360 0120 0128             		dc.w $360, $120, $128
0000CFE0 0202                       		dc.b 2,	2
0000CFE2 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CFE8 0203                       		dc.b 2,	3
0000CFEA 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CFF0 0206                       		dc.b 2,	6
0000CFF0 0206                       		dc.b 2,	6
0000CFF2                            		include	"_incObj\7F SS Result Chaos Emeralds.asm"
0000CFF2                            ; ---------------------------------------------------------------------------
0000CFF2                            ; Object 7F - chaos emeralds from the special stage results screen
0000CFF2                            ; ---------------------------------------------------------------------------
0000CFF2                            

0000CFF2                            SSRChaos:
0000CFF2 7000                       		moveq	#0,d0
0000CFF4 1028 0024                  		move.b	obRoutine(a0),d0
0000CFF8 323B 0000                  		move.w	SSRC_Index(pc,d0.w),d1
0000CFFC 4EFB 1000                  		jmp	SSRC_Index(pc,d1.w)
0000D000                            ; ===========================================================================
0000D000 0000                       SSRC_Index:	dc.w SSRC_Main-SSRC_Index
0000D002 0000                       		dc.w SSRC_Flash-SSRC_Index
0000D004                            

0000D004                            ; ---------------------------------------------------------------------------
0000D004                            ; X-axis positions for chaos emeralds
0000D004                            ; ---------------------------------------------------------------------------
0000D004 0110 0128 00F8 0140 00E0+  SSRC_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D010                            ; ===========================================================================
0000D010                            

0000D010                            SSRC_Main:	; Routine 0
0000D010 2248                       		movea.l	a0,a1
0000D012 45F9 0000 D004             		lea	(SSRC_PosData).l,a2
0000D018 7400                       		moveq	#0,d2
0000D01A 7200                       		moveq	#0,d1
0000D01C 1238 FE57                  		move.b	(v_emeralds).w,d1 ; d1 is number of emeralds
0000D020 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D022 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D026                            

0000D026                            	SSRC_Loop:
0000D026 137C 0000 0000             		move.b	#id_SSRChaos,0(a1)
0000D02C 335A 0008                  		move.w	(a2)+,obX(a1)	; set x-position
0000D030 337C 00F0 000A             		move.w	#$F0,obScreenY(a1) ; set y-position
0000D036 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0000D03A 1633 2000                  		move.b	(a3,d2.w),d3
0000D03E 1343 001A                  		move.b	d3,obFrame(a1)
0000D042 1343 001C                  		move.b	d3,obAnim(a1)
0000D046 5202                       		addq.b	#1,d2
0000D048 5429 0024                  		addq.b	#2,obRoutine(a1)
0000D04C 237C 0000 0000 0004        		move.l	#Map_SSRC,obMap(a1)
0000D054 337C 8541 0002             		move.w	#$8541,obGfx(a1)
0000D05A 137C 0000 0001             		move.b	#0,obRender(a1)
0000D060 43E9 0040                  		lea	$40(a1),a1	; next object
0000D064 51C9 FFC0                  		dbf	d1,SSRC_Loop	; loop for d1 number of	emeralds
0000D068                            

0000D068                            SSRC_Flash:	; Routine 2
0000D068 1028 001A                  		move.b	obFrame(a0),d0
0000D06C 117C 0006 001A             		move.b	#6,obFrame(a0)	; load 6th frame (blank)
0000D072 0C00 0006                  		cmpi.b	#6,d0
0000D076 6600                       		bne.s	SSRC_Display
0000D078 1168 001C 001A             		move.b	obAnim(a0),obFrame(a0) ; load visible frame
0000D07E                            

0000D07E                            	SSRC_Display:
0000D07E 6000 0000                  		bra.w	DisplaySprite
0000D07E 6000 0000                  		bra.w	DisplaySprite
0000D082                            

0000D082                            ; ---------------------------------------------------------------------------
0000D082                            ; Sprite mappings - zone title cards
0000D082                            ; ---------------------------------------------------------------------------
0000D082 0000                       Map_Card:	dc.w M_Card_GHZ-Map_Card
0000D084 0000                       		dc.w M_Card_LZ-Map_Card
0000D086 0000                       		dc.w M_Card_MZ-Map_Card
0000D088 0000                       		dc.w M_Card_SLZ-Map_Card
0000D08A 0000                       		dc.w M_Card_SYZ-Map_Card
0000D08C 0000                       		dc.w M_Card_SBZ-Map_Card
0000D08E 0000                       		dc.w M_Card_Zone-Map_Card
0000D090 0000                       		dc.w M_Card_Act1-Map_Card
0000D092 0000                       		dc.w M_Card_Act2-Map_Card
0000D094 0000                       		dc.w M_Card_Act3-Map_Card
0000D096 0000                       		dc.w M_Card_Oval-Map_Card
0000D098 0000                       		dc.w M_Card_FZ-Map_Card
0000D09A 09                         M_Card_GHZ:	dc.b 9 			; GREEN HILL
0000D09B F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000D0A0 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000D0A5 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000D0AA F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000D0AF F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D0B4 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000D0B9 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000D0BE F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000D0C3 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000D0C8                            		even
0000D0C8 09                         M_Card_LZ:	dc.b 9			; LABYRINTH
0000D0C9 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000D0CE F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000D0D3 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000D0D8 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000D0DD F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000D0E2 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000D0E7 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000D0EC F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D0F1 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000D0F6                            		even
0000D0F6 06                         M_Card_MZ:	dc.b 6			; MARBLE
0000D0F7 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000D0FC F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D101 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000D106 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000D10B F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000D110 F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000D116 00                         		even
0000D116 09                         M_Card_SLZ:	dc.b 9			; STAR LIGHT
0000D117 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000D11C F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000D121 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000D126 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000D12B F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000D130 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000D135 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000D13A F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000D13F F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000D144                            		even
0000D144 0A                         M_Card_SYZ:	dc.b $A			; SPRING YARD
0000D145 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D14A F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000D14F F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D154 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D159 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000D15E F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000D163 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000D168 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000D16D F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000D172 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000D178 00                         		even
0000D178 0A                         M_Card_SBZ:	dc.b $A			; SCRAP BRAIN
0000D179 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000D17E F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000D183 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000D188 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000D18D F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000D192 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000D197 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000D19C F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000D1A1 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000D1A6 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000D1AC 00                         		even
0000D1AC 04                         M_Card_Zone:	dc.b 4			; ZONE
0000D1AD F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D1B2 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D1B7 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D1BC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D1C2 00                         		even
0000D1C2 02                         M_Card_Act1:	dc.b 2			; ACT 1
0000D1C3 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D1C8 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D1CD 02                         M_Card_Act2:	dc.b 2			; ACT 2
0000D1CE 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D1D3 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D1D8 02                         M_Card_Act3:	dc.b 2			; ACT 3
0000D1D9 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D1DE F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D1E3 0D                         M_Card_Oval:	dc.b $D			; Oval
0000D1E4 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D1E9 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D1EE EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D1F3 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D1F8 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D1FD 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D202 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D207 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D20C EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D211 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D216 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D21B 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D220 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D226 00                         		even
0000D226 05                         M_Card_FZ:	dc.b 5			; FINAL
0000D227 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D22C F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D231 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D236 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D23B F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D240                            		even
0000D240                            

0000D240                            Map_Over:	include	"_maps\Game Over.asm"
0000D240                            ; ---------------------------------------------------------------------------
0000D240                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D240                            ; ---------------------------------------------------------------------------
0000D240                            Map_Over_internal:
0000D240 0000                       		dc.w byte_CBAC-Map_Over_internal
0000D242 0000                       		dc.w byte_CBB7-Map_Over_internal
0000D244 0000                       		dc.w byte_CBC2-Map_Over_internal
0000D246 0000                       		dc.w byte_CBCD-Map_Over_internal
0000D248 02                         byte_CBAC:	dc.b 2			; GAME
0000D249 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D24E F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D253 02                         byte_CBB7:	dc.b 2			; OVER
0000D254 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D259 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D25E 02                         byte_CBC2:	dc.b 2			; TIME
0000D25F F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D264 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D269 02                         byte_CBCD:	dc.b 2			; OVER
0000D26A F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D26F F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D274                            		even
0000D274                            		even
0000D274                            

0000D274                            ; ---------------------------------------------------------------------------
0000D274                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D274                            ; ---------------------------------------------------------------------------
0000D274 0000                       Map_Got:	dc.w M_Got_SonicHas-Map_Got
0000D276 0000                       		dc.w M_Got_Passed-Map_Got
0000D278 0000                       		dc.w M_Got_Score-Map_Got
0000D27A 0000                       		dc.w M_Got_TBonus-Map_Got
0000D27C 0000                       		dc.w M_Got_RBonus-Map_Got
0000D27E FF6F                       		dc.w M_Card_Oval-Map_Got
0000D280 FF4E                       		dc.w M_Card_Act1-Map_Got
0000D282 FF59                       		dc.w M_Card_Act2-Map_Got
0000D284 FF64                       		dc.w M_Card_Act3-Map_Got
0000D286 08                         M_Got_SonicHas:	dc.b 8			; SONIC HAS
0000D287 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000D28C F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000D291 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000D296 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000D29B F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000D2A0 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000D2A5 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000D2AA F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000D2AF 06                         M_Got_Passed:	dc.b 6			; PASSED
0000D2B0 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D2B5 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D2BA F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D2BF F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D2C4 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D2C9 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D2CE 06                         M_Got_Score:	dc.b 6			; SCORE
0000D2CF F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D2D4 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D2D9 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D2DE F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D2E3 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D2E8 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D2ED 07                         M_Got_TBonus:	dc.b 7			; TIME BONUS
0000D2EE F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D2F3 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D2F8 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D2FD F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D302 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D307 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D30C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D311 07                         M_Got_RBonus:	dc.b 7			; RING BONUS
0000D312 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D317 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D31C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D321 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D326 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D32B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D330 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D336 00                         		even
0000D336                            ; ---------------------------------------------------------------------------
0000D336                            ; Sprite mappings - special stage results screen
0000D336                            ; ---------------------------------------------------------------------------
0000D336 0000                       Map_SSR:	dc.w M_SSR_Chaos-Map_SSR
0000D338 0000                       		dc.w M_SSR_Score-Map_SSR
0000D33A 0000                       		dc.w M_SSR_Ring-Map_SSR
0000D33C FEAD                       		dc.w M_Card_Oval-Map_SSR
0000D33E 0000                       		dc.w M_SSR_ContSonic1-Map_SSR
0000D340 0000                       		dc.w M_SSR_ContSonic2-Map_SSR
0000D342 0000                       		dc.w M_SSR_Continue-Map_SSR
0000D344 0000                       		dc.w M_SSR_SpecStage-Map_SSR
0000D346 0000                       		dc.w M_SSR_GotAll-Map_SSR
0000D348 0D                         M_SSR_Chaos:	dc.b $D			; "CHAOS EMERALDS"
0000D349 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D34E F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D353 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D358 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D35D F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D362 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D367 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D36C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D371 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D376 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D37B F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D380 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D385 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D38A 06                         M_SSR_Score:	dc.b 6			; "SCORE"
0000D38B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D390 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D395 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D39A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D39F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D3A4 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D3A9 07                         M_SSR_Ring:	dc.b 7
0000D3AA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D3AF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D3B4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D3B9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D3BE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D3C3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D3C8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D3CD 04                         M_SSR_ContSonic1:	dc.b 4
0000D3CE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D3D3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D3D8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D3DD F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D3E2 04                         M_SSR_ContSonic2:	dc.b 4
0000D3E3 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D3E8 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D3ED F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D3F2 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D3F7 03                         M_SSR_Continue:	dc.b 3
0000D3F8 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D3FD F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D402 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D407 0C                         M_SSR_SpecStage:	dc.b $C			; "SPECIAL STAGE"
0000D408 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D40D F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D412 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D417 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D41C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D421 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D426 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D42B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D430 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D435 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D43A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D43F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D444 0F                         M_SSR_GotAll:	dc.b $F			; "SONIC GOT THEM ALL"
0000D445 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D44A F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D44F F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D454 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D459 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D45E F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D463 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D468 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D46D F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D472 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D477 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D47C F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D481 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D486 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D48B F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D490                            		even
0000D490                            

0000D490                            Map_SSRC:	include	"_maps\SS Result Chaos Emeralds.asm"
0000D490                            ; ---------------------------------------------------------------------------
0000D490                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D490                            ; ---------------------------------------------------------------------------
0000D490                            Map_SSRC_internal:
0000D490 0000                       		dc.w byte_CE02-Map_SSRC_internal
0000D492 0000                       		dc.w byte_CE08-Map_SSRC_internal
0000D494 0000                       		dc.w byte_CE0E-Map_SSRC_internal
0000D496 0000                       		dc.w byte_CE14-Map_SSRC_internal
0000D498 0000                       		dc.w byte_CE1A-Map_SSRC_internal
0000D49A 0000                       		dc.w byte_CE20-Map_SSRC_internal
0000D49C 0000                       		dc.w byte_CE26-Map_SSRC_internal
0000D49E 01                         byte_CE02:	dc.b 1
0000D49F F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D4A4 01                         byte_CE08:	dc.b 1
0000D4A5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D4AA 01                         byte_CE0E:	dc.b 1
0000D4AB F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D4B0 01                         byte_CE14:	dc.b 1
0000D4B1 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D4B6 01                         byte_CE1A:	dc.b 1
0000D4B7 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D4BC 01                         byte_CE20:	dc.b 1
0000D4BD F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D4C2 00                         byte_CE26:	dc.b 0			; Blank frame
0000D4C4 00                         		even
0000D4C4 00                         		even
0000D4C4                            

0000D4C4                            		include	"_incObj\36 Spikes.asm"
0000D4C4                            ; ---------------------------------------------------------------------------
0000D4C4                            ; Object 36 - spikes
0000D4C4                            ; ---------------------------------------------------------------------------
0000D4C4                            

0000D4C4                            Spikes:
0000D4C4 7000                       		moveq	#0,d0
0000D4C6 1028 0024                  		move.b	obRoutine(a0),d0
0000D4CA 323B 0000                  		move.w	Spik_Index(pc,d0.w),d1
0000D4CE 4EFB 1000                  		jmp	Spik_Index(pc,d1.w)
0000D4D2                            ; ===========================================================================
0000D4D2 0000                       Spik_Index:	dc.w Spik_Main-Spik_Index
0000D4D4 0000                       		dc.w Spik_Solid-Spik_Index
0000D4D6                            

0000D4D6 =00000030                  spik_origX:	equ $30		; start X position
0000D4D6 =00000032                  spik_origY:	equ $32		; start Y position
0000D4D6                            

0000D4D6 0014                       Spik_Var:	dc.b 0,	$14		; frame	number,	object width
0000D4D8 0110                       		dc.b 1,	$10
0000D4DA 0204                       		dc.b 2,	4
0000D4DC 031C                       		dc.b 3,	$1C
0000D4DE 0440                       		dc.b 4,	$40
0000D4E0 0510                       		dc.b 5,	$10
0000D4E2                            ; ===========================================================================
0000D4E2                            

0000D4E2                            Spik_Main:	; Routine 0
0000D4E2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D4E6 217C 0000 0000 0004        		move.l	#Map_Spike,obMap(a0)
0000D4EE 317C 051B 0002             		move.w	#$51B,obGfx(a0)
0000D4F4 0028 0004 0001             		ori.b	#4,obRender(a0)
0000D4FA 117C 0004 0018             		move.b	#4,obPriority(a0)
0000D500 1028 0028                  		move.b	obSubtype(a0),d0
0000D504 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000D50A 0240 00F0                  		andi.w	#$F0,d0
0000D50E 43F9 0000 D4D6             		lea	(Spik_Var).l,a1
0000D514 E648                       		lsr.w	#3,d0
0000D516 D2C0                       		adda.w	d0,a1
0000D518 1159 001A                  		move.b	(a1)+,obFrame(a0)
0000D51C 1159 0019                  		move.b	(a1)+,obActWid(a0)
0000D520 3168 0008 0030             		move.w	obX(a0),spik_origX(a0)
0000D526 3168 000C 0032             		move.w	obY(a0),spik_origY(a0)
0000D52C                            

0000D52C                            Spik_Solid:	; Routine 2
0000D52C 6100 0000                  		bsr.w	Spik_Type0x	; make the object move
0000D530 343C 0004                  		move.w	#4,d2
0000D534 0C28 0005 001A             		cmpi.b	#5,obFrame(a0)	; is object type $5x ?
0000D53A 6700                       		beq.s	Spik_SideWays	; if yes, branch
0000D53C 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)	; is object type $1x ?
0000D542 6600                       		bne.s	Spik_Upright	; if not, branch
0000D544 343C 0014                  		move.w	#$14,d2
0000D548                            

0000D548                            ; Spikes types $1x and $5x face	sideways
0000D548                            

0000D548                            Spik_SideWays:
0000D548 323C 001B                  		move.w	#$1B,d1
0000D54C 3602                       		move.w	d2,d3
0000D54E 5243                       		addq.w	#1,d3
0000D550 3828 0008                  		move.w	obX(a0),d4
0000D554 6100 0000                  		bsr.w	SolidObject
0000D558 0828 0003 0022             		btst	#3,obStatus(a0)
0000D55E 6600                       		bne.s	Spik_Display
0000D560 0C44 0001                  		cmpi.w	#1,d4
0000D564 6700                       		beq.s	Spik_Hurt
0000D566 6000                       		bra.s	Spik_Display
0000D568                            ; ===========================================================================
0000D568                            

0000D568                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D568                            

0000D568                            Spik_Upright:
0000D568 7200                       		moveq	#0,d1
0000D56A 1228 0019                  		move.b	obActWid(a0),d1
0000D56E 0641 000B                  		addi.w	#$B,d1
0000D572 343C 0010                  		move.w	#$10,d2
0000D576 363C 0011                  		move.w	#$11,d3
0000D57A 3828 0008                  		move.w	obX(a0),d4
0000D57E 6100 0000                  		bsr.w	SolidObject
0000D582 0828 0003 0022             		btst	#3,obStatus(a0)
0000D588 6600                       		bne.s	Spik_Hurt
0000D58A 4A44                       		tst.w	d4
0000D58C 6A00                       		bpl.s	Spik_Display
0000D58E                            

0000D58E                            Spik_Hurt:
0000D58E 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0000D592 6600                       		bne.s	Spik_Display	; if yes, branch
0000D594 2F08                       		move.l	a0,-(sp)
0000D596 2448                       		movea.l	a0,a2
0000D598 41F8 D000                  		lea	(v_player).w,a0
0000D59C 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0000D5A2 6400                       		bcc.s	loc_CF20
0000D5A4 2628 000C                  		move.l	obY(a0),d3
0000D5A8 3028 0012                  		move.w	obVelY(a0),d0
0000D5AC 48C0                       		ext.l	d0
0000D5AE E180                       		asl.l	#8,d0
0000D5B0 9680                       		sub.l	d0,d3
0000D5B2 2143 000C                  		move.l	d3,obY(a0)
0000D5B6 4EB9 0000 0000             		jsr	(HurtSonic).l
0000D5BC                            

0000D5BC                            loc_CF20:
0000D5BC 205F                       		movea.l	(sp)+,a0
0000D5BE                            

0000D5BE                            Spik_Display:
0000D5BE 6100 0000                  		bsr.w	DisplaySprite
0000D5E0 4E75                       		rts	
0000D5E2                            ; ===========================================================================
0000D5E2                            

0000D5E2                            Spik_Type0x:
0000D5E2 7000                       		moveq	#0,d0
0000D5E4 1028 0028                  		move.b	obSubtype(a0),d0
0000D5E8 D040                       		add.w	d0,d0
0000D5EA 323B 0000                  		move.w	Spik_TypeIndex(pc,d0.w),d1
0000D5EE 4EFB 1000                  		jmp	Spik_TypeIndex(pc,d1.w)
0000D5F2                            ; ===========================================================================
0000D5F2 0000                       Spik_TypeIndex:	dc.w Spik_Type00-Spik_TypeIndex
0000D5F4 0000                       		dc.w Spik_Type01-Spik_TypeIndex
0000D5F6 0000                       		dc.w Spik_Type02-Spik_TypeIndex
0000D5F8                            ; ===========================================================================
0000D5F8                            

0000D5F8                            Spik_Type00:
0000D5F8 4E75                       		rts			; don't move the object
0000D5FA                            ; ===========================================================================
0000D5FA                            

0000D5FA                            Spik_Type01:
0000D5FA 6100 0000                  		bsr.w	Spik_Wait
0000D5FE 7000                       		moveq	#0,d0
0000D600 1028 0034                  		move.b	$34(a0),d0
0000D604 D068 0032                  		add.w	spik_origY(a0),d0
0000D608 3140 000C                  		move.w	d0,obY(a0)	; move the object vertically
0000D60C 4E75                       		rts	
0000D60E                            ; ===========================================================================
0000D60E                            

0000D60E                            Spik_Type02:
0000D60E 6100 0000                  		bsr.w	Spik_Wait
0000D612 7000                       		moveq	#0,d0
0000D614 1028 0034                  		move.b	$34(a0),d0
0000D618 D068 0030                  		add.w	spik_origX(a0),d0
0000D61C 3140 0008                  		move.w	d0,obX(a0)	; move the object horizontally
0000D620 4E75                       		rts	
0000D622                            ; ===========================================================================
0000D622                            

0000D622                            Spik_Wait:
0000D622 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D626 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D628 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D62C 6600                       		bne.s	locret_CFE6
0000D62E 4A28 0001                  		tst.b	obRender(a0)
0000D632 6A00                       		bpl.s	locret_CFE6
0000D634 303C 0000                  		move.w	#sfx_SpikesMove,d0
0000D638 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play "spikes moving" sound
0000D63E 6000                       		bra.s	locret_CFE6
0000D640                            ; ===========================================================================
0000D640                            

0000D640                            loc_CFA4:
0000D640 4A68 0036                  		tst.w	$36(a0)
0000D644 6700                       		beq.s	loc_CFC6
0000D646 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D64C 6400                       		bcc.s	locret_CFE6
0000D64E 317C 0000 0034             		move.w	#0,$34(a0)
0000D654 317C 0000 0036             		move.w	#0,$36(a0)
0000D65A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D660 6000                       		bra.s	locret_CFE6
0000D662                            ; ===========================================================================
0000D662                            

0000D662                            loc_CFC6:
0000D662 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D668 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D66E 6500                       		bcs.s	locret_CFE6
0000D670 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D676 317C 0001 0036             		move.w	#1,$36(a0)
0000D67C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D682                            

0000D682                            locret_CFE6:
0000D682 4E75                       		rts	
0000D682 4E75                       		rts	
0000D684                            Map_Spike:	include	"_maps\Spikes.asm"
0000D684                            ; ---------------------------------------------------------------------------
0000D684                            ; Sprite mappings - spikes
0000D684                            ; ---------------------------------------------------------------------------
0000D684                            Map_Spike_internal:
0000D684 0000                       		dc.w byte_CFF4-Map_Spike_internal
0000D686 0000                       		dc.w byte_D004-Map_Spike_internal
0000D688 0000                       		dc.w byte_D014-Map_Spike_internal
0000D68A 0000                       		dc.w byte_D01A-Map_Spike_internal
0000D68C 0000                       		dc.w byte_D02A-Map_Spike_internal
0000D68E 0000                       		dc.w byte_D049-Map_Spike_internal
0000D690 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D691 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D696 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D69B F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D6A0 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D6A1 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D6A6 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D6AB 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D6B0 01                         byte_D014:	dc.b 1			; 1 spike
0000D6B1 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D6B6 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D6B7 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D6BC F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D6C1 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D6C6 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D6C7 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D6CC F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D6D1 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D6D6 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D6DB F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D6E0 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D6E5 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D6E6 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D6EC 00                         		even
0000D6EC 00                         		even
0000D6EC                            		include	"_incObj\3B Purple Rock.asm"
0000D6EC                            ; ---------------------------------------------------------------------------
0000D6EC                            ; Object 3B - purple rock (GHZ)
0000D6EC                            ; ---------------------------------------------------------------------------
0000D6EC                            

0000D6EC                            PurpleRock:
0000D6EC 7000                       		moveq	#0,d0
0000D6EE 1028 0024                  		move.b	obRoutine(a0),d0
0000D6F2 323B 0000                  		move.w	Rock_Index(pc,d0.w),d1
0000D6F6 4EFB 1000                  		jmp	Rock_Index(pc,d1.w)
0000D6FA                            ; ===========================================================================
0000D6FA 0000                       Rock_Index:	dc.w Rock_Main-Rock_Index
0000D6FC 0000                       		dc.w Rock_Solid-Rock_Index
0000D6FE                            ; ===========================================================================
0000D6FE                            

0000D6FE                            Rock_Main:	; Routine 0
0000D6FE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D702 217C 0000 0000 0004        		move.l	#Map_PRock,obMap(a0)
0000D70A 317C 63D0 0002             		move.w	#$63D0,obGfx(a0)
0000D710 117C 0004 0001             		move.b	#4,obRender(a0)
0000D716 117C 0013 0019             		move.b	#$13,obActWid(a0)
0000D71C 117C 0004 0018             		move.b	#4,obPriority(a0)
0000D722                            

0000D722                            Rock_Solid:	; Routine 2
0000D722 323C 001B                  		move.w	#$1B,d1
0000D726 343C 0010                  		move.w	#$10,d2
0000D72A 363C 0010                  		move.w	#$10,d3
0000D72E 3828 0008                  		move.w	obX(a0),d4
0000D732 6100 0000                  		bsr.w	SolidObject
0000D736 6100 0000                  		bsr.w	DisplaySprite
0000D758 4E75                       		rts	
0000D758 4E75                       		rts	
0000D75A                            		include	"_incObj\49 Waterfall Sound.asm"
0000D75A                            ; ---------------------------------------------------------------------------
0000D75A                            ; Object 49 - waterfall	sound effect (GHZ)
0000D75A                            ; ---------------------------------------------------------------------------
0000D75A                            

0000D75A                            WaterSound:
0000D75A 7000                       		moveq	#0,d0
0000D75C 1028 0024                  		move.b	obRoutine(a0),d0
0000D760 323B 0000                  		move.w	WSnd_Index(pc,d0.w),d1
0000D764 4EFB 1000                  		jmp	WSnd_Index(pc,d1.w)
0000D768                            ; ===========================================================================
0000D768 0000                       WSnd_Index:	dc.w WSnd_Main-WSnd_Index
0000D76A 0000                       		dc.w WSnd_PlaySnd-WSnd_Index
0000D76C                            ; ===========================================================================
0000D76C                            

0000D76C                            WSnd_Main:	; Routine 0
0000D76C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D770 117C 0004 0001             		move.b	#4,obRender(a0)
0000D776                            

0000D776                            WSnd_PlaySnd:	; Routine 2
0000D776 1038 FE0F                  		move.b	(v_vbla_byte).w,d0 ; get low byte of VBlank counter
0000D77A 0200 003F                  		andi.b	#$3F,d0
0000D77E 6600                       		bne.s	WSnd_ChkDel
0000D780 303C 0000                  		move.w	#sfx_Waterfall,d0
0000D784 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play waterfall sound
0000D78A                            

0000D78A                            	WSnd_ChkDel:
0000D7A8 4E75                       		rts	
0000D7A8 4E75                       		rts	
0000D7AA                            Map_PRock:	include	"_maps\Purple Rock.asm"
0000D7AA                            ; ---------------------------------------------------------------------------
0000D7AA                            ; Sprite mappings - purple rock	(GHZ)
0000D7AA                            ; ---------------------------------------------------------------------------
0000D7AA                            Map_PRock_internal:
0000D7AA 0000                       		dc.w byte_D110-Map_PRock_internal
0000D7AC 02                         byte_D110:	dc.b 2
0000D7AD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D7B2 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D7B8 00                         		even
0000D7B8 00                         		even
0000D7B8                            		include	"_incObj\3C Smashable Wall.asm"
0000D7B8                            ; ---------------------------------------------------------------------------
0000D7B8                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D7B8                            ; ---------------------------------------------------------------------------
0000D7B8                            

0000D7B8                            SmashWall:
0000D7B8 7000                       		moveq	#0,d0
0000D7BA 1028 0024                  		move.b	obRoutine(a0),d0
0000D7BE 323B 0000                  		move.w	Smash_Index(pc,d0.w),d1
0000D7C2 4EBB 1000                  		jsr	Smash_Index(pc,d1.w)
0000D7C6 6000 0000                  		bra.w	RememberState
0000D7CA                            ; ===========================================================================
0000D7CA 0000                       Smash_Index:	dc.w Smash_Main-Smash_Index
0000D7CC 0000                       		dc.w Smash_Solid-Smash_Index
0000D7CE 0000                       		dc.w Smash_FragMove-Smash_Index
0000D7D0                            

0000D7D0 =00000030                  smash_speed:	equ $30		; Sonic's horizontal speed
0000D7D0                            ; ===========================================================================
0000D7D0                            

0000D7D0                            Smash_Main:	; Routine 0
0000D7D0 5428 0024                  		addq.b	#2,obRoutine(a0)
0000D7D4 217C 0000 0000 0004        		move.l	#Map_Smash,obMap(a0)
0000D7DC 317C 450F 0002             		move.w	#$450F,obGfx(a0)
0000D7E2 117C 0004 0001             		move.b	#4,obRender(a0)
0000D7E8 117C 0010 0019             		move.b	#$10,obActWid(a0)
0000D7EE 117C 0004 0018             		move.b	#4,obPriority(a0)
0000D7F4 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0000D7FA                            

0000D7FA                            Smash_Solid:	; Routine 2
0000D7FA 3178 D010 0030             		move.w	(v_player+obVelX).w,smash_speed(a0) ; load Sonic's horizontal speed
0000D800 323C 001B                  		move.w	#$1B,d1
0000D804 343C 0020                  		move.w	#$20,d2
0000D808 363C 0020                  		move.w	#$20,d3
0000D80C 3828 0008                  		move.w	obX(a0),d4
0000D810 6100 0000                  		bsr.w	SolidObject
0000D814 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing against the wall?
0000D81A 6600                       		bne.s	@chkroll	; if yes, branch
0000D81C                            

0000D81C                            @donothing:
0000D81C 4E75                       		rts	
0000D81E                            ; ===========================================================================
0000D81E                            

0000D81E                            @chkroll:
0000D81E 0C29 0000 001C             		cmpi.b	#id_Roll,obAnim(a1) ; is Sonic rolling?
0000D824 66F6                       		bne.s	@donothing	; if not, branch
0000D826 3028 0030                  		move.w	smash_speed(a0),d0
0000D82A 6A00                       		bpl.s	@chkspeed
0000D82C 4440                       		neg.w	d0
0000D82E                            

0000D82E                            	@chkspeed:
0000D82E 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D832 65E8                       		bcs.s	@donothing	; if not, branch
0000D834 3368 0030 0010             		move.w	smash_speed(a0),obVelX(a1)
0000D83A 5869 0008                  		addq.w	#4,obX(a1)
0000D83E 49F9 0000 0000             		lea	(Smash_FragSpd1).l,a4 ;	use fragments that move	right
0000D844 3028 0008                  		move.w	obX(a0),d0
0000D848 B069 0008                  		cmp.w	obX(a1),d0	; is Sonic to the right	of the block?
0000D84C 6500                       		bcs.s	@smash		; if yes, branch
0000D84E 5169 0008                  		subq.w	#8,obX(a1)
0000D852 49F9 0000 0000             		lea	(Smash_FragSpd2).l,a4 ;	use fragments that move	left
0000D858                            

0000D858                            	@smash:
0000D858 3369 0010 0014             		move.w	obVelX(a1),obInertia(a1)
0000D85E 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000D864 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000D86A 7207                       		moveq	#7,d1		; load 8 fragments
0000D86C 343C 0070                  		move.w	#$70,d2
0000D870 6100                       		bsr.s	SmashObject
0000D872                            

0000D872                            Smash_FragMove:	; Routine 4
0000D872 6100 0000                  		bsr.w	SpeedToPos
0000D876 0668 0070 0012             		addi.w	#$70,obVelY(a0)	; make fragment	fall faster
0000D87C 6100 0000                  		bsr.w	DisplaySprite
0000D880 4A28 0001                  		tst.b	obRender(a0)
0000D884 6A00 0000                  		bpl.w	DeleteObject
0000D888 4E75                       		rts	
0000D888 4E75                       		rts	
0000D88A                            

0000D88A                            		include	"_incObj\sub SmashObject.asm"
0000D88A                            ; ---------------------------------------------------------------------------
0000D88A                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D88A                            ; ---------------------------------------------------------------------------
0000D88A                            

0000D88A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D88A                            

0000D88A                            

0000D88A                            SmashObject:
0000D88A 7000                       		moveq	#0,d0
0000D88C 1028 001A                  		move.b	obFrame(a0),d0
0000D890 D040                       		add.w	d0,d0
0000D892 2668 0004                  		movea.l	obMap(a0),a3
0000D896 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D89A 524B                       		addq.w	#1,a3
0000D89C 08E8 0005 0001             		bset	#5,obRender(a0)
0000D8A2 1828 0000                  		move.b	0(a0),d4
0000D8A6 1A28 0001                  		move.b	obRender(a0),d5
0000D8AA 2248                       		movea.l	a0,a1
0000D8AC 6000                       		bra.s	@loadfrag
0000D8AE                            ; ===========================================================================
0000D8AE                            

0000D8AE                            	@loop:
0000D8AE 6100 0000                  		bsr.w	FindFreeObj
0000D8B2 6600                       		bne.s	@playsnd
0000D8B4 5A4B                       		addq.w	#5,a3
0000D8B6                            

0000D8B6                            @loadfrag:
0000D8B6 137C 0004 0024             		move.b	#4,obRoutine(a1)
0000D8BC 1344 0000                  		move.b	d4,0(a1)
0000D8C0 234B 0004                  		move.l	a3,obMap(a1)
0000D8C4 1345 0001                  		move.b	d5,obRender(a1)
0000D8C8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000D8CE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000D8D4 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0000D8DA 1368 0018 0018             		move.b	obPriority(a0),obPriority(a1)
0000D8E0 1368 0019 0019             		move.b	obActWid(a0),obActWid(a1)
0000D8E6 335C 0010                  		move.w	(a4)+,obVelX(a1)
0000D8EA 335C 0012                  		move.w	(a4)+,obVelY(a1)
0000D8EE B3C8                       		cmpa.l	a0,a1
0000D8F0 6400                       		bcc.s	@loc_D268
0000D8F2 2F08                       		move.l	a0,-(sp)
0000D8F4 2049                       		movea.l	a1,a0
0000D8F6 6100 0000                  		bsr.w	SpeedToPos
0000D8FA D568 0012                  		add.w	d2,obVelY(a0)
0000D8FE 205F                       		movea.l	(sp)+,a0
0000D900 6100 0000                  		bsr.w	DisplaySprite1
0000D904                            

0000D904                            	@loc_D268:
0000D904 51C9 FFA8                  		dbf	d1,@loop
0000D908                            

0000D908                            	@playsnd:
0000D908 303C 0000                  		move.w	#sfx_WallSmash,d0
0000D90C 4EF9 0000 13A2             		jmp	(PlaySound_Special).l ; play smashing sound
0000D912                            

0000D912                            ; End of function SmashObject
0000D912                            ; End of function SmashObject
0000D912                            

0000D912                            ; ===========================================================================
0000D912                            ; Smashed block	fragment speeds
0000D912                            ;
0000D912 0400 FB00                  Smash_FragSpd1:	dc.w $400, -$500	; x-move speed,	y-move speed
0000D916 0600 FF00                  		dc.w $600, -$100
0000D91A 0600 0100                  		dc.w $600, $100
0000D91E 0400 0500                  		dc.w $400, $500
0000D922 0600 FA00                  		dc.w $600, -$600
0000D926 0800 FE00                  		dc.w $800, -$200
0000D92A 0800 0200                  		dc.w $800, $200
0000D92E 0600 0600                  		dc.w $600, $600
0000D932                            

0000D932 FA00 FA00                  Smash_FragSpd2:	dc.w -$600, -$600
0000D936 F800 FE00                  		dc.w -$800, -$200
0000D93A F800 0200                  		dc.w -$800, $200
0000D93E FA00 0600                  		dc.w -$600, $600
0000D942 FC00 FB00                  		dc.w -$400, -$500
0000D946 FA00 FF00                  		dc.w -$600, -$100
0000D94A FA00 0100                  		dc.w -$600, $100
0000D94E FC00 0500                  		dc.w -$400, $500
0000D952                            

0000D952                            Map_Smash:	include	"_maps\Smashable Walls.asm"
0000D952                            ; ---------------------------------------------------------------------------
0000D952                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D952                            ; ---------------------------------------------------------------------------
0000D952                            Map_Smash_internal:
0000D952 0000                       		dc.w @left-Map_Smash_internal
0000D954 0000                       		dc.w @middle-Map_Smash_internal
0000D956 0000                       		dc.w @right-Map_Smash_internal
0000D958 08                         @left:		dc.b 8
0000D959 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D95E F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D963 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D968 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D96D E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D972 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D977 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D97C 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D981 08                         @middle:	dc.b 8
0000D982 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D987 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D98C 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D991 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D996 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D99B F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D9A0 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D9A5 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D9AA 08                         @right:		dc.b 8
0000D9AB E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D9B0 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D9B5 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D9BA 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D9BF E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D9C4 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D9C9 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D9CE 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D9D4 00                         		even
0000D9D4 00                         		even
0000D9D4                            

0000D9D4                            ; ---------------------------------------------------------------------------
0000D9D4                            ; Object code execution subroutine
0000D9D4                            ; ---------------------------------------------------------------------------
0000D9D4                            

0000D9D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9D4                            

0000D9D4                            

0000D9D4                            ExecuteObjects:
0000D9D4 41F8 D000                  		lea	(v_objspace).w,a0 ; set address for object RAM
0000D9D8 7E7F                       		moveq	#$7F,d7
0000D9DA 7000                       		moveq	#0,d0
0000D9DC 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0000D9E2 6400                       		bhs.s	loc_D362
0000D9E4                            

0000D9E4                            loc_D348:
0000D9E4 1010                       		move.b	(a0),d0		; load object number from RAM
0000D9E6 6700                       		beq.s	loc_D358
0000D9E8 D040                       		add.w	d0,d0
0000D9EA D040                       		add.w	d0,d0
0000D9EC 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D9F0 4E91                       		jsr	(a1)		; run the object's code
0000D9F2 7000                       		moveq	#0,d0
0000D9F4                            

0000D9F4                            loc_D358:
0000D9F4 41E8 0040                  		lea	$40(a0),a0	; next object
0000D9F8 51CF FFEA                  		dbf	d7,loc_D348
0000D9FC 4E75                       		rts	
0000D9FE                            ; ===========================================================================
0000D9FE                            

0000D9FE                            loc_D362:
0000D9FE 7E1F                       		moveq	#$1F,d7
0000DA00 61E2                       		bsr.s	loc_D348
0000DA02 7E5F                       		moveq	#$5F,d7
0000DA04                            

0000DA04                            loc_D368:
0000DA04 7000                       		moveq	#0,d0
0000DA06 1010                       		move.b	(a0),d0
0000DA08 6700                       		beq.s	loc_D378
0000DA0A 4A28 0001                  		tst.b	obRender(a0)
0000DA0E 6A00                       		bpl.s	loc_D378
0000DA10 6100 0000                  		bsr.w	DisplaySprite
0000DA14                            

0000DA14                            loc_D378:
0000DA14 41E8 0040                  		lea	$40(a0),a0
0000DA18                            

0000DA18                            loc_D37C:
0000DA18 51CF FFEA                  		dbf	d7,loc_D368
0000DA1C 4E75                       		rts	
0000DA1E                            ; End of function ExecuteObjects
0000DA1E                            

0000DA1E                            ; ===========================================================================
0000DA1E                            ; ---------------------------------------------------------------------------
0000DA1E                            ; Object pointers
0000DA1E                            ; ---------------------------------------------------------------------------
0000DA1E                            Obj_Index:
0000DA1E                            		include	"_inc\Object Pointers.asm"
0000DA1E                            ; ---------------------------------------------------------------------------
0000DA1E                            ; Object pointers
0000DA1E                            ; ---------------------------------------------------------------------------
0000DA1E 0000 0000                  ptr_SonicPlayer:	dc.l SonicPlayer	; $01
0000DA22 0000 0000                  ptr_Obj02:		dc.l NullObject
0000DA26 0000 0000                  ptr_Obj03:		dc.l NullObject
0000DA2A 0000 0000                  ptr_Obj04:		dc.l NullObject
0000DA2E 0000 0000                  ptr_Obj05:		dc.l NullObject
0000DA32 0000 0000                  ptr_Obj06:		dc.l NullObject
0000DA36 0000 0000                  ptr_Obj07:		dc.l NullObject
0000DA3A 0000 0000                  ptr_Splash:		dc.l Splash		; $08
0000DA3E 0000 0000                  ptr_SonicSpecial:	dc.l SonicSpecial
0000DA42 0000 0000                  ptr_DrownCount:		dc.l DrownCount
0000DA46 0000 0000                  ptr_Pole:		dc.l Pole
0000DA4A 0000 0000                  ptr_FlapDoor:		dc.l FlapDoor
0000DA4E 0000 0000                  ptr_Signpost:		dc.l Signpost
0000DA52 0000 ACB4                  ptr_TitleSonic:		dc.l TitleSonic
0000DA56 0000 AD34                  ptr_PSBTM:		dc.l PSBTM
0000DA5A 0000 0000                  ptr_Obj10:		dc.l Obj10		; $10
0000DA5E 0000 79B4                  ptr_Bridge:		dc.l Bridge
0000DA62 0000 0000                  ptr_SpinningLight:	dc.l SpinningLight
0000DA66 0000 0000                  ptr_LavaMaker:		dc.l LavaMaker
0000DA6A 0000 0000                  ptr_LavaBall:		dc.l LavaBall
0000DA6E 0000 7FDE                  ptr_SwingingPlatform:	dc.l SwingingPlatform
0000DA72 0000 0000                  ptr_Harpoon:		dc.l Harpoon
0000DA76 0000 832E                  ptr_Helix:		dc.l Helix
0000DA7A 0000 84BE                  ptr_BasicPlatform:	dc.l BasicPlatform	; $18
0000DA7E 0000 8834                  ptr_Obj19:		dc.l Obj19
0000DA82 0000 889C                  ptr_CollapseLedge:	dc.l CollapseLedge
0000DA86 0000 0000                  ptr_WaterSurface:	dc.l WaterSurface
0000DA8A 0000 8E56                  ptr_Scenery:		dc.l Scenery
0000DA8E 0000 8EEA                  ptr_MagicSwitch:	dc.l MagicSwitch
0000DA92 0000 91D8                  ptr_BallHog:		dc.l BallHog
0000DA96 0000 9B7C                  ptr_Crabmeat:		dc.l Crabmeat
0000DA9A 0000 92A8                  ptr_Cannonball:		dc.l Cannonball		; $20
0000DA9E 0000 0000                  ptr_HUD:		dc.l HUD
0000DAA2 0000 9E6A                  ptr_BuzzBomber:		dc.l BuzzBomber
0000DAA6 0000 9FBE                  ptr_Missile:		dc.l Missile
0000DAAA 0000 937E                  ptr_MissileDissolve:	dc.l MissileDissolve
0000DAAE 0000 A1B2                  ptr_Rings:		dc.l Rings
0000DAB2 0000 A7A8                  ptr_Monitor:		dc.l Monitor
0000DAB6 0000 93EE                  ptr_ExplosionItem:	dc.l ExplosionItem
0000DABA 0000 95AE                  ptr_Animals:		dc.l Animals		; $28
0000DABE 0000 9A9E                  ptr_Points:		dc.l Points
0000DAC2 0000 8FC0                  ptr_AutoDoor:		dc.l AutoDoor
0000DAC6 0000 B1B8                  ptr_Chopper:		dc.l Chopper
0000DACA 0000 B272                  ptr_Jaws:		dc.l Jaws
0000DACE 0000 B33C                  ptr_Burrobot:		dc.l Burrobot
0000DAD2 0000 A992                  ptr_PowerUp:		dc.l PowerUp
0000DAD6 0000 B550                  ptr_LargeGrass:		dc.l LargeGrass
0000DADA 0000 BA36                  ptr_GlassBlock:		dc.l GlassBlock		; $30
0000DADE 0000 BD14                  ptr_ChainStomp:		dc.l ChainStomp
0000DAE2 0000 C3C6                  ptr_Button:		dc.l Button
0000DAE6 0000 C56A                  ptr_PushBlock:		dc.l PushBlock
0000DAEA 0000 C99E                  ptr_TitleCard:		dc.l TitleCard
0000DAEE 0000 B874                  ptr_GrassFire:		dc.l GrassFire
0000DAF2 0000 D4C4                  ptr_Spikes:		dc.l Spikes
0000DAF6 0000 A342                  ptr_RingLoss:		dc.l RingLoss
0000DAFA 0000 0000                  ptr_ShieldItem:		dc.l ShieldItem		; $38
0000DAFE 0000 CB50                  ptr_GameOverCard:	dc.l GameOverCard
0000DB02 0000 CC0E                  ptr_GotThroughCard:	dc.l GotThroughCard
0000DB06 0000 D6EC                  ptr_PurpleRock:		dc.l PurpleRock
0000DB0A 0000 D7B8                  ptr_SmashWall:		dc.l SmashWall
0000DB0E 0000 0000                  ptr_BossGreenHill:	dc.l BossGreenHill
0000DB12 0000 0000                  ptr_Prison:		dc.l Prison
0000DB16 0000 9482                  ptr_ExplosionBomb:	dc.l ExplosionBomb
0000DB1A 0000 0000                  ptr_MotoBug:		dc.l MotoBug		; $40
0000DB1E 0000 0000                  ptr_Springs:		dc.l Springs
0000DB22 0000 0000                  ptr_Newtron:		dc.l Newtron
0000DB26 0000 0000                  ptr_Roller:		dc.l Roller
0000DB2A 0000 0000                  ptr_EdgeWalls:		dc.l EdgeWalls
0000DB2E 0000 C032                  ptr_SideStomp:		dc.l SideStomp
0000DB32 0000 0000                  ptr_MarbleBrick:	dc.l MarbleBrick
0000DB36 0000 0000                  ptr_Bumper:		dc.l Bumper
0000DB3A 0000 0000                  ptr_BossBall:		dc.l BossBall		; $48
0000DB3E 0000 D75A                  ptr_WaterSound:		dc.l WaterSound
0000DB42 0000 0000                  ptr_VanishSonic:	dc.l VanishSonic
0000DB46 0000 A492                  ptr_GiantRing:		dc.l GiantRing
0000DB4A 0000 0000                  ptr_GeyserMaker:	dc.l GeyserMaker
0000DB4E 0000 0000                  ptr_LavaGeyser:		dc.l LavaGeyser
0000DB52 0000 0000                  ptr_LavaWall:		dc.l LavaWall
0000DB56 0000 0000                  ptr_Obj4F:		dc.l Obj4F
0000DB5A 0000 0000                  ptr_Yadrin:		dc.l Yadrin		; $50
0000DB5E 0000 0000                  ptr_SmashBlock:		dc.l SmashBlock
0000DB62 0000 0000                  ptr_MovingBlock:	dc.l MovingBlock
0000DB66 0000 89AC                  ptr_CollapseFloor:	dc.l CollapseFloor
0000DB6A 0000 0000                  ptr_LavaTag:		dc.l LavaTag
0000DB6E 0000 0000                  ptr_Basaran:		dc.l Basaran
0000DB72 0000 0000                  ptr_FloatingBlock:	dc.l FloatingBlock
0000DB76 0000 0000                  ptr_SpikeBall:		dc.l SpikeBall
0000DB7A 0000 0000                  ptr_BigSpikeBall:	dc.l BigSpikeBall	; $58
0000DB7E 0000 0000                  ptr_Elevator:		dc.l Elevator
0000DB82 0000 0000                  ptr_CirclingPlatform:	dc.l CirclingPlatform
0000DB86 0000 0000                  ptr_Staircase:		dc.l Staircase
0000DB8A 0000 0000                  ptr_Pylon:		dc.l Pylon
0000DB8E 0000 0000                  ptr_Fan:		dc.l Fan
0000DB92 0000 0000                  ptr_Seesaw:		dc.l Seesaw
0000DB96 0000 0000                  ptr_Bomb:		dc.l Bomb
0000DB9A 0000 0000                  ptr_Orbinaut:		dc.l Orbinaut		; $60
0000DB9E 0000 0000                  ptr_LabyrinthBlock:	dc.l LabyrinthBlock
0000DBA2 0000 0000                  ptr_Gargoyle:		dc.l Gargoyle
0000DBA6 0000 0000                  ptr_LabyrinthConvey:	dc.l LabyrinthConvey
0000DBAA 0000 0000                  ptr_Bubble:		dc.l Bubble
0000DBAE 0000 0000                  ptr_Waterfall:		dc.l Waterfall
0000DBB2 0000 0000                  ptr_Junction:		dc.l Junction
0000DBB6 0000 0000                  ptr_RunningDisc:	dc.l RunningDisc
0000DBBA 0000 0000                  ptr_Conveyor:		dc.l Conveyor		; $68
0000DBBE 0000 0000                  ptr_SpinPlatform:	dc.l SpinPlatform
0000DBC2 0000 0000                  ptr_Saws:		dc.l Saws
0000DBC6 0000 0000                  ptr_ScrapStomp:		dc.l ScrapStomp
0000DBCA 0000 0000                  ptr_VanishPlatform:	dc.l VanishPlatform
0000DBCE 0000 0000                  ptr_Flamethrower:	dc.l Flamethrower
0000DBD2 0000 0000                  ptr_Electro:		dc.l Electro
0000DBD6 0000 0000                  ptr_SpinConvey:		dc.l SpinConvey
0000DBDA 0000 0000                  ptr_Girder:		dc.l Girder		; $70
0000DBDE 0000 0000                  ptr_Invisibarrier:	dc.l Invisibarrier
0000DBE2 0000 0000                  ptr_Teleport:		dc.l Teleport
0000DBE6 0000 0000                  ptr_BossMarble:		dc.l BossMarble
0000DBEA 0000 0000                  ptr_BossFire:		dc.l BossFire
0000DBEE 0000 0000                  ptr_BossSpringYard:	dc.l BossSpringYard
0000DBF2 0000 0000                  ptr_BossBlock:		dc.l BossBlock
0000DBF6 0000 0000                  ptr_BossLabyrinth:	dc.l BossLabyrinth
0000DBFA 0000 0000                  ptr_Caterkiller:	dc.l Caterkiller	; $78
0000DBFE 0000 0000                  ptr_Lamppost:		dc.l Lamppost
0000DC02 0000 0000                  ptr_BossStarLight:	dc.l BossStarLight
0000DC06 0000 0000                  ptr_BossSpikeball:	dc.l BossSpikeball
0000DC0A 0000 A562                  ptr_RingFlash:		dc.l RingFlash
0000DC0E 0000 0000                  ptr_HiddenBonus:	dc.l HiddenBonus
0000DC12 0000 CE4A                  ptr_SSResult:		dc.l SSResult
0000DC16 0000 CFF2                  ptr_SSRChaos:		dc.l SSRChaos
0000DC1A 0000 4E5C                  ptr_ContScrItem:	dc.l ContScrItem	; $80
0000DC1E 0000 4F76                  ptr_ContSonic:		dc.l ContSonic
0000DC22 0000 0000                  ptr_ScrapEggman:	dc.l ScrapEggman
0000DC26 0000 0000                  ptr_FalseFloor:		dc.l FalseFloor
0000DC2A 0000 0000                  ptr_EggmanCylinder:	dc.l EggmanCylinder
0000DC2E 0000 0000                  ptr_BossFinal:		dc.l BossFinal
0000DC32 0000 0000                  ptr_BossPlasma:		dc.l BossPlasma
0000DC36 0000 53FC                  ptr_EndSonic:		dc.l EndSonic
0000DC3A 0000 5556                  ptr_EndChaos:		dc.l EndChaos		; $88
0000DC3E 0000 5630                  ptr_EndSTH:		dc.l EndSTH
0000DC42 0000 0000                  ptr_CreditsText:	dc.l CreditsText
0000DC46 0000 59FE                  ptr_EndEggman:		dc.l EndEggman
0000DC4A 0000 5ADE                  ptr_TryChaos:		dc.l TryChaos
0000DC4E                            

0000DC4E                            NullObject:
0000DC4E                            		;jmp	(DeleteObject).l	; It would be safer to have this instruction here, but instead it just falls through to ObjectFall
0000DC4E                            

0000DC4E =00000001                  id_SonicPlayer:		equ ((ptr_SonicPlayer-Obj_Index)/4)+1		; $01
0000DC4E =00000002                  id_Obj02:		equ ((ptr_Obj02-Obj_Index)/4)+1
0000DC4E =00000003                  id_Obj03:		equ ((ptr_Obj03-Obj_Index)/4)+1
0000DC4E =00000004                  id_Obj04:		equ ((ptr_Obj04-Obj_Index)/4)+1
0000DC4E =00000005                  id_Obj05:		equ ((ptr_Obj05-Obj_Index)/4)+1
0000DC4E =00000006                  id_Obj06:		equ ((ptr_Obj06-Obj_Index)/4)+1
0000DC4E =00000007                  id_Obj07:		equ ((ptr_Obj07-Obj_Index)/4)+1
0000DC4E =00000008                  id_Splash:		equ ((ptr_Splash-Obj_Index)/4)+1		; $08
0000DC4E =00000009                  id_SonicSpecial:	equ ((ptr_SonicSpecial-Obj_Index)/4)+1
0000DC4E =0000000A                  id_DrownCount:		equ ((ptr_DrownCount-Obj_Index)/4)+1
0000DC4E =0000000B                  id_Pole:		equ ((ptr_Pole-Obj_Index)/4)+1
0000DC4E =0000000C                  id_FlapDoor:		equ ((ptr_FlapDoor-Obj_Index)/4)+1
0000DC4E =0000000D                  id_Signpost:		equ ((ptr_Signpost-Obj_Index)/4)+1
0000DC4E =0000000E                  id_TitleSonic:		equ ((ptr_TitleSonic-Obj_Index)/4)+1
0000DC4E =0000000F                  id_PSBTM:		equ ((ptr_PSBTM-Obj_Index)/4)+1
0000DC4E =00000010                  id_Obj10:		equ ((ptr_Obj10-Obj_Index)/4)+1			; $10
0000DC4E =00000011                  id_Bridge:		equ ((ptr_Bridge-Obj_Index)/4)+1
0000DC4E =00000012                  id_SpinningLight:	equ ((ptr_SpinningLight-Obj_Index)/4)+1
0000DC4E =00000013                  id_LavaMaker:		equ ((ptr_LavaMaker-Obj_Index)/4)+1
0000DC4E =00000014                  id_LavaBall:		equ ((ptr_LavaBall-Obj_Index)/4)+1
0000DC4E =00000015                  id_SwingingPlatform:	equ ((ptr_SwingingPlatform-Obj_Index)/4)+1
0000DC4E =00000016                  id_Harpoon:		equ ((ptr_Harpoon-Obj_Index)/4)+1
0000DC4E =00000017                  id_Helix:		equ ((ptr_Helix-Obj_Index)/4)+1
0000DC4E =00000018                  id_BasicPlatform:	equ ((ptr_BasicPlatform-Obj_Index)/4)+1		; $18
0000DC4E =00000019                  id_Obj19:		equ ((ptr_Obj19-Obj_Index)/4)+1
0000DC4E =0000001A                  id_CollapseLedge:	equ ((ptr_CollapseLedge-Obj_Index)/4)+1
0000DC4E =0000001B                  id_WaterSurface:	equ ((ptr_WaterSurface-Obj_Index)/4)+1
0000DC4E =0000001C                  id_Scenery:		equ ((ptr_Scenery-Obj_Index)/4)+1
0000DC4E =0000001D                  id_MagicSwitch:		equ ((ptr_MagicSwitch-Obj_Index)/4)+1
0000DC4E =0000001E                  id_BallHog:		equ ((ptr_BallHog-Obj_Index)/4)+1
0000DC4E =0000001F                  id_Crabmeat:		equ ((ptr_Crabmeat-Obj_Index)/4)+1
0000DC4E =00000020                  id_Cannonball:		equ ((ptr_Cannonball-Obj_Index)/4)+1		; $20
0000DC4E =00000021                  id_HUD:			equ ((ptr_HUD-Obj_Index)/4)+1
0000DC4E =00000022                  id_BuzzBomber:		equ ((ptr_BuzzBomber-Obj_Index)/4)+1
0000DC4E =00000023                  id_Missile:		equ ((ptr_Missile-Obj_Index)/4)+1
0000DC4E =00000024                  id_MissileDissolve:	equ ((ptr_MissileDissolve-Obj_Index)/4)+1
0000DC4E =00000025                  id_Rings:		equ ((ptr_Rings-Obj_Index)/4)+1
0000DC4E =00000026                  id_Monitor:		equ ((ptr_Monitor-Obj_Index)/4)+1
0000DC4E =00000027                  id_ExplosionItem:	equ ((ptr_ExplosionItem-Obj_Index)/4)+1
0000DC4E =00000028                  id_Animals:		equ ((ptr_Animals-Obj_Index)/4)+1		; $28
0000DC4E =00000029                  id_Points:		equ ((ptr_Points-Obj_Index)/4)+1
0000DC4E =0000002A                  id_AutoDoor:		equ ((ptr_AutoDoor-Obj_Index)/4)+1
0000DC4E =0000002B                  id_Chopper:		equ ((ptr_Chopper-Obj_Index)/4)+1
0000DC4E =0000002C                  id_Jaws:		equ ((ptr_Jaws-Obj_Index)/4)+1
0000DC4E =0000002D                  id_Burrobot:		equ ((ptr_Burrobot-Obj_Index)/4)+1
0000DC4E =0000002E                  id_PowerUp:		equ ((ptr_PowerUp-Obj_Index)/4)+1
0000DC4E =0000002F                  id_LargeGrass:		equ ((ptr_LargeGrass-Obj_Index)/4)+1
0000DC4E =00000030                  id_GlassBlock:		equ ((ptr_GlassBlock-Obj_Index)/4)+1		; $30
0000DC4E =00000031                  id_ChainStomp:		equ ((ptr_ChainStomp-Obj_Index)/4)+1
0000DC4E =00000032                  id_Button:		equ ((ptr_Button-Obj_Index)/4)+1
0000DC4E =00000033                  id_PushBlock:		equ ((ptr_PushBlock-Obj_Index)/4)+1
0000DC4E =00000034                  id_TitleCard:		equ ((ptr_TitleCard-Obj_Index)/4)+1
0000DC4E =00000035                  id_GrassFire:		equ ((ptr_GrassFire-Obj_Index)/4)+1
0000DC4E =00000036                  id_Spikes:		equ ((ptr_Spikes-Obj_Index)/4)+1
0000DC4E =00000037                  id_RingLoss:		equ ((ptr_RingLoss-Obj_Index)/4)+1
0000DC4E =00000038                  id_ShieldItem:		equ ((ptr_ShieldItem-Obj_Index)/4)+1		; $38
0000DC4E =00000039                  id_GameOverCard:	equ ((ptr_GameOverCard-Obj_Index)/4)+1
0000DC4E =0000003A                  id_GotThroughCard:	equ ((ptr_GotThroughCard-Obj_Index)/4)+1
0000DC4E =0000003B                  id_PurpleRock:		equ ((ptr_PurpleRock-Obj_Index)/4)+1
0000DC4E =0000003C                  id_SmashWall:		equ ((ptr_SmashWall-Obj_Index)/4)+1
0000DC4E =0000003D                  id_BossGreenHill:	equ ((ptr_BossGreenHill-Obj_Index)/4)+1
0000DC4E =0000003E                  id_Prison:		equ ((ptr_Prison-Obj_Index)/4)+1
0000DC4E =0000003F                  id_ExplosionBomb:	equ ((ptr_ExplosionBomb-Obj_Index)/4)+1
0000DC4E =00000040                  id_MotoBug:		equ ((ptr_MotoBug-Obj_Index)/4)+1		; $40
0000DC4E =00000041                  id_Springs:		equ ((ptr_Springs-Obj_Index)/4)+1
0000DC4E =00000042                  id_Newtron:		equ ((ptr_Newtron-Obj_Index)/4)+1
0000DC4E =00000043                  id_Roller:		equ ((ptr_Roller-Obj_Index)/4)+1
0000DC4E =00000044                  id_EdgeWalls:		equ ((ptr_EdgeWalls-Obj_Index)/4)+1
0000DC4E =00000045                  id_SideStomp:		equ ((ptr_SideStomp-Obj_Index)/4)+1
0000DC4E =00000046                  id_MarbleBrick:		equ ((ptr_MarbleBrick-Obj_Index)/4)+1
0000DC4E =00000047                  id_Bumper:		equ ((ptr_Bumper-Obj_Index)/4)+1
0000DC4E =00000048                  id_BossBall:		equ ((ptr_BossBall-Obj_Index)/4)+1		; $48
0000DC4E =00000049                  id_WaterSound:		equ ((ptr_WaterSound-Obj_Index)/4)+1
0000DC4E =0000004A                  id_VanishSonic:		equ ((ptr_VanishSonic-Obj_Index)/4)+1
0000DC4E =0000004B                  id_GiantRing:		equ ((ptr_GiantRing-Obj_Index)/4)+1
0000DC4E =0000004C                  id_GeyserMaker:		equ ((ptr_GeyserMaker-Obj_Index)/4)+1
0000DC4E =0000004D                  id_LavaGeyser:		equ ((ptr_LavaGeyser-Obj_Index)/4)+1
0000DC4E =0000004E                  id_LavaWall:		equ ((ptr_LavaWall-Obj_Index)/4)+1
0000DC4E =0000004F                  id_Obj4F:		equ ((ptr_Obj4F-Obj_Index)/4)+1
0000DC4E =00000050                  id_Yadrin:		equ ((ptr_Yadrin-Obj_Index)/4)+1		; $50
0000DC4E =00000051                  id_SmashBlock:		equ ((ptr_SmashBlock-Obj_Index)/4)+1
0000DC4E =00000052                  id_MovingBlock:		equ ((ptr_MovingBlock-Obj_Index)/4)+1
0000DC4E =00000053                  id_CollapseFloor:	equ ((ptr_CollapseFloor-Obj_Index)/4)+1
0000DC4E =00000054                  id_LavaTag:		equ ((ptr_LavaTag-Obj_Index)/4)+1
0000DC4E =00000055                  id_Basaran:		equ ((ptr_Basaran-Obj_Index)/4)+1
0000DC4E =00000056                  id_FloatingBlock:	equ ((ptr_FloatingBlock-Obj_Index)/4)+1
0000DC4E =00000057                  id_SpikeBall:		equ ((ptr_SpikeBall-Obj_Index)/4)+1
0000DC4E =00000058                  id_BigSpikeBall:	equ ((ptr_BigSpikeBall-Obj_Index)/4)+1		; $58
0000DC4E =00000059                  id_Elevator:		equ ((ptr_Elevator-Obj_Index)/4)+1
0000DC4E =0000005A                  id_CirclingPlatform:	equ ((ptr_CirclingPlatform-Obj_Index)/4)+1
0000DC4E =0000005B                  id_Staircase:		equ ((ptr_Staircase-Obj_Index)/4)+1
0000DC4E =0000005C                  id_Pylon:		equ ((ptr_Pylon-Obj_Index)/4)+1
0000DC4E =0000005D                  id_Fan:			equ ((ptr_Fan-Obj_Index)/4)+1
0000DC4E =0000005E                  id_Seesaw:		equ ((ptr_Seesaw-Obj_Index)/4)+1
0000DC4E =0000005F                  id_Bomb:		equ ((ptr_Bomb-Obj_Index)/4)+1
0000DC4E =00000060                  id_Orbinaut:		equ ((ptr_Orbinaut-Obj_Index)/4)+1		; $60
0000DC4E =00000061                  id_LabyrinthBlock:	equ ((ptr_LabyrinthBlock-Obj_Index)/4)+1
0000DC4E =00000062                  id_Gargoyle:		equ ((ptr_Gargoyle-Obj_Index)/4)+1
0000DC4E =00000063                  id_LabyrinthConvey:	equ ((ptr_LabyrinthConvey-Obj_Index)/4)+1
0000DC4E =00000064                  id_Bubble:		equ ((ptr_Bubble-Obj_Index)/4)+1
0000DC4E =00000065                  id_Waterfall:		equ ((ptr_Waterfall-Obj_Index)/4)+1
0000DC4E =00000066                  id_Junction:		equ ((ptr_Junction-Obj_Index)/4)+1
0000DC4E =00000067                  id_RunningDisc:		equ ((ptr_RunningDisc-Obj_Index)/4)+1
0000DC4E =00000068                  id_Conveyor:		equ ((ptr_Conveyor-Obj_Index)/4)+1		; $68
0000DC4E =00000069                  id_SpinPlatform:	equ ((ptr_SpinPlatform-Obj_Index)/4)+1
0000DC4E =0000006A                  id_Saws:		equ ((ptr_Saws-Obj_Index)/4)+1
0000DC4E =0000006B                  id_ScrapStomp:		equ ((ptr_ScrapStomp-Obj_Index)/4)+1
0000DC4E =0000006C                  id_VanishPlatform:	equ ((ptr_VanishPlatform-Obj_Index)/4)+1
0000DC4E =0000006D                  id_Flamethrower:	equ ((ptr_Flamethrower-Obj_Index)/4)+1
0000DC4E =0000006E                  id_Electro:		equ ((ptr_Electro-Obj_Index)/4)+1
0000DC4E =0000006F                  id_SpinConvey:		equ ((ptr_SpinConvey-Obj_Index)/4)+1
0000DC4E =00000070                  id_Girder:		equ ((ptr_Girder-Obj_Index)/4)+1		; $70
0000DC4E =00000071                  id_Invisibarrier:	equ ((ptr_Invisibarrier-Obj_Index)/4)+1
0000DC4E =00000072                  id_Teleport:		equ ((ptr_Teleport-Obj_Index)/4)+1
0000DC4E =00000073                  id_BossMarble:		equ ((ptr_BossMarble-Obj_Index)/4)+1
0000DC4E =00000074                  id_BossFire:		equ ((ptr_BossFire-Obj_Index)/4)+1
0000DC4E =00000075                  id_BossSpringYard:	equ ((ptr_BossSpringYard-Obj_Index)/4)+1
0000DC4E =00000076                  id_BossBlock:		equ ((ptr_BossBlock-Obj_Index)/4)+1
0000DC4E =00000077                  id_BossLabyrinth:	equ ((ptr_BossLabyrinth-Obj_Index)/4)+1
0000DC4E =00000078                  id_Caterkiller:		equ ((ptr_Caterkiller-Obj_Index)/4)+1		; $78
0000DC4E =00000079                  id_Lamppost:		equ ((ptr_Lamppost-Obj_Index)/4)+1
0000DC4E =0000007A                  id_BossStarLight:	equ ((ptr_BossStarLight-Obj_Index)/4)+1
0000DC4E =0000007B                  id_BossSpikeball:	equ ((ptr_BossSpikeball-Obj_Index)/4)+1
0000DC4E =0000007C                  id_RingFlash:		equ ((ptr_RingFlash-Obj_Index)/4)+1
0000DC4E =0000007D                  id_HiddenBonus:		equ ((ptr_HiddenBonus-Obj_Index)/4)+1
0000DC4E =0000007E                  id_SSResult:		equ ((ptr_SSResult-Obj_Index)/4)+1
0000DC4E =0000007F                  id_SSRChaos:		equ ((ptr_SSRChaos-Obj_Index)/4)+1
0000DC4E =00000080                  id_ContScrItem:		equ ((ptr_ContScrItem-Obj_Index)/4)+1		; $80
0000DC4E =00000081                  id_ContSonic:		equ ((ptr_ContSonic-Obj_Index)/4)+1
0000DC4E =00000082                  id_ScrapEggman:		equ ((ptr_ScrapEggman-Obj_Index)/4)+1
0000DC4E =00000083                  id_FalseFloor:		equ ((ptr_FalseFloor-Obj_Index)/4)+1
0000DC4E =00000084                  id_EggmanCylinder:	equ ((ptr_EggmanCylinder-Obj_Index)/4)+1
0000DC4E =00000085                  id_BossFinal:		equ ((ptr_BossFinal-Obj_Index)/4)+1
0000DC4E =00000086                  id_BossPlasma:		equ ((ptr_BossPlasma-Obj_Index)/4)+1
0000DC4E =00000087                  id_EndSonic:		equ ((ptr_EndSonic-Obj_Index)/4)+1
0000DC4E =00000088                  id_EndChaos:		equ ((ptr_EndChaos-Obj_Index)/4)+1		; $88
0000DC4E =00000089                  id_EndSTH:		equ ((ptr_EndSTH-Obj_Index)/4)+1
0000DC4E =0000008A                  id_CreditsText:		equ ((ptr_CreditsText-Obj_Index)/4)+1
0000DC4E =0000008B                  id_EndEggman:		equ ((ptr_EndEggman-Obj_Index)/4)+1
0000DC4E =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000DC4E =0000008C                  id_TryChaos:		equ ((ptr_TryChaos-Obj_Index)/4)+1
0000DC4E                            

0000DC4E                            		include	"_incObj\sub ObjectFall.asm"
0000DC4E                            ; ---------------------------------------------------------------------------
0000DC4E                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DC4E                            ; ---------------------------------------------------------------------------
0000DC4E                            

0000DC4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC4E                            

0000DC4E                            

0000DC4E                            ObjectFall:
0000DC4E 2428 0008                  		move.l	obX(a0),d2
0000DC52 2628 000C                  		move.l	obY(a0),d3
0000DC56 3028 0010                  		move.w	obVelX(a0),d0
0000DC5A 48C0                       		ext.l	d0
0000DC5C E180                       		asl.l	#8,d0
0000DC5E D480                       		add.l	d0,d2
0000DC60 3028 0012                  		move.w	obVelY(a0),d0
0000DC64 0668 0038 0012             		addi.w	#$38,obVelY(a0)	; increase vertical speed
0000DC6A 48C0                       		ext.l	d0
0000DC6C E180                       		asl.l	#8,d0
0000DC6E D680                       		add.l	d0,d3
0000DC70 2142 0008                  		move.l	d2,obX(a0)
0000DC74 2143 000C                  		move.l	d3,obY(a0)
0000DC78 4E75                       		rts	
0000DC7A                            

0000DC7A                            ; End of function ObjectFall
0000DC7A                            ; End of function ObjectFall
0000DC7A                            		include	"_incObj\sub SpeedToPos.asm"
0000DC7A                            ; ---------------------------------------------------------------------------
0000DC7A                            ; Subroutine translating object	speed to update	object position
0000DC7A                            ; ---------------------------------------------------------------------------
0000DC7A                            

0000DC7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC7A                            

0000DC7A                            

0000DC7A                            SpeedToPos:
0000DC7A 2428 0008                  		move.l	obX(a0),d2
0000DC7E 2628 000C                  		move.l	obY(a0),d3
0000DC82 3028 0010                  		move.w	obVelX(a0),d0	; load horizontal speed
0000DC86 48C0                       		ext.l	d0
0000DC88 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DC8A D480                       		add.l	d0,d2		; add to x-axis	position
0000DC8C 3028 0012                  		move.w	obVelY(a0),d0	; load vertical	speed
0000DC90 48C0                       		ext.l	d0
0000DC92 E180                       		asl.l	#8,d0		; multiply by $100
0000DC94 D680                       		add.l	d0,d3		; add to y-axis	position
0000DC96 2142 0008                  		move.l	d2,obX(a0)	; update x-axis	position
0000DC9A 2143 000C                  		move.l	d3,obY(a0)	; update y-axis	position
0000DC9E 4E75                       		rts	
0000DCA0                            

0000DCA0                            ; End of function SpeedToPos
0000DCA0                            ; End of function SpeedToPos
0000DCA0                            		include	"_incObj\sub DisplaySprite.asm"
0000DCA0                            ; ---------------------------------------------------------------------------
0000DCA0                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DCA0                            ; ---------------------------------------------------------------------------
0000DCA0                            

0000DCA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCA0                            

0000DCA0                            

0000DCA0                            DisplaySprite:
0000DCA0 43F8 AC00                  		lea	(v_spritequeue).w,a1
0000DCA4 3028 0018                  		move.w	obPriority(a0),d0 ; get sprite priority
0000DCA8 E248                       		lsr.w	#1,d0
0000DCAA 0240 0380                  		andi.w	#$380,d0
0000DCAE D2C0                       		adda.w	d0,a1		; jump to position in queue
0000DCB0 0C51 007E                  		cmpi.w	#$7E,(a1)	; is this part of the queue full?
0000DCB4 6400                       		bcc.s	DSpr_Full	; if yes, branch
0000DCB6 5451                       		addq.w	#2,(a1)		; increment sprite count
0000DCB8 D2D1                       		adda.w	(a1),a1		; jump to empty position
0000DCBA 3288                       		move.w	a0,(a1)		; insert RAM address for object
0000DCBC                            

0000DCBC                            	DSpr_Full:
0000DCBC 4E75                       		rts	
0000DCBE                            

0000DCBE                            ; End of function DisplaySprite
0000DCBE                            

0000DCBE                            

0000DCBE                            ; ---------------------------------------------------------------------------
0000DCBE                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DCBE                            ; ---------------------------------------------------------------------------
0000DCBE                            

0000DCBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCBE                            

0000DCBE                            

0000DCBE                            DisplaySprite1:
0000DCBE 45F8 AC00                  		lea	(v_spritequeue).w,a2
0000DCC2 3029 0018                  		move.w	obPriority(a1),d0
0000DCC6 E248                       		lsr.w	#1,d0
0000DCC8 0240 0380                  		andi.w	#$380,d0
0000DCCC D4C0                       		adda.w	d0,a2
0000DCCE 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DCD2 6400                       		bcc.s	DSpr1_Full
0000DCD4 5452                       		addq.w	#2,(a2)
0000DCD6 D4D2                       		adda.w	(a2),a2
0000DCD8 3489                       		move.w	a1,(a2)
0000DCDA                            

0000DCDA                            	DSpr1_Full:
0000DCDA 4E75                       		rts	
0000DCDC                            

0000DCDC                            ; End of function DisplaySprite1
0000DCDC                            ; End of function DisplaySprite1
0000DCDC                            		include	"_incObj\sub DeleteObject.asm"
0000DCDC                            ; ---------------------------------------------------------------------------
0000DCDC                            ; Subroutine to	delete an object
0000DCDC                            ; ---------------------------------------------------------------------------
0000DCDC                            

0000DCDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCDC                            

0000DCDC                            

0000DCDC                            DeleteObject:
0000DCDC 2248                       		movea.l	a0,a1		; move object RAM address to (a1)
0000DCDE                            

0000DCDE                            DeleteChild:				; child objects are already in (a1)
0000DCDE 7200                       		moveq	#0,d1
0000DCE0 700F                       		moveq	#$F,d0
0000DCE2                            

0000DCE2                            	DelObj_Loop:
0000DCE2 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DCE4 51C8 FFFC                  		dbf	d0,DelObj_Loop	; repeat for length of object RAM
0000DCE8 4E75                       		rts	
0000DCEA                            

0000DCEA                            ; End of function DeleteObject
0000DCEA                            ; End of function DeleteObject
0000DCEA                            

0000DCEA                            ; ===========================================================================
0000DCEA 0000 0000                  BldSpr_ScrPos:	dc.l 0				; blank
0000DCEE 00FF F700                  		dc.l v_screenposx&$FFFFFF	; main screen x-position
0000DCF2 00FF F708                  		dc.l v_bgscreenposx&$FFFFFF	; background x-position	1
0000DCF6 00FF F718                  		dc.l v_bg3screenposx&$FFFFFF	; background x-position	2
0000DCFA                            ; ---------------------------------------------------------------------------
0000DCFA                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DCFA                            ; ---------------------------------------------------------------------------
0000DCFA                            

0000DCFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DCFA                            

0000DCFA                            

0000DCFA                            BuildSprites:
0000DCFA 45F8 F800                  		lea	(v_spritetablebuffer).w,a2 ; set address for sprite table
0000DCFE 7A00                       		moveq	#0,d5
0000DD00 49F8 AC00                  		lea	(v_spritequeue).w,a4
0000DD04 7E07                       		moveq	#7,d7
0000DD06                            

0000DD06                            	@priorityLoop:
0000DD06 4A54                       		tst.w	(a4)	; are there objects left to draw?
0000DD08 6700 0000                  		beq.w	@nextPriority	; if not, branch
0000DD0C 7C02                       		moveq	#2,d6
0000DD0E                            

0000DD0E                            	@objectLoop:
0000DD0E 3074 6000                  		movea.w	(a4,d6.w),a0	; load object ID
0000DD12 4A10                       		tst.b	(a0)		; if null, branch
0000DD14 6700 0000                  		beq.w	@skipObject
0000DD18 08A8 0007 0001             		bclr	#7,obRender(a0)		; set as not visible
0000DD1E                            

0000DD1E 1028 0001                  		move.b	obRender(a0),d0
0000DD22 1800                       		move.b	d0,d4
0000DD24 0240 000C                  		andi.w	#$C,d0		; get drawing coordinates
0000DD28 6700                       		beq.s	@screenCoords	; branch if 0 (screen coordinates)
0000DD2A 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DD2E                            	; check object bounds
0000DD2E 7000                       		moveq	#0,d0
0000DD30 1028 0019                  		move.b	obActWid(a0),d0
0000DD34 3628 0008                  		move.w	obX(a0),d3
0000DD38 9651                       		sub.w	(a1),d3
0000DD3A 3203                       		move.w	d3,d1
0000DD3C D240                       		add.w	d0,d1
0000DD3E 6B00 0000                  		bmi.w	@skipObject	; left edge out of bounds
0000DD42 3203                       		move.w	d3,d1
0000DD44 9240                       		sub.w	d0,d1
0000DD46 0C41 0140                  		cmpi.w	#320,d1
0000DD4A 6C00                       		bge.s	@skipObject	; right edge out of bounds
0000DD4C 0643 0080                  		addi.w	#128,d3		; VDP sprites start at 128px
0000DD50                            

0000DD50 0804 0004                  		btst	#4,d4		; is assume height flag on?
0000DD54 6700                       		beq.s	@assumeHeight	; if yes, branch
0000DD56 7000                       		moveq	#0,d0
0000DD58 1028 0016                  		move.b	obHeight(a0),d0
0000DD5C 3428 000C                  		move.w	obY(a0),d2
0000DD60 9469 0004                  		sub.w	4(a1),d2
0000DD64 3202                       		move.w	d2,d1
0000DD66 D240                       		add.w	d0,d1
0000DD68 6B00                       		bmi.s	@skipObject	; top edge out of bounds
0000DD6A 3202                       		move.w	d2,d1
0000DD6C 9240                       		sub.w	d0,d1
0000DD6E 0C41 00E0                  		cmpi.w	#224,d1
0000DD72 6C00                       		bge.s	@skipObject
0000DD74 0642 0080                  		addi.w	#128,d2		; VDP sprites start at 128px
0000DD78 6000                       		bra.s	@drawObject
0000DD7A                            ; ===========================================================================
0000DD7A                            

0000DD7A                            	@screenCoords:
0000DD7A 3428 000A                  		move.w	$A(a0),d2	; special variable for screen Y
0000DD7E 3628 0008                  		move.w	obX(a0),d3
0000DD82 6000                       		bra.s	@drawObject
0000DD84                            ; ===========================================================================
0000DD84                            

0000DD84                            	@assumeHeight:
0000DD84 3428 000C                  		move.w	obY(a0),d2
0000DD88 9469 0004                  		sub.w	obMap(a1),d2
0000DD8C 0642 0080                  		addi.w	#$80,d2
0000DD90 0C42 0060                  		cmpi.w	#$60,d2
0000DD94 6500                       		blo.s	@skipObject
0000DD96 0C42 0180                  		cmpi.w	#$180,d2
0000DD9A 6400                       		bhs.s	@skipObject
0000DD9C                            

0000DD9C                            	@drawObject:
0000DD9C 2268 0004                  		movea.l	obMap(a0),a1
0000DDA0 7200                       		moveq	#0,d1
0000DDA2 0804 0005                  		btst	#5,d4		; is static mappings flag on?
0000DDA6 6600                       		bne.s	@drawFrame	; if yes, branch
0000DDA8 1228 001A                  		move.b	obFrame(a0),d1
0000DDAC D201                       		add.b	d1,d1
0000DDAE D2F1 1000                  		adda.w	(a1,d1.w),a1	; get mappings frame address
0000DDB2 1219                       		move.b	(a1)+,d1	; number of sprite pieces
0000DDB4 5301                       		subq.b	#1,d1
0000DDB6 6B00                       		bmi.s	@setVisible
0000DDB8                            

0000DDB8                            	@drawFrame:
0000DDB8 6100 0000                  		bsr.w	BuildSpr_Draw	; write data from sprite pieces to buffer
0000DDBC                            

0000DDBC                            	@setVisible:
0000DDBC 08E8 0007 0001             		bset	#7,obRender(a0)		; set object as visible
0000DDC2                            

0000DDC2                            	@skipObject:
0000DDC2 5446                       		addq.w	#2,d6
0000DDC4 5554                       		subq.w	#2,(a4)			; number of objects left
0000DDC6 6600 FF46                  		bne.w	@objectLoop
0000DDCA                            

0000DDCA                            	@nextPriority:
0000DDCA 49EC 0080                  		lea	$80(a4),a4
0000DDCE 51CF FF36                  		dbf	d7,@priorityLoop
0000DDD2 11C5 F62C                  		move.b	d5,(v_spritecount).w
0000DDD6 0C05 0050                  		cmpi.b	#$50,d5
0000DDDA 6700                       		beq.s	@spriteLimit
0000DDDC 24BC 0000 0000             		move.l	#0,(a2)
0000DDE2 4E75                       		rts	
0000DDE4                            ; ===========================================================================
0000DDE4                            

0000DDE4                            	@spriteLimit:
0000DDE4 157C 0000 FFFB             		move.b	#0,-5(a2)	; set last sprite link
0000DDEA 4E75                       		rts	
0000DDEC                            ; End of function BuildSprites
0000DDEC                            

0000DDEC                            

0000DDEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDEC                            

0000DDEC                            

0000DDEC                            BuildSpr_Draw:
0000DDEC 3668 0002                  		movea.w	obGfx(a0),a3
0000DDF0 0804 0000                  		btst	#0,d4
0000DDF4 6600                       		bne.s	BuildSpr_FlipX
0000DDF6 0804 0001                  		btst	#1,d4
0000DDFA 6600 0000                  		bne.w	BuildSpr_FlipY
0000DDFE                            ; End of function BuildSpr_Draw
0000DDFE                            

0000DDFE                            

0000DDFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDFE                            

0000DDFE                            

0000DDFE                            BuildSpr_Normal:
0000DDFE 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000DE02 6700                       		beq.s	@return
0000DE04 1019                       		move.b	(a1)+,d0	; get y-offset
0000DE06 4880                       		ext.w	d0
0000DE08 D042                       		add.w	d2,d0		; add y-position
0000DE0A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000DE0C 14D9                       		move.b	(a1)+,(a2)+	; write sprite size
0000DE0E 5205                       		addq.b	#1,d5		; increase sprite counter
0000DE10 14C5                       		move.b	d5,(a2)+	; set as sprite link
0000DE12 1019                       		move.b	(a1)+,d0	; get art tile
0000DE14 E148                       		lsl.w	#8,d0
0000DE16 1019                       		move.b	(a1)+,d0
0000DE18 D04B                       		add.w	a3,d0		; add art tile offset
0000DE1A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000DE1C 1019                       		move.b	(a1)+,d0	; get x-offset
0000DE1E 4880                       		ext.w	d0
0000DE20 D043                       		add.w	d3,d0		; add x-position
0000DE22 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000DE26 6600                       		bne.s	@writeX
0000DE28 5240                       		addq.w	#1,d0
0000DE2A                            

0000DE2A                            	@writeX:
0000DE2A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000DE2C 51C9 FFD0                  		dbf	d1,BuildSpr_Normal	; process next sprite piece
0000DE30                            

0000DE30                            	@return:
0000DE30 4E75                       		rts	
0000DE32                            ; End of function BuildSpr_Normal
0000DE32                            

0000DE32                            ; ===========================================================================
0000DE32                            

0000DE32                            BuildSpr_FlipX:
0000DE32 0804 0001                  		btst	#1,d4		; is object also y-flipped?
0000DE36 6600 0000                  		bne.w	BuildSpr_FlipXY	; if yes, branch
0000DE3A                            

0000DE3A                            	@loop:
0000DE3A 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000DE3E 6700                       		beq.s	@return
0000DE40 1019                       		move.b	(a1)+,d0	; y position
0000DE42 4880                       		ext.w	d0
0000DE44 D042                       		add.w	d2,d0
0000DE46 34C0                       		move.w	d0,(a2)+
0000DE48 1819                       		move.b	(a1)+,d4	; size
0000DE4A 14C4                       		move.b	d4,(a2)+	
0000DE4C 5205                       		addq.b	#1,d5		; link
0000DE4E 14C5                       		move.b	d5,(a2)+
0000DE50 1019                       		move.b	(a1)+,d0	; art tile
0000DE52 E148                       		lsl.w	#8,d0
0000DE54 1019                       		move.b	(a1)+,d0	
0000DE56 D04B                       		add.w	a3,d0
0000DE58 0A40 0800                  		eori.w	#$800,d0	; toggle flip-x in VDP
0000DE5C 34C0                       		move.w	d0,(a2)+	; write to buffer
0000DE5E 1019                       		move.b	(a1)+,d0	; get x-offset
0000DE60 4880                       		ext.w	d0
0000DE62 4440                       		neg.w	d0			; negate it
0000DE64 D804                       		add.b	d4,d4		; calculate flipped position by size
0000DE66 0244 0018                  		andi.w	#$18,d4
0000DE6A 5044                       		addq.w	#8,d4
0000DE6C 9044                       		sub.w	d4,d0
0000DE6E D043                       		add.w	d3,d0
0000DE70 0240 01FF                  		andi.w	#$1FF,d0	; keep within 512px
0000DE74 6600                       		bne.s	@writeX
0000DE76 5240                       		addq.w	#1,d0
0000DE78                            

0000DE78                            	@writeX:
0000DE78 34C0                       		move.w	d0,(a2)+	; write to buffer
0000DE7A 51C9 FFBE                  		dbf	d1,@loop		; process next sprite piece
0000DE7E                            

0000DE7E                            	@return:
0000DE7E 4E75                       		rts	
0000DE80                            ; ===========================================================================
0000DE80                            

0000DE80                            BuildSpr_FlipY:
0000DE80 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000DE84 6700                       		beq.s	@return
0000DE86 1019                       		move.b	(a1)+,d0	; get y-offset
0000DE88 1811                       		move.b	(a1),d4		; get size
0000DE8A 4880                       		ext.w	d0
0000DE8C 4440                       		neg.w	d0		; negate y-offset
0000DE8E E70C                       		lsl.b	#3,d4	; calculate flip offset
0000DE90 0244 0018                  		andi.w	#$18,d4
0000DE94 5044                       		addq.w	#8,d4
0000DE96 9044                       		sub.w	d4,d0
0000DE98 D042                       		add.w	d2,d0	; add y-position
0000DE9A 34C0                       		move.w	d0,(a2)+	; write to buffer
0000DE9C 14D9                       		move.b	(a1)+,(a2)+	; size
0000DE9E 5205                       		addq.b	#1,d5
0000DEA0 14C5                       		move.b	d5,(a2)+	; link
0000DEA2 1019                       		move.b	(a1)+,d0	; art tile
0000DEA4 E148                       		lsl.w	#8,d0
0000DEA6 1019                       		move.b	(a1)+,d0
0000DEA8 D04B                       		add.w	a3,d0
0000DEAA 0A40 1000                  		eori.w	#$1000,d0	; toggle flip-y in VDP
0000DEAE 34C0                       		move.w	d0,(a2)+
0000DEB0 1019                       		move.b	(a1)+,d0	; x-position
0000DEB2 4880                       		ext.w	d0
0000DEB4 D043                       		add.w	d3,d0
0000DEB6 0240 01FF                  		andi.w	#$1FF,d0
0000DEBA 6600                       		bne.s	@writeX
0000DEBC 5240                       		addq.w	#1,d0
0000DEBE                            

0000DEBE                            	@writeX:
0000DEBE 34C0                       		move.w	d0,(a2)+	; write to buffer
0000DEC0 51C9 FFBE                  		dbf	d1,BuildSpr_FlipY	; process next sprite piece
0000DEC4                            

0000DEC4                            	@return:
0000DEC4 4E75                       		rts	
0000DEC6                            ; ===========================================================================
0000DEC6                            

0000DEC6                            BuildSpr_FlipXY:
0000DEC6 0C05 0050                  		cmpi.b	#$50,d5		; check sprite limit
0000DECA 6700                       		beq.s	@return
0000DECC 1019                       		move.b	(a1)+,d0	; calculated flipped y
0000DECE 1811                       		move.b	(a1),d4
0000DED0 4880                       		ext.w	d0
0000DED2 4440                       		neg.w	d0
0000DED4 E70C                       		lsl.b	#3,d4
0000DED6 0244 0018                  		andi.w	#$18,d4
0000DEDA 5044                       		addq.w	#8,d4
0000DEDC 9044                       		sub.w	d4,d0
0000DEDE D042                       		add.w	d2,d0
0000DEE0 34C0                       		move.w	d0,(a2)+	; write to buffer
0000DEE2 1819                       		move.b	(a1)+,d4	; size
0000DEE4 14C4                       		move.b	d4,(a2)+	; link
0000DEE6 5205                       		addq.b	#1,d5
0000DEE8 14C5                       		move.b	d5,(a2)+	; art tile
0000DEEA 1019                       		move.b	(a1)+,d0
0000DEEC E148                       		lsl.w	#8,d0
0000DEEE 1019                       		move.b	(a1)+,d0
0000DEF0 D04B                       		add.w	a3,d0
0000DEF2 0A40 1800                  		eori.w	#$1800,d0	; toggle flip-x/y in VDP
0000DEF6 34C0                       		move.w	d0,(a2)+
0000DEF8 1019                       		move.b	(a1)+,d0	; calculate flipped x
0000DEFA 4880                       		ext.w	d0
0000DEFC 4440                       		neg.w	d0
0000DEFE D804                       		add.b	d4,d4
0000DF00 0244 0018                  		andi.w	#$18,d4
0000DF04 5044                       		addq.w	#8,d4
0000DF06 9044                       		sub.w	d4,d0
0000DF08 D043                       		add.w	d3,d0
0000DF0A 0240 01FF                  		andi.w	#$1FF,d0
0000DF0E 6600                       		bne.s	@writeX
0000DF10 5240                       		addq.w	#1,d0
0000DF12                            

0000DF12                            	@writeX:
0000DF12 34C0                       		move.w	d0,(a2)+	; write to buffer
0000DF14 51C9 FFB0                  		dbf	d1,BuildSpr_FlipXY	; process next sprite piece
0000DF18                            

0000DF18                            	@return:
0000DF18 4E75                       		rts	
0000DF1A                            

0000DF1A                            		include	"_incObj\sub ChkObjectVisible.asm"
0000DF1A                            ; ---------------------------------------------------------------------------
0000DF1A                            ; Subroutine to	check if an object is off screen
0000DF1A                            

0000DF1A                            ; output:
0000DF1A                            ;	d0 = flag set if object is off screen
0000DF1A                            ; ---------------------------------------------------------------------------
0000DF1A                            

0000DF1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF1A                            

0000DF1A                            

0000DF1A                            ChkObjectVisible:
0000DF1A 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000DF1E 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000DF22 6B00                       		bmi.s	@offscreen
0000DF24 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DF28 6C00                       		bge.s	@offscreen	; if not, branch
0000DF2A                            

0000DF2A 3228 000C                  		move.w	obY(a0),d1	; get object y-position
0000DF2E 9278 F704                  		sub.w	(v_screenposy).w,d1 ; subtract screen y-position
0000DF32 6B00                       		bmi.s	@offscreen
0000DF34 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DF38 6C00                       		bge.s	@offscreen	; if not, branch
0000DF3A                            

0000DF3A 7000                       		moveq	#0,d0		; set flag to 0
0000DF3C 4E75                       		rts	
0000DF3E                            

0000DF3E                            	@offscreen:
0000DF3E 7001                       		moveq	#1,d0		; set flag to 1
0000DF40 4E75                       		rts	
0000DF42                            ; End of function ChkObjectVisible
0000DF42                            

0000DF42                            ; ---------------------------------------------------------------------------
0000DF42                            ; Subroutine to	check if an object is off screen
0000DF42                            ; More precise than above subroutine, taking width into account
0000DF42                            

0000DF42                            ; output:
0000DF42                            ;	d0 = flag set if object is off screen
0000DF42                            ; ---------------------------------------------------------------------------
0000DF42                            

0000DF42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF42                            

0000DF42                            

0000DF42                            ChkPartiallyVisible:
0000DF42 7200                       		moveq	#0,d1
0000DF44 1228 0019                  		move.b	obActWid(a0),d1
0000DF48 3028 0008                  		move.w	obX(a0),d0	; get object x-position
0000DF4C 9078 F700                  		sub.w	(v_screenposx).w,d0 ; subtract screen x-position
0000DF50 D041                       		add.w	d1,d0		; add object width
0000DF52 6B00                       		bmi.s	@offscreen2
0000DF54 D241                       		add.w	d1,d1
0000DF56 9041                       		sub.w	d1,d0
0000DF58 0C40 0140                  		cmpi.w	#320,d0
0000DF5C 6C00                       		bge.s	@offscreen2
0000DF5E                            

0000DF5E 3228 000C                  		move.w	obY(a0),d1
0000DF62 9278 F704                  		sub.w	(v_screenposy).w,d1
0000DF66 6B00                       		bmi.s	@offscreen2
0000DF68 0C41 00E0                  		cmpi.w	#224,d1
0000DF6C 6C00                       		bge.s	@offscreen2
0000DF6E                            

0000DF6E 7000                       		moveq	#0,d0
0000DF70 4E75                       		rts	
0000DF72                            

0000DF72                            	@offscreen2:
0000DF72 7001                       		moveq	#1,d0
0000DF74 4E75                       		rts	
0000DF76                            ; End of function ChkPartiallyVisible
0000DF76                            ; End of function ChkPartiallyVisible
0000DF76                            

0000DF76                            ; ---------------------------------------------------------------------------
0000DF76                            ; Subroutine to	load a level's objects
0000DF76                            ; ---------------------------------------------------------------------------
0000DF76                            

0000DF76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DF76                            

0000DF76                            

0000DF76                            ObjPosLoad:
0000DF76 7000                       		moveq	#0,d0
0000DF78 1038 F76C                  		move.b	(v_opl_routine).w,d0
0000DF7C 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DF80 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DF84                            ; End of function ObjPosLoad
0000DF84                            

0000DF84                            ; ===========================================================================
0000DF84 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DF86 0000                       		dc.w OPL_Next-OPL_Index
0000DF88                            ; ===========================================================================
0000DF88                            

0000DF88                            OPL_Main:
0000DF88 5438 F76C                  		addq.b	#2,(v_opl_routine).w
0000DF8C 3038 FE10                  		move.w	(v_zone).w,d0
0000DF90 ED08                       		lsl.b	#6,d0
0000DF92 E848                       		lsr.w	#4,d0
0000DF94 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DF9A 2248                       		movea.l	a0,a1
0000DF9C D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DFA0 21C8 F770                  		move.l	a0,(v_opl_data).w
0000DFA4 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000DFA8 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DFAC 21C9 F778                  		move.l	a1,(v_opl_data+8).w
0000DFB0 21C9 F77C                  		move.l	a1,(v_opl_data+$C).w
0000DFB4 45F8 FC00                  		lea	(v_objstate).w,a2
0000DFB8 34FC 0101                  		move.w	#$101,(a2)+
0000DFBC 303C 005E                  		move.w	#$5E,d0
0000DFC0                            

0000DFC0                            OPL_ClrList:
0000DFC0 429A                       		clr.l	(a2)+
0000DFC2 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DFC6                            

0000DFC6 45F8 FC00                  		lea	(v_objstate).w,a2
0000DFCA 7400                       		moveq	#0,d2
0000DFCC 3C38 F700                  		move.w	(v_screenposx).w,d6
0000DFD0 0446 0080                  		subi.w	#$80,d6
0000DFD4 6400                       		bhs.s	loc_D93C
0000DFD6 7C00                       		moveq	#0,d6
0000DFD8                            

0000DFD8                            loc_D93C:
0000DFD8 0246 FF80                  		andi.w	#$FF80,d6
0000DFDC 2078 F770                  		movea.l	(v_opl_data).w,a0
0000DFE0                            

0000DFE0                            loc_D944:
0000DFE0 BC50                       		cmp.w	(a0),d6
0000DFE2 6300                       		bls.s	loc_D956
0000DFE4 4A28 0004                  		tst.b	4(a0)
0000DFE8 6A00                       		bpl.s	loc_D952
0000DFEA 1412                       		move.b	(a2),d2
0000DFEC 5212                       		addq.b	#1,(a2)
0000DFEE                            

0000DFEE                            loc_D952:
0000DFEE 5C48                       		addq.w	#6,a0
0000DFF0 60EE                       		bra.s	loc_D944
0000DFF2                            ; ===========================================================================
0000DFF2                            

0000DFF2                            loc_D956:
0000DFF2 21C8 F770                  		move.l	a0,(v_opl_data).w
0000DFF6 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000DFFA 0446 0080                  		subi.w	#$80,d6
0000DFFE 6500                       		blo.s	loc_D976
0000E000                            

0000E000                            loc_D964:
0000E000 BC50                       		cmp.w	(a0),d6
0000E002 6300                       		bls.s	loc_D976
0000E004 4A28 0004                  		tst.b	4(a0)
0000E008 6A00                       		bpl.s	loc_D972
0000E00A 522A 0001                  		addq.b	#1,1(a2)
0000E00E                            

0000E00E                            loc_D972:
0000E00E 5C48                       		addq.w	#6,a0
0000E010 60EE                       		bra.s	loc_D964
0000E012                            ; ===========================================================================
0000E012                            

0000E012                            loc_D976:
0000E012 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000E016 31FC FFFF F76E             		move.w	#-1,(v_opl_screen).w
0000E01C                            

0000E01C                            OPL_Next:
0000E01C 45F8 FC00                  		lea	(v_objstate).w,a2
0000E020 7400                       		moveq	#0,d2
0000E022 3C38 F700                  		move.w	(v_screenposx).w,d6
0000E026 0246 FF80                  		andi.w	#$FF80,d6
0000E02A BC78 F76E                  		cmp.w	(v_opl_screen).w,d6
0000E02E 6700 0000                  		beq.w	locret_DA3A
0000E032 6C00                       		bge.s	loc_D9F6
0000E034 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000E038 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000E03C 0446 0080                  		subi.w	#$80,d6
0000E040 6500                       		blo.s	loc_D9D2
0000E042                            

0000E042                            loc_D9A6:
0000E042 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E046 6C00                       		bge.s	loc_D9D2
0000E048 5D48                       		subq.w	#6,a0
0000E04A 4A28 0004                  		tst.b	4(a0)
0000E04E 6A00                       		bpl.s	loc_D9BC
0000E050 532A 0001                  		subq.b	#1,1(a2)
0000E054 142A 0001                  		move.b	1(a2),d2
0000E058                            

0000E058                            loc_D9BC:
0000E058 6100 0000                  		bsr.w	loc_DA3C
0000E05C 6600                       		bne.s	loc_D9C6
0000E05E 5D48                       		subq.w	#6,a0
0000E060 60E0                       		bra.s	loc_D9A6
0000E062                            ; ===========================================================================
0000E062                            

0000E062                            loc_D9C6:
0000E062 4A28 0004                  		tst.b	4(a0)
0000E066 6A00                       		bpl.s	loc_D9D0
0000E068 522A 0001                  		addq.b	#1,1(a2)
0000E06C                            

0000E06C                            loc_D9D0:
0000E06C 5C48                       		addq.w	#6,a0
0000E06E                            

0000E06E                            loc_D9D2:
0000E06E 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000E072 2078 F770                  		movea.l	(v_opl_data).w,a0
0000E076 0646 0300                  		addi.w	#$300,d6
0000E07A                            

0000E07A                            loc_D9DE:
0000E07A BC68 FFFA                  		cmp.w	-6(a0),d6
0000E07E 6E00                       		bgt.s	loc_D9F0
0000E080 4A28 FFFE                  		tst.b	-2(a0)
0000E084 6A00                       		bpl.s	loc_D9EC
0000E086 5312                       		subq.b	#1,(a2)
0000E088                            

0000E088                            loc_D9EC:
0000E088 5D48                       		subq.w	#6,a0
0000E08A 60EE                       		bra.s	loc_D9DE
0000E08C                            ; ===========================================================================
0000E08C                            

0000E08C                            loc_D9F0:
0000E08C 21C8 F770                  		move.l	a0,(v_opl_data).w
0000E090 4E75                       		rts	
0000E092                            ; ===========================================================================
0000E092                            

0000E092                            loc_D9F6:
0000E092 31C6 F76E                  		move.w	d6,(v_opl_screen).w
0000E096 2078 F770                  		movea.l	(v_opl_data).w,a0
0000E09A 0646 0280                  		addi.w	#$280,d6
0000E09E                            

0000E09E                            loc_DA02:
0000E09E BC50                       		cmp.w	(a0),d6
0000E0A0 6300                       		bls.s	loc_DA16
0000E0A2 4A28 0004                  		tst.b	4(a0)
0000E0A6 6A00                       		bpl.s	loc_DA10
0000E0A8 1412                       		move.b	(a2),d2
0000E0AA 5212                       		addq.b	#1,(a2)
0000E0AC                            

0000E0AC                            loc_DA10:
0000E0AC 6100 0000                  		bsr.w	loc_DA3C
0000E0B0 67EC                       		beq.s	loc_DA02
0000E0B2                            

0000E0B2                            loc_DA16:
0000E0B2 21C8 F770                  		move.l	a0,(v_opl_data).w
0000E0B6 2078 F774                  		movea.l	(v_opl_data+4).w,a0
0000E0BA 0446 0300                  		subi.w	#$300,d6
0000E0BE 6500                       		blo.s	loc_DA36
0000E0C0                            

0000E0C0                            loc_DA24:
0000E0C0 BC50                       		cmp.w	(a0),d6
0000E0C2 6300                       		bls.s	loc_DA36
0000E0C4 4A28 0004                  		tst.b	4(a0)
0000E0C8 6A00                       		bpl.s	loc_DA32
0000E0CA 522A 0001                  		addq.b	#1,1(a2)
0000E0CE                            

0000E0CE                            loc_DA32:
0000E0CE 5C48                       		addq.w	#6,a0
0000E0D0 60EE                       		bra.s	loc_DA24
0000E0D2                            ; ===========================================================================
0000E0D2                            

0000E0D2                            loc_DA36:
0000E0D2 21C8 F774                  		move.l	a0,(v_opl_data+4).w
0000E0D6                            

0000E0D6                            locret_DA3A:
0000E0D6 4E75                       		rts	
0000E0D8                            ; ===========================================================================
0000E0D8                            

0000E0D8                            loc_DA3C:
0000E0D8 4A28 0004                  		tst.b	4(a0)
0000E0DC 6A00                       		bpl.s	OPL_MakeItem
0000E0DE 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E0E4 6700                       		beq.s	OPL_MakeItem
0000E0E6 5C48                       		addq.w	#6,a0
0000E0E8 7000                       		moveq	#0,d0
0000E0EA 4E75                       		rts	
0000E0EC                            ; ===========================================================================
0000E0EC                            

0000E0EC                            OPL_MakeItem:
0000E0EC 6100 0000                  		bsr.w	FindFreeObj
0000E0F0 6600                       		bne.s	locret_DA8A
0000E0F2 3358 0008                  		move.w	(a0)+,obX(a1)
0000E0F6 3018                       		move.w	(a0)+,d0
0000E0F8 3200                       		move.w	d0,d1
0000E0FA 0240 0FFF                  		andi.w	#$FFF,d0
0000E0FE 3340 000C                  		move.w	d0,obY(a1)
0000E102 E559                       		rol.w	#2,d1
0000E104 0201 0003                  		andi.b	#3,d1
0000E108 1341 0001                  		move.b	d1,obRender(a1)
0000E10C 1341 0022                  		move.b	d1,obStatus(a1)
0000E110 1018                       		move.b	(a0)+,d0
0000E112 6A00                       		bpl.s	loc_DA80
0000E114 0200 007F                  		andi.b	#$7F,d0
0000E118 1342 0023                  		move.b	d2,obRespawnNo(a1)
0000E11C                            

0000E11C                            loc_DA80:
0000E11C 1340 0000                  		move.b	d0,0(a1)
0000E120 1358 0028                  		move.b	(a0)+,obSubtype(a1)
0000E124 7000                       		moveq	#0,d0
0000E126                            

0000E126                            locret_DA8A:
0000E126 4E75                       		rts	
0000E128                            

0000E128                            		include	"_incObj\sub FindFreeObj.asm"
0000E128                            ; ---------------------------------------------------------------------------
0000E128                            ; Subroutine to find a free object space
0000E128                            

0000E128                            ; output:
0000E128                            ;	a1 = free position in object RAM
0000E128                            ; ---------------------------------------------------------------------------
0000E128                            

0000E128                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E128                            

0000E128                            

0000E128                            FindFreeObj:
0000E128 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; start address for object RAM
0000E12C 303C 005F                  		move.w	#$5F,d0
0000E130                            

0000E130                            	FFree_Loop:
0000E130 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E132 6700                       		beq.s	FFree_Found	; if yes, branch
0000E134 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E138 51C8 FFF6                  		dbf	d0,FFree_Loop	; repeat $5F times
0000E13C                            

0000E13C                            	FFree_Found:
0000E13C 4E75                       		rts	
0000E13E                            

0000E13E                            ; End of function FindFreeObj
0000E13E                            

0000E13E                            

0000E13E                            ; ---------------------------------------------------------------------------
0000E13E                            ; Subroutine to find a free object space AFTER the current one
0000E13E                            

0000E13E                            ; output:
0000E13E                            ;	a1 = free position in object RAM
0000E13E                            ; ---------------------------------------------------------------------------
0000E13E                            

0000E13E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E13E                            

0000E13E                            

0000E13E                            FindNextFreeObj:
0000E13E 2248                       		movea.l	a0,a1
0000E140 303C F000                  		move.w	#v_lvlobjend&$FFFF,d0
0000E144 9048                       		sub.w	a0,d0
0000E146 EC48                       		lsr.w	#6,d0
0000E148 5340                       		subq.w	#1,d0
0000E14A 6500                       		bcs.s	NFree_Found
0000E14C                            

0000E14C                            	NFree_Loop:
0000E14C 4A11                       		tst.b	(a1)
0000E14E 6700                       		beq.s	NFree_Found
0000E150 43E9 0040                  		lea	$40(a1),a1
0000E154 51C8 FFF6                  		dbf	d0,NFree_Loop
0000E158                            

0000E158                            	NFree_Found:
0000E158 4E75                       		rts	
0000E15A                            

0000E15A                            ; End of function FindNextFreeObj
0000E15A                            ; End of function FindNextFreeObj
0000E15A                            		include	"_incObj\41 Springs.asm"
0000E15A                            ; ---------------------------------------------------------------------------
0000E15A                            ; Object 41 - springs
0000E15A                            ; ---------------------------------------------------------------------------
0000E15A                            

0000E15A                            Springs:
0000E15A 7000                       		moveq	#0,d0
0000E15C 1028 0024                  		move.b	obRoutine(a0),d0
0000E160 323B 0000                  		move.w	Spring_Index(pc,d0.w),d1
0000E164 4EBB 1000                  		jsr	Spring_Index(pc,d1.w)
0000E168 6100 FB36                  		bsr.w	DisplaySprite
0000E18A 4E75                       		rts	
0000E18C                            ; ===========================================================================
0000E18C 0000                       Spring_Index:	dc.w Spring_Main-Spring_Index
0000E18E 0000                       		dc.w Spring_Up-Spring_Index
0000E190 0000                       		dc.w Spring_AniUp-Spring_Index
0000E192 0000                       		dc.w Spring_ResetUp-Spring_Index
0000E194 0000                       		dc.w Spring_LR-Spring_Index
0000E196 0000                       		dc.w Spring_AniLR-Spring_Index
0000E198 0000                       		dc.w Spring_ResetLR-Spring_Index
0000E19A 0000                       		dc.w Spring_Dwn-Spring_Index
0000E19C 0000                       		dc.w Spring_AniDwn-Spring_Index
0000E19E 0000                       		dc.w Spring_ResetDwn-Spring_Index
0000E1A0                            

0000E1A0 =00000030                  spring_pow:	equ $30			; power of current spring
0000E1A0                            

0000E1A0 F000                       Spring_Powers:	dc.w -$1000		; power	of red spring
0000E1A2 F600                       		dc.w -$A00		; power	of yellow spring
0000E1A4                            ; ===========================================================================
0000E1A4                            

0000E1A4                            Spring_Main:	; Routine 0
0000E1A4 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E1A8 217C 0000 0000 0004        		move.l	#Map_Spring,obMap(a0)
0000E1B0 317C 0523 0002             		move.w	#$523,obGfx(a0)
0000E1B6 0028 0004 0001             		ori.b	#4,obRender(a0)
0000E1BC 117C 0010 0019             		move.b	#$10,obActWid(a0)
0000E1C2 117C 0004 0018             		move.b	#4,obPriority(a0)
0000E1C8 1028 0028                  		move.b	obSubtype(a0),d0
0000E1CC 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E1D0 6700                       		beq.s	Spring_NotLR	; if not, branch
0000E1D2                            

0000E1D2 117C 0008 0024             		move.b	#8,obRoutine(a0) ; use "Spring_LR" routine
0000E1D8 117C 0001 001C             		move.b	#1,obAnim(a0)
0000E1DE 117C 0003 001A             		move.b	#3,obFrame(a0)
0000E1E4 317C 0533 0002             		move.w	#$533,obGfx(a0)
0000E1EA 117C 0008 0019             		move.b	#8,obActWid(a0)
0000E1F0                            

0000E1F0                            	Spring_NotLR:
0000E1F0 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E1F4 6700                       		beq.s	Spring_NotDwn	; if not, branch
0000E1F6                            

0000E1F6 117C 000E 0024             		move.b	#$E,obRoutine(a0) ; use "Spring_Dwn" routine
0000E1FC 08E8 0001 0022             		bset	#1,obStatus(a0)
0000E202                            

0000E202                            	Spring_NotDwn:
0000E202 0800 0001                  		btst	#1,d0
0000E206 6700                       		beq.s	loc_DB72
0000E208 08E8 0005 0002             		bset	#5,obGfx(a0)
0000E20E                            

0000E20E                            loc_DB72:
0000E20E 0240 000F                  		andi.w	#$F,d0
0000E212 317B 008C 0030             		move.w	Spring_Powers(pc,d0.w),spring_pow(a0)
0000E218 4E75                       		rts	
0000E21A                            ; ===========================================================================
0000E21A                            

0000E21A                            Spring_Up:	; Routine 2
0000E21A 323C 001B                  		move.w	#$1B,d1
0000E21E 343C 0008                  		move.w	#8,d2
0000E222 363C 0010                  		move.w	#$10,d3
0000E226 3828 0008                  		move.w	obX(a0),d4
0000E22A 6100 0000                  		bsr.w	SolidObject
0000E22E 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic on top of the spring?
0000E232 6600                       		bne.s	Spring_BounceUp	; if yes, branch
0000E234 4E75                       		rts	
0000E236                            ; ===========================================================================
0000E236                            

0000E236                            Spring_BounceUp:
0000E236 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E23A 5069 000C                  		addq.w	#8,obY(a1)
0000E23E 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1) ; move Sonic upwards
0000E244 08E9 0001 0022             		bset	#1,obStatus(a1)
0000E24A 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E250 137C 0000 001C             		move.b	#id_Spring,obAnim(a1) ; use "bouncing" animation
0000E256 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000E25C 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E262 4228 0025                  		clr.b	obSolid(a0)
0000E266 303C 0000                  		move.w	#sfx_Spring,d0
0000E26A 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play spring sound
0000E270                            

0000E270                            Spring_AniUp:	; Routine 4
0000E270 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000E276 6000 CB38                  		bra.w	AnimateSprite
0000E27A                            ; ===========================================================================
0000E27A                            

0000E27A                            Spring_ResetUp:	; Routine 6
0000E27A 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000E280 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Up" routine
0000E284 4E75                       		rts	
0000E286                            ; ===========================================================================
0000E286                            

0000E286                            Spring_LR:	; Routine 8
0000E286 323C 0013                  		move.w	#$13,d1
0000E28A 343C 000E                  		move.w	#$E,d2
0000E28E 363C 000F                  		move.w	#$F,d3
0000E292 3828 0008                  		move.w	obX(a0),d4
0000E296 6100 0000                  		bsr.w	SolidObject
0000E29A 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000E2A0 6600                       		bne.s	loc_DC0C
0000E2A2 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000E2A8                            

0000E2A8                            loc_DC0C:
0000E2A8 0828 0005 0022             		btst	#5,obStatus(a0)
0000E2AE 6600                       		bne.s	Spring_BounceLR
0000E2B0 4E75                       		rts	
0000E2B2                            ; ===========================================================================
0000E2B2                            

0000E2B2                            Spring_BounceLR:
0000E2B2 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E2B6 3368 0030 0010             		move.w	spring_pow(a0),obVelX(a1) ; move Sonic to the left
0000E2BC 5069 0008                  		addq.w	#8,obX(a1)
0000E2C0 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
0000E2C6 6600                       		bne.s	Spring_Flipped	; if yes, branch
0000E2C8 0469 0010 0008             		subi.w	#$10,obX(a1)
0000E2CE 4469 0010                  		neg.w	obVelX(a1)	; move Sonic to	the right
0000E2D2                            

0000E2D2                            	Spring_Flipped:
0000E2D2 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E2D8 3369 0010 0014             		move.w	obVelX(a1),obInertia(a1)
0000E2DE 0869 0000 0022             		bchg	#0,obStatus(a1)
0000E2E4 0829 0002 0022             		btst	#2,obStatus(a1)
0000E2EA 6600                       		bne.s	loc_DC56
0000E2EC 137C 0000 001C             		move.b	#id_Walk,obAnim(a1)	; use walking animation
0000E2F2                            

0000E2F2                            loc_DC56:
0000E2F2 08A8 0005 0022             		bclr	#5,obStatus(a0)
0000E2F8 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000E2FE 303C 0000                  		move.w	#sfx_Spring,d0
0000E302 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play spring sound
0000E308                            

0000E308                            Spring_AniLR:	; Routine $A
0000E308 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000E30E 6000 CAA0                  		bra.w	AnimateSprite
0000E312                            ; ===========================================================================
0000E312                            

0000E312                            Spring_ResetLR:	; Routine $C
0000E312 117C 0002 001D             		move.b	#2,obNextAni(a0) ; reset animation
0000E318 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_LR" routine
0000E31C 4E75                       		rts	
0000E31E                            ; ===========================================================================
0000E31E                            

0000E31E                            Spring_Dwn:	; Routine $E
0000E31E 323C 001B                  		move.w	#$1B,d1
0000E322 343C 0008                  		move.w	#8,d2
0000E326 363C 0010                  		move.w	#$10,d3
0000E32A 3828 0008                  		move.w	obX(a0),d4
0000E32E 6100 0000                  		bsr.w	SolidObject
0000E332 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0000E338 6600                       		bne.s	loc_DCA4
0000E33A 117C 000E 0024             		move.b	#$E,obRoutine(a0)
0000E340                            

0000E340                            loc_DCA4:
0000E340 4A28 0025                  		tst.b	obSolid(a0)
0000E344 6600                       		bne.s	locret_DCAE
0000E346 4A44                       		tst.w	d4
0000E348 6B00                       		bmi.s	Spring_BounceDwn
0000E34A                            

0000E34A                            locret_DCAE:
0000E34A 4E75                       		rts	
0000E34C                            ; ===========================================================================
0000E34C                            

0000E34C                            Spring_BounceDwn:
0000E34C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E350 5169 000C                  		subq.w	#8,obY(a1)
0000E354 3368 0030 0012             		move.w	spring_pow(a0),obVelY(a1)
0000E35A 4469 0012                  		neg.w	obVelY(a1)	; move Sonic downwards
0000E35E 08E9 0001 0022             		bset	#1,obStatus(a1)
0000E364 08A9 0003 0022             		bclr	#3,obStatus(a1)
0000E36A 137C 0002 0024             		move.b	#2,obRoutine(a1)
0000E370 08A8 0003 0022             		bclr	#3,obStatus(a0)
0000E376 4228 0025                  		clr.b	obSolid(a0)
0000E37A 303C 0000                  		move.w	#sfx_Spring,d0
0000E37E 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play spring sound
0000E384                            

0000E384                            Spring_AniDwn:	; Routine $10
0000E384 43F9 0000 0000             		lea	(Ani_Spring).l,a1
0000E38A 6000 CA24                  		bra.w	AnimateSprite
0000E38E                            ; ===========================================================================
0000E38E                            

0000E38E                            Spring_ResetDwn:
0000E38E                            		; Routine $12
0000E38E 117C 0001 001D             		move.b	#1,obNextAni(a0) ; reset animation
0000E394 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto "Spring_Dwn" routine
0000E398 4E75                       		rts	
0000E398 4E75                       		rts	
0000E39A                            		include	"_anim\Springs.asm"
0000E39A                            ; ---------------------------------------------------------------------------
0000E39A                            ; Animation script - springs
0000E39A                            ; ---------------------------------------------------------------------------
0000E39A 0000                       Ani_Spring:	dc.w byte_DD02-Ani_Spring
0000E39C 0000                       		dc.w byte_DD0E-Ani_Spring
0000E39E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, afRoutine
0000E3AA 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, afRoutine
0000E3B6                            		even
0000E3B6                            		even
0000E3B6                            Map_Spring:	include	"_maps\Springs.asm"
0000E3B6                            ; ---------------------------------------------------------------------------
0000E3B6                            ; Sprite mappings - springs
0000E3B6                            ; ---------------------------------------------------------------------------
0000E3B6                            Map_Spring_internal:
0000E3B6 0000                       		dc.w M_Spg_Up-Map_Spring_internal
0000E3B8 0000                       		dc.w M_Spg_UpFlat-Map_Spring_internal
0000E3BA 0000                       		dc.w M_Spg_UpExt-Map_Spring_internal
0000E3BC 0000                       		dc.w M_Spg_Left-Map_Spring_internal
0000E3BE 0000                       		dc.w M_Spg_LeftFlat-Map_Spring_internal
0000E3C0 0000                       		dc.w M_Spg_LeftExt-Map_Spring_internal
0000E3C2 02                         M_Spg_Up:	dc.b 2			; facing up
0000E3C3 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E3C8 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E3CD 01                         M_Spg_UpFlat:	dc.b 1			; facing up, flattened
0000E3CE 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E3D3 03                         M_Spg_UpExt:	dc.b 3			; facing up, extended
0000E3D4 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E3D9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E3DE 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E3E3 01                         M_Spg_Left:	dc.b 1			; facing left
0000E3E4 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E3E9 01                         M_Spg_LeftFlat:	dc.b 1			; facing left, flattened
0000E3EA F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E3EF 04                         M_Spg_LeftExt:	dc.b 4			; facing left, extended
0000E3F0 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E3F5 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E3FA F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E3FF 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E404                            		even
0000E404                            		even
0000E404                            

0000E404                            		include	"_incObj\42 Newtron.asm"
0000E404                            ; ---------------------------------------------------------------------------
0000E404                            ; Object 42 - Newtron enemy (GHZ)
0000E404                            ; ---------------------------------------------------------------------------
0000E404                            

0000E404                            Newtron:
0000E404 7000                       		moveq	#0,d0
0000E406 1028 0024                  		move.b	obRoutine(a0),d0
0000E40A 323B 0000                  		move.w	Newt_Index(pc,d0.w),d1
0000E40E 4EFB 1000                  		jmp	Newt_Index(pc,d1.w)
0000E412                            ; ===========================================================================
0000E412 0000                       Newt_Index:	dc.w Newt_Main-Newt_Index
0000E414 0000                       		dc.w Newt_Action-Newt_Index
0000E416 0000                       		dc.w Newt_Delete-Newt_Index
0000E418                            ; ===========================================================================
0000E418                            

0000E418                            Newt_Main:	; Routine 0
0000E418 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E41C 217C 0000 0000 0004        		move.l	#Map_Newt,obMap(a0)
0000E424 317C 049B 0002             		move.w	#$49B,obGfx(a0)
0000E42A 117C 0004 0001             		move.b	#4,obRender(a0)
0000E430 117C 0004 0018             		move.b	#4,obPriority(a0)
0000E436 117C 0014 0019             		move.b	#$14,obActWid(a0)
0000E43C 117C 0010 0016             		move.b	#$10,obHeight(a0)
0000E442 117C 0008 0017             		move.b	#8,obWidth(a0)
0000E448                            

0000E448                            Newt_Action:	; Routine 2
0000E448 7000                       		moveq	#0,d0
0000E44A 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E44E 323B 0000                  		move.w	@index(pc,d0.w),d1
0000E452 4EBB 1000                  		jsr	@index(pc,d1.w)
0000E456 43F9 0000 0000             		lea	(Ani_Newt).l,a1
0000E45C 6100 C952                  		bsr.w	AnimateSprite
0000E460 6000 0000                  		bra.w	RememberState
0000E464                            ; ===========================================================================
0000E464 0000                       @index:		dc.w @chkdistance-@index
0000E466 0000                       		dc.w @type00-@index
0000E468 0000                       		dc.w @matchfloor-@index
0000E46A 0000                       		dc.w @speed-@index
0000E46C 0000                       		dc.w @type01-@index
0000E46E                            ; ===========================================================================
0000E46E                            

0000E46E                            @chkdistance:
0000E46E 08E8 0000 0022             		bset	#0,obStatus(a0)
0000E474 3038 D008                  		move.w	(v_player+obX).w,d0
0000E478 9068 0008                  		sub.w	obX(a0),d0
0000E47C 6400                       		bcc.s	@sonicisright
0000E47E 4440                       		neg.w	d0
0000E480 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000E486                            

0000E486                            	@sonicisright:
0000E486 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E48A 6400                       		bcc.s	@outofrange	; if not, branch
0000E48C 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @type00 next
0000E490 117C 0001 001C             		move.b	#1,obAnim(a0)
0000E496 4A28 0028                  		tst.b	obSubtype(a0)	; check	object type
0000E49A 6700                       		beq.s	@istype00	; if type is 00, branch
0000E49C                            

0000E49C 317C 249B 0002             		move.w	#$249B,obGfx(a0)
0000E4A2 117C 0008 0025             		move.b	#8,ob2ndRout(a0) ; goto @type01 next
0000E4A8 117C 0004 001C             		move.b	#4,obAnim(a0)	; use different	animation
0000E4AE                            

0000E4AE                            	@outofrange:
0000E4AE                            	@istype00:
0000E4AE 4E75                       		rts	
0000E4B0                            ; ===========================================================================
0000E4B0                            

0000E4B0                            @type00:
0000E4B0 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; has "appearing" animation finished?
0000E4B6 6400                       		bcc.s	@fall		; is yes, branch
0000E4B8 08E8 0000 0022             		bset	#0,obStatus(a0)
0000E4BE 3038 D008                  		move.w	(v_player+obX).w,d0
0000E4C2 9068 0008                  		sub.w	obX(a0),d0
0000E4C6 6400                       		bcc.s	@sonicisright2
0000E4C8 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000E4CE                            

0000E4CE                            	@sonicisright2:
0000E4CE 4E75                       		rts	
0000E4D0                            ; ===========================================================================
0000E4D0                            

0000E4D0                            	@fall:
0000E4D0 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000E4D6 6600                       		bne.s	@loc_DE42
0000E4D8 117C 000C 0020             		move.b	#$C,obColType(a0)
0000E4DE                            

0000E4DE                            	@loc_DE42:
0000E4DE 6100 F76E                  		bsr.w	ObjectFall
0000E4E2 6100 0000                  		bsr.w	ObjFloorDist
0000E4E6 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E4E8 6A00                       		bpl.s	@keepfalling	; if not, branch
0000E4EA                            

0000E4EA D368 000C                  		add.w	d1,obY(a0)
0000E4EE 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop newtron falling
0000E4F4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000E4F8 117C 0002 001C             		move.b	#2,obAnim(a0)
0000E4FE 0828 0005 0002             		btst	#5,obGfx(a0)
0000E504 6700                       		beq.s	@pppppppp
0000E506 5228 001C                  		addq.b	#1,obAnim(a0)
0000E50A                            

0000E50A                            	@pppppppp:
0000E50A 117C 000D 0020             		move.b	#$D,obColType(a0)
0000E510 317C 0200 0010             		move.w	#$200,obVelX(a0) ; move newtron horizontally
0000E516 0828 0000 0022             		btst	#0,obStatus(a0)
0000E51C 6600                       		bne.s	@keepfalling
0000E51E 4468 0010                  		neg.w	obVelX(a0)
0000E522                            

0000E522                            	@keepfalling:
0000E522 4E75                       		rts	
0000E524                            ; ===========================================================================
0000E524                            

0000E524                            @matchfloor:
0000E524 6100 F754                  		bsr.w	SpeedToPos
0000E528 6100 0000                  		bsr.w	ObjFloorDist
0000E52C 0C41 FFF8                  		cmpi.w	#-8,d1
0000E530 6D00                       		blt.s	@nextroutine
0000E532 0C41 000C                  		cmpi.w	#$C,d1
0000E536 6C00                       		bge.s	@nextroutine
0000E538 D368 000C                  		add.w	d1,obY(a0)	; match	newtron's position with floor
0000E53C 4E75                       		rts	
0000E53E                            ; ===========================================================================
0000E53E                            

0000E53E                            	@nextroutine:
0000E53E 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @speed next
0000E542 4E75                       		rts	
0000E544                            ; ===========================================================================
0000E544                            

0000E544                            @speed:
0000E544 6100 F734                  		bsr.w	SpeedToPos
0000E548 4E75                       		rts	
0000E54A                            ; ===========================================================================
0000E54A                            

0000E54A                            @type01:
0000E54A 0C28 0001 001A             		cmpi.b	#1,obFrame(a0)
0000E550 6600                       		bne.s	@firemissile
0000E552 117C 000C 0020             		move.b	#$C,obColType(a0)
0000E558                            

0000E558                            	@firemissile:
0000E558 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0000E55E 6600                       		bne.s	@fail
0000E560 4A28 0032                  		tst.b	$32(a0)
0000E564 6600                       		bne.s	@fail
0000E566 117C 0001 0032             		move.b	#1,$32(a0)
0000E56C 6100 FBBA                  		bsr.w	FindFreeObj
0000E570 6600                       		bne.s	@fail
0000E572 137C 0023 0000             		move.b	#id_Missile,0(a1) ; load missile object
0000E578 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E57E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E584 5169 000C                  		subq.w	#8,obY(a1)
0000E588 337C 0200 0010             		move.w	#$200,obVelX(a1)
0000E58E 303C 0014                  		move.w	#$14,d0
0000E592 0828 0000 0022             		btst	#0,obStatus(a0)
0000E598 6600                       		bne.s	@noflip
0000E59A 4440                       		neg.w	d0
0000E59C 4469 0010                  		neg.w	obVelX(a1)
0000E5A0                            

0000E5A0                            	@noflip:
0000E5A0 D169 0008                  		add.w	d0,obX(a1)
0000E5A4 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000E5AA 137C 0001 0028             		move.b	#1,obSubtype(a1)
0000E5B0                            

0000E5B0                            	@fail:
0000E5B0 4E75                       		rts	
0000E5B2                            ; ===========================================================================
0000E5B2                            

0000E5B2                            Newt_Delete:	; Routine 4
0000E5B2 6000 F728                  		bra.w	DeleteObject
0000E5B2 6000 F728                  		bra.w	DeleteObject
0000E5B6                            		include	"_anim\Newtron.asm"
0000E5B6                            ; ---------------------------------------------------------------------------
0000E5B6                            ; Animation script - Newtron enemy
0000E5B6                            ; ---------------------------------------------------------------------------
0000E5B6 0000                       Ani_Newt:	dc.w A_Newt_Blank-Ani_Newt
0000E5B8 0000                       		dc.w A_Newt_Drop-Ani_Newt
0000E5BA 0000                       		dc.w A_Newt_Fly1-Ani_Newt
0000E5BC 0000                       		dc.w A_Newt_Fly2-Ani_Newt
0000E5BE 0000                       		dc.w A_Newt_Fires-Ani_Newt
0000E5C0 0F0A FF                    A_Newt_Blank:	dc.b $F, $A, afEnd
0000E5C4 00                         		even
0000E5C4 1300 0103 0405 FE01        A_Newt_Drop:	dc.b $13, 0, 1,	3, 4, 5, afBack, 1
0000E5CC 0206 07FF                  A_Newt_Fly1:	dc.b 2,	6, 7, afEnd
0000E5D0 0208 09FF                  A_Newt_Fly2:	dc.b 2,	8, 9, afEnd
0000E5D4 1300 0101 0201 0100 FC     A_Newt_Fires:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, afRoutine
0000E5DE 00                         		even
0000E5DE 00                         		even
0000E5DE                            Map_Newt:	include	"_maps\Newtron.asm"
0000E5DE                            ; ---------------------------------------------------------------------------
0000E5DE                            ; Sprite mappings - Newtron enemy (GHZ)
0000E5DE                            ; ---------------------------------------------------------------------------
0000E5DE                            Map_Newt_internal:
0000E5DE 0000                       		dc.w M_Newt_Trans-Map_Newt_internal
0000E5E0 0000                       		dc.w M_Newt_Norm-Map_Newt_internal
0000E5E2 0000                       		dc.w M_Newt_Fires-Map_Newt_internal
0000E5E4 0000                       		dc.w M_Newt_Drop1-Map_Newt_internal
0000E5E6 0000                       		dc.w M_Newt_Drop2-Map_Newt_internal
0000E5E8 0000                       		dc.w M_Newt_Drop3-Map_Newt_internal
0000E5EA 0000                       		dc.w M_Newt_Fly1a-Map_Newt_internal
0000E5EC 0000                       		dc.w M_Newt_Fly1b-Map_Newt_internal
0000E5EE 0000                       		dc.w M_Newt_Fly2a-Map_Newt_internal
0000E5F0 0000                       		dc.w M_Newt_Fly2b-Map_Newt_internal
0000E5F2 0000                       		dc.w M_Newt_Blank-Map_Newt_internal
0000E5F4 03                         M_Newt_Trans:	dc.b 3
0000E5F5 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC	; partially visible
0000E5FA F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E5FF FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E604 03                         M_Newt_Norm:	dc.b 3
0000E605 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC ; visible
0000E60A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E60F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E614 03                         M_Newt_Fires:	dc.b 3
0000E615 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC ; open mouth, firing
0000E61A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E61F FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E624 04                         M_Newt_Drop1:	dc.b 4
0000E625 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC ; dropping
0000E62A EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E62F FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E634 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E639 03                         M_Newt_Drop2:	dc.b 3
0000E63A F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E63F FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E644 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E649 02                         M_Newt_Drop3:	dc.b 2
0000E64A F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E64F F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E654 03                         M_Newt_Fly1a:	dc.b 3
0000E655 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC ; flying
0000E65A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E65F FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E664 03                         M_Newt_Fly1b:	dc.b 3
0000E665 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E66A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E66F FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E674 03                         M_Newt_Fly2a:	dc.b 3
0000E675 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E67A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E67F FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E684 03                         M_Newt_Fly2b:	dc.b 3
0000E685 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E68A F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E68F FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E694 00                         M_Newt_Blank:	dc.b 0
0000E696 00                         		even
0000E696 00                         		even
0000E696                            		include	"_incObj\43 Roller.asm"
0000E696                            ; ---------------------------------------------------------------------------
0000E696                            ; Object 43 - Roller enemy (SYZ)
0000E696                            ; ---------------------------------------------------------------------------
0000E696                            

0000E696                            Roller:
0000E696 7000                       		moveq	#0,d0
0000E698 1028 0024                  		move.b	obRoutine(a0),d0
0000E69C 323B 0000                  		move.w	Roll_Index(pc,d0.w),d1
0000E6A0 4EFB 1000                  		jmp	Roll_Index(pc,d1.w)
0000E6A4                            ; ===========================================================================
0000E6A4 0000                       Roll_Index:	dc.w Roll_Main-Roll_Index
0000E6A6 0000                       		dc.w Roll_Action-Roll_Index
0000E6A8                            ; ===========================================================================
0000E6A8                            

0000E6A8                            Roll_Main:	; Routine 0
0000E6A8 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000E6AE 117C 0008 0017             		move.b	#8,obWidth(a0)
0000E6B4 6100 F598                  		bsr.w	ObjectFall
0000E6B8 6100 0000                  		bsr.w	ObjFloorDist
0000E6BC 4A41                       		tst.w	d1
0000E6BE 6A00                       		bpl.s	locret_E052
0000E6C0 D368 000C                  		add.w	d1,obY(a0)	; match	roller's position with the floor
0000E6C4 317C 0000 0012             		move.w	#0,obVelY(a0)
0000E6CA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E6CE 217C 0000 0000 0004        		move.l	#Map_Roll,obMap(a0)
0000E6D6 317C 04B8 0002             		move.w	#$4B8,obGfx(a0)
0000E6DC 117C 0004 0001             		move.b	#4,obRender(a0)
0000E6E2 117C 0004 0018             		move.b	#4,obPriority(a0)
0000E6E8 117C 0010 0019             		move.b	#$10,obActWid(a0)
0000E6EE                            

0000E6EE                            	locret_E052:
0000E6EE 4E75                       		rts	
0000E6F0                            ; ===========================================================================
0000E6F0                            

0000E6F0                            Roll_Action:	; Routine 2
0000E6F0 7000                       		moveq	#0,d0
0000E6F2 1028 0025                  		move.b	ob2ndRout(a0),d0
0000E6F6 323B 0000                  		move.w	Roll_Index2(pc,d0.w),d1
0000E6FA 4EBB 1000                  		jsr	Roll_Index2(pc,d1.w)
0000E6FE 43F9 0000 0000             		lea	(Ani_Roll).l,a1
0000E704 6100 C6AA                  		bsr.w	AnimateSprite
0000E708 3028 0008                  		move.w	obX(a0),d0
0000E70C 0240 FF80                  		andi.w	#$FF80,d0
0000E710 3238 F700                  		move.w	(v_screenposx).w,d1
0000E714 0441 0080                  		subi.w	#$80,d1
0000E718 0241 FF80                  		andi.w	#$FF80,d1
0000E71C 9041                       		sub.w	d1,d0
0000E71E 0C40 0280                  		cmpi.w	#$280,d0
0000E722 6E00 0000                  		bgt.w	Roll_ChkGone
0000E726 6000 F578                  		bra.w	DisplaySprite
0000E72A                            ; ===========================================================================
0000E72A                            

0000E72A                            Roll_ChkGone:
0000E72A 45F8 FC00                  		lea	(v_objstate).w,a2
0000E72E 7000                       		moveq	#0,d0
0000E730 1028 0023                  		move.b	obRespawnNo(a0),d0
0000E734 6700                       		beq.s	Roll_Delete
0000E736 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E73C                            

0000E73C                            Roll_Delete:
0000E73C 6000 F59E                  		bra.w	DeleteObject
0000E740                            ; ===========================================================================
0000E740 0000                       Roll_Index2:	dc.w Roll_RollChk-Roll_Index2
0000E742 0000                       		dc.w Roll_RollNoChk-Roll_Index2
0000E744 0000                       		dc.w Roll_ChkJump-Roll_Index2
0000E746 0000                       		dc.w Roll_MatchFloor-Roll_Index2
0000E748                            ; ===========================================================================
0000E748                            

0000E748                            Roll_RollChk:
0000E748 3038 D008                  		move.w	(v_player+obX).w,d0
0000E74C 0440 0100                  		subi.w	#$100,d0
0000E750 6500                       		bcs.s	loc_E0D2
0000E752 9068 0008                  		sub.w	obX(a0),d0	; check	distance between Roller	and Sonic
0000E756 6500                       		bcs.s	loc_E0D2
0000E758 5828 0025                  		addq.b	#4,ob2ndRout(a0)
0000E75C 117C 0002 001C             		move.b	#2,obAnim(a0)
0000E762 317C 0700 0010             		move.w	#$700,obVelX(a0) ; move Roller horizontally
0000E768 117C 008E 0020             		move.b	#$8E,obColType(a0) ; make Roller invincible
0000E76E                            

0000E76E                            loc_E0D2:
0000E76E 588F                       		addq.l	#4,sp
0000E770 4E75                       		rts	
0000E772                            ; ===========================================================================
0000E772                            

0000E772                            Roll_RollNoChk:
0000E772 0C28 0002 001C             		cmpi.b	#2,obAnim(a0)
0000E778 6700                       		beq.s	loc_E0F8
0000E77A 5368 0030                  		subq.w	#1,$30(a0)
0000E77E 6A00                       		bpl.s	locret_E0F6
0000E780 117C 0001 001C             		move.b	#1,obAnim(a0)
0000E786 317C 0700 0010             		move.w	#$700,obVelX(a0)
0000E78C 117C 008E 0020             		move.b	#$8E,obColType(a0)
0000E792                            

0000E792                            locret_E0F6:
0000E792 4E75                       		rts	
0000E794                            ; ===========================================================================
0000E794                            

0000E794                            loc_E0F8:
0000E794 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000E798 4E75                       		rts	
0000E79A                            ; ===========================================================================
0000E79A                            

0000E79A                            Roll_ChkJump:
0000E79A 6100 0000                  		bsr.w	Roll_Stop
0000E79E 6100 F4DA                  		bsr.w	SpeedToPos
0000E7A2 6100 0000                  		bsr.w	ObjFloorDist
0000E7A6 0C41 FFF8                  		cmpi.w	#-8,d1
0000E7AA 6D00                       		blt.s	Roll_Jump
0000E7AC 0C41 000C                  		cmpi.w	#$C,d1
0000E7B0 6C00                       		bge.s	Roll_Jump
0000E7B2 D368 000C                  		add.w	d1,obY(a0)
0000E7B6 4E75                       		rts	
0000E7B8                            ; ===========================================================================
0000E7B8                            

0000E7B8                            Roll_Jump:
0000E7B8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000E7BC 08E8 0000 0032             		bset	#0,$32(a0)
0000E7C2 6700                       		beq.s	locret_E12E
0000E7C4 317C FA00 0012             		move.w	#-$600,obVelY(a0)	; move Roller vertically
0000E7CA                            

0000E7CA                            locret_E12E:
0000E7CA 4E75                       		rts	
0000E7CC                            ; ===========================================================================
0000E7CC                            

0000E7CC                            Roll_MatchFloor:
0000E7CC 6100 F480                  		bsr.w	ObjectFall
0000E7D0 4A68 0012                  		tst.w	obVelY(a0)
0000E7D4 6B00                       		bmi.s	locret_E150
0000E7D6 6100 0000                  		bsr.w	ObjFloorDist
0000E7DA 4A41                       		tst.w	d1
0000E7DC 6A00                       		bpl.s	locret_E150
0000E7DE D368 000C                  		add.w	d1,obY(a0)	; match	Roller's position with the floor
0000E7E2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000E7E6 317C 0000 0012             		move.w	#0,obVelY(a0)
0000E7EC                            

0000E7EC                            locret_E150:
0000E7EC 4E75                       		rts	
0000E7EE                            

0000E7EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E7EE                            

0000E7EE                            

0000E7EE                            Roll_Stop:
0000E7EE 4A28 0032                  		tst.b	$32(a0)
0000E7F2 6B00                       		bmi.s	locret_E188
0000E7F4 3038 D008                  		move.w	(v_player+obX).w,d0
0000E7F8 0440 0030                  		subi.w	#$30,d0
0000E7FC 9068 0008                  		sub.w	obX(a0),d0
0000E800 6400                       		bcc.s	locret_E188
0000E802 117C 0000 001C             		move.b	#0,obAnim(a0)
0000E808 117C 000E 0020             		move.b	#$E,obColType(a0)
0000E80E 4268 0010                  		clr.w	obVelX(a0)
0000E812 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E818 117C 0002 0025             		move.b	#2,ob2ndRout(a0)
0000E81E 08E8 0007 0032             		bset	#7,$32(a0)
0000E824                            

0000E824                            locret_E188:
0000E824 4E75                       		rts	
0000E826                            ; End of function Roll_Stop
0000E826                            ; End of function Roll_Stop
0000E826                            		include	"_anim\Roller.asm"
0000E826                            ; ---------------------------------------------------------------------------
0000E826                            ; Animation script - Roller enemy
0000E826                            ; ---------------------------------------------------------------------------
0000E826 0000                       Ani_Roll:	dc.w A_Roll_Unfold-Ani_Roll
0000E828 0000                       		dc.w A_Roll_Fold-Ani_Roll
0000E82A 0000                       		dc.w A_Roll_Roll-Ani_Roll
0000E82C 0F02 0100 FE01             A_Roll_Unfold:	dc.b $F, 2, 1, 0, afBack, 1
0000E832 0F01 02FD 02               A_Roll_Fold:	dc.b $F, 1, 2, afChange, 2
0000E838 00                         		even
0000E838 0303 0402 FF               A_Roll_Roll:	dc.b 3,	3, 4, 2, afEnd
0000E83E 00                         		even
0000E83E 00                         		even
0000E83E                            Map_Roll:	include	"_maps\Roller.asm"
0000E83E                            ; ---------------------------------------------------------------------------
0000E83E                            ; Sprite mappings - Roller enemy (SYZ)
0000E83E                            ; ---------------------------------------------------------------------------
0000E83E                            Map_Roll_internal:
0000E83E 0000                       		dc.w M_Roll_Stand-Map_Roll_internal
0000E840 0000                       		dc.w M_Roll_Fold-Map_Roll_internal
0000E842 0000                       		dc.w M_Roll_Roll1-Map_Roll_internal
0000E844 0000                       		dc.w M_Roll_Roll2-Map_Roll_internal
0000E846 0000                       		dc.w M_Roll_Roll3-Map_Roll_internal
0000E848 02                         M_Roll_Stand:	dc.b 2
0000E849 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0	; standing
0000E84E F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E853 02                         M_Roll_Fold:	dc.b 2
0000E854 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0	; folding
0000E859 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E85E 01                         M_Roll_Roll1:	dc.b 1
0000E85F F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0 ; rolling
0000E864 01                         M_Roll_Roll2:	dc.b 1
0000E865 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0 ; rolling
0000E86A 01                         M_Roll_Roll3:	dc.b 1
0000E86B F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0 ; rolling
0000E870                            		even
0000E870                            		even
0000E870                            

0000E870                            		include	"_incObj\44 GHZ Edge Walls.asm"
0000E870                            ; ---------------------------------------------------------------------------
0000E870                            ; Object 44 - edge walls (GHZ)
0000E870                            ; ---------------------------------------------------------------------------
0000E870                            

0000E870                            EdgeWalls:
0000E870 7000                       		moveq	#0,d0
0000E872 1028 0024                  		move.b	obRoutine(a0),d0
0000E876 323B 0000                  		move.w	Edge_Index(pc,d0.w),d1
0000E87A 4EFB 1000                  		jmp	Edge_Index(pc,d1.w)
0000E87E                            ; ===========================================================================
0000E87E 0000                       Edge_Index:	dc.w Edge_Main-Edge_Index
0000E880 0000                       		dc.w Edge_Solid-Edge_Index
0000E882 0000                       		dc.w Edge_Display-Edge_Index
0000E884                            ; ===========================================================================
0000E884                            

0000E884                            Edge_Main:	; Routine 0
0000E884 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E888 217C 0000 0000 0004        		move.l	#Map_Edge,obMap(a0)
0000E890 317C 434C 0002             		move.w	#$434C,obGfx(a0)
0000E896 0028 0004 0001             		ori.b	#4,obRender(a0)
0000E89C 117C 0008 0019             		move.b	#8,obActWid(a0)
0000E8A2 117C 0006 0018             		move.b	#6,obPriority(a0)
0000E8A8 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0) ; copy object type number to frame number
0000E8AE 08A8 0004 001A             		bclr	#4,obFrame(a0)	; clear	4th bit	(deduct	$10)
0000E8B4 6700                       		beq.s	Edge_Solid	; make object solid if 4th bit = 0
0000E8B6 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E8BA 6000                       		bra.s	Edge_Display	; don't make it solid if 4th bit = 1
0000E8BC                            ; ===========================================================================
0000E8BC                            

0000E8BC                            Edge_Solid:	; Routine 2
0000E8BC 323C 0013                  		move.w	#$13,d1
0000E8C0 343C 0028                  		move.w	#$28,d2
0000E8C4 6100 A828                  		bsr.w	Obj44_SolidWall
0000E8C8                            

0000E8C8                            Edge_Display:	; Routine 4
0000E8C8 6100 F3D6                  		bsr.w	DisplaySprite
0000E8EA 4E75                       		rts	
0000E8EA 4E75                       		rts	
0000E8EC                            Map_Edge:	include	"_maps\GHZ Edge Walls.asm"
0000E8EC                            ; ---------------------------------------------------------------------------
0000E8EC                            ; Sprite mappings - walls (GHZ)
0000E8EC                            ; ---------------------------------------------------------------------------
0000E8EC                            Map_Edge_internal:
0000E8EC 0000                       		dc.w M_Edge_Shadow-Map_Edge_internal
0000E8EE 0000                       		dc.w M_Edge_Light-Map_Edge_internal
0000E8F0 0000                       		dc.w M_Edge_Dark-Map_Edge_internal
0000E8F2 04                         M_Edge_Shadow:	dc.b 4
0000E8F3 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8	; light with shadow
0000E8F8 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E8FD 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E902 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E907 04                         M_Edge_Light:	dc.b 4
0000E908 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8	; light with no shadow
0000E90D F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E912 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E917 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E91C 04                         M_Edge_Dark:	dc.b 4
0000E91D E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8	; all shadow
0000E922 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E927 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E92C 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E932 00                         		even
0000E932 00                         		even
0000E932                            

0000E932                            		include	"_incObj\13 Lava Ball Maker.asm"
0000E932                            ; ---------------------------------------------------------------------------
0000E932                            ; Object 13 - lava ball	maker (MZ, SLZ)
0000E932                            ; ---------------------------------------------------------------------------
0000E932                            

0000E932                            LavaMaker:
0000E932 7000                       		moveq	#0,d0
0000E934 1028 0024                  		move.b	obRoutine(a0),d0
0000E938 323B 0000                  		move.w	LavaM_Index(pc,d0.w),d1
0000E93C 4EBB 1000                  		jsr	LavaM_Index(pc,d1.w)
0000E940 6000 0000                  		bra.w	LBall_ChkDel
0000E944                            ; ===========================================================================
0000E944 0000                       LavaM_Index:	dc.w LavaM_Main-LavaM_Index
0000E946 0000                       		dc.w LavaM_MakeLava-LavaM_Index
0000E948                            ; ---------------------------------------------------------------------------
0000E948                            ;
0000E948                            ; Lava ball production rates
0000E948                            ;
0000E948 1E3C 5A78 96B4             LavaM_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E94E                            ; ===========================================================================
0000E94E                            

0000E94E                            LavaM_Main:	; Routine 0
0000E94E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E952 1028 0028                  		move.b	obSubtype(a0),d0
0000E956 E848                       		lsr.w	#4,d0
0000E958 0240 000F                  		andi.w	#$F,d0
0000E95C 117B 00EA 001F             		move.b	LavaM_Rates(pc,d0.w),obDelayAni(a0)
0000E962 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; set time delay for lava balls
0000E968 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0000E96E                            

0000E96E                            LavaM_MakeLava:	; Routine 2
0000E96E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from time delay
0000E972 6600                       		bne.s	LavaM_Wait	; if time still	remains, branch
0000E974 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset time delay
0000E97A 6100 F59E                  		bsr.w	ChkObjectVisible
0000E97E 6600                       		bne.s	LavaM_Wait
0000E980 6100 F7A6                  		bsr.w	FindFreeObj
0000E984 6600                       		bne.s	LavaM_Wait
0000E986 137C 0014 0000             		move.b	#id_LavaBall,0(a1) ; load lava ball object
0000E98C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000E992 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000E998 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000E99E                            

0000E99E                            	LavaM_Wait:
0000E99E 4E75                       		rts	
0000E99E 4E75                       		rts	
0000E9A0                            		include	"_incObj\14 Lava Ball.asm"
0000E9A0                            ; ---------------------------------------------------------------------------
0000E9A0                            ; Object 14 - lava balls (MZ, SLZ)
0000E9A0                            ; ---------------------------------------------------------------------------
0000E9A0                            

0000E9A0                            LavaBall:
0000E9A0 7000                       		moveq	#0,d0
0000E9A2 1028 0024                  		move.b	obRoutine(a0),d0
0000E9A6 323B 0000                  		move.w	LBall_Index(pc,d0.w),d1
0000E9AA 4EBB 1000                  		jsr	LBall_Index(pc,d1.w)
0000E9AE 6000 F2F0                  		bra.w	DisplaySprite
0000E9B2                            ; ===========================================================================
0000E9B2 0000                       LBall_Index:	dc.w LBall_Main-LBall_Index
0000E9B4 0000                       		dc.w LBall_Action-LBall_Index
0000E9B6 0000                       		dc.w LBall_Delete-LBall_Index
0000E9B8                            

0000E9B8 FC00 FB00 FA00 F900 FE00   LBall_Speeds:	dc.w -$400, -$500, -$600, -$700, -$200
0000E9C2 0200 FE00 0200 0000        		dc.w $200, -$200, $200,	0
0000E9CA                            ; ===========================================================================
0000E9CA                            

0000E9CA                            LBall_Main:	; Routine 0
0000E9CA 5428 0024                  		addq.b	#2,obRoutine(a0)
0000E9CE 117C 0008 0016             		move.b	#8,obHeight(a0)
0000E9D4 117C 0008 0017             		move.b	#8,obWidth(a0)
0000E9DA 217C 0000 BA06 0004        		move.l	#Map_Fire,obMap(a0)
0000E9E2 317C 0345 0002             		move.w	#$345,obGfx(a0)
0000E9E8 0C38 0003 FE10             		cmpi.b	#3,(v_zone).w	; check if level is SLZ
0000E9EE 6600                       		bne.s	@notSLZ
0000E9F0 317C 0480 0002             		move.w	#$480,obGfx(a0)	; SLZ specific code
0000E9F6                            

0000E9F6                            	@notSLZ:
0000E9F6 117C 0004 0001             		move.b	#4,obRender(a0)
0000E9FC 117C 0003 0018             		move.b	#3,obPriority(a0)
0000EA02 117C 008B 0020             		move.b	#$8B,obColType(a0)
0000EA08 3168 000C 0030             		move.w	obY(a0),$30(a0)
0000EA0E 4A28 0029                  		tst.b	$29(a0)
0000EA12 6700                       		beq.s	@speed
0000EA14 5428 0018                  		addq.b	#2,obPriority(a0)
0000EA18                            

0000EA18                            	@speed:
0000EA18 7000                       		moveq	#0,d0
0000EA1A 1028 0028                  		move.b	obSubtype(a0),d0
0000EA1E D040                       		add.w	d0,d0
0000EA20 317B 0096 0012             		move.w	LBall_Speeds(pc,d0.w),obVelY(a0) ; load object speed (vertical)
0000EA26 117C 0008 0019             		move.b	#8,obActWid(a0)
0000EA2C 0C28 0006 0028             		cmpi.b	#6,obSubtype(a0) ; is object type below $6 ?
0000EA32 6500                       		bcs.s	@sound		; if yes, branch
0000EA34                            

0000EA34 117C 0010 0019             		move.b	#$10,obActWid(a0)
0000EA3A 117C 0002 001C             		move.b	#2,obAnim(a0)	; use horizontal animation
0000EA40 3168 0012 0010             		move.w	obVelY(a0),obVelX(a0) ; set horizontal speed
0000EA46 317C 0000 0012             		move.w	#0,obVelY(a0)	; delete vertical speed
0000EA4C                            

0000EA4C                            	@sound:
0000EA4C 303C 0000                  		move.w	#sfx_Fireball,d0
0000EA50 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play lava ball sound
0000EA56                            

0000EA56                            LBall_Action:	; Routine 2
0000EA56 7000                       		moveq	#0,d0
0000EA58 1028 0028                  		move.b	obSubtype(a0),d0
0000EA5C D040                       		add.w	d0,d0
0000EA5E 323B 0000                  		move.w	LBall_TypeIndex(pc,d0.w),d1
0000EA62 4EBB 1000                  		jsr	LBall_TypeIndex(pc,d1.w)
0000EA66 6100 F212                  		bsr.w	SpeedToPos
0000EA6A 43F9 0000 0000             		lea	(Ani_Fire).l,a1
0000EA70 6100 C33E                  		bsr.w	AnimateSprite
0000EA74                            

0000EA74                            LBall_ChkDel:
0000EA92 4E75                       		rts	
0000EA94                            ; ===========================================================================
0000EA94 0000 0000                  LBall_TypeIndex: dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
0000EA98 0000 0000                  		dc.w LBall_Type00-LBall_TypeIndex, LBall_Type00-LBall_TypeIndex
0000EA9C 0000 0000                  		dc.w LBall_Type04-LBall_TypeIndex, LBall_Type05-LBall_TypeIndex
0000EAA0 0000 0000                  		dc.w LBall_Type06-LBall_TypeIndex, LBall_Type07-LBall_TypeIndex
0000EAA4 0000                       		dc.w LBall_Type08-LBall_TypeIndex
0000EAA6                            ; ===========================================================================
0000EAA6                            ; lavaball types 00-03 fly up and fall back down
0000EAA6                            

0000EAA6                            LBall_Type00:
0000EAA6 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's downward speed
0000EAAC 3028 0030                  		move.w	$30(a0),d0
0000EAB0 B068 000C                  		cmp.w	obY(a0),d0	; has object fallen back to its	original position?
0000EAB4 6400                       		bcc.s	loc_E41E	; if not, branch
0000EAB6 5428 0024                  		addq.b	#2,obRoutine(a0)	; goto "LBall_Delete" routine
0000EABA                            

0000EABA                            loc_E41E:
0000EABA 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000EAC0 4A68 0012                  		tst.w	obVelY(a0)
0000EAC4 6A00                       		bpl.s	locret_E430
0000EAC6 08E8 0001 0022             		bset	#1,obStatus(a0)
0000EACC                            

0000EACC                            locret_E430:
0000EACC 4E75                       		rts	
0000EACE                            ; ===========================================================================
0000EACE                            ; lavaball type	04 flies up until it hits the ceiling
0000EACE                            

0000EACE                            LBall_Type04:
0000EACE 08E8 0001 0022             		bset	#1,obStatus(a0)
0000EAD4 6100 0000                  		bsr.w	ObjHitCeiling
0000EAD8 4A41                       		tst.w	d1
0000EADA 6A00                       		bpl.s	locret_E452
0000EADC 117C 0008 0028             		move.b	#8,obSubtype(a0)
0000EAE2 117C 0001 001C             		move.b	#1,obAnim(a0)
0000EAE8 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the ceiling
0000EAEE                            

0000EAEE                            locret_E452:
0000EAEE 4E75                       		rts	
0000EAF0                            ; ===========================================================================
0000EAF0                            ; lavaball type	05 falls down until it hits the	floor
0000EAF0                            

0000EAF0                            LBall_Type05:
0000EAF0 08A8 0001 0022             		bclr	#1,obStatus(a0)
0000EAF6 6100 0000                  		bsr.w	ObjFloorDist
0000EAFA 4A41                       		tst.w	d1
0000EAFC 6A00                       		bpl.s	locret_E474
0000EAFE 117C 0008 0028             		move.b	#8,obSubtype(a0)
0000EB04 117C 0001 001C             		move.b	#1,obAnim(a0)
0000EB0A 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop the object when it touches the floor
0000EB10                            

0000EB10                            locret_E474:
0000EB10 4E75                       		rts	
0000EB12                            ; ===========================================================================
0000EB12                            ; lavaball types 06-07 move sideways
0000EB12                            

0000EB12                            LBall_Type06:
0000EB12 08E8 0000 0022             		bset	#0,obStatus(a0)
0000EB18 76F8                       		moveq	#-8,d3
0000EB1A 6100 0000                  		bsr.w	ObjHitWallLeft
0000EB1E 4A41                       		tst.w	d1
0000EB20 6A00                       		bpl.s	locret_E498
0000EB22 117C 0008 0028             		move.b	#8,obSubtype(a0)
0000EB28 117C 0003 001C             		move.b	#3,obAnim(a0)
0000EB2E 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
0000EB34                            

0000EB34                            locret_E498:
0000EB34 4E75                       		rts	
0000EB36                            ; ===========================================================================
0000EB36                            

0000EB36                            LBall_Type07:
0000EB36 08A8 0000 0022             		bclr	#0,obStatus(a0)
0000EB3C 7608                       		moveq	#8,d3
0000EB3E 6100 0000                  		bsr.w	ObjHitWallRight
0000EB42 4A41                       		tst.w	d1
0000EB44 6A00                       		bpl.s	locret_E4BC
0000EB46 117C 0008 0028             		move.b	#8,obSubtype(a0)
0000EB4C 117C 0003 001C             		move.b	#3,obAnim(a0)
0000EB52 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop object when it touches a	wall
0000EB58                            

0000EB58                            locret_E4BC:
0000EB58 4E75                       		rts	
0000EB5A                            ; ===========================================================================
0000EB5A                            

0000EB5A                            LBall_Type08:
0000EB5A 4E75                       		rts	
0000EB5C                            ; ===========================================================================
0000EB5C                            

0000EB5C                            LBall_Delete:
0000EB5C 6000 F17E                  		bra.w	DeleteObject
0000EB5C 6000 F17E                  		bra.w	DeleteObject
0000EB60                            		include	"_anim\Fireballs.asm"
0000EB60                            ; ---------------------------------------------------------------------------
0000EB60                            ; Animation script - lava balls
0000EB60                            ; ---------------------------------------------------------------------------
0000EB60 0000                       Ani_Fire:	dc.w @vertical-Ani_Fire
0000EB62 0000                       		dc.w @vertcollide-Ani_Fire
0000EB64 0000                       		dc.w @horizontal-Ani_Fire
0000EB66 0000                       		dc.w @horicollide-Ani_Fire
0000EB68 0500 2001 21FF             @vertical:	dc.b 5,	0, $20,	1, $21,	afEnd
0000EB6E 0502 FC                    @vertcollide:	dc.b 5,	2, afRoutine
0000EB72 00                         		even
0000EB72 0503 4304 44FF             @horizontal:	dc.b 5,	3, $43,	4, $44,	afEnd
0000EB78 0505 FC                    @horicollide:	dc.b 5,	5, afRoutine
0000EB7C 00                         		even
0000EB7C 00                         		even
0000EB7C                            

0000EB7C                            		include	"_incObj\6D Flamethrower.asm"
0000EB7C                            ; ---------------------------------------------------------------------------
0000EB7C                            ; Object 6D - flame thrower (SBZ)
0000EB7C                            ; ---------------------------------------------------------------------------
0000EB7C                            

0000EB7C                            Flamethrower:
0000EB7C 7000                       		moveq	#0,d0
0000EB7E 1028 0024                  		move.b	obRoutine(a0),d0
0000EB82 323B 0000                  		move.w	Flame_Index(pc,d0.w),d1
0000EB86 4EFB 1000                  		jmp	Flame_Index(pc,d1.w)
0000EB8A                            ; ===========================================================================
0000EB8A 0000                       Flame_Index:	dc.w Flame_Main-Flame_Index
0000EB8C 0000                       		dc.w Flame_Action-Flame_Index
0000EB8E                            ; ===========================================================================
0000EB8E                            

0000EB8E                            Flame_Main:	; Routine 0
0000EB8E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EB92 217C 0000 0000 0004        		move.l	#Map_Flame,obMap(a0)
0000EB9A 317C 83D9 0002             		move.w	#$83D9,obGfx(a0)
0000EBA0 0028 0004 0001             		ori.b	#4,obRender(a0)
0000EBA6 117C 0001 0018             		move.b	#1,obPriority(a0)
0000EBAC 3168 000C 0030             		move.w	obY(a0),$30(a0)	; store obY (gets overwritten later though)
0000EBB2 117C 000C 0019             		move.b	#$C,obActWid(a0)
0000EBB8 1028 0028                  		move.b	obSubtype(a0),d0
0000EBBC 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000EBC0 D040                       		add.w	d0,d0		; multiply by 2
0000EBC2 3140 0030                  		move.w	d0,$30(a0)
0000EBC6 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000EBCA 1028 0028                  		move.b	obSubtype(a0),d0
0000EBCE 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000EBD2 EB48                       		lsl.w	#5,d0		; multiply by $20
0000EBD4 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000EBD8 117C 000A 0036             		move.b	#$A,$36(a0)
0000EBDE 0828 0001 0022             		btst	#1,obStatus(a0)
0000EBE4 6700                       		beq.s	Flame_Action
0000EBE6 117C 0002 001C             		move.b	#2,obAnim(a0)
0000EBEC 117C 0015 0036             		move.b	#$15,$36(a0)
0000EBF2                            

0000EBF2                            Flame_Action:	; Routine 2
0000EBF2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EBF6 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EBF8 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EBFE 0868 0000 001C             		bchg	#0,obAnim(a0)
0000EC04 6700                       		beq.s	loc_E57A
0000EC06 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EC0C 303C 0000                  		move.w	#sfx_Flamethrower,d0
0000EC10 4EB9 0000 13A2             		jsr	(PlaySound_Special).l ; play flame sound
0000EC16                            

0000EC16                            loc_E57A:
0000EC16 43F9 0000 0000             		lea	(Ani_Flame).l,a1
0000EC1C 6100 C192                  		bsr.w	AnimateSprite
0000EC20 117C 0000 0020             		move.b	#0,obColType(a0)
0000EC26 1028 0036                  		move.b	$36(a0),d0
0000EC2A B028 001A                  		cmp.b	obFrame(a0),d0
0000EC2E 6600                       		bne.s	Flame_ChkDel
0000EC30 117C 00A3 0020             		move.b	#$A3,obColType(a0)
0000EC36                            

0000EC36                            Flame_ChkDel:
0000EC54 6000 F04A                  		bra.w	DisplaySprite
0000EC54 6000 F04A                  		bra.w	DisplaySprite
0000EC58                            		include	"_anim\Flamethrower.asm"
0000EC58                            ; ---------------------------------------------------------------------------
0000EC58                            ; Animation script - flamethrower (SBZ)
0000EC58                            ; ---------------------------------------------------------------------------
0000EC58 0000                       Ani_Flame:	dc.w @pipe1-Ani_Flame
0000EC5A 0000                       		dc.w @pipe2-Ani_Flame
0000EC5C 0000                       		dc.w @valve1-Ani_Flame
0000EC5E 0000                       		dc.w @valve2-Ani_Flame
0000EC60 0300 0102 0304 0506 0708+  @pipe1:		dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, afBack, 2
0000EC6E 0009 0705 0301 00FE 01     @pipe2:		dc.b 0,	9, 7, 5, 3, 1, 0, afBack, 1
0000EC78 00                         		even
0000EC78 030B 0C0D 0E0F 1011 1213+  @valve1:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, afBack, 2
0000EC86 0014 1211 0F0D 0BFE 01     @valve2:	dc.b 0,	$14, $12, $11, $F, $D, $B, afBack, 1
0000EC90 00                         		even
0000EC90 00                         		even
0000EC90                            Map_Flame:	include	"_maps\Flamethrower.asm"
0000EC90                            ; ---------------------------------------------------------------------------
0000EC90                            ; Sprite mappings - flame thrower (SBZ)
0000EC90                            ; ---------------------------------------------------------------------------
0000EC90                            Map_Flame_internal:
0000EC90 0000                       		dc.w @pipe1-Map_Flame_internal
0000EC92 0000                       		dc.w @pipe2-Map_Flame_internal
0000EC94 0000                       		dc.w @pipe3-Map_Flame_internal
0000EC96 0000                       		dc.w @pipe4-Map_Flame_internal
0000EC98 0000                       		dc.w @pipe5-Map_Flame_internal
0000EC9A 0000                       		dc.w @pipe6-Map_Flame_internal
0000EC9C 0000                       		dc.w @pipe7-Map_Flame_internal
0000EC9E 0000                       		dc.w @pipe8-Map_Flame_internal
0000ECA0 0000                       		dc.w @pipe9-Map_Flame_internal
0000ECA2 0000                       		dc.w @pipe10-Map_Flame_internal
0000ECA4 0000                       		dc.w @pipe11-Map_Flame_internal
0000ECA6 0000                       		dc.w @valve1-Map_Flame_internal
0000ECA8 0000                       		dc.w @valve2-Map_Flame_internal
0000ECAA 0000                       		dc.w @valve3-Map_Flame_internal
0000ECAC 0000                       		dc.w @valve4-Map_Flame_internal
0000ECAE 0000                       		dc.w @valve5-Map_Flame_internal
0000ECB0 0000                       		dc.w @valve6-Map_Flame_internal
0000ECB2 0000                       		dc.w @valve7-Map_Flame_internal
0000ECB4 0000                       		dc.w @valve8-Map_Flame_internal
0000ECB6 0000                       		dc.w @valve9-Map_Flame_internal
0000ECB8 0000                       		dc.w @valve10-Map_Flame_internal
0000ECBA 0000                       		dc.w @valve11-Map_Flame_internal
0000ECBC 01                         @pipe1:		dc.b 1
0000ECBD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB ; broken pipe style flamethrower
0000ECC2 02                         @pipe2:		dc.b 2
0000ECC3 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECC8 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECCD 02                         @pipe3:		dc.b 2
0000ECCE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECD3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECD8 03                         @pipe4:		dc.b 3
0000ECD9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ECDE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ECE3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECE8 03                         @pipe5:		dc.b 3
0000ECE9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ECEE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ECF3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ECF8 04                         @pipe6:		dc.b 4
0000ECF9 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ECFE 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED03 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED08 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED0D 04                         @pipe7:		dc.b 4
0000ED0E 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED13 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED18 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED1D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED22 05                         @pipe8:		dc.b 5
0000ED23 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000ED28 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED2D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000ED32 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED37 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED3C 05                         @pipe9:		dc.b 5
0000ED3D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED42 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000ED47 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED4C 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED51 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED56 06                         @pipe10:	dc.b 6
0000ED57 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000ED5C F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000ED61 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000ED66 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000ED6B 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000ED70 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED75 06                         @pipe11:	dc.b 6
0000ED76 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000ED7B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000ED80 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000ED85 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000ED8A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000ED8F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000ED94 01                         @valve1:	dc.b 1
0000ED95 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9 ; valve style flamethrower
0000ED9A 02                         @valve2:	dc.b 2
0000ED9B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDA0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDA5 02                         @valve3:	dc.b 2
0000EDA6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDAB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDB0 03                         @valve4:	dc.b 3
0000EDB1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDB6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDBB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDC0 03                         @valve5:	dc.b 3
0000EDC1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDC6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDCB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDD0 04                         @valve6:	dc.b 4
0000EDD1 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EDD6 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EDDB 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDE0 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EDE5 04                         @valve7:	dc.b 4
0000EDE6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EDEB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EDF0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EDF5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EDFA 05                         @valve8:	dc.b 5
0000EDFB F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EE00 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE05 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE0A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE0F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE14 05                         @valve9:	dc.b 5
0000EE15 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE1A 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EE1F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE24 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE29 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE2E 06                         @valve10:	dc.b 6
0000EE2F E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EE34 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EE39 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EE3E 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EE43 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE48 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE4D 06                         @valve11:	dc.b 6
0000EE4E E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EE53 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EE58 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EE5D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EE62 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EE67 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE6C                            		even
0000EE6C                            		even
0000EE6C                            

0000EE6C                            		include	"_incObj\46 MZ Bricks.asm"
0000EE6C                            ; ---------------------------------------------------------------------------
0000EE6C                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000EE6C                            ; ---------------------------------------------------------------------------
0000EE6C                            

0000EE6C                            MarbleBrick:
0000EE6C 7000                       		moveq	#0,d0
0000EE6E 1028 0024                  		move.b	obRoutine(a0),d0
0000EE72 323B 0000                  		move.w	Brick_Index(pc,d0.w),d1
0000EE76 4EFB 1000                  		jmp	Brick_Index(pc,d1.w)
0000EE7A                            ; ===========================================================================
0000EE7A 0000                       Brick_Index:	dc.w Brick_Main-Brick_Index
0000EE7C 0000                       		dc.w Brick_Action-Brick_Index
0000EE7E                            

0000EE7E =00000030                  brick_origY:	equ $30
0000EE7E                            ; ===========================================================================
0000EE7E                            

0000EE7E                            Brick_Main:	; Routine 0
0000EE7E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EE82 117C 000F 0016             		move.b	#$F,obHeight(a0)
0000EE88 117C 000F 0017             		move.b	#$F,obWidth(a0)
0000EE8E 217C 0000 0000 0004        		move.l	#Map_Brick,obMap(a0)
0000EE96 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0000EE9C 117C 0004 0001             		move.b	#4,obRender(a0)
0000EEA2 117C 0003 0018             		move.b	#3,obPriority(a0)
0000EEA8 117C 0010 0019             		move.b	#$10,obActWid(a0)
0000EEAE 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
0000EEB4 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000EEBA                            

0000EEBA                            Brick_Action:	; Routine 2
0000EEBA 4A28 0001                  		tst.b	obRender(a0)
0000EEBE 6A00                       		bpl.s	@chkdel
0000EEC0 7000                       		moveq	#0,d0
0000EEC2 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0000EEC6 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000EECA D040                       		add.w	d0,d0
0000EECC 323B 0000                  		move.w	Brick_TypeIndex(pc,d0.w),d1
0000EED0 4EBB 1000                  		jsr	Brick_TypeIndex(pc,d1.w)
0000EED4 323C 001B                  		move.w	#$1B,d1
0000EED8 343C 0010                  		move.w	#$10,d2
0000EEDC 363C 0011                  		move.w	#$11,d3
0000EEE0 3828 0008                  		move.w	obX(a0),d4
0000EEE4 6100 0000                  		bsr.w	SolidObject
0000EEE8                            

0000EEE8                            	@chkdel:
0000EF06 6000 ED98                  			bra.w	DisplaySprite
0000EF0A                            ; ===========================================================================
0000EF0A 0000                       Brick_TypeIndex: dc.w Brick_Type00-Brick_TypeIndex
0000EF0C 0000                       		dc.w Brick_Type01-Brick_TypeIndex
0000EF0E 0000                       		dc.w Brick_Type02-Brick_TypeIndex
0000EF10 0000                       		dc.w Brick_Type03-Brick_TypeIndex
0000EF12 0000                       		dc.w Brick_Type04-Brick_TypeIndex
0000EF14                            ; ===========================================================================
0000EF14                            

0000EF14                            Brick_Type00:
0000EF14 4E75                       		rts	
0000EF16                            ; ===========================================================================
0000EF16                            

0000EF16                            Brick_Type02:
0000EF16 3038 D008                  		move.w	(v_player+obX).w,d0
0000EF1A 9068 0008                  		sub.w	obX(a0),d0
0000EF1E 6400                       		bcc.s	loc_E888
0000EF20 4440                       		neg.w	d0
0000EF22                            

0000EF22                            loc_E888:
0000EF22 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000EF26 6400                       		bcc.s	Brick_Type01	; if not, resume wobbling
0000EF28 117C 0003 0028             		move.b	#3,obSubtype(a0)	; if yes, make the block fall
0000EF2E                            

0000EF2E                            Brick_Type01:
0000EF2E 7000                       		moveq	#0,d0
0000EF30 1038 FE74                  		move.b	(v_oscillate+$16).w,d0
0000EF34 0828 0003 0028             		btst	#3,obSubtype(a0)
0000EF3A 6700                       		beq.s	loc_E8A8
0000EF3C 4440                       		neg.w	d0
0000EF3E 0640 0010                  		addi.w	#$10,d0
0000EF42                            

0000EF42                            loc_E8A8:
0000EF42 3228 0030                  		move.w	brick_origY(a0),d1
0000EF46 9240                       		sub.w	d0,d1
0000EF48 3141 000C                  		move.w	d1,obY(a0)	; update the block's position to make it wobble
0000EF4C 4E75                       		rts	
0000EF4E                            ; ===========================================================================
0000EF4E                            

0000EF4E                            Brick_Type03:
0000EF4E 6100 ED2A                  		bsr.w	SpeedToPos
0000EF52 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase falling speed
0000EF58 6100 0000                  		bsr.w	ObjFloorDist
0000EF5C 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EF5E 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EF62 D368 000C                  		add.w	d1,obY(a0)
0000EF66 4268 0012                  		clr.w	obVelY(a0)	; stop the block falling
0000EF6A 3168 000C 0030             		move.w	obY(a0),brick_origY(a0)
0000EF70 117C 0004 0028             		move.b	#4,obSubtype(a0)
0000EF76 3011                       		move.w	(a1),d0
0000EF78 0240 03FF                  		andi.w	#$3FF,d0
0000EF7C 0C40 016A                  			cmpi.w	#$16A,d0
0000EF80 6400                       		bcc.s	locret_E8EE
0000EF82 117C 0000 0028             		move.b	#0,obSubtype(a0)
0000EF88                            

0000EF88                            locret_E8EE:
0000EF88 4E75                       		rts	
0000EF8A                            ; ===========================================================================
0000EF8A                            

0000EF8A                            Brick_Type04:
0000EF8A 7000                       		moveq	#0,d0
0000EF8C 1038 FE70                  		move.b	(v_oscillate+$12).w,d0
0000EF90 E648                       		lsr.w	#3,d0
0000EF92 3228 0030                  		move.w	brick_origY(a0),d1
0000EF96 9240                       		sub.w	d0,d1
0000EF98 3141 000C                  		move.w	d1,obY(a0)	; make the block wobble
0000EF9C 4E75                       		rts	
0000EF9C 4E75                       		rts	
0000EF9E                            Map_Brick:	include	"_maps\MZ Bricks.asm"
0000EF9E                            ; ---------------------------------------------------------------------------
0000EF9E                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EF9E                            ; ---------------------------------------------------------------------------
0000EF9E                            Map_Brick_internal:
0000EF9E 0000                       		dc.w @brick-Map_Brick_internal
0000EFA0 01                         @brick:		dc.b 1
0000EFA1 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EFA6                            		even
0000EFA6                            		even
0000EFA6                            

0000EFA6                            		include	"_incObj\12 Light.asm"
0000EFA6                            ; ---------------------------------------------------------------------------
0000EFA6                            ; Object 12 - lamp (SYZ)
0000EFA6                            ; ---------------------------------------------------------------------------
0000EFA6                            

0000EFA6                            SpinningLight:
0000EFA6 7000                       		moveq	#0,d0
0000EFA8 1028 0024                  		move.b	obRoutine(a0),d0
0000EFAC 323B 0000                  		move.w	Light_Index(pc,d0.w),d1
0000EFB0 4EFB 1000                  		jmp	Light_Index(pc,d1.w)
0000EFB4                            ; ===========================================================================
0000EFB4 0000                       Light_Index:	dc.w Light_Main-Light_Index
0000EFB6 0000                       		dc.w Light_Animate-Light_Index
0000EFB8                            ; ===========================================================================
0000EFB8                            

0000EFB8                            Light_Main:	; Routine 0
0000EFB8 5428 0024                  		addq.b	#2,obRoutine(a0)
0000EFBC 217C 0000 0000 0004        		move.l	#Map_Light,obMap(a0)
0000EFC4 317C 0000 0002             		move.w	#0,obGfx(a0)
0000EFCA 117C 0004 0001             		move.b	#4,obRender(a0)
0000EFD0 117C 0010 0019             		move.b	#$10,obActWid(a0)
0000EFD6 117C 0006 0018             		move.b	#6,obPriority(a0)
0000EFDC                            

0000EFDC                            Light_Animate:	; Routine 2
0000EFDC 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000EFE0 6A00                       		bpl.s	@chkdel
0000EFE2 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000EFE8 5228 001A                  		addq.b	#1,obFrame(a0)
0000EFEC 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)
0000EFF2 6500                       		bcs.s	@chkdel
0000EFF4 117C 0000 001A             		move.b	#0,obFrame(a0)
0000EFFA                            

0000EFFA                            	@chkdel:
0000F018 6000 EC86                  		bra.w	DisplaySprite
0000F018 6000 EC86                  		bra.w	DisplaySprite
0000F01C                            Map_Light	include	"_maps\Light.asm"
0000F01C                            ; ---------------------------------------------------------------------------
0000F01C                            ; Sprite mappings - lamp (SYZ)
0000F01C                            ; ---------------------------------------------------------------------------
0000F01C                            Map_Light_internal:
0000F01C 0000                       		dc.w @0-Map_Light_internal
0000F01E 0000                       		dc.w @1-Map_Light_internal
0000F020 0000                       		dc.w @2-Map_Light_internal
0000F022 0000                       		dc.w @3-Map_Light_internal
0000F024 0000                       		dc.w @4-Map_Light_internal
0000F026 0000                       		dc.w @5-Map_Light_internal
0000F028 02                         @0:		dc.b 2
0000F029 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F02E 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F033 02                         @1:		dc.b 2
0000F034 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F039 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F03E 02                         @2:		dc.b 2
0000F03F F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F044 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F049 02                         @3:		dc.b 2
0000F04A F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F04F 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F054 02                         @4:		dc.b 2
0000F055 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F05A 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F05F 02                         @5:		dc.b 2
0000F060 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F065 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F06A                            		even
0000F06A                            		even
0000F06A                            		include	"_incObj\47 Bumper.asm"
0000F06A                            ; ---------------------------------------------------------------------------
0000F06A                            ; Object 47 - pinball bumper (SYZ)
0000F06A                            ; ---------------------------------------------------------------------------
0000F06A                            

0000F06A                            Bumper:
0000F06A 7000                       		moveq	#0,d0
0000F06C 1028 0024                  		move.b	obRoutine(a0),d0
0000F070 323B 0000                  		move.w	Bump_Index(pc,d0.w),d1
0000F074 4EFB 1000                  		jmp	Bump_Index(pc,d1.w)
0000F078                            ; ===========================================================================
0000F078 0000                       Bump_Index:	dc.w Bump_Main-Bump_Index
0000F07A 0000                       		dc.w Bump_Hit-Bump_Index
0000F07C                            ; ===========================================================================
0000F07C                            

0000F07C                            Bump_Main:	; Routine 0
0000F07C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F080 217C 0000 0000 0004        		move.l	#Map_Bump,obMap(a0)
0000F088 317C 0380 0002             		move.w	#$380,obGfx(a0)
0000F08E 117C 0004 0001             		move.b	#4,obRender(a0)
0000F094 117C 0010 0019             		move.b	#$10,obActWid(a0)
0000F09A 117C 0001 0018             		move.b	#1,obPriority(a0)
0000F0A0 117C 00D7 0020             		move.b	#$D7,obColType(a0)
0000F0A6                            

0000F0A6                            Bump_Hit:	; Routine 2
0000F0A6 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	bumper?
0000F0AA 6700 0000                  		beq.w	@display	; if not, branch
0000F0AE 4228 0021                  		clr.b	obColProp(a0)
0000F0B2 43F8 D000                  		lea	(v_player).w,a1
0000F0B6 3228 0008                  		move.w	obX(a0),d1
0000F0BA 3428 000C                  		move.w	obY(a0),d2
0000F0BE 9269 0008                  		sub.w	obX(a1),d1
0000F0C2 9469 000C                  		sub.w	obY(a1),d2
0000F0C6 4EB9 0000 2C78             		jsr	(CalcAngle).l
0000F0CC 4EB9 0000 29E0             		jsr	(CalcSine).l
0000F0D2 C3FC F900                  		muls.w	#-$700,d1
0000F0D6 E081                       		asr.l	#8,d1
0000F0D8 3341 0010                  		move.w	d1,obVelX(a1)	; bounce Sonic away
0000F0DC C1FC F900                  		muls.w	#-$700,d0
0000F0E0 E080                       		asr.l	#8,d0
0000F0E2 3340 0012                  		move.w	d0,obVelY(a1)	; bounce Sonic away
0000F0E6 08E9 0001 0022             		bset	#1,obStatus(a1)
0000F0EC 08A9 0004 0022             		bclr	#4,obStatus(a1)
0000F0F2 08A9 0005 0022             		bclr	#5,obStatus(a1)
0000F0F8 4229 003C                  		clr.b	$3C(a1)
0000F0FC 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "hit" animation
0000F102 303C 0000                  		move.w	#sfx_Bumper,d0
0000F106 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play bumper sound
0000F10C 45F8 FC00                  		lea	(v_objstate).w,a2
0000F110 7000                       		moveq	#0,d0
0000F112 1028 0023                  		move.b	obRespawnNo(a0),d0
0000F116 6700                       		beq.s	@addscore
0000F118 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit 10 times?
0000F11E 6400                       		bcc.s	@display	; if yes, Sonic	gets no	points
0000F120 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F124                            

0000F124                            	@addscore:
0000F124 7001                       		moveq	#1,d0
0000F126 4EB9 0000 0000             		jsr	(AddPoints).l	; add 10 to score
0000F12C 6100 EFFA                  		bsr.w	FindFreeObj
0000F130 6600                       		bne.s	@display
0000F132 137C 0029 0000             		move.b	#id_Points,0(a1) ; load points object
0000F138 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F13E 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F144 137C 0004 001A             		move.b	#4,obFrame(a1)
0000F14A                            

0000F14A                            	@display:
0000F14A 43F9 0000 0000             		lea	(Ani_Bump).l,a1
0000F150 6100 BC5E                  		bsr.w	AnimateSprite
0000F170 6000 EB2E                  		bra.w	DisplaySprite
0000F174                            ; ===========================================================================
0000F174                            

0000F174                            @resetcount:
0000F174 45F8 FC00                  		lea	(v_objstate).w,a2
0000F178 7000                       		moveq	#0,d0
0000F17A 1028 0023                  		move.b	obRespawnNo(a0),d0
0000F17E 6700                       		beq.s	@delete
0000F180 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F186                            

0000F186                            	@delete:
0000F186 6000 EB54                  		bra.w	DeleteObject
0000F186 6000 EB54                  		bra.w	DeleteObject
0000F18A                            		include	"_anim\Bumper.asm"
0000F18A                            ; ---------------------------------------------------------------------------
0000F18A                            ; Animation script - flamethrower (SBZ)
0000F18A                            ; ---------------------------------------------------------------------------
0000F18A 0000                       Ani_Bump:	dc.w byte_EAF4-Ani_Bump
0000F18C 0000                       		dc.w byte_EAF8-Ani_Bump
0000F18E 0F00 FF                    byte_EAF4:	dc.b $F, 0, afEnd
0000F192 00                         		even
0000F192 0301 0201 02FD 00          byte_EAF8:	dc.b 3,	1, 2, 1, 2, afChange, 0
0000F19A 00                         		even
0000F19A 00                         		even
0000F19A                            Map_Bump:	include	"_maps\Bumper.asm"
0000F19A                            ; ---------------------------------------------------------------------------
0000F19A                            ; Sprite mappings - pinball bumper (SYZ)
0000F19A                            ; ---------------------------------------------------------------------------
0000F19A                            Map_Bump_internal:
0000F19A 0000                       		dc.w @normal-Map_Bump_internal
0000F19C 0000                       		dc.w @bumped1-Map_Bump_internal
0000F19E 0000                       		dc.w @bumped2-Map_Bump_internal
0000F1A0 02                         @normal:	dc.b 2
0000F1A1 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F1A6 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F1AB 02                         @bumped1:	dc.b 2
0000F1AC F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F1B1 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F1B6 02                         @bumped2:	dc.b 2
0000F1B7 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F1BC F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F1C2 00                         		even
0000F1C2 00                         		even
0000F1C2                            

0000F1C2                            		include	"_incObj\0D Signpost.asm" ; includes "GotThroughAct" subroutine
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2                            ; Object 0D - signpost at the end of a level
0000F1C2                            ; ---------------------------------------------------------------------------
0000F1C2                            

0000F1C2                            Signpost:
0000F1C2 7000                       		moveq	#0,d0
0000F1C4 1028 0024                  		move.b	obRoutine(a0),d0
0000F1C8 323B 0000                  		move.w	Sign_Index(pc,d0.w),d1
0000F1CC 4EBB 1000                  		jsr	Sign_Index(pc,d1.w)
0000F1D0 43F9 0000 0000             		lea	(Ani_Sign).l,a1
0000F1D6 6100 BBD8                  		bsr.w	AnimateSprite
0000F1DA 6100 EAC4                  		bsr.w	DisplaySprite
0000F1FC 4E75                       		rts	
0000F1FE                            ; ===========================================================================
0000F1FE 0000                       Sign_Index:	dc.w Sign_Main-Sign_Index
0000F200 0000                       		dc.w Sign_Touch-Sign_Index
0000F202 0000                       		dc.w Sign_Spin-Sign_Index
0000F204 0000                       		dc.w Sign_SonicRun-Sign_Index
0000F206 0000                       		dc.w Sign_Exit-Sign_Index
0000F208                            

0000F208 =00000030                  spintime:	equ $30		; time for signpost to spin
0000F208 =00000032                  sparkletime:	equ $32		; time between sparkles
0000F208 =00000034                  sparkle_id:	equ $34		; counter to keep track of sparkles
0000F208                            ; ===========================================================================
0000F208                            

0000F208                            Sign_Main:	; Routine 0
0000F208 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F20C 217C 0000 0000 0004        		move.l	#Map_Sign,obMap(a0)
0000F214 317C 0680 0002             		move.w	#$680,obGfx(a0)
0000F21A 117C 0004 0001             		move.b	#4,obRender(a0)
0000F220 117C 0018 0019             		move.b	#$18,obActWid(a0)
0000F226 117C 0004 0018             		move.b	#4,obPriority(a0)
0000F22C                            

0000F22C                            Sign_Touch:	; Routine 2
0000F22C 3038 D008                  		move.w	(v_player+obX).w,d0
0000F230 9068 0008                  		sub.w	obX(a0),d0
0000F234 6500                       		bcs.s	@notouch
0000F236 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F23A 6400                       		bcc.s	@notouch	; if not, branch
0000F23C 303C 0000                  		move.w	#sfx_Signpost,d0
0000F240 4EB9 0000 139C             		jsr	(PlaySound).l	; play signpost sound
0000F246 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0000F24A 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w ; lock screen position
0000F250 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F254                            

0000F254                            	@notouch:
0000F254 4E75                       		rts	
0000F256                            ; ===========================================================================
0000F256                            

0000F256                            Sign_Spin:	; Routine 4
0000F256 5368 0030                  		subq.w	#1,spintime(a0)	; subtract 1 from spin time
0000F25A 6A00                       		bpl.s	@chksparkle	; if time remains, branch
0000F25C 317C 003C 0030             		move.w	#60,spintime(a0) ; set spin cycle time to 1 second
0000F262 5228 001C                  		addq.b	#1,obAnim(a0)	; next spin cycle
0000F266 0C28 0003 001C             		cmpi.b	#3,obAnim(a0)	; have 3 spin cycles completed?
0000F26C 6600                       		bne.s	@chksparkle	; if not, branch
0000F26E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F272                            

0000F272                            	@chksparkle:
0000F272 5368 0032                  		subq.w	#1,sparkletime(a0) ; subtract 1 from time delay
0000F276 6A00                       		bpl.s	@fail		; if time remains, branch
0000F278 317C 000B 0032             		move.w	#$B,sparkletime(a0) ; set time between sparkles to $B frames
0000F27E 7000                       		moveq	#0,d0
0000F280 1028 0034                  		move.b	sparkle_id(a0),d0 ; get sparkle id
0000F284 5428 0034                  		addq.b	#2,sparkle_id(a0) ; increment sparkle counter
0000F288 0228 000E 0034             		andi.b	#$E,sparkle_id(a0)
0000F28E 45FB 0000                  		lea	Sign_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F292 6100 EE94                  		bsr.w	FindFreeObj
0000F296 6600                       		bne.s	@fail
0000F298 137C 0025 0000             		move.b	#id_Rings,0(a1)	; load rings object
0000F29E 137C 0006 0024             		move.b	#id_Ring_Sparkle,obRoutine(a1) ; jump to ring sparkle subroutine
0000F2A4 101A                       		move.b	(a2)+,d0
0000F2A6 4880                       		ext.w	d0
0000F2A8 D068 0008                  		add.w	obX(a0),d0
0000F2AC 3340 0008                  		move.w	d0,obX(a1)
0000F2B0 101A                       		move.b	(a2)+,d0
0000F2B2 4880                       		ext.w	d0
0000F2B4 D068 000C                  		add.w	obY(a0),d0
0000F2B8 3340 000C                  		move.w	d0,obY(a1)
0000F2BC 237C 0000 A61E 0004        		move.l	#Map_Ring,obMap(a1)
0000F2C4 337C 27B2 0002             		move.w	#$27B2,obGfx(a1)
0000F2CA 137C 0004 0001             		move.b	#4,obRender(a1)
0000F2D0 137C 0002 0018             		move.b	#2,obPriority(a1)
0000F2D6 137C 0008 0019             		move.b	#8,obActWid(a1)
0000F2DC                            

0000F2DC                            	@fail:
0000F2DC 4E75                       		rts	
0000F2DE                            ; ===========================================================================
0000F2DE E8F0                       Sign_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F2E0 0808                       		dc.b	8,   8
0000F2E2 F000                       		dc.b -$10,   0
0000F2E4 18F8                       		dc.b  $18,  -8
0000F2E6 00F8                       		dc.b	0,  -8
0000F2E8 1000                       		dc.b  $10,   0
0000F2EA E808                       		dc.b -$18,   8
0000F2EC 1810                       		dc.b  $18, $10
0000F2EE                            ; ===========================================================================
0000F2EE                            

0000F2EE                            Sign_SonicRun:	; Routine 6
0000F2EE 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
0000F2F2 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F2F6 0838 0001 D022             		btst	#1,(v_player+obStatus).w
0000F2FC 6600                       		bne.s	loc_EC70
0000F2FE 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0000F304 31FC 0800 F602             		move.w	#btnR<<8,(v_jpadhold2).w ; make Sonic run to the right
0000F30A                            

0000F30A                            	loc_EC70:
0000F30A 4A38 D000                  		tst.b	(v_player).w
0000F30E 6700                       		beq.s	loc_EC86
0000F310 3038 D008                  		move.w	(v_player+obX).w,d0
0000F314 3238 F72A                  		move.w	(v_limitright2).w,d1
0000F318 0641 0128                  		addi.w	#$128,d1
0000F31C B041                       		cmp.w	d1,d0
0000F31E 6500                       		bcs.s	locret_ECEE
0000F320                            

0000F320                            	loc_EC86:
0000F320 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F324                            

0000F324                            

0000F324                            ; ---------------------------------------------------------------------------
0000F324                            ; Subroutine to	set up bonuses at the end of an	act
0000F324                            ; ---------------------------------------------------------------------------
0000F324                            

0000F324                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F324                            

0000F324                            

0000F324                            GotThroughAct:
0000F324 4A38 D5C0                  		tst.b	(v_endcard).w
0000F328 6600                       		bne.s	locret_ECEE
0000F32A 31F8 F72A F728             		move.w	(v_limitright2).w,(v_limitleft2).w
0000F330 4238 FE2D                  		clr.b	(v_invinc).w	; disable invincibility
0000F334 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0000F338 11FC 003A D5C0             		move.b	#id_GotThroughCard,(v_endcard).w
0000F33E 7000                       		moveq	#plcid_TitleCard,d0
0000F340 4EB9 0000 15B8             		jsr	(NewPLC).l	; load title card patterns
0000F346 11FC 0001 F7D6             		move.b	#1,(f_endactbonus).w
0000F34C 7000                       		moveq	#0,d0
0000F34E 1038 FE23                  		move.b	(v_timemin).w,d0
0000F352 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F356 7200                       		moveq	#0,d1
0000F358 1238 FE24                  		move.b	(v_timesec).w,d1
0000F35C D041                       		add.w	d1,d0		; add up your time
0000F35E 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F362 7214                       		moveq	#$14,d1
0000F364 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F366 6500                       		bcs.s	@hastimebonus	; if not, branch
0000F368 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F36A                            

0000F36A                            	@hastimebonus:
0000F36A D040                       		add.w	d0,d0
0000F36C 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),(v_timebonus).w ; set time bonus
0000F372 3038 FE20                  		move.w	(v_rings).w,d0	; load number of rings
0000F376 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F37A 31C0 F7D4                  		move.w	d0,(v_ringbonus).w ; set ring bonus
0000F37E 303C 0000                  		move.w	#bgm_GotThrough,d0
0000F382 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play "Sonic got through" music
0000F388                            

0000F388                            locret_ECEE:
0000F388 4E75                       		rts	
0000F38A                            ; End of function GotThroughAct
0000F38A                            

0000F38A                            ; ===========================================================================
0000F38A 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F39E 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F3B4                            ; ===========================================================================
0000F3B4                            

0000F3B4                            Sign_Exit:	; Routine 8
0000F3B4 4E75                       		rts	
0000F3B4 4E75                       		rts	
0000F3B6                            		include	"_anim\Signpost.asm"
0000F3B6                            ; ---------------------------------------------------------------------------
0000F3B6                            ; Animation script - signpost
0000F3B6                            ; ---------------------------------------------------------------------------
0000F3B6 0000                       Ani_Sign:	dc.w @eggman-Ani_Sign
0000F3B8 0000                       		dc.w @spin1-Ani_Sign
0000F3BA 0000                       		dc.w @spin2-Ani_Sign
0000F3BC 0000                       		dc.w @sonic-Ani_Sign
0000F3BE 0F00 FF                    @eggman:	dc.b $F, 0, afEnd
0000F3C2 00                         		even
0000F3C2 0100 0102 03FF             @spin1:		dc.b 1,	0, 1, 2, 3, afEnd
0000F3C8 0104 0102 03FF             @spin2:		dc.b 1,	4, 1, 2, 3, afEnd
0000F3CE 0F04 FF                    @sonic:		dc.b $F, 4, afEnd
0000F3D2 00                         		even
0000F3D2 00                         		even
0000F3D2                            Map_Sign:	include	"_maps\Signpost.asm"
0000F3D2                            ; ---------------------------------------------------------------------------
0000F3D2                            ; Sprite mappings - signpost
0000F3D2                            ; ---------------------------------------------------------------------------
0000F3D2                            Map_Sign_internal:
0000F3D2 0000                       		dc.w @eggman-Map_Sign_internal
0000F3D4 0000                       		dc.w @spin1-Map_Sign_internal
0000F3D6 0000                       		dc.w @spin2-Map_Sign_internal
0000F3D8 0000                       		dc.w @spin3-Map_Sign_internal
0000F3DA 0000                       		dc.w @sonic-Map_Sign_internal
0000F3DC 03                         @eggman:	dc.b 3
0000F3DD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F3E2 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F3E7 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F3EC 02                         @spin1:		dc.b 2
0000F3ED F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F3F2 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F3F7 02                         @spin2:		dc.b 2
0000F3F8 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F3FD 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F402 02                         @spin3:		dc.b 2
0000F403 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F408 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F40D 03                         @sonic:		dc.b 3
0000F40E F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F413 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F418 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F41E 00                         		even
0000F41E 00                         		even
0000F41E                            

0000F41E                            		include	"_incObj\4C & 4D Lava Geyser Maker.asm"
0000F41E                            ; ---------------------------------------------------------------------------
0000F41E                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F41E                            ; ---------------------------------------------------------------------------
0000F41E                            

0000F41E                            GeyserMaker:
0000F41E 7000                       		moveq	#0,d0
0000F420 1028 0024                  		move.b	obRoutine(a0),d0
0000F424 323B 0000                  		move.w	GMake_Index(pc,d0.w),d1
0000F428 4EBB 1000                  		jsr	GMake_Index(pc,d1.w)
0000F42C 6000 0000                  		bra.w	Geyser_ChkDel
0000F430                            ; ===========================================================================
0000F430 0000                       GMake_Index:	dc.w GMake_Main-GMake_Index
0000F432 0000                       		dc.w GMake_Wait-GMake_Index
0000F434 0000                       		dc.w GMake_ChkType-GMake_Index
0000F436 0000                       		dc.w GMake_MakeLava-GMake_Index
0000F438 0000                       		dc.w GMake_Display-GMake_Index
0000F43A 0000                       		dc.w GMake_Delete-GMake_Index
0000F43C                            

0000F43C =00000034                  gmake_time:	equ $34		; time delay (2 bytes)
0000F43C =00000032                  gmake_timer:	equ $32		; current time remaining (2 bytes)
0000F43C =0000003C                  gmake_parent:	equ $3C		; address of parent object
0000F43C                            ; ===========================================================================
0000F43C                            

0000F43C                            GMake_Main:	; Routine 0
0000F43C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F440 217C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a0)
0000F448 317C E3A8 0002             		move.w	#$E3A8,obGfx(a0)
0000F44E 117C 0004 0001             		move.b	#4,obRender(a0)
0000F454 117C 0001 0018             		move.b	#1,obPriority(a0)
0000F45A 117C 0038 0019             		move.b	#$38,obActWid(a0)
0000F460 317C 0078 0034             		move.w	#120,gmake_time(a0) ; set time delay to 2 seconds
0000F466                            

0000F466                            GMake_Wait:	; Routine 2
0000F466 5368 0032                  		subq.w	#1,gmake_timer(a0) ; decrement timer
0000F46A 6A00                       		bpl.s	@cancel		; if time remains, branch
0000F46C                            

0000F46C 3168 0034 0032             		move.w	gmake_time(a0),gmake_timer(a0) ; reset timer
0000F472 3038 D00C                  		move.w	(v_player+obY).w,d0
0000F476 3228 000C                  		move.w	obY(a0),d1
0000F47A B041                       		cmp.w	d1,d0
0000F47C 6400                       		bcc.s	@cancel
0000F47E 0441 0170                  		subi.w	#$170,d1
0000F482 B041                       		cmp.w	d1,d0
0000F484 6500                       		bcs.s	@cancel
0000F486 5428 0024                  		addq.b	#2,obRoutine(a0) ; if Sonic is within range, goto GMake_ChkType
0000F48A                            

0000F48A                            	@cancel:
0000F48A 4E75                       		rts	
0000F48C                            ; ===========================================================================
0000F48C                            

0000F48C                            GMake_MakeLava:	; Routine 6
0000F48C 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F490 6100 ECAC                  		bsr.w	FindNextFreeObj
0000F494 6600                       		bne.s	@fail
0000F496 137C 004D 0000             		move.b	#id_LavaGeyser,0(a1) ; load lavafall object
0000F49C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F4A2 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F4A8 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000F4AE 2348 003C                  		move.l	a0,gmake_parent(a1)
0000F4B2                            

0000F4B2                            	@fail:
0000F4B2 117C 0001 001C             		move.b	#1,obAnim(a0)
0000F4B8 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 0 (geyser) ?
0000F4BC 6700                       		beq.s	@isgeyser	; if yes, branch
0000F4BE 117C 0004 001C             		move.b	#4,obAnim(a0)
0000F4C4 6000                       		bra.s	GMake_Display
0000F4C6                            ; ===========================================================================
0000F4C6                            

0000F4C6                            	@isgeyser:
0000F4C6 2268 003C                  		movea.l	gmake_parent(a0),a1 ; get parent object address
0000F4CA 08E9 0001 0022             		bset	#1,obStatus(a1)
0000F4D0 337C FA80 0012             		move.w	#-$580,obVelY(a1)
0000F4D6 6000                       		bra.s	GMake_Display
0000F4D8                            ; ===========================================================================
0000F4D8                            

0000F4D8                            GMake_ChkType:	; Routine 4
0000F4D8 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 (geyser) ?
0000F4DC 6700                       		beq.s	GMake_Display	; if yes, branch
0000F4DE 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F4E2 4E75                       		rts	
0000F4E4                            ; ===========================================================================
0000F4E4                            

0000F4E4                            GMake_Display:	; Routine 8
0000F4E4 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
0000F4EA 6100 B8C4                  		bsr.w	AnimateSprite
0000F4EE 6100 E7B0                  		bsr.w	DisplaySprite
0000F4F2 4E75                       		rts	
0000F4F4                            ; ===========================================================================
0000F4F4                            

0000F4F4                            GMake_Delete:	; Routine $A
0000F4F4 117C 0000 001C             		move.b	#0,obAnim(a0)
0000F4FA 117C 0002 0024             		move.b	#2,obRoutine(a0)
0000F500 4A28 0028                  		tst.b	obSubtype(a0)
0000F504 6700 E7D6                  		beq.w	DeleteObject
0000F508 4E75                       		rts	
0000F50A                            

0000F50A                            

0000F50A                            ; ---------------------------------------------------------------------------
0000F50A                            ; Object 4D - lava geyser / lavafall (MZ)
0000F50A                            ; ---------------------------------------------------------------------------
0000F50A                            

0000F50A                            LavaGeyser:
0000F50A 7000                       		moveq	#0,d0
0000F50C 1028 0024                  		move.b	obRoutine(a0),d0
0000F510 323B 0000                  		move.w	Geyser_Index(pc,d0.w),d1
0000F514 4EBB 1000                  		jsr	Geyser_Index(pc,d1.w)
0000F518 6000 E786                  		bra.w	DisplaySprite
0000F51C                            ; ===========================================================================
0000F51C 0000                       Geyser_Index:	dc.w Geyser_Main-Geyser_Index
0000F51E 0000                       		dc.w Geyser_Action-Geyser_Index
0000F520 0000                       		dc.w loc_EFFC-Geyser_Index
0000F522 0000                       		dc.w Geyser_Delete-Geyser_Index
0000F524                            

0000F524 FB00 0000                  Geyser_Speeds:	dc.w $FB00, 0
0000F528                            ; ===========================================================================
0000F528                            

0000F528                            Geyser_Main:	; Routine 0
0000F528 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F52C 3168 000C 0030             		move.w	obY(a0),$30(a0)
0000F532 4A28 0028                  		tst.b	obSubtype(a0)
0000F536 6700                       		beq.s	@isgeyser
0000F538 0468 0250 000C             		subi.w	#$250,obY(a0)
0000F53E                            

0000F53E                            	@isgeyser:
0000F53E 7000                       		moveq	#0,d0
0000F540 1028 0028                  		move.b	obSubtype(a0),d0
0000F544 D040                       		add.w	d0,d0
0000F546 317B 00DC 0012             		move.w	Geyser_Speeds(pc,d0.w),obVelY(a0)
0000F54C 2248                       		movea.l	a0,a1
0000F54E 7201                       		moveq	#1,d1
0000F550 6100                       		bsr.s	@makelava
0000F552 6000                       		bra.s	@activate
0000F554                            ; ===========================================================================
0000F554                            

0000F554                            	@loop:
0000F554 6100 EBE8                  		bsr.w	FindNextFreeObj
0000F558 6600                       		bne.s	@fail
0000F55A                            

0000F55A                            @makelava:
0000F55A 137C 004D 0000             		move.b	#id_LavaGeyser,0(a1)
0000F560 237C 0000 0000 0004        		move.l	#Map_Geyser,obMap(a1)
0000F568 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
0000F56E 137C 0004 0001             		move.b	#4,obRender(a1)
0000F574 137C 0020 0019             		move.b	#$20,obActWid(a1)
0000F57A 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F580 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F586 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
0000F58C 137C 0001 0018             		move.b	#1,obPriority(a1)
0000F592 137C 0005 001C             		move.b	#5,obAnim(a1)
0000F598 4A28 0028                  		tst.b	obSubtype(a0)
0000F59C 6700                       		beq.s	@fail
0000F59E 137C 0002 001C             		move.b	#2,obAnim(a1)
0000F5A4                            

0000F5A4                            	@fail:
0000F5A4 51C9 FFAE                  		dbf	d1,@loop
0000F5A8 4E75                       		rts	
0000F5AA                            ; ===========================================================================
0000F5AA                            

0000F5AA                            @activate:
0000F5AA 0669 0060 000C             		addi.w	#$60,obY(a1)
0000F5B0 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F5B6 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F5BC 137C 0093 0020             		move.b	#$93,obColType(a1)
0000F5C2 137C 0080 0016             		move.b	#$80,obHeight(a1)
0000F5C8 08E9 0004 0001             		bset	#4,obRender(a1)
0000F5CE 5829 0024                  		addq.b	#4,obRoutine(a1)
0000F5D2 2348 003C                  		move.l	a0,$3C(a1)
0000F5D6 4A28 0028                  		tst.b	obSubtype(a0)
0000F5DA 6700                       		beq.s	@sound
0000F5DC 7200                       		moveq	#0,d1
0000F5DE 6100 FF74                  		bsr.w	@loop
0000F5E2 5429 0024                  		addq.b	#2,obRoutine(a1)
0000F5E6 08E9 0004 0002             		bset	#4,obGfx(a1)
0000F5EC 0669 0100 000C             		addi.w	#$100,obY(a1)
0000F5F2 137C 0000 0018             		move.b	#0,obPriority(a1)
0000F5F8 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F5FE 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F604 117C 0000 0028             		move.b	#0,obSubtype(a0)
0000F60A                            

0000F60A                            	@sound:
0000F60A 303C 0000                  		move.w	#sfx_Burning,d0
0000F60E 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play flame sound
0000F614                            

0000F614                            Geyser_Action:	; Routine 2
0000F614 7000                       		moveq	#0,d0
0000F616 1028 0028                  		move.b	obSubtype(a0),d0
0000F61A D040                       		add.w	d0,d0
0000F61C 323B 0000                  		move.w	Geyser_Types(pc,d0.w),d1
0000F620 4EBB 1000                  		jsr	Geyser_Types(pc,d1.w)
0000F624 6100 E654                  		bsr.w	SpeedToPos
0000F628 43F9 0000 0000             		lea	(Ani_Geyser).l,a1
0000F62E 6100 B780                  		bsr.w	AnimateSprite
0000F632                            

0000F632                            Geyser_ChkDel:
0000F650 4E75                       		rts	
0000F652                            ; ===========================================================================
0000F652 0000                       Geyser_Types:	dc.w Geyser_Type00-Geyser_Types
0000F654 0000                       		dc.w Geyser_Type01-Geyser_Types
0000F656                            ; ===========================================================================
0000F656                            

0000F656                            Geyser_Type00:
0000F656 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
0000F65C 3028 0030                  		move.w	$30(a0),d0
0000F660 B068 000C                  		cmp.w	obY(a0),d0
0000F664 6400                       		bcc.s	locret_EFDA
0000F666 5828 0024                  		addq.b	#4,obRoutine(a0)
0000F66A 2268 003C                  		movea.l	$3C(a0),a1
0000F66E 137C 0003 001C             		move.b	#3,obAnim(a1)
0000F674                            

0000F674                            locret_EFDA:
0000F674 4E75                       		rts	
0000F676                            ; ===========================================================================
0000F676                            

0000F676                            Geyser_Type01:
0000F676 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; increase object's falling speed
0000F67C 3028 0030                  		move.w	$30(a0),d0
0000F680 B068 000C                  		cmp.w	obY(a0),d0
0000F684 6400                       		bcc.s	locret_EFFA
0000F686 5828 0024                  		addq.b	#4,obRoutine(a0)
0000F68A 2268 003C                  		movea.l	$3C(a0),a1
0000F68E 137C 0001 001C             		move.b	#1,obAnim(a1)
0000F694                            

0000F694                            locret_EFFA:
0000F694 4E75                       		rts	
0000F696                            ; ===========================================================================
0000F696                            

0000F696                            loc_EFFC:	; Routine 4
0000F696 2268 003C                  		movea.l	$3C(a0),a1
0000F69A 0C29 0006 0024             		cmpi.b	#6,obRoutine(a1)
0000F6A0 6700 0000                  		beq.w	Geyser_Delete
0000F6A4 3029 000C                  		move.w	obY(a1),d0
0000F6A8 0640 0060                  		addi.w	#$60,d0
0000F6AC 3140 000C                  		move.w	d0,obY(a0)
0000F6B0 9068 0030                  		sub.w	$30(a0),d0
0000F6B4 4440                       		neg.w	d0
0000F6B6 7208                       		moveq	#8,d1
0000F6B8 0C40 0040                  		cmpi.w	#$40,d0
0000F6BC 6C00                       		bge.s	loc_F026
0000F6BE 720B                       		moveq	#$B,d1
0000F6C0                            

0000F6C0                            loc_F026:
0000F6C0 0C40 0080                  		cmpi.w	#$80,d0
0000F6C4 6F00                       		ble.s	loc_F02E
0000F6C6 720E                       		moveq	#$E,d1
0000F6C8                            

0000F6C8                            loc_F02E:
0000F6C8 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0000F6CC 6A00                       		bpl.s	loc_F04C
0000F6CE 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
0000F6D4 5228 001B                  		addq.b	#1,obAniFrame(a0)
0000F6D8 0C28 0002 001B             		cmpi.b	#2,obAniFrame(a0)
0000F6DE 6500                       		bcs.s	loc_F04C
0000F6E0 117C 0000 001B             		move.b	#0,obAniFrame(a0)
0000F6E6                            

0000F6E6                            loc_F04C:
0000F6E6 1028 001B                  		move.b	obAniFrame(a0),d0
0000F6EA D001                       		add.b	d1,d0
0000F6EC 1140 001A                  		move.b	d0,obFrame(a0)
0000F6F0 6000 FF40                  		bra.w	Geyser_ChkDel
0000F6F4                            ; ===========================================================================
0000F6F4                            

0000F6F4                            Geyser_Delete:	; Routine 6
0000F6F4 6000 E5E6                  		bra.w	DeleteObject
0000F6F4 6000 E5E6                  		bra.w	DeleteObject
0000F6F8                            		include	"_incObj\4E Wall of Lava.asm"
0000F6F8                            ; ---------------------------------------------------------------------------
0000F6F8                            ; Object 4E - advancing	wall of	lava (MZ)
0000F6F8                            ; ---------------------------------------------------------------------------
0000F6F8                            

0000F6F8                            LavaWall:
0000F6F8 7000                       		moveq	#0,d0
0000F6FA 1028 0024                  		move.b	obRoutine(a0),d0
0000F6FE 323B 0000                  		move.w	LWall_Index(pc,d0.w),d1
0000F702 4EFB 1000                  		jmp	LWall_Index(pc,d1.w)
0000F706                            ; ===========================================================================
0000F706 0000                       LWall_Index:	dc.w LWall_Main-LWall_Index
0000F708 0000                       		dc.w LWall_Solid-LWall_Index
0000F70A 0000                       		dc.w LWall_Action-LWall_Index
0000F70C 0000                       		dc.w LWall_Move-LWall_Index
0000F70E 0000                       		dc.w LWall_Delete-LWall_Index
0000F710                            

0000F710 =00000036                  lwall_flag:	equ $36		; flag to start wall moving
0000F710                            ; ===========================================================================
0000F710                            

0000F710                            LWall_Main:	; Routine 0
0000F710 5828 0024                  		addq.b	#4,obRoutine(a0)
0000F714 2248                       		movea.l	a0,a1
0000F716 7201                       		moveq	#1,d1
0000F718 6000                       		bra.s	@make
0000F71A                            ; ===========================================================================
0000F71A                            

0000F71A                            	@loop:
0000F71A 6100 EA22                  		bsr.w	FindNextFreeObj
0000F71E 6600                       		bne.s	@fail
0000F720                            

0000F720                            @make:
0000F720 137C 004E 0000             		move.b	#id_LavaWall,0(a1)	; load object
0000F726 237C 0000 0000 0004        		move.l	#Map_LWall,obMap(a1)
0000F72E 337C 63A8 0002             		move.w	#$63A8,obGfx(a1)
0000F734 137C 0004 0001             		move.b	#4,obRender(a1)
0000F73A 137C 0050 0019             		move.b	#$50,obActWid(a1)
0000F740 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000F746 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000F74C 137C 0001 0018             		move.b	#1,obPriority(a1)
0000F752 137C 0000 001C             		move.b	#0,obAnim(a1)
0000F758 137C 0094 0020             		move.b	#$94,obColType(a1)
0000F75E 2348 003C                  		move.l	a0,$3C(a1)
0000F762                            

0000F762                            	@fail:
0000F762 51C9 FFB6                  		dbf	d1,@loop	; repeat sequence once
0000F766                            

0000F766 5C29 0024                  		addq.b	#6,obRoutine(a1)
0000F76A 137C 0004 001A             		move.b	#4,obFrame(a1)
0000F770                            

0000F770                            LWall_Action:	; Routine 4
0000F770 3038 D008                  		move.w	(v_player+obX).w,d0
0000F774 9068 0008                  		sub.w	obX(a0),d0
0000F778 6400                       		bcc.s	@rangechk
0000F77A 4440                       		neg.w	d0
0000F77C                            

0000F77C                            	@rangechk:
0000F77C 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F780 6400                       		bcc.s	@movewall	; if not, branch
0000F782 3038 D00C                  		move.w	(v_player+obY).w,d0
0000F786 9068 000C                  		sub.w	obY(a0),d0
0000F78A 6400                       		bcc.s	@rangechk2
0000F78C 4440                       		neg.w	d0
0000F78E                            

0000F78E                            	@rangechk2:
0000F78E 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F792 6400                       		bcc.s	@movewall	; if not, branch
0000F794 117C 0001 0036             		move.b	#1,lwall_flag(a0) ; set object to move
0000F79A 6000                       		bra.s	LWall_Solid
0000F79C                            ; ===========================================================================
0000F79C                            

0000F79C                            @movewall:
0000F79C 4A28 0036                  		tst.b	lwall_flag(a0)	; is object set	to move?
0000F7A0 6700                       		beq.s	LWall_Solid	; if not, branch
0000F7A2 317C 0180 0010             		move.w	#$180,obVelX(a0) ; set object speed
0000F7A8 5528 0024                  		subq.b	#2,$24(a0)
0000F7AC                            

0000F7AC                            LWall_Solid:	; Routine 2
0000F7AC 323C 002B                  		move.w	#$2B,d1
0000F7B0 343C 0018                  		move.w	#$18,d2
0000F7B4 3602                       		move.w	d2,d3
0000F7B6 5243                       		addq.w	#1,d3
0000F7B8 3828 0008                  		move.w	obX(a0),d4
0000F7BC 1028 0024                  		move.b	obRoutine(a0),d0
0000F7C0 3F00                       		move.w	d0,-(sp)
0000F7C2 6100 0000                  		bsr.w	SolidObject
0000F7C6 301F                       		move.w	(sp)+,d0
0000F7C8 1140 0024                  		move.b	d0,obRoutine(a0)
0000F7CC 0C68 06A0 0008             		cmpi.w	#$6A0,obX(a0)	; has object reached $6A0 on the x-axis?
0000F7D2 6600                       		bne.s	@animate	; if not, branch
0000F7D4 4268 0010                  		clr.w	obVelX(a0)	; stop object moving
0000F7D8 4228 0036                  		clr.b	lwall_flag(a0)
0000F7DC                            

0000F7DC                            	@animate:
0000F7DC 43F9 0000 0000             		lea	(Ani_LWall).l,a1
0000F7E2 6100 B5CC                  		bsr.w	AnimateSprite
0000F7E6 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0000F7EC 6400                       		bcc.s	@rangechk
0000F7EE 6100 E48A                  		bsr.w	SpeedToPos
0000F7F2                            

0000F7F2                            	@rangechk:
0000F7F2 6100 E4AC                  		bsr.w	DisplaySprite
0000F7F6 4A28 0036                  		tst.b	lwall_flag(a0)	; is wall already moving?
0000F7FA 6600                       		bne.s	@moving		; if yes, branch
0000F818                            

0000F818                            	@moving:
0000F818 4E75                       		rts	
0000F81A                            ; ===========================================================================
0000F81A                            

0000F81A                            @chkgone:
0000F81A 45F8 FC00                  		lea	(v_objstate).w,a2
0000F81E 7000                       		moveq	#0,d0
0000F820 1028 0023                  		move.b	obRespawnNo(a0),d0
0000F824 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F82A 117C 0008 0024             		move.b	#8,obRoutine(a0)
0000F830 4E75                       		rts	
0000F832                            ; ===========================================================================
0000F832                            

0000F832                            LWall_Move:	; Routine 6
0000F832 2268 003C                  		movea.l	$3C(a0),a1
0000F836 0C29 0008 0024             		cmpi.b	#8,obRoutine(a1)
0000F83C 6700                       		beq.s	LWall_Delete
0000F83E 3169 0008 0008             		move.w	obX(a1),obX(a0)	; move rest of lava wall
0000F844 0468 0080 0008             		subi.w	#$80,obX(a0)
0000F84A 6000 E454                  		bra.w	DisplaySprite
0000F84E                            ; ===========================================================================
0000F84E                            

0000F84E                            LWall_Delete:	; Routine 8
0000F84E 6000 E48C                  		bra.w	DeleteObject
0000F84E 6000 E48C                  		bra.w	DeleteObject
0000F852                            		include	"_incObj\54 Lava Tag.asm"
0000F852                            ; ---------------------------------------------------------------------------
0000F852                            ; Object 54 - invisible	lava tag (MZ)
0000F852                            ; ---------------------------------------------------------------------------
0000F852                            

0000F852                            LavaTag:
0000F852 7000                       		moveq	#0,d0
0000F854 1028 0024                  		move.b	obRoutine(a0),d0
0000F858 323B 0000                  		move.w	LTag_Index(pc,d0.w),d1
0000F85C 4EFB 1000                  		jmp	LTag_Index(pc,d1.w)
0000F860                            ; ===========================================================================
0000F860 0000                       LTag_Index:	dc.w LTag_Main-LTag_Index
0000F862 0000                       		dc.w LTag_ChkDel-LTag_Index
0000F864                            

0000F864 9694 95                    LTag_ColTypes:	dc.b $96, $94, $95
0000F868 00                         		even
0000F868                            ; ===========================================================================
0000F868                            

0000F868                            LTag_Main:	; Routine 0
0000F868 5428 0024                  		addq.b	#2,obRoutine(a0)
0000F86C 7000                       		moveq	#0,d0
0000F86E 1028 0028                  		move.b	obSubtype(a0),d0
0000F872 117B 00F0 0020             		move.b	LTag_ColTypes(pc,d0.w),obColType(a0)
0000F878 217C 0000 0000 0004        		move.l	#Map_LTag,obMap(a0)
0000F880 117C 0084 0001             		move.b	#$84,obRender(a0)
0000F886                            

0000F886                            LTag_ChkDel:	; Routine 2
0000F886 3028 0008                  		move.w	obX(a0),d0
0000F88A 0240 FF80                  		andi.w	#$FF80,d0
0000F88E 3238 F700                  		move.w	(v_screenposx).w,d1
0000F892 0441 0080                  		subi.w	#$80,d1
0000F896 0241 FF80                  		andi.w	#$FF80,d1
0000F89A 9041                       		sub.w	d1,d0
0000F89C 6B00 E43E                  		bmi.w	DeleteObject
0000F8A0 0C40 0280                  		cmpi.w	#$280,d0
0000F8A4 6200 E436                  		bhi.w	DeleteObject
0000F8A8 4E75                       		rts	
0000F8A8 4E75                       		rts	
0000F8AA                            Map_LTag:	include	"_maps\Lava Tag.asm"
0000F8AA                            ; ---------------------------------------------------------------------------
0000F8AA                            ; Sprite mappings - invisible lava tag (MZ)
0000F8AA                            ; ---------------------------------------------------------------------------
0000F8AA                            Map_LTag_internal:
0000F8AA 0000                       		dc.w @0-Map_LTag_internal
0000F8AC 00                         @0:		dc.b 0		; no sprite, because the tag is invisible!
0000F8AE 00                         		even
0000F8AE 00                         		even
0000F8AE                            		include	"_anim\Lava Geyser.asm"
0000F8AE                            ; ---------------------------------------------------------------------------
0000F8AE                            ; Animation script - geyser of lava (MZ)
0000F8AE                            ; ---------------------------------------------------------------------------
0000F8AE 0000                       Ani_Geyser:	dc.w @bubble1-Ani_Geyser
0000F8B0 0000                       		dc.w @bubble2-Ani_Geyser
0000F8B2 0000                       		dc.w @end-Ani_Geyser
0000F8B4 0000                       		dc.w @bubble3-Ani_Geyser
0000F8B6 0000                       		dc.w @blank-Ani_Geyser
0000F8B8 0000                       		dc.w @bubble4-Ani_Geyser
0000F8BA 0200 0100 0104 0504 05FC   @bubble1:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	afRoutine
0000F8C4 0202 03FF                  @bubble2:	dc.b 2,	2, 3, afEnd
0000F8C8 0206 07FF                  @end:		dc.b 2,	6, 7, afEnd
0000F8CC 0202 0300 0100 01FC        @bubble3:	dc.b 2,	2, 3, 0, 1, 0, 1, afRoutine
0000F8D4 0F13 FF                    @blank:		dc.b $F, $13, afEnd
0000F8D8 00                         		even
0000F8D8 0211 12FF                  @bubble4:	dc.b 2,	$11, $12, afEnd
0000F8DC                            		even
0000F8DC                            		even
0000F8DC                            		include	"_anim\Wall of Lava.asm"
0000F8DC                            ; ---------------------------------------------------------------------------
0000F8DC                            ; Animation script - advancing wall of lava (MZ)
0000F8DC                            ; ---------------------------------------------------------------------------
0000F8DC 0000                       Ani_LWall:	dc.w @wall-Ani_LWall
0000F8DE 0900 0102 03FF             @wall:		dc.b 9,	0, 1, 2, 3, afEnd
0000F8E4                            		even
0000F8E4                            		even
0000F8E4                            Map_Geyser:	include	"_maps\Lava Geyser.asm"
0000F8E4                            ; ---------------------------------------------------------------------------
0000F8E4                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F8E4                            ; ---------------------------------------------------------------------------
0000F8E4                            Map_Geyser_internal:
0000F8E4 0000                       		dc.w @bubble1-Map_Geyser_internal
0000F8E6 0000                       		dc.w @bubble2-Map_Geyser_internal
0000F8E8 0000                       		dc.w @bubble3-Map_Geyser_internal
0000F8EA 0000                       		dc.w @bubble4-Map_Geyser_internal
0000F8EC 0000                       		dc.w @bubble5-Map_Geyser_internal
0000F8EE 0000                       		dc.w @bubble6-Map_Geyser_internal
0000F8F0 0000                       		dc.w @end1-Map_Geyser_internal
0000F8F2 0000                       		dc.w @end2-Map_Geyser_internal
0000F8F4 0000                       		dc.w @medcolumn1-Map_Geyser_internal
0000F8F6 0000                       		dc.w @medcolumn2-Map_Geyser_internal
0000F8F8 0000                       		dc.w @medcolumn3-Map_Geyser_internal
0000F8FA 0000                       		dc.w @shortcolumn1-Map_Geyser_internal
0000F8FC 0000                       		dc.w @shortcolumn2-Map_Geyser_internal
0000F8FE 0000                       		dc.w @shortcolumn3-Map_Geyser_internal
0000F900 0000                       		dc.w @longcolumn1-Map_Geyser_internal
0000F902 0000                       		dc.w @longcolumn2-Map_Geyser_internal
0000F904 0000                       		dc.w @longcolumn3-Map_Geyser_internal
0000F906 0000                       		dc.w @bubble7-Map_Geyser_internal
0000F908 0000                       		dc.w @bubble8-Map_Geyser_internal
0000F90A 0000                       		dc.w @blank-Map_Geyser_internal
0000F90C 02                         @bubble1:	dc.b 2
0000F90D EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F912 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F917 02                         @bubble2:	dc.b 2
0000F918 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F91D EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F922 04                         @bubble3:	dc.b 4
0000F923 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F928 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F92D F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F932 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F937 04                         @bubble4:	dc.b 4
0000F938 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F93D F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F942 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F947 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F94C 06                         @bubble5:	dc.b 6
0000F94D EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F952 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F957 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F95C EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F961 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F966 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F96B 06                         @bubble6:	dc.b 6
0000F96C EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F971 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F976 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F97B EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F980 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F985 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F98A 02                         @end1:		dc.b 2
0000F98B E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F990 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F995 02                         @end2:		dc.b 2
0000F996 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F99B E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F9A0 0A                         @medcolumn1:	dc.b $A
0000F9A1 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F9A6 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F9AB B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F9B0 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F9B5 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F9BA D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F9BF F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F9C4 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F9C9 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F9CE 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F9D3 0A                         @medcolumn2:	dc.b $A
0000F9D4 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F9D9 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F9DE B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F9E3 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F9E8 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F9ED D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F9F2 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F9F7 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F9FC 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FA01 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FA06 0A                         @medcolumn3:	dc.b $A
0000FA07 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA0C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA11 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FA16 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA1B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA20 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA25 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FA2A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FA2F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FA34 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FA39 06                         @shortcolumn1:	dc.b 6
0000FA3A 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FA3F 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FA44 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FA49 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FA4E D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FA53 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FA58 06                         @shortcolumn2:	dc.b 6
0000FA59 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FA5E 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FA63 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FA68 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FA6D D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FA72 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FA77 06                         @shortcolumn3:	dc.b 6
0000FA78 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FA7D 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FA82 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FA87 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FA8C D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FA91 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FA96 10                         @longcolumn1:	dc.b $10
0000FA97 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FA9C 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FAA1 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FAA6 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FAAB D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FAB0 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FAB5 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FABA F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FABF 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FAC4 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FAC9 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FACE 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FAD3 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FAD8 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FADD 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FAE2 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FAE7 10                         @longcolumn2:	dc.b $10
0000FAE8 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FAED 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FAF2 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FAF7 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FAFC D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FB01 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FB06 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FB0B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FB10 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FB15 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FB1A 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FB1F 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FB24 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FB29 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FB2E 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FB33 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FB38 10                         @longcolumn3:	dc.b $10
0000FB39 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FB3E 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FB43 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FB48 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FB4D D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FB52 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FB57 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FB5C F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FB61 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FB66 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FB6B 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FB70 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FB75 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FB7A 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FB7F 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FB84 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FB89 06                         @bubble7:	dc.b 6
0000FB8A E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FB8F E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FB94 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FB99 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FB9E D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FBA3 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FBA8 06                         @bubble8:	dc.b 6
0000FBA9 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FBAE E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FBB3 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FBB8 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FBBD D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FBC2 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FBC7 00                         @blank:	dc.b 0
0000FBC8                            		even
0000FBC8                            		even
0000FBC8                            Map_LWall:	include	"_maps\Wall of Lava.asm"
0000FBC8                            ; ---------------------------------------------------------------------------
0000FBC8                            ; Sprite mappings - advancing wall of lava (MZ)
0000FBC8                            ; ---------------------------------------------------------------------------
0000FBC8                            Map_LWall_internal:
0000FBC8 0000                       		dc.w byte_F538-Map_LWall_internal
0000FBCA 0000                       		dc.w byte_F566-Map_LWall_internal
0000FBCC 0000                       		dc.w byte_F594-Map_LWall_internal
0000FBCE 0000                       		dc.w byte_F5C2-Map_LWall_internal
0000FBD0 0000                       		dc.w byte_F5F0-Map_LWall_internal
0000FBD2 09                         byte_F538:	dc.b 9
0000FBD3 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FBD8 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FBDD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FBE2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FBE7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FBEC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FBF1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FBF6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FBFB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC00 09                         byte_F566:	dc.b 9
0000FC01 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FC06 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FC0B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FC10 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FC15 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FC1A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC1F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC24 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC29 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC2E 09                         byte_F594:	dc.b 9
0000FC2F E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FC34 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FC39 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FC3E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FC43 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FC48 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC4D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC52 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC57 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC5C 09                         byte_F5C2:	dc.b 9
0000FC5D E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FC62 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FC67 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FC6C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FC71 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FC76 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FC7B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FC80 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FC85 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FC8A 08                         byte_F5F0:	dc.b 8
0000FC8B E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FC90 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FC95 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FC9A 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FC9F E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FCA4 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FCA9 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FCAE 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FCB4 00                         		even
0000FCB4 00                         		even
0000FCB4                            

0000FCB4                            		include	"_incObj\40 Moto Bug.asm" ; includes "_incObj\sub RememberState.asm"
0000FCB4                            ; ---------------------------------------------------------------------------
0000FCB4                            ; Object 40 - Moto Bug enemy (GHZ)
0000FCB4                            ; ---------------------------------------------------------------------------
0000FCB4                            

0000FCB4                            MotoBug:
0000FCB4 7000                       		moveq	#0,d0
0000FCB6 1028 0024                  		move.b	obRoutine(a0),d0
0000FCBA 323B 0000                  		move.w	Moto_Index(pc,d0.w),d1
0000FCBE 4EFB 1000                  		jmp	Moto_Index(pc,d1.w)
0000FCC2                            ; ===========================================================================
0000FCC2 0000                       Moto_Index:	dc.w Moto_Main-Moto_Index
0000FCC4 0000                       		dc.w Moto_Action-Moto_Index
0000FCC6 0000                       		dc.w Moto_Animate-Moto_Index
0000FCC8 0000                       		dc.w Moto_Delete-Moto_Index
0000FCCA                            ; ===========================================================================
0000FCCA                            

0000FCCA                            Moto_Main:	; Routine 0
0000FCCA 217C 0000 0000 0004        		move.l	#Map_Moto,obMap(a0)
0000FCD2 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
0000FCD8 117C 0004 0001             		move.b	#4,obRender(a0)
0000FCDE 117C 0004 0018             		move.b	#4,obPriority(a0)
0000FCE4 117C 0014 0019             		move.b	#$14,obActWid(a0)
0000FCEA 4A28 001C                  		tst.b	obAnim(a0)	; is object a smoke trail?
0000FCEE 6600                       		bne.s	@smoke		; if yes, branch
0000FCF0 117C 000E 0016             		move.b	#$E,obHeight(a0)
0000FCF6 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FCFC 117C 000C 0020             		move.b	#$C,obColType(a0)
0000FD02 6100 DF4A                  		bsr.w	ObjectFall
0000FD06 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000FD0C 4A41                       		tst.w	d1
0000FD0E 6A00                       		bpl.s	@notonfloor
0000FD10 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0000FD14 317C 0000 0012             		move.w	#0,obVelY(a0)
0000FD1A 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Moto_Action next
0000FD1E 0868 0000 0022             		bchg	#0,obStatus(a0)
0000FD24                            

0000FD24                            	@notonfloor:
0000FD24 4E75                       		rts	
0000FD26                            ; ===========================================================================
0000FD26                            

0000FD26                            @smoke:
0000FD26 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Moto_Animate next
0000FD2A 6000 0000                  		bra.w	Moto_Animate
0000FD2E                            ; ===========================================================================
0000FD2E                            

0000FD2E                            Moto_Action:	; Routine 2
0000FD2E 7000                       		moveq	#0,d0
0000FD30 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FD34 323B 0000                  		move.w	Moto_ActIndex(pc,d0.w),d1
0000FD38 4EBB 1000                  		jsr	Moto_ActIndex(pc,d1.w)
0000FD3C 43F9 0000 0000             		lea	(Ani_Moto).l,a1
0000FD42 6100 B06C                  		bsr.w	AnimateSprite
0000FD46                            

0000FD46                            		include	"_incObj\sub RememberState.asm" ; Moto_Action terminates in this file
0000FD46                            ; ---------------------------------------------------------------------------
0000FD46                            ; Subroutine to remember whether an object is destroyed/collected
0000FD46                            ; ---------------------------------------------------------------------------
0000FD46                            

0000FD46                            RememberState:
0000FD64 6000 DF3A                  		bra.w	DisplaySprite
0000FD68                            

0000FD68                            	@offscreen:
0000FD68 45F8 FC00                  		lea	(v_objstate).w,a2
0000FD6C 7000                       		moveq	#0,d0
0000FD6E 1028 0023                  		move.b	obRespawnNo(a0),d0
0000FD72 6700                       		beq.s	@delete
0000FD74 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FD7A                            

0000FD7A                            	@delete:
0000FD7A 6000 DF60                  		bra.w	DeleteObject
0000FD7A 6000 DF60                  		bra.w	DeleteObject
0000FD7E                            

0000FD7E                            ; ===========================================================================
0000FD7E 0000                       Moto_ActIndex:	dc.w @move-Moto_ActIndex
0000FD80 0000                       		dc.w @findfloor-Moto_ActIndex
0000FD82                            

0000FD82 =00000030                  @time:		equ $30
0000FD82 =00000033                  @smokedelay:	equ $33
0000FD82                            ; ===========================================================================
0000FD82                            

0000FD82                            @move:
0000FD82 5368 0030                  		subq.w	#1,@time(a0)	; subtract 1 from pause	time
0000FD86 6A00                       		bpl.s	@wait		; if time remains, branch
0000FD88 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000FD8C 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object to the left
0000FD92 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FD98 0868 0000 0022             		bchg	#0,obStatus(a0)
0000FD9E 6600                       		bne.s	@wait
0000FDA0 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000FDA4                            

0000FDA4                            	@wait:
0000FDA4 4E75                       		rts	
0000FDA6                            ; ===========================================================================
0000FDA6                            

0000FDA6                            @findfloor:
0000FDA6 6100 DED2                  		bsr.w	SpeedToPos
0000FDAA 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0000FDB0 0C41 FFF8                  		cmpi.w	#-8,d1
0000FDB4 6D00                       		blt.s	@pause
0000FDB6 0C41 000C                  		cmpi.w	#$C,d1
0000FDBA 6C00                       		bge.s	@pause
0000FDBC D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0000FDC0 5328 0033                  		subq.b	#1,@smokedelay(a0)
0000FDC4 6A00                       		bpl.s	@nosmoke
0000FDC6 117C 000F 0033             		move.b	#$F,@smokedelay(a0)
0000FDCC 6100 E35A                  		bsr.w	FindFreeObj
0000FDD0 6600                       		bne.s	@nosmoke
0000FDD2 137C 0040 0000             		move.b	#id_MotoBug,0(a1) ; load exhaust smoke object
0000FDD8 3368 0008 0008             		move.w	obX(a0),obX(a1)
0000FDDE 3368 000C 000C             		move.w	obY(a0),obY(a1)
0000FDE4 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
0000FDEA 137C 0002 001C             		move.b	#2,obAnim(a1)
0000FDF0                            

0000FDF0                            	@nosmoke:
0000FDF0 4E75                       		rts	
0000FDF2                            

0000FDF2                            @pause:
0000FDF2 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000FDF6 317C 003B 0030             		move.w	#59,@time(a0)	; set pause time to 1 second
0000FDFC 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop the object moving
0000FE02 117C 0000 001C             		move.b	#0,obAnim(a0)
0000FE08 4E75                       		rts	
0000FE0A                            ; ===========================================================================
0000FE0A                            

0000FE0A                            Moto_Animate:	; Routine 4
0000FE0A 43F9 0000 0000             		lea	(Ani_Moto).l,a1
0000FE10 6100 AF9E                  		bsr.w	AnimateSprite
0000FE14 6000 DE8A                  		bra.w	DisplaySprite
0000FE18                            ; ===========================================================================
0000FE18                            

0000FE18                            Moto_Delete:	; Routine 6
0000FE18 6000 DEC2                  		bra.w	DeleteObject
0000FE18 6000 DEC2                  		bra.w	DeleteObject
0000FE1C                            		include	"_anim\Moto Bug.asm"
0000FE1C                            ; ---------------------------------------------------------------------------
0000FE1C                            ; Animation script - Motobug enemy
0000FE1C                            ; ---------------------------------------------------------------------------
0000FE1C 0000                       Ani_Moto:	dc.w @stand-Ani_Moto
0000FE1E 0000                       		dc.w @walk-Ani_Moto
0000FE20 0000                       		dc.w @smoke-Ani_Moto
0000FE22                            

0000FE22 0F02 FF                    @stand:		dc.b $F, 2, afEnd
0000FE26 00                         		even
0000FE26 0700 0100 02FF             @walk:		dc.b 7,	0, 1, 0, 2, afEnd
0000FE2C 0103 0603 0604 0604 0604+  @smoke:		dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, afRoutine
0000FE3A 00                         		even
0000FE3A 00                         		even
0000FE3A                            Map_Moto:	include	"_maps\Moto Bug.asm"
0000FE3A                            ; ---------------------------------------------------------------------------
0000FE3A                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FE3A                            ; ---------------------------------------------------------------------------
0000FE3A                            Map_Moto_internal:
0000FE3A 0000                       		dc.w @moto1-Map_Moto_internal
0000FE3C 0000                       		dc.w @moto2-Map_Moto_internal
0000FE3E 0000                       		dc.w @moto3-Map_Moto_internal
0000FE40 0000                       		dc.w @smoke1-Map_Moto_internal
0000FE42 0000                       		dc.w @smoke2-Map_Moto_internal
0000FE44 0000                       		dc.w @smoke3-Map_Moto_internal
0000FE46 0000                       		dc.w @blank-Map_Moto_internal
0000FE48 04                         @moto1:		dc.b 4
0000FE49 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000FE4E 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0000FE53 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000FE58 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0000FE5D 04                         @moto2:		dc.b 4
0000FE5E F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0000FE63 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
0000FE68 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0000FE6D 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0000FE72 05                         @moto3:		dc.b 5
0000FE73 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000FE78 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0000FE7D F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000FE82 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0000FE87 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0000FE8C 01                         @smoke1:	dc.b 1
0000FE8D FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
0000FE92 01                         @smoke2:	dc.b 1
0000FE93 FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0000FE98 01                         @smoke3:	dc.b 1
0000FE99 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
0000FE9E 00                         @blank:		dc.b 0
0000FEA0 00                         		even
0000FEA0 00                         		even
0000FEA0                            		include	"_incObj\4F.asm"
0000FEA0                            ; ---------------------------------------------------------------------------
0000FEA0                            ; Object 4F - blank
0000FEA0                            ; ---------------------------------------------------------------------------
0000FEA0                            

0000FEA0                            Obj4F:
0000FEA0 4E75                       		rts	
0000FEA0 4E75                       		rts	
0000FEA2                            

0000FEA2                            		include	"_incObj\50 Yadrin.asm"
0000FEA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FEA2                            

0000FEA2                            

0000FEA2                            Yad_ChkWall:
0000FEA2 3038 FE04                  		move.w	(v_framecount).w,d0
0000FEA6 D047                       		add.w	d7,d0
0000FEA8 0240 0003                  		andi.w	#3,d0
0000FEAC 6600                       		bne.s	loc_F836
0000FEAE 7600                       		moveq	#0,d3
0000FEB0 1628 0019                  		move.b	obActWid(a0),d3
0000FEB4 4A68 0010                  		tst.w	obVelX(a0)
0000FEB8 6B00                       		bmi.s	loc_F82C
0000FEBA 6100 0000                  		bsr.w	ObjHitWallRight
0000FEBE 4A41                       		tst.w	d1
0000FEC0 6A00                       		bpl.s	loc_F836
0000FEC2                            

0000FEC2                            loc_F828:
0000FEC2 7001                       		moveq	#1,d0
0000FEC4 4E75                       		rts	
0000FEC6                            ; ===========================================================================
0000FEC6                            

0000FEC6                            loc_F82C:
0000FEC6 4643                       		not.w	d3
0000FEC8 6100 0000                  		bsr.w	ObjHitWallLeft
0000FECC 4A41                       		tst.w	d1
0000FECE 6BF2                       		bmi.s	loc_F828
0000FED0                            

0000FED0                            loc_F836:
0000FED0 7000                       		moveq	#0,d0
0000FED2 4E75                       		rts	
0000FED4                            ; End of function Yad_ChkWall
0000FED4                            

0000FED4                            ; ===========================================================================
0000FED4                            ; ---------------------------------------------------------------------------
0000FED4                            ; Object 50 - Yadrin enemy (SYZ)
0000FED4                            ; ---------------------------------------------------------------------------
0000FED4                            

0000FED4                            Yadrin:
0000FED4 7000                       		moveq	#0,d0
0000FED6 1028 0024                  		move.b	obRoutine(a0),d0
0000FEDA 323B 0000                  		move.w	Yad_Index(pc,d0.w),d1
0000FEDE 4EFB 1000                  		jmp	Yad_Index(pc,d1.w)
0000FEE2                            ; ===========================================================================
0000FEE2 0000                       Yad_Index:	dc.w Yad_Main-Yad_Index
0000FEE4 0000                       		dc.w Yad_Action-Yad_Index
0000FEE6                            

0000FEE6 =00000030                  yad_timedelay:	equ $30
0000FEE6                            ; ===========================================================================
0000FEE6                            

0000FEE6                            Yad_Main:	; Routine 0
0000FEE6 217C 0000 0000 0004        		move.l	#Map_Yad,obMap(a0)
0000FEEE 317C 247B 0002             		move.w	#$247B,obGfx(a0)
0000FEF4 117C 0004 0001             		move.b	#4,obRender(a0)
0000FEFA 117C 0004 0018             		move.b	#4,obPriority(a0)
0000FF00 117C 0014 0019             		move.b	#$14,obActWid(a0)
0000FF06 117C 0011 0016             		move.b	#$11,obHeight(a0)
0000FF0C 117C 0008 0017             		move.b	#8,obWidth(a0)
0000FF12 117C 00CC 0020             		move.b	#$CC,obColType(a0)
0000FF18 6100 DD34                  		bsr.w	ObjectFall
0000FF1C 6100 0000                  		bsr.w	ObjFloorDist
0000FF20 4A41                       		tst.w	d1
0000FF22 6A00                       		bpl.s	locret_F89E
0000FF24 D368 000C                  		add.w	d1,obY(a0)	; match	object's position with the floor
0000FF28 317C 0000 0012             		move.w	#0,obVelY(a0)
0000FF2E 5428 0024                  		addq.b	#2,obRoutine(a0)
0000FF32 0868 0000 0022             		bchg	#0,obStatus(a0)
0000FF38                            

0000FF38                            	locret_F89E:
0000FF38 4E75                       		rts	
0000FF3A                            ; ===========================================================================
0000FF3A                            

0000FF3A                            Yad_Action:	; Routine 2
0000FF3A 7000                       		moveq	#0,d0
0000FF3C 1028 0025                  		move.b	ob2ndRout(a0),d0
0000FF40 323B 0000                  		move.w	Yad_Index2(pc,d0.w),d1
0000FF44 4EBB 1000                  		jsr	Yad_Index2(pc,d1.w)
0000FF48 43F9 0000 0000             		lea	(Ani_Yad).l,a1
0000FF4E 6100 AE60                  		bsr.w	AnimateSprite
0000FF52 6000 FDF2                  		bra.w	RememberState
0000FF56                            ; ===========================================================================
0000FF56 0000                       Yad_Index2:	dc.w Yad_Move-Yad_Index2
0000FF58 0000                       		dc.w Yad_FixToFloor-Yad_Index2
0000FF5A                            ; ===========================================================================
0000FF5A                            

0000FF5A                            Yad_Move:
0000FF5A 5368 0030                  		subq.w	#1,yad_timedelay(a0) ; subtract 1 from pause time
0000FF5E 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FF60 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0000FF64 317C FF00 0010             		move.w	#-$100,obVelX(a0) ; move object
0000FF6A 117C 0001 001C             		move.b	#1,obAnim(a0)
0000FF70 0868 0000 0022             		bchg	#0,obStatus(a0)
0000FF76 6600                       		bne.s	locret_F8E2
0000FF78 4468 0010                  		neg.w	obVelX(a0)	; change direction
0000FF7C                            

0000FF7C                            	locret_F8E2:
0000FF7C 4E75                       		rts	
0000FF7E                            ; ===========================================================================
0000FF7E                            

0000FF7E                            Yad_FixToFloor:
0000FF7E 6100 DCFA                  		bsr.w	SpeedToPos
0000FF82 6100 0000                  		bsr.w	ObjFloorDist
0000FF86 0C41 FFF8                  		cmpi.w	#-8,d1
0000FF8A 6D00                       		blt.s	Yad_Pause
0000FF8C 0C41 000C                  		cmpi.w	#$C,d1
0000FF90 6C00                       		bge.s	Yad_Pause
0000FF92 D368 000C                  		add.w	d1,obY(a0)	; match	object's position to the floor
0000FF96 6100 FF0A                  		bsr.w	Yad_ChkWall
0000FF9A 6600                       		bne.s	Yad_Pause
0000FF9C 4E75                       		rts	
0000FF9E                            ; ===========================================================================
0000FF9E                            

0000FF9E                            Yad_Pause:
0000FF9E 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0000FFA2 317C 003B 0030             		move.w	#59,yad_timedelay(a0) ; set pause time to 1 second
0000FFA8 317C 0000 0010             		move.w	#0,obVelX(a0)
0000FFAE 117C 0000 001C             		move.b	#0,obAnim(a0)
0000FFB4 4E75                       		rts	
0000FFB4 4E75                       		rts	
0000FFB6                            		include	"_anim\Yadrin.asm"
0000FFB6                            ; ---------------------------------------------------------------------------
0000FFB6                            ; Animation script - Yadrin enemy
0000FFB6                            ; ---------------------------------------------------------------------------
0000FFB6 0000                       Ani_Yad:	dc.w @stand-Ani_Yad
0000FFB8 0000                       		dc.w @walk-Ani_Yad
0000FFBA                            

0000FFBA 0700 FF                    @stand:		dc.b 7,	0, afEnd
0000FFBE 00                         		even
0000FFBE 0700 0301 0400 0302 05FF   @walk:		dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	afEnd
0000FFC8                            		even
0000FFC8                            		even
0000FFC8                            Map_Yad:	include	"_maps\Yadrin.asm"
0000FFC8                            ; ---------------------------------------------------------------------------
0000FFC8                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FFC8                            ; ---------------------------------------------------------------------------
0000FFC8                            Map_Yad_internal:
0000FFC8 0000                       		dc.w @walk0-Map_Yad_internal
0000FFCA 0000                       		dc.w @walk1-Map_Yad_internal
0000FFCC 0000                       		dc.w @walk2-Map_Yad_internal
0000FFCE 0000                       		dc.w @walk3-Map_Yad_internal
0000FFD0 0000                       		dc.w @walk4-Map_Yad_internal
0000FFD2 0000                       		dc.w @walk5-Map_Yad_internal
0000FFD4 05                         @walk0:		dc.b 5
0000FFD5 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FFDA FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FFDF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FFE4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FFE9 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FFEE 05                         @walk1:		dc.b 5
0000FFEF F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FFF4 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FFF9 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FFFE F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010003 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010008 05                         @walk2:		dc.b 5
00010009 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001000E 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00010013 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010018 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001001D 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
00010022 05                         @walk3:		dc.b 5
00010023 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
00010028 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0001002D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010032 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010037 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0001003C 05                         @walk4:		dc.b 5
0001003D F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
00010042 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
00010047 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0001004C F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
00010051 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00010056 05                         @walk5:		dc.b 5
00010057 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0001005C 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
00010061 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
00010066 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0001006B 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
00010070                            		even
00010070                            		even
00010070                            

00010070                            		include	"_incObj\sub SolidObject.asm"
00010070                            ; ---------------------------------------------------------------------------
00010070                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010070                            ;
00010070                            ; input:
00010070                            ;	d1 = width
00010070                            ;	d2 = height / 2 (when jumping)
00010070                            ;	d3 = height / 2 (when walking)
00010070                            ;	d4 = x-axis position
00010070                            ; ---------------------------------------------------------------------------
00010070                            

00010070                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010070                            

00010070                            

00010070                            SolidObject:
00010070 4A28 0025                  		tst.b	obSolid(a0)	; is Sonic standing on the object?
00010074 6700 0000                  		beq.w	Solid_ChkEnter	; if not, branch
00010078 3401                       		move.w	d1,d2
0001007A D442                       		add.w	d2,d2
0001007C 43F8 D000                  		lea	(v_player).w,a1
00010080 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00010086 6600                       		bne.s	@leave		; if yes, branch
00010088 3029 0008                  		move.w	obX(a1),d0
0001008C 9068 0008                  		sub.w	obX(a0),d0
00010090 D041                       		add.w	d1,d0
00010092 6B00                       		bmi.s	@leave		; if Sonic moves off the left, branch
00010094 B042                       		cmp.w	d2,d0		; has Sonic moved off the right?
00010096 6500                       		bcs.s	@stand		; if not, branch
00010098                            

00010098                            	@leave:
00010098 08A9 0003 0022             		bclr	#3,obStatus(a1)	; clear Sonic's standing flag
0001009E 08A8 0003 0022             		bclr	#3,obStatus(a0)	; clear object's standing flag
000100A4 4228 0025                  		clr.b	obSolid(a0)
000100A8 7800                       		moveq	#0,d4
000100AA 4E75                       		rts	
000100AC                            

000100AC                            	@stand:
000100AC 3404                       		move.w	d4,d2
000100AE 6100 80FE                  		bsr.w	MvSonicOnPtfm
000100B2 7800                       		moveq	#0,d4
000100B4 4E75                       		rts	
000100B6                            ; ===========================================================================
000100B6                            

000100B6                            SolidObject71:
000100B6 4A28 0025                  		tst.b	obSolid(a0)
000100BA 6700 0000                  		beq.w	loc_FAD0
000100BE 3401                       		move.w	d1,d2
000100C0 D442                       		add.w	d2,d2
000100C2 43F8 D000                  		lea	(v_player).w,a1
000100C6 0829 0001 0022             		btst	#1,obStatus(a1)
000100CC 6600                       		bne.s	@leave
000100CE 3029 0008                  		move.w	obX(a1),d0
000100D2 9068 0008                  		sub.w	obX(a0),d0
000100D6 D041                       		add.w	d1,d0
000100D8 6B00                       		bmi.s	@leave
000100DA B042                       		cmp.w	d2,d0
000100DC 6500                       		bcs.s	@stand
000100DE                            

000100DE                            	@leave:
000100DE 08A9 0003 0022             		bclr	#3,obStatus(a1)
000100E4 08A8 0003 0022             		bclr	#3,obStatus(a0)
000100EA 4228 0025                  		clr.b	obSolid(a0)
000100EE 7800                       		moveq	#0,d4
000100F0 4E75                       		rts	
000100F2                            

000100F2                            	@stand:
000100F2 3404                       		move.w	d4,d2
000100F4 6100 80B8                  		bsr.w	MvSonicOnPtfm
000100F8 7800                       		moveq	#0,d4
000100FA 4E75                       		rts	
000100FC                            ; ===========================================================================
000100FC                            

000100FC                            SolidObject2F:
000100FC 43F8 D000                  		lea	(v_player).w,a1
00010100 4A28 0001                  		tst.b	obRender(a0)
00010104 6A00 0000                  		bpl.w	Solid_Ignore
00010108 3029 0008                  		move.w	obX(a1),d0
0001010C 9068 0008                  		sub.w	obX(a0),d0
00010110 D041                       		add.w	d1,d0
00010112 6B00 0000                  		bmi.w	Solid_Ignore
00010116 3601                       		move.w	d1,d3
00010118 D643                       		add.w	d3,d3
0001011A B043                       		cmp.w	d3,d0
0001011C 6200 0000                  		bhi.w	Solid_Ignore
00010120 3A00                       		move.w	d0,d5
00010122 0828 0000 0001             		btst	#0,obRender(a0)	; is object horizontally flipped?
00010128 6700                       		beq.s	@notflipped	; if not, branch
0001012A 4645                       		not.w	d5
0001012C DA43                       		add.w	d3,d5
0001012E                            

0001012E                            	@notflipped:
0001012E E24D                       		lsr.w	#1,d5
00010130 7600                       		moveq	#0,d3
00010132 1632 5000                  		move.b	(a2,d5.w),d3
00010136 9612                       		sub.b	(a2),d3
00010138 3A28 000C                  		move.w	obY(a0),d5
0001013C 9A43                       		sub.w	d3,d5
0001013E 1629 0016                  		move.b	obHeight(a1),d3
00010142 4883                       		ext.w	d3
00010144 D443                       		add.w	d3,d2
00010146 3629 000C                  		move.w	obY(a1),d3
0001014A 9645                       		sub.w	d5,d3
0001014C 5843                       		addq.w	#4,d3
0001014E D642                       		add.w	d2,d3
00010150 6B00 0000                  		bmi.w	Solid_Ignore
00010154 3802                       		move.w	d2,d4
00010156 D844                       		add.w	d4,d4
00010158 B644                       		cmp.w	d4,d3
0001015A 6400 0000                  		bcc.w	Solid_Ignore
0001015E 6000 0000                  		bra.w	loc_FB0E
00010162                            ; ===========================================================================
00010162                            

00010162                            Solid_ChkEnter:
00010162 4A28 0001                  		tst.b	obRender(a0)
00010166 6A00 0000                  		bpl.w	Solid_Ignore
0001016A                            

0001016A                            loc_FAD0:
0001016A 43F8 D000                  		lea	(v_player).w,a1
0001016E 3029 0008                  		move.w	obX(a1),d0
00010172 9068 0008                  		sub.w	obX(a0),d0
00010176 D041                       		add.w	d1,d0
00010178 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves off the left, branch
0001017C 3601                       		move.w	d1,d3
0001017E D643                       		add.w	d3,d3
00010180 B043                       		cmp.w	d3,d0		; has Sonic moved off the right?
00010182 6200 0000                  		bhi.w	Solid_Ignore	; if yes, branch
00010186 1629 0016                  		move.b	obHeight(a1),d3
0001018A 4883                       		ext.w	d3
0001018C D443                       		add.w	d3,d2
0001018E 3629 000C                  		move.w	obY(a1),d3
00010192 9668 000C                  		sub.w	obY(a0),d3
00010196 5843                       		addq.w	#4,d3
00010198 D642                       		add.w	d2,d3
0001019A 6B00 0000                  		bmi.w	Solid_Ignore	; if Sonic moves above, branch
0001019E 3802                       		move.w	d2,d4
000101A0 D844                       		add.w	d4,d4
000101A2 B644                       		cmp.w	d4,d3		; has Sonic moved below?
000101A4 6400 0000                  		bcc.w	Solid_Ignore	; if yes, branch
000101A8                            

000101A8                            loc_FB0E:
000101A8 4A38 F7C8                  		tst.b	(f_playerctrl).w ; are object interactions disabled?
000101AC 6B00 0000                  		bmi.w	Solid_Ignore	; if yes, branch
000101B0 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w ; is Sonic dying?
000101B6 6400 0000                  			bcc.w	Solid_Debug
000101BA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode being used?
000101BE 6600 0000                  		bne.w	Solid_Debug	; if yes, branch
000101C2 3A00                       		move.w	d0,d5
000101C4 B240                       		cmp.w	d0,d1		; is Sonic right of centre of object?
000101C6 6400                       		bcc.s	@isright	; if yes, branch
000101C8 D241                       		add.w	d1,d1
000101CA 9041                       		sub.w	d1,d0
000101CC 3A00                       		move.w	d0,d5
000101CE 4445                       		neg.w	d5
000101D0                            

000101D0                            	@isright:
000101D0 3203                       		move.w	d3,d1
000101D2 B443                       		cmp.w	d3,d2		; is Sonic below centre of object?
000101D4 6400                       		bcc.s	@isbelow	; if yes, branch
000101D6                            

000101D6 5943                       		subq.w	#4,d3
000101D8 9644                       		sub.w	d4,d3
000101DA 3203                       		move.w	d3,d1
000101DC 4441                       		neg.w	d1
000101DE                            

000101DE                            	@isbelow:
000101DE BA41                       		cmp.w	d1,d5
000101E0 6200 0000                  		bhi.w	Solid_TopBottom	; if Sonic hits top or bottom, branch
000101E4 0C41 0004                  		cmpi.w	#4,d1
000101E8 6300                       		bls.s	Solid_SideAir
000101EA 4A40                       		tst.w	d0		; where is Sonic?
000101EC 6700                       		beq.s	Solid_Centre	; if inside the object, branch
000101EE 6B00                       		bmi.s	Solid_Right	; if right of the object, branch
000101F0 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving left?
000101F4 6B00                       		bmi.s	Solid_Centre	; if yes, branch
000101F6 6000                       		bra.s	Solid_Left
000101F8                            ; ===========================================================================
000101F8                            

000101F8                            Solid_Right:
000101F8 4A69 0010                  		tst.w	obVelX(a1)	; is Sonic moving right?
000101FC 6A00                       		bpl.s	Solid_Centre	; if yes, branch
000101FE                            

000101FE                            Solid_Left:
000101FE 337C 0000 0014             		move.w	#0,obInertia(a1)
00010204 337C 0000 0010             		move.w	#0,obVelX(a1)	; stop Sonic moving
0001020A                            

0001020A                            Solid_Centre:
0001020A 9169 0008                  		sub.w	d0,obX(a1)	; correct Sonic's position
0001020E 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00010214 6600                       		bne.s	Solid_SideAir	; if yes, branch
00010216 08E9 0005 0022             		bset	#5,obStatus(a1)	; make Sonic push object
0001021C 08E8 0005 0022             		bset	#5,obStatus(a0)	; make object be pushed
00010222 7801                       		moveq	#1,d4		; return side collision
00010224 4E75                       		rts	
00010226                            ; ===========================================================================
00010226                            

00010226                            Solid_SideAir:
00010226 6100                       		bsr.s	Solid_NotPushing
00010228 7801                       		moveq	#1,d4		; return side collision
0001022A 4E75                       		rts	
0001022C                            ; ===========================================================================
0001022C                            

0001022C                            Solid_Ignore:
0001022C 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing?
00010232 6700                       		beq.s	Solid_Debug	; if not, branch
00010234 337C 0000 001C             		move.w	#id_Run,obAnim(a1) ; use running animation
0001023A                            

0001023A                            Solid_NotPushing:
0001023A 08A8 0005 0022             		bclr	#5,obStatus(a0)	; clear pushing flag
00010240 08A9 0005 0022             		bclr	#5,obStatus(a1)	; clear Sonic's pushing flag
00010246                            

00010246                            Solid_Debug:
00010246 7800                       		moveq	#0,d4		; return no collision
00010248 4E75                       		rts	
0001024A                            ; ===========================================================================
0001024A                            

0001024A                            Solid_TopBottom:
0001024A 4A43                       		tst.w	d3		; is Sonic below the object?
0001024C 6B00                       		bmi.s	Solid_Below	; if yes, branch
0001024E 0C43 0010                  		cmpi.w	#$10,d3		; has Sonic landed on the object?
00010252 6500                       		bcs.s	Solid_Landed	; if yes, branch
00010254 60D6                       		bra.s	Solid_Ignore
00010256                            ; ===========================================================================
00010256                            

00010256                            Solid_Below:
00010256 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving vertically?
0001025A 6700                       		beq.s	Solid_Squash	; if not, branch
0001025C 6A00                       		bpl.s	Solid_TopBtmAir	; if moving downwards, branch
0001025E 4A43                       		tst.w	d3		; is Sonic above the object?
00010260 6A00                       		bpl.s	Solid_TopBtmAir	; if yes, branch
00010262 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
00010266 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic moving
0001026C                            

0001026C                            Solid_TopBtmAir:
0001026C 78FF                       		moveq	#-1,d4
0001026E 4E75                       		rts	
00010270                            ; ===========================================================================
00010270                            

00010270                            Solid_Squash:
00010270 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00010276 66F4                       		bne.s	Solid_TopBtmAir	; if yes, branch
00010278 2F08                       		move.l	a0,-(sp)
0001027A 2049                       		movea.l	a1,a0
0001027C 4EB9 0000 0000             		jsr	(KillSonic).l	; kill Sonic
00010282 205F                       		movea.l	(sp)+,a0
00010284 78FF                       		moveq	#-1,d4
00010286 4E75                       		rts	
00010288                            ; ===========================================================================
00010288                            

00010288                            Solid_Landed:
00010288 5943                       		subq.w	#4,d3
0001028A 7200                       		moveq	#0,d1
0001028C 1228 0019                  		move.b	obActWid(a0),d1
00010290 3401                       		move.w	d1,d2
00010292 D442                       		add.w	d2,d2
00010294 D269 0008                  		add.w	obX(a1),d1
00010298 9268 0008                  		sub.w	obX(a0),d1
0001029C 6B00                       		bmi.s	Solid_Miss	; if Sonic is right of object, branch
0001029E B242                       		cmp.w	d2,d1		; is Sonic left of object?
000102A0 6400                       		bcc.s	Solid_Miss	; if yes, branch
000102A2 4A69 0012                  		tst.w	obVelY(a1)	; is Sonic moving upwards?
000102A6 6B00                       		bmi.s	Solid_Miss	; if yes, branch
000102A8 9769 000C                  		sub.w	d3,obY(a1)	; correct Sonic's position
000102AC 5369 000C                  		subq.w	#1,obY(a1)
000102B0 6100                       		bsr.s	Solid_ResetFloor
000102B2 117C 0002 0025             		move.b	#2,obSolid(a0) ; set standing flags
000102B8 08E8 0003 0022             		bset	#3,obStatus(a0)
000102BE 78FF                       		moveq	#-1,d4		; return top/bottom collision
000102C0 4E75                       		rts	
000102C2                            ; ===========================================================================
000102C2                            

000102C2                            Solid_Miss:
000102C2 7800                       		moveq	#0,d4
000102C4 4E75                       		rts	
000102C6                            ; End of function SolidObject
000102C6                            

000102C6                            

000102C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000102C6                            

000102C6                            

000102C6                            Solid_ResetFloor:
000102C6 0829 0003 0022             		btst	#3,obStatus(a1)	; is Sonic standing on something?
000102CC 6700                       		beq.s	@notonobj	; if not, branch
000102CE                            

000102CE 7000                       		moveq	#0,d0
000102D0 1029 003D                  		move.b	standonobject(a1),d0	; get object being stood on
000102D4 ED48                       		lsl.w	#6,d0
000102D6 0680 00FF D000             		addi.l	#(v_objspace&$FFFFFF),d0
000102DC 2440                       		movea.l	d0,a2
000102DE 08AA 0003 0022             		bclr	#3,obStatus(a2)	; clear object's standing flags
000102E4 422A 0025                  		clr.b	obSolid(a2)
000102E8                            

000102E8                            	@notonobj:
000102E8 3008                       		move.w	a0,d0
000102EA 0440 D000                  		subi.w	#v_objspace&$FFFF,d0
000102EE EC48                       		lsr.w	#6,d0
000102F0 0240 007F                  		andi.w	#$7F,d0
000102F4 1340 003D                  		move.b	d0,standonobject(a1)	; set object being stood on
000102F8 137C 0000 0026             		move.b	#0,obAngle(a1)	; clear Sonic's angle
000102FE 337C 0000 0012             		move.w	#0,obVelY(a1)	; stop Sonic
00010304 3369 0010 0014             		move.w	obVelX(a1),obInertia(a1)
0001030A 0829 0001 0022             		btst	#1,obStatus(a1)	; is Sonic in the air?
00010310 6700                       		beq.s	@notinair	; if not, branch
00010312 2F08                       		move.l	a0,-(sp)
00010314 2049                       		movea.l	a1,a0
00010316 4EB9 0000 0000             		jsr	(Sonic_ResetOnFloor).l ; reset Sonic as if on floor
0001031C 205F                       		movea.l	(sp)+,a0
0001031E                            

0001031E                            	@notinair:
0001031E 08E9 0003 0022             		bset	#3,obStatus(a1)	; set object standing flag
00010324 08E8 0003 0022             		bset	#3,obStatus(a0)	; set Sonic standing on object flag
0001032A 4E75                       		rts	
0001032C                            ; End of function Solid_ResetFloor
0001032C                            ; End of function Solid_ResetFloor
0001032C                            

0001032C                            		include	"_incObj\51 Smashable Green Block.asm"
0001032C                            ; ---------------------------------------------------------------------------
0001032C                            ; Object 51 - smashable	green block (MZ)
0001032C                            ; ---------------------------------------------------------------------------
0001032C                            

0001032C                            SmashBlock:
0001032C 7000                       		moveq	#0,d0
0001032E 1028 0024                  		move.b	obRoutine(a0),d0
00010332 323B 0000                  		move.w	Smab_Index(pc,d0.w),d1
00010336 4EBB 1000                  		jsr	Smab_Index(pc,d1.w)
0001033A 6000 FA0A                  		bra.w	RememberState
0001033E                            ; ===========================================================================
0001033E 0000                       Smab_Index:	dc.w Smab_Main-Smab_Index
00010340 0000                       		dc.w Smab_Solid-Smab_Index
00010342 0000                       		dc.w Smab_Points-Smab_Index
00010344                            ; ===========================================================================
00010344                            

00010344                            Smab_Main:	; Routine 0
00010344 5428 0024                  		addq.b	#2,obRoutine(a0)
00010348 217C 0000 0000 0004        		move.l	#Map_Smab,obMap(a0)
00010350 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
00010356 117C 0004 0001             		move.b	#4,obRender(a0)
0001035C 117C 0010 0019             		move.b	#$10,obActWid(a0)
00010362 117C 0004 0018             		move.b	#4,obPriority(a0)
00010368 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
0001036E                            

0001036E                            Smab_Solid:	; Routine 2
0001036E                            

0001036E =00000032                  sonicAniFrame:	equ $32		; Sonic's current animation number
0001036E =00000034                  @count:		equ $34		; number of blocks hit + previous stuff
0001036E                            

0001036E 3178 F7D0 0034             		move.w	(v_itembonus).w,$34(a0)
00010374 1178 D01C 0032             		move.b	(v_player+obAnim).w,sonicAniFrame(a0) ; load Sonic's animation number
0001037A 323C 001B                  		move.w	#$1B,d1
0001037E 343C 0010                  		move.w	#$10,d2
00010382 363C 0011                  		move.w	#$11,d3
00010386 3828 0008                  		move.w	obX(a0),d4
0001038A 6100 FCE4                  		bsr.w	SolidObject
0001038E 0828 0003 0022             		btst	#3,obStatus(a0)	; has Sonic landed on the block?
00010394 6600                       		bne.s	@smash		; if yes, branch
00010396                            

00010396                            	@notspinning:
00010396 4E75                       		rts	
00010398                            ; ===========================================================================
00010398                            

00010398                            @smash:
00010398 0C28 0000 0032             		cmpi.b	#id_Roll,sonicAniFrame(a0) ; is Sonic rolling/jumping?
0001039E 66F6                       		bne.s	@notspinning	; if not, branch
000103A0 31E8 0034 F7D0             		move.w	@count(a0),(v_itembonus).w
000103A6 08E9 0002 0022             		bset	#2,obStatus(a1)
000103AC 137C 000E 0016             		move.b	#$E,obHeight(a1)
000103B2 137C 0007 0017             		move.b	#7,obWidth(a1)
000103B8 137C 0000 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic roll
000103BE 337C FD00 0012             		move.w	#-$300,obVelY(a1) ; rebound Sonic
000103C4 08E9 0001 0022             		bset	#1,obStatus(a1)
000103CA 08A9 0003 0022             		bclr	#3,obStatus(a1)
000103D0 137C 0002 0024             		move.b	#2,obRoutine(a1)
000103D6 08A8 0003 0022             		bclr	#3,obStatus(a0)
000103DC 4228 0025                  		clr.b	obSolid(a0)
000103E0 117C 0001 001A             		move.b	#1,obFrame(a0)
000103E6 49F9 0000 0000             		lea	(Smab_Speeds).l,a4 ; load broken fragment speed data
000103EC 7203                       		moveq	#3,d1		; set number of	fragments to 4
000103EE 343C 0038                  		move.w	#$38,d2
000103F2 6100 D496                  		bsr.w	SmashObject
000103F6 6100 DD30                  		bsr.w	FindFreeObj
000103FA 6600                       		bne.s	Smab_Points
000103FC 137C 0029 0000             		move.b	#id_Points,0(a1) ; load points object
00010402 3368 0008 0008             		move.w	obX(a0),obX(a1)
00010408 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001040E 3438 F7D0                  		move.w	(v_itembonus).w,d2
00010412 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; increment bonus counter
00010416 0C42 0006                  		cmpi.w	#6,d2		; have fewer than 3 blocks broken?
0001041A 6500                       		bcs.s	@bonus		; if yes, branch
0001041C 7406                       		moveq	#6,d2		; set cap for points
0001041E                            

0001041E                            	@bonus:
0001041E 7000                       		moveq	#0,d0
00010420 303B 2000                  		move.w	Smab_Scores(pc,d2.w),d0
00010424 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 blocks been smashed?
0001042A 6500                       		bcs.s	@givepoints	; if not, branch
0001042C 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010430 740A                       		moveq	#10,d2
00010432                            

00010432                            	@givepoints:
00010432 4EB9 0000 0000             		jsr	(AddPoints).l
00010438 E24A                       		lsr.w	#1,d2
0001043A 1342 001A                  		move.b	d2,obFrame(a1)
0001043E                            

0001043E                            Smab_Points:	; Routine 4
0001043E 6100 D83A                  		bsr.w	SpeedToPos
00010442 0668 0038 0012             		addi.w	#$38,obVelY(a0)
00010448 6100 D856                  		bsr.w	DisplaySprite
0001044C 4A28 0001                  		tst.b	obRender(a0)
00010450 6A00 D88A                  		bpl.w	DeleteObject
00010454 4E75                       		rts	
00010456                            ; ===========================================================================
00010456 FE00 FE00                  Smab_Speeds:	dc.w -$200, -$200	; x-speed, y-speed
0001045A FF00 FF00                  		dc.w -$100, -$100
0001045E 0200 FE00                  		dc.w $200, -$200
00010462 0100 FF00                  		dc.w $100, -$100
00010466                            

00010466 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
00010466 000A 0014 0032 0064        Smab_Scores:	dc.w 10, 20, 50, 100
0001046E                            Map_Smab:	include	"_maps\Smashable Green Block.asm"
0001046E                            ; ---------------------------------------------------------------------------
0001046E                            ; Sprite mappings - smashable green block (MZ)
0001046E                            ; ---------------------------------------------------------------------------
0001046E                            Map_Smab_internal:
0001046E 0000                       		dc.w @two-Map_Smab_internal
00010470 0000                       		dc.w @four-Map_Smab_internal
00010472 02                         @two:		dc.b 2
00010473 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0	; two fragments, arranged vertically
00010478 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0001047D 04                         @four:		dc.b 4
0001047E F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0 ; four fragments
00010483 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010488 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0001048D 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010492                            		even
00010492                            		even
00010492                            

00010492                            		include	"_incObj\52 Moving Blocks.asm"
00010492                            ; ---------------------------------------------------------------------------
00010492                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010492                            ; ---------------------------------------------------------------------------
00010492                            

00010492                            MovingBlock:
00010492 7000                       		moveq	#0,d0
00010494 1028 0024                  		move.b	obRoutine(a0),d0
00010498 323B 0000                  		move.w	MBlock_Index(pc,d0.w),d1
0001049C 4EFB 1000                  		jmp	MBlock_Index(pc,d1.w)
000104A0                            ; ===========================================================================
000104A0 0000                       MBlock_Index:	dc.w MBlock_Main-MBlock_Index
000104A2 0000                       		dc.w MBlock_Platform-MBlock_Index
000104A4 0000                       		dc.w MBlock_StandOn-MBlock_Index
000104A6                            

000104A6 =00000030                  mblock_origX:	equ $30
000104A6 =00000032                  mblock_origY:	equ $32
000104A6                            

000104A6 1000                       MBlock_Var:	dc.b $10, 0		; object width,	frame number
000104A8 2001                       		dc.b $20, 1
000104AA 2002                       		dc.b $20, 2
000104AC 4003                       		dc.b $40, 3
000104AE 3004                       		dc.b $30, 4
000104B0                            ; ===========================================================================
000104B0                            

000104B0                            MBlock_Main:	; Routine 0
000104B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000104B4 217C 0000 0000 0004        		move.l	#Map_MBlock,obMap(a0)
000104BC 317C 42B8 0002             		move.w	#$42B8,obGfx(a0)
000104C2 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000104C8 6600                       		bne.s	loc_FE44
000104CA 217C 0000 0000 0004        		move.l	#Map_MBlockLZ,obMap(a0) ; LZ specific code
000104D2 317C 43BC 0002             		move.w	#$43BC,obGfx(a0)
000104D8 117C 0007 0016             		move.b	#7,obHeight(a0)
000104DE                            

000104DE                            loc_FE44:
000104DE 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000104E4 6600                       		bne.s	loc_FE60
000104E6 317C 22C0 0002             		move.w	#$22C0,obGfx(a0) ; SBZ specific code (object 5228)
000104EC 0C28 0028 0028             		cmpi.b	#$28,obSubtype(a0) ; is object 5228 ?
000104F2 6700                       		beq.s	loc_FE60	; if yes, branch
000104F4 317C 4460 0002             		move.w	#$4460,obGfx(a0) ; SBZ specific code (object 523x)
000104FA                            

000104FA                            loc_FE60:
000104FA 117C 0004 0001             		move.b	#4,obRender(a0)
00010500 7000                       		moveq	#0,d0
00010502 1028 0028                  		move.b	obSubtype(a0),d0
00010506 E648                       		lsr.w	#3,d0
00010508 0240 001E                  		andi.w	#$1E,d0
0001050C 45FB 0098                  		lea	MBlock_Var(pc,d0.w),a2
00010510 115A 0019                  		move.b	(a2)+,obActWid(a0)
00010514 115A 001A                  		move.b	(a2)+,obFrame(a0)
00010518 117C 0004 0018             		move.b	#4,obPriority(a0)
0001051E 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00010524 3168 000C 0032             		move.w	obY(a0),mblock_origY(a0)
0001052A 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
00010530                            

00010530                            MBlock_Platform: ; Routine 2
00010530 6100 0000                  		bsr.w	MBlock_Move
00010534 7200                       		moveq	#0,d1
00010536 1228 0019                  		move.b	obActWid(a0),d1
0001053A 4EB9 0000 7AD8             		jsr	(PlatformObject).l
00010540 6000                       		bra.s	MBlock_ChkDel
00010542                            ; ===========================================================================
00010542                            

00010542                            MBlock_StandOn:	; Routine 4
00010542 7200                       		moveq	#0,d1
00010544 1228 0019                  		move.b	obActWid(a0),d1
00010548 4EB9 0000 7C4C             		jsr	(ExitPlatform).l
0001054E 3F28 0008                  		move.w	obX(a0),-(sp)
00010552 6100 0000                  		bsr.w	MBlock_Move
00010556 341F                       		move.w	(sp)+,d2
00010558 4EB9 0000 81BA             		jsr	(MvSonicOnPtfm2).l
0001055E                            

0001055E                            MBlock_ChkDel:
0001057C 6000 D722                  		bra.w	DisplaySprite
00010580                            ; ===========================================================================
00010580                            

00010580                            MBlock_Move:
00010580 7000                       		moveq	#0,d0
00010582 1028 0028                  		move.b	obSubtype(a0),d0
00010586 0240 000F                  		andi.w	#$F,d0
0001058A D040                       		add.w	d0,d0
0001058C 323B 0000                  		move.w	MBlock_TypeIndex(pc,d0.w),d1
00010590 4EFB 1000                  		jmp	MBlock_TypeIndex(pc,d1.w)
00010594                            ; ===========================================================================
00010594 0000 0000                  MBlock_TypeIndex: dc.w MBlock_Type00-MBlock_TypeIndex, MBlock_Type01-MBlock_TypeIndex
00010598 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type03-MBlock_TypeIndex
0001059C 0000 0000                  		dc.w MBlock_Type02-MBlock_TypeIndex, MBlock_Type05-MBlock_TypeIndex
000105A0 0000 0000                  		dc.w MBlock_Type06-MBlock_TypeIndex, MBlock_Type07-MBlock_TypeIndex
000105A4 0000 0000                  		dc.w MBlock_Type08-MBlock_TypeIndex, MBlock_Type02-MBlock_TypeIndex
000105A8 0000                       		dc.w MBlock_Type0A-MBlock_TypeIndex
000105AA                            ; ===========================================================================
000105AA                            

000105AA                            MBlock_Type00:
000105AA 4E75                       		rts	
000105AC                            ; ===========================================================================
000105AC                            

000105AC                            MBlock_Type01:
000105AC 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
000105B0 323C 0060                  		move.w	#$60,d1
000105B4 0828 0000 0022             		btst	#0,obStatus(a0)
000105BA 6700                       		beq.s	loc_FF26
000105BC 4440                       		neg.w	d0
000105BE D041                       		add.w	d1,d0
000105C0                            

000105C0                            loc_FF26:
000105C0 3228 0030                  		move.w	mblock_origX(a0),d1
000105C4 9240                       		sub.w	d0,d1
000105C6 3141 0008                  		move.w	d1,obX(a0)
000105CA 4E75                       		rts	
000105CC                            ; ===========================================================================
000105CC                            

000105CC                            MBlock_Type02:
000105CC 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; is Sonic standing on the platform?
000105D2 6600                       		bne.s	MBlock_02_Wait
000105D4 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
000105D8                            

000105D8                            MBlock_02_Wait:
000105D8 4E75                       		rts	
000105DA                            ; ===========================================================================
000105DA                            

000105DA                            MBlock_Type03:
000105DA 7600                       		moveq	#0,d3
000105DC 1628 0019                  		move.b	obActWid(a0),d3
000105E0 6100 0000                  		bsr.w	ObjHitWallRight
000105E4 4A41                       		tst.w	d1		; has the platform hit a wall?
000105E6 6B00                       		bmi.s	MBlock_03_End	; if yes, branch
000105E8 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
000105EC 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
000105F2 4E75                       		rts	
000105F4                            ; ===========================================================================
000105F4                            

000105F4                            MBlock_03_End:
000105F4 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving	type)
000105F8 4E75                       		rts	
000105FA                            ; ===========================================================================
000105FA                            

000105FA                            MBlock_Type05:
000105FA 7600                       		moveq	#0,d3
000105FC 1628 0019                  		move.b	obActWid(a0),d3
00010600 6100 0000                  		bsr.w	ObjHitWallRight
00010604 4A41                       		tst.w	d1		; has the platform hit a wall?
00010606 6B00                       		bmi.s	MBlock_05_End	; if yes, branch
00010608 5268 0008                  		addq.w	#1,obX(a0)	; move platform	to the right
0001060C 3168 0008 0030             		move.w	obX(a0),mblock_origX(a0)
00010612 4E75                       		rts	
00010614                            ; ===========================================================================
00010614                            

00010614                            MBlock_05_End:
00010614 5228 0028                  		addq.b	#1,obSubtype(a0) ; change to type 06 (falling)
00010618 4E75                       		rts	
0001061A                            ; ===========================================================================
0001061A                            

0001061A                            MBlock_Type06:
0001061A 6100 D65E                  		bsr.w	SpeedToPos
0001061E 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make the platform fall
00010624 6100 0000                  		bsr.w	ObjFloorDist
00010628 4A41                       		tst.w	d1		; has platform hit the floor?
0001062A 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0001062E D368 000C                  		add.w	d1,obY(a0)
00010632 4268 0012                  		clr.w	obVelY(a0)	; stop platform	falling
00010636 4228 0028                  		clr.b	obSubtype(a0)	; change to type 00 (non-moving)
0001063A                            

0001063A                            locret_FFA0:
0001063A 4E75                       		rts	
0001063C                            ; ===========================================================================
0001063C                            

0001063C                            MBlock_Type07:
0001063C 4A38 F7E2                  		tst.b	(f_switch+2).w	; has switch number 02 been pressed?
00010640 6700                       		beq.s	MBlock_07_ChkDel
00010642 5728 0028                  		subq.b	#3,obSubtype(a0) ; if yes, change object type to 04
00010646                            

00010646                            MBlock_07_ChkDel:
00010646 588F                       		addq.l	#4,sp
00010666 4E75                       		rts	
00010668                            ; ===========================================================================
00010668                            

00010668                            MBlock_Type08:
00010668 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
0001066C 323C 0080                  		move.w	#$80,d1
00010670 0828 0000 0022             		btst	#0,obStatus(a0)
00010676 6700                       		beq.s	loc_FFE2
00010678 4440                       		neg.w	d0
0001067A D041                       		add.w	d1,d0
0001067C                            

0001067C                            loc_FFE2:
0001067C 3228 0032                  		move.w	mblock_origY(a0),d1
00010680 9240                       		sub.w	d0,d1
00010682 3141 000C                  		move.w	d1,obY(a0)
00010686 4E75                       		rts	
00010688                            ; ===========================================================================
00010688                            

00010688                            MBlock_Type0A:
00010688 7600                       		moveq	#0,d3
0001068A 1628 0019                  		move.b	obActWid(a0),d3
0001068E D643                       		add.w	d3,d3
00010690 7208                       		moveq	#8,d1
00010692 0828 0000 0022             		btst	#0,obStatus(a0)
00010698 6700                       		beq.s	loc_10004
0001069A 4441                       		neg.w	d1
0001069C 4443                       		neg.w	d3
0001069E                            

0001069E                            loc_10004:
0001069E 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
000106A2 6600                       		bne.s	MBlock_0A_Back	; if yes, branch
000106A4 3028 0008                  		move.w	obX(a0),d0
000106A8 9068 0030                  		sub.w	mblock_origX(a0),d0
000106AC B043                       		cmp.w	d3,d0
000106AE 6700                       		beq.s	MBlock_0A_Wait
000106B0 D368 0008                  		add.w	d1,obX(a0)	; move platform
000106B4 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
000106BA 4E75                       		rts	
000106BC                            ; ===========================================================================
000106BC                            

000106BC                            MBlock_0A_Wait:
000106BC 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
000106C0 6600                       		bne.s	locret_1002E	; if time remains, branch
000106C2 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000106C8                            

000106C8                            locret_1002E:
000106C8 4E75                       		rts	
000106CA                            ; ===========================================================================
000106CA                            

000106CA                            MBlock_0A_Back:
000106CA 3028 0008                  		move.w	obX(a0),d0
000106CE 9068 0030                  		sub.w	mblock_origX(a0),d0
000106D2 6700                       		beq.s	MBlock_0A_Reset
000106D4 9368 0008                  		sub.w	d1,obX(a0)	; return platform to its original position
000106D8 4E75                       		rts	
000106DA                            ; ===========================================================================
000106DA                            

000106DA                            MBlock_0A_Reset:
000106DA 4268 0036                  		clr.w	$36(a0)
000106DE 5328 0028                  		subq.b	#1,obSubtype(a0)
000106E2 4E75                       		rts	
000106E2 4E75                       		rts	
000106E4                            Map_MBlock:	include	"_maps\Moving Blocks (MZ and SBZ).asm"
000106E4                            ; ---------------------------------------------------------------------------
000106E4                            ; Sprite mappings - moving blocks (MZ, SBZ)
000106E4                            ; ---------------------------------------------------------------------------
000106E4                            Map_MBlock_internal:
000106E4 0000                       		dc.w @mz1-Map_MBlock_internal
000106E6 0000                       		dc.w @mz2-Map_MBlock_internal
000106E8 0000                       		dc.w @sbz-Map_MBlock_internal
000106EA 0000                       		dc.w @sbzwide-Map_MBlock_internal
000106EC 0000                       		dc.w @mz3-Map_MBlock_internal
000106EE 01                         @mz1:		dc.b 1
000106EF F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000106F4 02                         @mz2:		dc.b 2
000106F5 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000106FA F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000106FF 04                         @sbz:		dc.b 4
00010700 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
00010705 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
0001070A F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
0001070F 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
00010714 04                         @sbzwide:	dc.b 4
00010715 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
0001071A F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
0001071F F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
00010724 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010729 03                         @mz3:		dc.b 3
0001072A F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
0001072F F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00010734 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
0001073A 00                         		even
0001073A 00                         		even
0001073A                            Map_MBlockLZ:	include	"_maps\Moving Blocks (LZ).asm"
0001073A                            ; ---------------------------------------------------------------------------
0001073A                            ; Sprite mappings - moving block (LZ)
0001073A                            ; ---------------------------------------------------------------------------
0001073A                            Map_MBlockLZ_internal:
0001073A 0000                       		dc.w @0-Map_MBlockLZ_internal
0001073C 01                         @0:		dc.b 1
0001073D F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
00010742                            		even
00010742                            		even
00010742                            

00010742                            		include	"_incObj\55 Basaran.asm"
00010742                            ; ---------------------------------------------------------------------------
00010742                            ; Object 55 - Basaran enemy (MZ)
00010742                            ; ---------------------------------------------------------------------------
00010742                            

00010742                            Basaran:
00010742 7000                       		moveq	#0,d0
00010744 1028 0024                  		move.b	obRoutine(a0),d0
00010748 323B 0000                  		move.w	Bas_Index(pc,d0.w),d1
0001074C 4EFB 1000                  		jmp	Bas_Index(pc,d1.w)
00010750                            ; ===========================================================================
00010750 0000                       Bas_Index:	dc.w Bas_Main-Bas_Index
00010752 0000                       		dc.w Bas_Action-Bas_Index
00010754                            ; ===========================================================================
00010754                            

00010754                            Bas_Main:	; Routine 0
00010754 5428 0024                  		addq.b	#2,obRoutine(a0)
00010758 217C 0000 0000 0004        		move.l	#Map_Bas,obMap(a0)
00010760 317C 84B8 0002             		move.w	#$84B8,obGfx(a0)
00010766 117C 0004 0001             		move.b	#4,obRender(a0)
0001076C 117C 000C 0016             		move.b	#$C,obHeight(a0)
00010772 117C 0002 0018             		move.b	#2,obPriority(a0)
00010778 117C 000B 0020             		move.b	#$B,obColType(a0)
0001077E 117C 0010 0019             		move.b	#$10,obActWid(a0)
00010784                            

00010784                            Bas_Action:	; Routine 2
00010784 7000                       		moveq	#0,d0
00010786 1028 0025                  		move.b	ob2ndRout(a0),d0
0001078A 323B 0000                  		move.w	@index(pc,d0.w),d1
0001078E 4EBB 1000                  		jsr	@index(pc,d1.w)
00010792 43F9 0000 0000             		lea	(Ani_Bas).l,a1
00010798 6100 A616                  		bsr.w	AnimateSprite
0001079C 6000 F5A8                  		bra.w	RememberState
000107A0                            ; ===========================================================================
000107A0 0000                       @index:		dc.w @dropcheck-@index
000107A2 0000                       		dc.w @dropfly-@index
000107A4 0000                       		dc.w @flapsound-@index
000107A6 0000                       		dc.w @flyup-@index
000107A8                            ; ===========================================================================
000107A8                            

000107A8                            @dropcheck:
000107A8 343C 0080                  		move.w	#$80,d2
000107AC 6100 0000                  		bsr.w	@chkdistance	; is Sonic < $80 pixels from basaran?
000107B0 6400                       		bcc.s	@nodrop		; if not, branch
000107B2 3038 D00C                  		move.w	(v_player+obY).w,d0
000107B6 3140 0036                  		move.w	d0,$36(a0)
000107BA 9068 000C                  		sub.w	obY(a0),d0
000107BE 6500                       		bcs.s	@nodrop
000107C0 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic < $80 pixels from basaran?
000107C4 6400                       		bcc.s	@nodrop		; if not, branch
000107C6 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000107CA 6600                       		bne.s	@nodrop		; if yes, branch
000107CC                            

000107CC 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
000107D0 D007                       		add.b	d7,d0
000107D2 0200 0007                  		andi.b	#7,d0
000107D6 6600                       		bne.s	@nodrop
000107D8 117C 0001 001C             		move.b	#1,obAnim(a0)
000107DE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000107E2                            

000107E2                            	@nodrop:
000107E2 4E75                       		rts	
000107E4                            ; ===========================================================================
000107E4                            

000107E4                            @dropfly:
000107E4 6100 D494                  		bsr.w	SpeedToPos
000107E8 0668 0018 0012             		addi.w	#$18,obVelY(a0)	; make basaran fall
000107EE 343C 0080                  		move.w	#$80,d2
000107F2 6100 0000                  		bsr.w	@chkdistance
000107F6 3028 0036                  		move.w	$36(a0),d0
000107FA 9068 000C                  		sub.w	obY(a0),d0
000107FE 6500                       		bcs.s	@chkdel
00010800 0C40 0010                  		cmpi.w	#$10,d0		; is basaran close to Sonic vertically?
00010804 6400                       		bcc.s	@dropmore	; if not, branch
00010806 3141 0010                  		move.w	d1,obVelX(a0)	; make basaran fly horizontally
0001080A 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop basaran falling
00010810 117C 0002 001C             		move.b	#2,obAnim(a0)
00010816 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001081A                            

0001081A                            	@dropmore:
0001081A 4E75                       		rts	
0001081C                            

0001081C                            	@chkdel:
0001081C 4A28 0001                  		tst.b	obRender(a0)
00010820 6A00 D4BA                  		bpl.w	DeleteObject
00010824 4E75                       		rts	
00010826                            ; ===========================================================================
00010826                            

00010826                            @flapsound:
00010826 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001082A 0200 000F                  		andi.b	#$F,d0
0001082E 6600                       		bne.s	@nosound
00010830 303C 0000                  		move.w	#sfx_Basaran,d0
00010834 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play flapping sound every 16th frame
0001083A                            

0001083A                            	@nosound:
0001083A 6100 D43E                  		bsr.w	SpeedToPos
0001083E 3038 D008                  		move.w	(v_player+obX).w,d0
00010842 9068 0008                  		sub.w	obX(a0),d0
00010846 6400                       		bcc.s	@isright	; if Sonic is right of basaran, branch
00010848 4440                       		neg.w	d0
0001084A                            

0001084A                            	@isright:
0001084A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of basaran?
0001084E 6500                       		bcs.s	@dontflyup	; if yes, branch
00010850 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
00010854 D007                       		add.b	d7,d0
00010856 0200 0007                  		andi.b	#7,d0
0001085A 6600                       		bne.s	@dontflyup
0001085C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00010860                            

00010860                            @dontflyup:
00010860 4E75                       		rts	
00010862                            ; ===========================================================================
00010862                            

00010862                            @flyup:
00010862 6100 D416                  		bsr.w	SpeedToPos
00010866 0468 0018 0012             		subi.w	#$18,obVelY(a0)	; make basaran fly upwards
0001086C 6100 0000                  		bsr.w	ObjHitCeiling
00010870 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010872 6A00                       		bpl.s	@noceiling	; if not, branch
00010874 9368 000C                  		sub.w	d1,obY(a0)
00010878 0268 FFF8 0008             		andi.w	#$FFF8,obX(a0)
0001087E 4268 0010                  		clr.w	obVelX(a0)	; stop basaran moving
00010882 4268 0012                  		clr.w	obVelY(a0)
00010886 4228 001C                  		clr.b	obAnim(a0)
0001088A 4228 0025                  		clr.b	ob2ndRout(a0)
0001088E                            

0001088E                            	@noceiling:
0001088E 4E75                       		rts	
00010890                            ; ===========================================================================
00010890                            

00010890                            ; Subroutine to check Sonic's distance from the basaran
00010890                            

00010890                            ; input:
00010890                            ;	d2 = distance to compare
00010890                            

00010890                            ; output:
00010890                            ;	d0 = distance between Sonic and basaran
00010890                            ;	d1 = speed/direction for basaran to fly
00010890                            

00010890                            @chkdistance:
00010890 323C 0100                  		move.w	#$100,d1
00010894 08E8 0000 0022             		bset	#0,obStatus(a0)
0001089A 3038 D008                  		move.w	(v_player+obX).w,d0
0001089E 9068 0008                  		sub.w	obX(a0),d0
000108A2 6400                       		bcc.s	@right		; if Sonic is right of basaran, branch
000108A4 4440                       		neg.w	d0
000108A6 4441                       		neg.w	d1
000108A8 08A8 0000 0022             		bclr	#0,obStatus(a0)
000108AE                            

000108AE                            	@right:
000108AE B042                       		cmp.w	d2,d0
000108B0 4E75                       		rts	
000108B2                            ; ===========================================================================
000108B2                            ; unused crap
000108B2 6100 D3C6                  		bsr.w	SpeedToPos
000108B6 6100 D3E8                  		bsr.w	DisplaySprite
000108BA 4A28 0001                  		tst.b	obRender(a0)
000108BE 6A00 D41C                  		bpl.w	DeleteObject
000108C2 4E75                       		rts	
000108C2 4E75                       		rts	
000108C4                            		include	"_anim\Basaran.asm"
000108C4                            ; ---------------------------------------------------------------------------
000108C4                            ; Animation script - Basaran enemy
000108C4                            ; ---------------------------------------------------------------------------
000108C4 0000                       Ani_Bas:	dc.w @still-Ani_Bas
000108C6 0000                       		dc.w @fall-Ani_Bas
000108C8 0000                       		dc.w @fly-Ani_Bas
000108CA 0F00 FF                    @still:		dc.b $F, 0, afEnd
000108CE 00                         		even
000108CE 0F01 FF                    @fall:		dc.b $F, 1, afEnd
000108D2 00                         		even
000108D2 0301 0203 02FF             @fly:		dc.b 3,	1, 2, 3, 2, afEnd
000108D8                            		even
000108D8                            		even
000108D8                            Map_Bas:	include	"_maps\Basaran.asm"
000108D8                            ; ---------------------------------------------------------------------------
000108D8                            ; Sprite mappings - Basaran enemy (MZ)
000108D8                            ; ---------------------------------------------------------------------------
000108D8                            Map_Bas_internal:
000108D8 0000                       		dc.w @still-Map_Bas_internal
000108DA 0000                       		dc.w @fly1-Map_Bas_internal
000108DC 0000                       		dc.w @fly2-Map_Bas_internal
000108DE 0000                       		dc.w @fly3-Map_Bas_internal
000108E0 01                         @still:		dc.b 1
000108E1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000108E6 03                         @fly1:		dc.b 3
000108E7 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000108EC 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000108F1 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000108F6 04                         @fly2:		dc.b 4
000108F7 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000108FC 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010901 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010906 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
0001090B 04                         @fly3:		dc.b 4
0001090C F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010911 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010916 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
0001091B FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010920                            		even
00010920                            		even
00010920                            

00010920                            		include	"_incObj\56 Floating Blocks and Doors.asm"
00010920                            ; ---------------------------------------------------------------------------
00010920                            ; Object 56 - floating blocks (SYZ/SLZ), large doors (LZ)
00010920                            ; ---------------------------------------------------------------------------
00010920                            

00010920                            FloatingBlock:
00010920 7000                       		moveq	#0,d0
00010922 1028 0024                  		move.b	obRoutine(a0),d0
00010926 323B 0000                  		move.w	FBlock_Index(pc,d0.w),d1
0001092A 4EFB 1000                  		jmp	FBlock_Index(pc,d1.w)
0001092E                            ; ===========================================================================
0001092E 0000                       FBlock_Index:	dc.w FBlock_Main-FBlock_Index
00010930 0000                       		dc.w FBlock_Action-FBlock_Index
00010932                            

00010932 =00000034                  fb_origX:	equ $34		; original x-axis position
00010932 =00000030                  fb_origY:	equ $30		; original y-axis position
00010932 =0000003A                  fb_height:	equ $3A		; total object height
00010932 =0000003C                  fb_type:		equ $3C		; subtype (2nd digit only)
00010932                            

00010932                            FBlock_Var:	; width/2, height/2
00010932 1010                       		dc.b  $10, $10	; subtype 0x/8x
00010934 2020                       		dc.b  $20, $20	; subtype 1x/9x
00010936 1020                       		dc.b  $10, $20	; subtype 2x/Ax
00010938 201A                       		dc.b  $20, $1A	; subtype 3x/Bx
0001093A 1027                       		dc.b  $10, $27	; subtype 4x/Cx
0001093C 1010                       		dc.b  $10, $10	; subtype 5x/Dx
0001093E 0820                       		dc.b	8, $20	; subtype 6x/Ex
00010940 4010                       		dc.b  $40, $10	; subtype 7x/Fx
00010942                            ; ===========================================================================
00010942                            

00010942                            FBlock_Main:	; Routine 0
00010942 5428 0024                  		addq.b	#2,obRoutine(a0)
00010946 217C 0000 0000 0004        		move.l	#Map_FBlock,obMap(a0)
0001094E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00010954 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
0001095A 6600                       		bne.s	@notLZ
0001095C 317C 43C4 0002             		move.w	#$43C4,obGfx(a0) ; LZ specific code
00010962                            

00010962                            	@notLZ:
00010962 117C 0004 0001             		move.b	#4,obRender(a0)
00010968 117C 0003 0018             		move.b	#3,obPriority(a0)
0001096E 7000                       		moveq	#0,d0
00010970 1028 0028                  		move.b	obSubtype(a0),d0 ; get subtype
00010974 E648                       		lsr.w	#3,d0
00010976 0240 000E                  		andi.w	#$E,d0		; read only the 1st digit
0001097A 45FB 00B6                  		lea	FBlock_Var(pc,d0.w),a2 ; get size data
0001097E 115A 0019                  		move.b	(a2)+,obActWid(a0)
00010982 1152 0016                  		move.b	(a2),obHeight(a0)
00010986 E248                       		lsr.w	#1,d0
00010988 1140 001A                  		move.b	d0,obFrame(a0)
0001098C 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00010992 3168 000C 0030             		move.w	obY(a0),fb_origY(a0)
00010998 7000                       		moveq	#0,d0
0001099A 1012                       		move.b	(a2),d0
0001099C D040                       		add.w	d0,d0
0001099E 3140 003A                  		move.w	d0,fb_height(a0)
000109A2 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
000109A8 6600                       			bne.s	@dontdelete
000109AA 0C68 1BB8 0008             			cmpi.w	#$1BB8,obX(a0)
000109B0 6600                       			bne.s	@notatpos
000109B2 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000109B6 6700                       			beq.s	@dontdelete
000109B8 4EF9 0000 DCDC             			jmp	(DeleteObject).l
000109BE                            	@notatpos:
000109BE 4228 0028                  			clr.b	obSubtype(a0)
000109C2 4A38 F7CE                  			tst.b	($FFFFF7CE).w
000109C6 6600                       			bne.s	@dontdelete
000109C8 4EF9 0000 DCDC             			jmp	(DeleteObject).l
000109CE                            	@dontdelete:
000109CE 7000                       		moveq	#0,d0
000109D0 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000109D6 6700                       		beq.s	@stillnotLZ
000109D8 1028 0028                  		move.b	obSubtype(a0),d0 ; SYZ/SLZ specific code
000109DC 0240 000F                  		andi.w	#$F,d0
000109E0 5140                       		subq.w	#8,d0
000109E2 6500                       		bcs.s	@stillnotLZ
000109E4 E548                       		lsl.w	#2,d0
000109E6 45F8 FE8A                  		lea	(v_oscillate+$2C).w,a2
000109EA 45F2 0000                  		lea	(a2,d0.w),a2
000109EE 4A52                       		tst.w	(a2)
000109F0 6A00                       		bpl.s	@stillnotLZ
000109F2 0868 0000 0022             		bchg	#0,obStatus(a0)
000109F8                            

000109F8                            	@stillnotLZ:
000109F8 1028 0028                  		move.b	obSubtype(a0),d0
000109FC 6A00                       		bpl.s	FBlock_Action
000109FE 0200 000F                  		andi.b	#$F,d0
00010A02 1140 003C                  		move.b	d0,fb_type(a0)
00010A06 117C 0005 0028             		move.b	#5,obSubtype(a0)
00010A0C 0C28 0007 001A             		cmpi.b	#7,obFrame(a0)
00010A12 6600                       		bne.s	@chkstate
00010A14 117C 000C 0028             		move.b	#$C,obSubtype(a0)
00010A1A 317C 0080 003A             		move.w	#$80,fb_height(a0)
00010A20                            

00010A20                            @chkstate:
00010A20 45F8 FC00                  		lea	(v_objstate).w,a2
00010A24 7000                       		moveq	#0,d0
00010A26 1028 0023                  		move.b	obRespawnNo(a0),d0
00010A2A 6700                       		beq.s	FBlock_Action
00010A2C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010A32 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010A38 6700                       		beq.s	FBlock_Action
00010A3A 5228 0028                  		addq.b	#1,obSubtype(a0)
00010A3E 4268 003A                  		clr.w	fb_height(a0)
00010A42                            

00010A42                            FBlock_Action:	; Routine 2
00010A42 3F28 0008                  		move.w	obX(a0),-(sp)
00010A46 7000                       		moveq	#0,d0
00010A48 1028 0028                  		move.b	obSubtype(a0),d0 ; get object subtype
00010A4C 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010A50 D040                       		add.w	d0,d0
00010A52 323B 0000                  		move.w	@index(pc,d0.w),d1
00010A56 4EBB 1000                  		jsr	@index(pc,d1.w)	; move block subroutines
00010A5A 381F                       		move.w	(sp)+,d4
00010A5C 4A28 0001                  		tst.b	obRender(a0)
00010A60 6A00                       		bpl.s	@chkdel
00010A62 7200                       		moveq	#0,d1
00010A64 1228 0019                  		move.b	obActWid(a0),d1
00010A68 0641 000B                  		addi.w	#$B,d1
00010A6C 7400                       		moveq	#0,d2
00010A6E 1428 0016                  		move.b	obHeight(a0),d2
00010A72 3602                       		move.w	d2,d3
00010A74 5243                       		addq.w	#1,d3
00010A76 6100 F5F8                  		bsr.w	SolidObject
00010A7A                            

00010A7A                            	@chkdel:
00010A96                            		@display:
00010A96 6000 D208                  			bra.w	DisplaySprite
00010A9A                            		@chkdel2:
00010A9A 0C28 0037 0028             			cmpi.b	#$37,obSubtype(a0)
00010AA0 6600                       			bne.s	@delete
00010AA2 4A28 0038                  			tst.b	$38(a0)
00010AA6 66EE                       			bne.s	@display
00010AA8                            		@delete:
00010AA8 4EF9 0000 DCDC             			jmp	(DeleteObject).l
00010AAE                            ; ===========================================================================
00010AAE 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00010AB2 0000 0000                  		dc.w @type02-@index, @type03-@index
00010AB6 0000 0000                  		dc.w @type04-@index, @type05-@index
00010ABA 0000 0000                  		dc.w @type06-@index, @type07-@index
00010ABE 0000 0000                  		dc.w @type08-@index, @type09-@index
00010AC2 0000 0000                  		dc.w @type0A-@index, @type0B-@index
00010AC6 0000 0000                  		dc.w @type0C-@index, @type0D-@index
00010ACA                            ; ===========================================================================
00010ACA                            

00010ACA                            @type00:
00010ACA                            ; doesn't move
00010ACA 4E75                       		rts	
00010ACC                            ; ===========================================================================
00010ACC                            

00010ACC                            @type01:
00010ACC                            ; moves side-to-side
00010ACC 323C 0040                  		move.w	#$40,d1		; set move distance
00010AD0 7000                       		moveq	#0,d0
00010AD2 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00010AD6 6000                       		bra.s	@moveLR
00010AD8                            ; ===========================================================================
00010AD8                            

00010AD8                            @type02:
00010AD8                            ; moves side-to-side
00010AD8 323C 0080                  		move.w	#$80,d1		; set move distance
00010ADC 7000                       		moveq	#0,d0
00010ADE 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00010AE2                            

00010AE2                            	@moveLR:
00010AE2 0828 0000 0022             		btst	#0,obStatus(a0)
00010AE8 6700                       		beq.s	@noflip
00010AEA 4440                       		neg.w	d0
00010AEC D041                       		add.w	d1,d0
00010AEE                            

00010AEE                            	@noflip:
00010AEE 3228 0034                  		move.w	fb_origX(a0),d1
00010AF2 9240                       		sub.w	d0,d1
00010AF4 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00010AF8 4E75                       		rts	
00010AFA                            ; ===========================================================================
00010AFA                            

00010AFA                            @type03:
00010AFA                            ; moves up/down
00010AFA 323C 0040                  		move.w	#$40,d1		; set move distance
00010AFE 7000                       		moveq	#0,d0
00010B00 1038 FE68                  		move.b	(v_oscillate+$A).w,d0
00010B04 6000                       		bra.s	@moveUD
00010B06                            ; ===========================================================================
00010B06                            

00010B06                            @type04:
00010B06                            ; moves up/down
00010B06 323C 0080                  		move.w	#$80,d1		; set move distance
00010B0A 7000                       		moveq	#0,d0
00010B0C 1038 FE7C                  		move.b	(v_oscillate+$1E).w,d0
00010B10                            

00010B10                            	@moveUD:
00010B10 0828 0000 0022             		btst	#0,obStatus(a0)
00010B16 6700                       		beq.s	@noflip04
00010B18 4440                       		neg.w	d0
00010B1A D041                       		add.w	d1,d0
00010B1C                            

00010B1C                            	@noflip04:
00010B1C 3228 0030                  		move.w	fb_origY(a0),d1
00010B20 9240                       		sub.w	d0,d1
00010B22 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00010B26 4E75                       		rts	
00010B28                            ; ===========================================================================
00010B28                            

00010B28                            @type05:
00010B28                            ; moves up when a switch is pressed
00010B28 4A28 0038                  		tst.b	$38(a0)
00010B2C 6600                       		bne.s	@loc_104A4
00010B2E 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00010B34 6600                       		bne.s	@aaa		; if not, branch
00010B36 0C28 0003 003C             		cmpi.b	#3,fb_type(a0)
00010B3C 6600                       		bne.s	@aaa
00010B3E 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00010B42 3038 D008                  		move.w	(v_player+obX).w,d0
00010B46 B068 0008                  		cmp.w	obX(a0),d0
00010B4A 6400                       		bcc.s	@aaa
00010B4C 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w
00010B52                            

00010B52                            	@aaa:
00010B52 45F8 F7E0                  		lea	(f_switch).w,a2
00010B56 7000                       		moveq	#0,d0
00010B58 1028 003C                  		move.b	fb_type(a0),d0
00010B5C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010B62 6700                       		beq.s	@loc_104AE
00010B64 0C78 0100 FE10             		cmpi.w	#(id_LZ<<8)+0,(v_zone).w ; is level LZ1 ?
00010B6A 6600                       		bne.s	@loc_1049E	; if not, branch
00010B6C 0C00 0003                  		cmpi.b	#3,d0
00010B70 6600                       		bne.s	@loc_1049E
00010B72 4238 F7C9                  		clr.b	(f_wtunnelallow).w
00010B76                            

00010B76                            @loc_1049E:
00010B76 117C 0001 0038             		move.b	#1,$38(a0)
00010B7C                            

00010B7C                            @loc_104A4:
00010B7C 4A68 003A                  		tst.w	fb_height(a0)
00010B80 6700                       		beq.s	@loc_104C8
00010B82 5568 003A                  		subq.w	#2,fb_height(a0)
00010B86                            

00010B86                            @loc_104AE:
00010B86 3028 003A                  		move.w	fb_height(a0),d0
00010B8A 0828 0000 0022             		btst	#0,$22(a0)
00010B90 6700                       		beq.s	@loc_104BC
00010B92 4440                       		neg.w	d0
00010B94                            

00010B94                            @loc_104BC:
00010B94 3228 0030                  		move.w	fb_origY(a0),d1
00010B98 D240                       		add.w	d0,d1
00010B9A 3141 000C                  		move.w	d1,obY(a0)
00010B9E 4E75                       		rts	
00010BA0                            ; ===========================================================================
00010BA0                            

00010BA0                            @loc_104C8:
00010BA0 5228 0028                  		addq.b	#1,$28(a0)
00010BA4 4228 0038                  		clr.b	$38(a0)
00010BA8 45F8 FC00                  		lea	(v_objstate).w,a2
00010BAC 7000                       		moveq	#0,d0
00010BAE 1028 0023                  		move.b	obRespawnNo(a0),d0
00010BB2 67D2                       		beq.s	@loc_104AE
00010BB4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010BBA 60CA                       		bra.s	@loc_104AE
00010BBC                            ; ===========================================================================
00010BBC                            

00010BBC                            @type06:
00010BBC 4A28 0038                  		tst.b	$38(a0)
00010BC0 6600                       		bne.s	@loc_10500
00010BC2 45F8 F7E0                  		lea	(f_switch).w,a2
00010BC6 7000                       		moveq	#0,d0
00010BC8 1028 003C                  		move.b	fb_type(a0),d0
00010BCC 4A32 0000                  		tst.b	(a2,d0.w)
00010BD0 6A00                       		bpl.s	@loc_10512
00010BD2 117C 0001 0038             		move.b	#1,$38(a0)
00010BD8                            

00010BD8                            @loc_10500:
00010BD8 7000                       		moveq	#0,d0
00010BDA 1028 0016                  		move.b	obHeight(a0),d0
00010BDE D040                       		add.w	d0,d0
00010BE0 B068 003A                  		cmp.w	fb_height(a0),d0
00010BE4 6700                       		beq.s	@loc_1052C
00010BE6 5468 003A                  		addq.w	#2,fb_height(a0)
00010BEA                            

00010BEA                            @loc_10512:
00010BEA 3028 003A                  		move.w	fb_height(a0),d0
00010BEE 0828 0000 0022             		btst	#0,obStatus(a0)
00010BF4 6700                       		beq.s	@loc_10520
00010BF6 4440                       		neg.w	d0
00010BF8                            

00010BF8                            @loc_10520:
00010BF8 3228 0030                  		move.w	fb_origY(a0),d1
00010BFC D240                       		add.w	d0,d1
00010BFE 3141 000C                  		move.w	d1,obY(a0)
00010C02 4E75                       		rts	
00010C04                            ; ===========================================================================
00010C04                            

00010C04                            @loc_1052C:
00010C04 5328 0028                  		subq.b	#1,obSubtype(a0)
00010C08 4228 0038                  		clr.b	$38(a0)
00010C0C 45F8 FC00                  		lea	(v_objstate).w,a2
00010C10 7000                       		moveq	#0,d0
00010C12 1028 0023                  		move.b	obRespawnNo(a0),d0
00010C16 67D2                       		beq.s	@loc_10512
00010C18 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010C1E 60CA                       		bra.s	@loc_10512
00010C20                            ; ===========================================================================
00010C20                            

00010C20                            @type07:
00010C20 4A28 0038                  		tst.b	$38(a0)
00010C24 6600                       		bne.s	@loc_1055E
00010C26 4A38 F7EF                  		tst.b	(f_switch+$F).w	; has switch number $F been pressed?
00010C2A 6700                       		beq.s	@locret_10578
00010C2C 117C 0001 0038             		move.b	#1,$38(a0)
00010C32 4268 003A                  		clr.w	fb_height(a0)
00010C36                            

00010C36                            @loc_1055E:
00010C36 5268 0008                  		addq.w	#1,obX(a0)
00010C3A 3168 0008 0034             		move.w	obX(a0),fb_origX(a0)
00010C40 5268 003A                  		addq.w	#1,fb_height(a0)
00010C44 0C68 0380 003A             		cmpi.w	#$380,fb_height(a0)
00010C4A 6600                       		bne.s	@locret_10578
00010C4C 11FC 0001 F7CE             			move.b	#1,($FFFFF7CE).w
00010C52 4228 0038                  			clr.b	$38(a0)
00010C56 4228 0028                  		clr.b	obSubtype(a0)
00010C5A                            

00010C5A                            @locret_10578:
00010C5A 4E75                       		rts	
00010C5C                            ; ===========================================================================
00010C5C                            

00010C5C                            @type0C:
00010C5C 4A28 0038                  		tst.b	$38(a0)
00010C60 6600                       		bne.s	@loc_10598
00010C62 45F8 F7E0                  		lea	(f_switch).w,a2
00010C66 7000                       		moveq	#0,d0
00010C68 1028 003C                  		move.b	fb_type(a0),d0
00010C6C 0832 0000 0000             		btst	#0,(a2,d0.w)
00010C72 6700                       		beq.s	@loc_105A2
00010C74 117C 0001 0038             		move.b	#1,$38(a0)
00010C7A                            

00010C7A                            @loc_10598:
00010C7A 4A68 003A                  		tst.w	fb_height(a0)
00010C7E 6700                       		beq.s	@loc_105C0
00010C80 5568 003A                  		subq.w	#2,fb_height(a0)
00010C84                            

00010C84                            @loc_105A2:
00010C84 3028 003A                  		move.w	fb_height(a0),d0
00010C88 0828 0000 0022             		btst	#0,obStatus(a0)
00010C8E 6700                       		beq.s	@loc_105B4
00010C90 4440                       		neg.w	d0
00010C92 0640 0080                  		addi.w	#$80,d0
00010C96                            

00010C96                            @loc_105B4:
00010C96 3228 0034                  		move.w	fb_origX(a0),d1
00010C9A D240                       		add.w	d0,d1
00010C9C 3141 0008                  		move.w	d1,obX(a0)
00010CA0 4E75                       		rts	
00010CA2                            ; ===========================================================================
00010CA2                            

00010CA2                            @loc_105C0:
00010CA2 5228 0028                  		addq.b	#1,obSubtype(a0)
00010CA6 4228 0038                  		clr.b	$38(a0)
00010CAA 45F8 FC00                  		lea	(v_objstate).w,a2
00010CAE 7000                       		moveq	#0,d0
00010CB0 1028 0023                  		move.b	obRespawnNo(a0),d0
00010CB4 67CE                       		beq.s	@loc_105A2
00010CB6 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010CBC 60C6                       		bra.s	@loc_105A2
00010CBE                            ; ===========================================================================
00010CBE                            

00010CBE                            @type0D:
00010CBE 4A28 0038                  		tst.b	$38(a0)
00010CC2 6600                       		bne.s	@loc_105F8
00010CC4 45F8 F7E0                  		lea	(f_switch).w,a2
00010CC8 7000                       		moveq	#0,d0
00010CCA 1028 003C                  		move.b	fb_type(a0),d0
00010CCE 4A32 0000                  		tst.b	(a2,d0.w)
00010CD2 6A00                       		bpl.s	@wtf
00010CD4 117C 0001 0038             		move.b	#1,$38(a0)
00010CDA                            

00010CDA                            @loc_105F8:
00010CDA 303C 0080                  		move.w	#$80,d0
00010CDE B068 003A                  		cmp.w	fb_height(a0),d0
00010CE2 6700                       		beq.s	@loc_10624
00010CE4 5468 003A                  		addq.w	#2,fb_height(a0)
00010CE8                            

00010CE8                            @wtf:
00010CE8 3028 003A                  		move.w	fb_height(a0),d0
00010CEC 0828 0000 0022             		btst	#0,obStatus(a0)
00010CF2 6700                       		beq.s	@loc_10618
00010CF4 4440                       		neg.w	d0
00010CF6 0640 0080                  		addi.w	#$80,d0
00010CFA                            

00010CFA                            @loc_10618:
00010CFA 3228 0034                  		move.w	fb_origX(a0),d1
00010CFE D240                       		add.w	d0,d1
00010D00 3141 0008                  		move.w	d1,obX(a0)
00010D04 4E75                       		rts	
00010D06                            ; ===========================================================================
00010D06                            

00010D06                            @loc_10624:
00010D06 5328 0028                  		subq.b	#1,obSubtype(a0)
00010D0A 4228 0038                  		clr.b	$38(a0)
00010D0E 45F8 FC00                  		lea	(v_objstate).w,a2
00010D12 7000                       		moveq	#0,d0
00010D14 1028 0023                  		move.b	obRespawnNo(a0),d0
00010D18 67CE                       		beq.s	@wtf
00010D1A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010D20 60C6                       		bra.s	@wtf
00010D22                            ; ===========================================================================
00010D22                            

00010D22                            @type08:
00010D22 323C 0010                  		move.w	#$10,d1
00010D26 7000                       		moveq	#0,d0
00010D28 1038 FE88                  		move.b	(v_oscillate+$2A).w,d0
00010D2C E248                       		lsr.w	#1,d0
00010D2E 3638 FE8A                  		move.w	(v_oscillate+$2C).w,d3
00010D32 6000                       		bra.s	@square
00010D34                            ; ===========================================================================
00010D34                            

00010D34                            @type09:
00010D34 323C 0030                  		move.w	#$30,d1
00010D38 7000                       		moveq	#0,d0
00010D3A 1038 FE8C                  		move.b	(v_oscillate+$2E).w,d0
00010D3E 3638 FE8E                  		move.w	(v_oscillate+$30).w,d3
00010D42 6000                       		bra.s	@square
00010D44                            ; ===========================================================================
00010D44                            

00010D44                            @type0A:
00010D44 323C 0050                  		move.w	#$50,d1
00010D48 7000                       		moveq	#0,d0
00010D4A 1038 FE90                  		move.b	(v_oscillate+$32).w,d0
00010D4E 3638 FE92                  		move.w	(v_oscillate+$34).w,d3
00010D52 6000                       		bra.s	@square
00010D54                            ; ===========================================================================
00010D54                            

00010D54                            @type0B:
00010D54 323C 0070                  		move.w	#$70,d1
00010D58 7000                       		moveq	#0,d0
00010D5A 1038 FE94                  		move.b	(v_oscillate+$36).w,d0
00010D5E 3638 FE96                  		move.w	(v_oscillate+$38).w,d3
00010D62                            

00010D62                            @square:
00010D62 4A43                       		tst.w	d3
00010D64 6600                       		bne.s	@loc_1068E
00010D66 5228 0022                  		addq.b	#1,obStatus(a0)
00010D6A 0228 0003 0022             		andi.b	#3,obStatus(a0)
00010D70                            

00010D70                            @loc_1068E:
00010D70 1428 0022                  		move.b	obStatus(a0),d2
00010D74 0202 0003                  		andi.b	#3,d2
00010D78 6600                       		bne.s	@loc_106AE
00010D7A 9041                       		sub.w	d1,d0
00010D7C D068 0034                  		add.w	fb_origX(a0),d0
00010D80 3140 0008                  		move.w	d0,obX(a0)
00010D84 4441                       		neg.w	d1
00010D86 D268 0030                  		add.w	fb_origY(a0),d1
00010D8A 3141 000C                  		move.w	d1,obY(a0)
00010D8E 4E75                       		rts	
00010D90                            ; ===========================================================================
00010D90                            

00010D90                            @loc_106AE:
00010D90 5302                       		subq.b	#1,d2
00010D92 6600                       		bne.s	@loc_106CC
00010D94 5341                       		subq.w	#1,d1
00010D96 9041                       		sub.w	d1,d0
00010D98 4440                       		neg.w	d0
00010D9A D068 0030                  		add.w	fb_origY(a0),d0
00010D9E 3140 000C                  		move.w	d0,obY(a0)
00010DA2 5241                       		addq.w	#1,d1
00010DA4 D268 0034                  		add.w	fb_origX(a0),d1
00010DA8 3141 0008                  		move.w	d1,obX(a0)
00010DAC 4E75                       		rts	
00010DAE                            ; ===========================================================================
00010DAE                            

00010DAE                            @loc_106CC:
00010DAE 5302                       		subq.b	#1,d2
00010DB0 6600                       		bne.s	@loc_106EA
00010DB2 5341                       		subq.w	#1,d1
00010DB4 9041                       		sub.w	d1,d0
00010DB6 4440                       		neg.w	d0
00010DB8 D068 0034                  		add.w	fb_origX(a0),d0
00010DBC 3140 0008                  		move.w	d0,obX(a0)
00010DC0 5241                       		addq.w	#1,d1
00010DC2 D268 0030                  		add.w	fb_origY(a0),d1
00010DC6 3141 000C                  		move.w	d1,obY(a0)
00010DCA 4E75                       		rts	
00010DCC                            ; ===========================================================================
00010DCC                            

00010DCC                            @loc_106EA:
00010DCC 9041                       		sub.w	d1,d0
00010DCE D068 0030                  		add.w	fb_origY(a0),d0
00010DD2 3140 000C                  		move.w	d0,obY(a0)
00010DD6 4441                       		neg.w	d1
00010DD8 D268 0034                  		add.w	fb_origX(a0),d1
00010DDC 3141 0008                  		move.w	d1,obX(a0)
00010DE0 4E75                       		rts	
00010DE0 4E75                       		rts	
00010DE2                            Map_FBlock:	include	"_maps\Floating Blocks and Doors.asm"
00010DE2                            ; ---------------------------------------------------------------------------
00010DE2                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010DE2                            ; ---------------------------------------------------------------------------
00010DE2                            Map_FBlock_internal:
00010DE2 0000                       		dc.w @syz1x1-Map_FBlock_internal
00010DE4 0000                       		dc.w @syz2x2-Map_FBlock_internal
00010DE6 0000                       		dc.w @syz1x2-Map_FBlock_internal
00010DE8 0000                       		dc.w @syzrect2x2-Map_FBlock_internal
00010DEA 0000                       		dc.w @syzrect1x3-Map_FBlock_internal
00010DEC 0000                       		dc.w @slz-Map_FBlock_internal
00010DEE 0000                       		dc.w @lzvert-Map_FBlock_internal
00010DF0 0000                       		dc.w @lzhoriz-Map_FBlock_internal
00010DF2 01                         @syz1x1:	dc.b 1
00010DF3 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0 ; SYZ - 1x1 square block
00010DF8 04                         @syz2x2:	dc.b 4
00010DF9 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0 ; SYZ - 2x2 square blocks
00010DFE E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010E03 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010E08 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010E0D 02                         @syz1x2:	dc.b 2
00010E0E E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0 ; SYZ - 1x2 square blocks
00010E13 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010E18 04                         @syzrect2x2:	dc.b 4
00010E19 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0 ; SYZ - 2x2 rectangular blocks
00010E1E E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010E23 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010E28 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010E2D 03                         @syzrect1x3:	dc.b 3
00010E2E D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0 ; SYZ - 1x3 rectangular blocks
00010E33 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010E38 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010E3D 01                         @slz:		dc.b 1
00010E3E F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0 ; SLZ - 1x1 square block
00010E43 02                         @lzvert:	dc.b 2
00010E44 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8	; LZ - small vertical door
00010E49 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010E4E 04                         @lzhoriz:	dc.b 4
00010E4F F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0 ; LZ - large horizontal door
00010E54 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010E59 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010E5E F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010E64 00                         		even
00010E64 00                         		even
00010E64                            

00010E64                            		include	"_incObj\57 Spiked Ball and Chain.asm"
00010E64                            ; ---------------------------------------------------------------------------
00010E64                            ; Object 57 - spiked balls (SYZ, LZ)
00010E64                            ; ---------------------------------------------------------------------------
00010E64                            

00010E64                            SpikeBall:
00010E64 7000                       		moveq	#0,d0
00010E66 1028 0024                  		move.b	obRoutine(a0),d0
00010E6A 323B 0000                  		move.w	SBall_Index(pc,d0.w),d1
00010E6E 4EFB 1000                  		jmp	SBall_Index(pc,d1.w)
00010E72                            ; ===========================================================================
00010E72 0000                       SBall_Index:	dc.w SBall_Main-SBall_Index
00010E74 0000                       		dc.w SBall_Move-SBall_Index
00010E76 0000                       		dc.w SBall_Display-SBall_Index
00010E78                            

00010E78 =00000029                  sball_childs:	equ $29		; number of child objects (1 byte)
00010E78                            		; $30-$37	; object RAM numbers of childs (1 byte each)
00010E78 =0000003A                  sball_origX:	equ $3A		; centre x-axis position (2 bytes)
00010E78 =00000038                  sball_origY:	equ $38		; centre y-axis position (2 bytes)
00010E78 =0000003C                  sball_radius:	equ $3C		; radius (1 byte)
00010E78 =0000003E                  sball_speed:	equ $3E		; rate of spin (2 bytes)
00010E78                            ; ===========================================================================
00010E78                            

00010E78                            SBall_Main:	; Routine 0
00010E78 5428 0024                  		addq.b	#2,obRoutine(a0)
00010E7C 217C 0000 0000 0004        		move.l	#Map_SBall,obMap(a0)
00010E84 317C 03BA 0002             		move.w	#$3BA,obGfx(a0)
00010E8A 117C 0004 0001             		move.b	#4,obRender(a0)
00010E90 117C 0004 0018             		move.b	#4,obPriority(a0)
00010E96 117C 0008 0019             		move.b	#8,obActWid(a0)
00010E9C 3168 0008 003A             		move.w	obX(a0),sball_origX(a0)
00010EA2 3168 000C 0038             		move.w	obY(a0),sball_origY(a0)
00010EA8 117C 0098 0020             		move.b	#$98,obColType(a0) ; SYZ specific code (chain hurts Sonic)
00010EAE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00010EB4 6600                       		bne.s	@notlz
00010EB6                            

00010EB6 117C 0000 0020             		move.b	#0,obColType(a0) ; LZ specific code (chain doesn't hurt)
00010EBC 317C 0310 0002             		move.w	#$310,obGfx(a0)
00010EC2 217C 0000 0000 0004        		move.l	#Map_SBall2,obMap(a0)
00010ECA                            

00010ECA                            	@notlz:
00010ECA 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00010ECE 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010ED2 4881                       		ext.w	d1
00010ED4 E741                       		asl.w	#3,d1		; multiply by 8
00010ED6 3141 003E                  		move.w	d1,sball_speed(a0) ; set object twirl speed
00010EDA 1028 0022                  		move.b	obStatus(a0),d0
00010EDE E418                       		ror.b	#2,d0
00010EE0 0200 00C0                  		andi.b	#$C0,d0
00010EE4 1140 0026                  		move.b	d0,obAngle(a0)
00010EE8 45E8 0029                  		lea	sball_childs(a0),a2
00010EEC 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00010EF0 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010EF4 14FC 0000                  		move.b	#0,(a2)+
00010EF8 3601                       		move.w	d1,d3
00010EFA E94B                       		lsl.w	#4,d3
00010EFC 1143 003C                  		move.b	d3,sball_radius(a0)
00010F00 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010F02 6500                       		bcs.s	@fail
00010F04 0828 0003 0028             		btst	#3,obSubtype(a0)
00010F0A 6700                       		beq.s	@makechain
00010F0C 5341                       		subq.w	#1,d1
00010F0E 6500                       		bcs.s	@fail
00010F10                            

00010F10                            @makechain:
00010F10 6100 D216                  		bsr.w	FindFreeObj
00010F14 6600                       		bne.s	@fail
00010F16 5228 0029                  		addq.b	#1,sball_childs(a0) ; increment child object counter
00010F1A 3A09                       		move.w	a1,d5		; get child object RAM address
00010F1C 0445 D000                  		subi.w	#v_objspace&$FFFF,d5 ; subtract base address
00010F20 EC4D                       		lsr.w	#6,d5		; divide by $40
00010F22 0245 007F                  		andi.w	#$7F,d5
00010F26 14C5                       		move.b	d5,(a2)+	; copy child RAM number
00010F28 137C 0004 0024             		move.b	#4,obRoutine(a1)
00010F2E 1368 0000 0000             		move.b	0(a0),0(a1)
00010F34 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00010F3A 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00010F40 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
00010F46 1368 0018 0018             		move.b	obPriority(a0),obPriority(a1)
00010F4C 1368 0019 0019             		move.b	obActWid(a0),obActWid(a1)
00010F52 1368 0020 0020             		move.b	obColType(a0),obColType(a1)
00010F58 0403 0010                  		subi.b	#$10,d3
00010F5C 1343 003C                  		move.b	d3,sball_radius(a1)
00010F60 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00010F66 6600                       		bne.s	@notlzagain
00010F68                            

00010F68 4A03                       		tst.b	d3
00010F6A 6600                       		bne.s	@notlzagain
00010F6C 137C 0002 001A             		move.b	#2,obFrame(a1)	; use different frame for LZ chain
00010F72                            

00010F72                            	@notlzagain:
00010F72 51C9 FF9C                  		dbf	d1,@makechain ; repeat for length of chain
00010F76                            

00010F76                            	@fail:
00010F76 3A08                       		move.w	a0,d5
00010F78 0445 D000                  		subi.w	#v_objspace&$FFFF,d5
00010F7C EC4D                       		lsr.w	#6,d5
00010F7E 0245 007F                  		andi.w	#$7F,d5
00010F82 14C5                       		move.b	d5,(a2)+
00010F84 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
00010F8A 6600                       		bne.s	SBall_Move
00010F8C                            

00010F8C 117C 008B 0020             		move.b	#$8B,obColType(a0) ; if yes, make last spikeball larger
00010F92 117C 0001 001A             		move.b	#1,obFrame(a0)	; use different	frame
00010F98                            

00010F98                            SBall_Move:	; Routine 2
00010F98 6100 0000                  		bsr.w	@movesub
00010F9C 6000 0000                  		bra.w	@chkdel
00010FA0                            ; ===========================================================================
00010FA0                            

00010FA0                            @movesub:
00010FA0 3028 003E                  		move.w	sball_speed(a0),d0
00010FA4 D168 0026                  		add.w	d0,obAngle(a0)
00010FA8 1028 0026                  		move.b	obAngle(a0),d0
00010FAC 4EB9 0000 29E0             		jsr	(CalcSine).l
00010FB2 3428 0038                  		move.w	sball_origY(a0),d2
00010FB6 3628 003A                  		move.w	sball_origX(a0),d3
00010FBA 45E8 0029                  		lea	sball_childs(a0),a2
00010FBE 7C00                       		moveq	#0,d6
00010FC0 1C1A                       		move.b	(a2)+,d6
00010FC2                            

00010FC2                            	@loop:
00010FC2 7800                       		moveq	#0,d4
00010FC4 181A                       		move.b	(a2)+,d4
00010FC6 ED4C                       		lsl.w	#6,d4
00010FC8 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
00010FCE 2244                       		movea.l	d4,a1
00010FD0 7800                       		moveq	#0,d4
00010FD2 1829 003C                  		move.b	sball_radius(a1),d4
00010FD6 2A04                       		move.l	d4,d5
00010FD8 C9C0                       		muls.w	d0,d4
00010FDA E084                       		asr.l	#8,d4
00010FDC CBC1                       		muls.w	d1,d5
00010FDE E085                       		asr.l	#8,d5
00010FE0 D842                       		add.w	d2,d4
00010FE2 DA43                       		add.w	d3,d5
00010FE4 3344 000C                  		move.w	d4,obY(a1)
00010FE8 3345 0008                  		move.w	d5,obX(a1)
00010FEC 51CE FFD4                  		dbf	d6,@loop
00010FF0 4E75                       		rts	
00010FF2                            ; ===========================================================================
00010FF2                            

00010FF2                            @chkdel:
00011010 6000 CC8E                  		bra.w	DisplaySprite
00011014                            ; ===========================================================================
00011014                            

00011014                            @delete:
00011014 7400                       		moveq	#0,d2
00011016 45E8 0029                  		lea	sball_childs(a0),a2
0001101A 141A                       		move.b	(a2)+,d2
0001101C                            

0001101C                            	@deleteloop:
0001101C 7000                       		moveq	#0,d0
0001101E 101A                       		move.b	(a2)+,d0
00011020 ED48                       		lsl.w	#6,d0
00011022 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
00011028 2240                       		movea.l	d0,a1
0001102A 6100 CCB2                  		bsr.w	DeleteChild
0001102E 51CA FFEC                  		dbf	d2,@deleteloop ; delete all pieces of	chain
00011032                            

00011032 4E75                       		rts	
00011034                            ; ===========================================================================
00011034                            

00011034                            SBall_Display:	; Routine 4
00011034 6000 CC6A                  		bra.w	DisplaySprite
00011034 6000 CC6A                  		bra.w	DisplaySprite
00011038                            Map_SBall:	include	"_maps\Spiked Ball and Chain (SYZ).asm"
00011038                            ; ---------------------------------------------------------------------------
00011038                            ; Sprite mappings - chain of spiked balls (SYZ)
00011038                            ; ---------------------------------------------------------------------------
00011038                            Map_SBall_internal:
00011038 0000                       		dc.w @0-Map_SBall_internal
0001103A 01                         @0:		dc.b 1
0001103B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011040                            		even
00011040                            		even
00011040                            Map_SBall2:	include	"_maps\Spiked Ball and Chain (LZ).asm"
00011040                            ; ---------------------------------------------------------------------------
00011040                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011040                            ; ---------------------------------------------------------------------------
00011040                            Map_SBall2_internal:
00011040 0000                       		dc.w @chain-Map_SBall2_internal
00011042 0000                       		dc.w @spikeball-Map_SBall2_internal
00011044 0000                       		dc.w @base-Map_SBall2_internal
00011046 01                         @chain:		dc.b 1
00011047 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; chain link
0001104C 01                         @spikeball:	dc.b 1
0001104D F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0	; spikeball
00011052 01                         @base:		dc.b 1
00011053 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8 ; wall attachment
00011058                            		even
00011058                            		even
00011058                            		include	"_incObj\58 Big Spiked Ball.asm"
00011058                            ; ---------------------------------------------------------------------------
00011058                            ; Object 58 - giant spiked balls (SYZ)
00011058                            ; ---------------------------------------------------------------------------
00011058                            

00011058                            BigSpikeBall:
00011058 7000                       		moveq	#0,d0
0001105A 1028 0024                  		move.b	obRoutine(a0),d0
0001105E 323B 0000                  		move.w	BBall_Index(pc,d0.w),d1
00011062 4EFB 1000                  		jmp	BBall_Index(pc,d1.w)
00011066                            ; ===========================================================================
00011066 0000                       BBall_Index:	dc.w BBall_Main-BBall_Index
00011068 0000                       		dc.w BBall_Move-BBall_Index
0001106A                            

0001106A =0000003A                  bball_origX:	equ $3A		; original x-axis position
0001106A =00000038                  bball_origY:	equ $38		; original y-axis position
0001106A =0000003C                  bball_radius:	equ $3C		; radius of circle
0001106A =0000003E                  bball_speed:	equ $3E		; speed
0001106A                            ; ===========================================================================
0001106A                            

0001106A                            BBall_Main:	; Routine 0
0001106A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001106E 217C 0000 0000 0004        		move.l	#Map_BBall,obMap(a0)
00011076 317C 0396 0002             		move.w	#$396,obGfx(a0)
0001107C 117C 0004 0001             		move.b	#4,obRender(a0)
00011082 117C 0004 0018             		move.b	#4,obPriority(a0)
00011088 117C 0018 0019             		move.b	#$18,obActWid(a0)
0001108E 3168 0008 003A             		move.w	obX(a0),bball_origX(a0)
00011094 3168 000C 0038             		move.w	obY(a0),bball_origY(a0)
0001109A 117C 0086 0020             		move.b	#$86,obColType(a0)
000110A0 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
000110A4 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000110A8 4881                       		ext.w	d1
000110AA E741                       		asl.w	#3,d1		; multiply by 8
000110AC 3141 003E                  		move.w	d1,bball_speed(a0) ; set object speed
000110B0 1028 0022                  		move.b	obStatus(a0),d0
000110B4 E418                       		ror.b	#2,d0
000110B6 0200 00C0                  		andi.b	#$C0,d0
000110BA 1140 0026                  		move.b	d0,obAngle(a0)
000110BE 117C 0050 003C             		move.b	#$50,bball_radius(a0) ; set radius of circle motion
000110C4                            

000110C4                            BBall_Move:	; Routine 2
000110C4 7000                       		moveq	#0,d0
000110C6 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000110CA 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
000110CE D040                       		add.w	d0,d0
000110D0 323B 0000                  		move.w	@index(pc,d0.w),d1
000110D4 4EBB 1000                  		jsr	@index(pc,d1.w)
000110F6 6000 CBA8                  		bra.w	DisplaySprite
000110FA                            ; ===========================================================================
000110FA 0000                       @index:		dc.w @type00-@index
000110FC 0000                       		dc.w @type01-@index
000110FE 0000                       		dc.w @type02-@index
00011100 0000                       		dc.w @type03-@index
00011102                            ; ===========================================================================
00011102                            

00011102                            @type00:
00011102 4E75                       		rts	
00011104                            ; ===========================================================================
00011104                            

00011104                            @type01:
00011104 323C 0060                  		move.w	#$60,d1
00011108 7000                       		moveq	#0,d0
0001110A 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
0001110E 0828 0000 0022             		btst	#0,obStatus(a0)
00011114 6700                       		beq.s	@noflip1
00011116 4440                       		neg.w	d0
00011118 D041                       		add.w	d1,d0
0001111A                            

0001111A                            	@noflip1:
0001111A 3228 003A                  		move.w	bball_origX(a0),d1
0001111E 9240                       		sub.w	d0,d1
00011120 3141 0008                  		move.w	d1,obX(a0)	; move object horizontally
00011124 4E75                       		rts	
00011126                            ; ===========================================================================
00011126                            

00011126                            @type02:
00011126 323C 0060                  		move.w	#$60,d1
0001112A 7000                       		moveq	#0,d0
0001112C 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00011130 0828 0000 0022             		btst	#0,obStatus(a0)
00011136 6700                       		beq.s	@noflip2
00011138 4440                       		neg.w	d0
0001113A 0640 0080                  		addi.w	#$80,d0
0001113E                            

0001113E                            	@noflip2:
0001113E 3228 0038                  		move.w	bball_origY(a0),d1
00011142 9240                       		sub.w	d0,d1
00011144 3141 000C                  		move.w	d1,obY(a0)	; move object vertically
00011148 4E75                       		rts	
0001114A                            ; ===========================================================================
0001114A                            

0001114A                            @type03:
0001114A 3028 003E                  		move.w	bball_speed(a0),d0
0001114E D168 0026                  		add.w	d0,obAngle(a0)
00011152 1028 0026                  		move.b	obAngle(a0),d0
00011156 4EB9 0000 29E0             		jsr	(CalcSine).l
0001115C 3428 0038                  		move.w	bball_origY(a0),d2
00011160 3628 003A                  		move.w	bball_origX(a0),d3
00011164 7800                       		moveq	#0,d4
00011166 1828 003C                  		move.b	bball_radius(a0),d4
0001116A 2A04                       		move.l	d4,d5
0001116C C9C0                       		muls.w	d0,d4
0001116E E084                       		asr.l	#8,d4
00011170 CBC1                       		muls.w	d1,d5
00011172 E085                       		asr.l	#8,d5
00011174 D842                       		add.w	d2,d4
00011176 DA43                       		add.w	d3,d5
00011178 3144 000C                  		move.w	d4,obY(a0)	; move object circularly
0001117C 3145 0008                  		move.w	d5,obX(a0)
00011180 4E75                       		rts	
00011180 4E75                       		rts	
00011182                            Map_BBall:	include	"_maps\Big Spiked Ball.asm"
00011182                            ; ---------------------------------------------------------------------------
00011182                            ; Sprite mappings - spiked ball on a chain (SBZ) and big spiked ball (SYZ)
00011182                            ; ---------------------------------------------------------------------------
00011182                            Map_BBall_internal:
00011182 0000                       		dc.w @ball-Map_BBall_internal
00011184 0000                       		dc.w @chain-Map_BBall_internal
00011186 0000                       		dc.w @anchor-Map_BBall_internal
00011188 05                         @ball:		dc.b 5
00011189 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8	; big spiked ball
0001118E F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011193 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011198 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
0001119D 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
000111A2 01                         @chain:		dc.b 1
000111A3 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8 ; chain link (SBZ)
000111A8 02                         @anchor:	dc.b 2
000111A9 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0 ; anchor at base of chain (SBZ)
000111AE E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
000111B4 00                         		even
000111B4 00                         		even
000111B4                            		include	"_incObj\59 SLZ Elevators.asm"
000111B4                            ; ---------------------------------------------------------------------------
000111B4                            ; Object 59 - platforms	that move when you stand on them (SLZ)
000111B4                            ; ---------------------------------------------------------------------------
000111B4                            

000111B4                            Elevator:
000111B4 7000                       		moveq	#0,d0
000111B6 1028 0024                  		move.b	obRoutine(a0),d0
000111BA 323B 0000                  		move.w	Elev_Index(pc,d0.w),d1
000111BE 4EBB 1000                  		jsr	Elev_Index(pc,d1.w)
000111E0 6000 CABE                  		bra.w	DisplaySprite
000111E4                            ; ===========================================================================
000111E4 0000                       Elev_Index:	dc.w Elev_Main-Elev_Index
000111E6 0000                       		dc.w Elev_Platform-Elev_Index
000111E8 0000                       		dc.w Elev_Action-Elev_Index
000111EA 0000                       		dc.w Elev_MakeMulti-Elev_Index
000111EC                            

000111EC =00000032                  elev_origX:	equ $32		; original x-axis position
000111EC =00000030                  elev_origY:	equ $30		; original y-axis position
000111EC =0000003C                  elev_dist:	equ $3C		; distance to move (2 bytes)
000111EC                            

000111EC 2800                       Elev_Var1:	dc.b $28, 0		; width, frame number
000111EE                            

000111EE 1001                       Elev_Var2:	dc.b $10, 1		; distance to move, action type
000111F0 2001                       		dc.b $20, 1
000111F2 3401                       		dc.b $34, 1
000111F4 1003                       		dc.b $10, 3
000111F6 2003                       		dc.b $20, 3
000111F8 3403                       		dc.b $34, 3
000111FA 1401                       		dc.b $14, 1
000111FC 2401                       		dc.b $24, 1
000111FE 2C01                       		dc.b $2C, 1
00011200 1403                       		dc.b $14, 3
00011202 2403                       		dc.b $24, 3
00011204 2C03                       		dc.b $2C, 3
00011206 2005                       		dc.b $20, 5
00011208 2007                       		dc.b $20, 7
0001120A 3009                       		dc.b $30, 9
0001120C                            ; ===========================================================================
0001120C                            

0001120C                            Elev_Main:	; Routine 0
0001120C 5428 0024                  		addq.b	#2,obRoutine(a0)
00011210 7000                       		moveq	#0,d0
00011212 1028 0028                  		move.b	obSubtype(a0),d0
00011216 6A00                       		bpl.s	@normal		; branch for types 00-7F
00011218 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Elev_MakeMulti next
0001121C 0240 007F                  		andi.w	#$7F,d0
00011220 C0FC 0006                  		mulu.w	#6,d0
00011224 3140 003C                  		move.w	d0,elev_dist(a0)
00011228 3140 003E                  		move.w	d0,$3E(a0)
0001122C 588F                       		addq.l	#4,sp
0001122E 4E75                       		rts	
00011230                            ; ===========================================================================
00011230                            

00011230                            	@normal:
00011230 E648                       		lsr.w	#3,d0
00011232 0240 001E                  		andi.w	#$1E,d0
00011236 45FB 00B4                  		lea	Elev_Var1(pc,d0.w),a2
0001123A 115A 0019                  		move.b	(a2)+,obActWid(a0) ; set width
0001123E 115A 001A                  		move.b	(a2)+,obFrame(a0) ; set frame
00011242 7000                       		moveq	#0,d0
00011244 1028 0028                  		move.b	obSubtype(a0),d0
00011248 D040                       		add.w	d0,d0
0001124A 0240 001E                  		andi.w	#$1E,d0
0001124E 45FB 009E                  		lea	Elev_Var2(pc,d0.w),a2
00011252 101A                       		move.b	(a2)+,d0
00011254 E548                       		lsl.w	#2,d0
00011256 3140 003C                  		move.w	d0,elev_dist(a0)	; set distance to move
0001125A 115A 0028                  		move.b	(a2)+,obSubtype(a0)	; set type
0001125E 217C 0000 0000 0004        		move.l	#Map_Elev,obMap(a0)
00011266 317C 4000 0002             		move.w	#$4000,obGfx(a0)
0001126C 117C 0004 0001             		move.b	#4,obRender(a0)
00011272 117C 0004 0018             		move.b	#4,obPriority(a0)
00011278 3168 0008 0032             		move.w	obX(a0),elev_origX(a0)
0001127E 3168 000C 0030             		move.w	obY(a0),elev_origY(a0)
00011284                            

00011284                            Elev_Platform:	; Routine 2
00011284 7200                       		moveq	#0,d1
00011286 1228 0019                  		move.b	obActWid(a0),d1
0001128A 4EB9 0000 7AD8             		jsr	(PlatformObject).l
00011290 6000 0000                  		bra.w	Elev_Types
00011294                            ; ===========================================================================
00011294                            

00011294                            Elev_Action:	; Routine 4
00011294 7200                       		moveq	#0,d1
00011296 1228 0019                  		move.b	obActWid(a0),d1
0001129A 4EB9 0000 7C4C             		jsr	(ExitPlatform).l
000112A0 3F28 0008                  		move.w	obX(a0),-(sp)
000112A4 6100 0000                  		bsr.w	Elev_Types
000112A8 341F                       		move.w	(sp)+,d2
000112AA 4A28 0000                  		tst.b	0(a0)
000112AE 6700                       		beq.s	@deleted
000112B0 4EF9 0000 81BA             		jmp	(MvSonicOnPtfm2).l
000112B6                            

000112B6                            	@deleted:
000112B6 4E75                       		rts	
000112B8                            ; ===========================================================================
000112B8                            

000112B8                            Elev_Types:
000112B8 7000                       		moveq	#0,d0
000112BA 1028 0028                  		move.b	obSubtype(a0),d0
000112BE 0240 000F                  		andi.w	#$F,d0
000112C2 D040                       		add.w	d0,d0
000112C4 323B 0000                  		move.w	@index(pc,d0.w),d1
000112C8 4EFB 1000                  		jmp	@index(pc,d1.w)
000112CC                            ; ===========================================================================
000112CC 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
000112D0 0000 0000                  		dc.w @type02-@index, @type01-@index
000112D4 0000 0000                  		dc.w @type04-@index, @type01-@index
000112D8 0000 0000                  		dc.w @type06-@index, @type01-@index
000112DC 0000 0000                  		dc.w @type08-@index, @type09-@index
000112E0                            ; ===========================================================================
000112E0                            

000112E0                            @type00:
000112E0 4E75                       		rts	
000112E2                            ; ===========================================================================
000112E2                            

000112E2                            @type01:
000112E2 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0) ; check if Sonic is standing on the object
000112E8 6600                       		bne.s	@notstanding
000112EA 5228 0028                  		addq.b	#1,obSubtype(a0) ; if yes, add 1 to type
000112EE                            

000112EE                            	@notstanding:
000112EE 4E75                       		rts	
000112F0                            ; ===========================================================================
000112F0                            

000112F0                            @type02:
000112F0 6100 0000                  		bsr.w	Elev_Move
000112F4 3028 0034                  		move.w	$34(a0),d0
000112F8 4440                       		neg.w	d0
000112FA D068 0030                  		add.w	elev_origY(a0),d0
000112FE 3140 000C                  		move.w	d0,obY(a0)
00011302 4E75                       		rts	
00011304                            ; ===========================================================================
00011304                            

00011304                            @type04:
00011304 6100 0000                  		bsr.w	Elev_Move
00011308 3028 0034                  		move.w	$34(a0),d0
0001130C D068 0030                  		add.w	elev_origY(a0),d0
00011310 3140 000C                  		move.w	d0,obY(a0)
00011314 4E75                       		rts	
00011316                            ; ===========================================================================
00011316                            

00011316                            @type06:
00011316 6100 0000                  		bsr.w	Elev_Move
0001131A 3028 0034                  		move.w	$34(a0),d0
0001131E E240                       		asr.w	#1,d0
00011320 4440                       		neg.w	d0
00011322 D068 0030                  		add.w	elev_origY(a0),d0
00011326 3140 000C                  		move.w	d0,obY(a0)
0001132A 3028 0034                  		move.w	$34(a0),d0
0001132E D068 0032                  		add.w	elev_origX(a0),d0
00011332 3140 0008                  		move.w	d0,obX(a0)
00011336 4E75                       		rts	
00011338                            ; ===========================================================================
00011338                            

00011338                            @type08:
00011338 6100 0000                  		bsr.w	Elev_Move
0001133C 3028 0034                  		move.w	$34(a0),d0
00011340 E240                       		asr.w	#1,d0
00011342 D068 0030                  		add.w	elev_origY(a0),d0
00011346 3140 000C                  		move.w	d0,obY(a0)
0001134A 3028 0034                  		move.w	$34(a0),d0
0001134E 4440                       		neg.w	d0
00011350 D068 0032                  		add.w	elev_origX(a0),d0
00011354 3140 0008                  		move.w	d0,obX(a0)
00011358 4E75                       		rts	
0001135A                            ; ===========================================================================
0001135A                            

0001135A                            @type09:
0001135A 6100 0000                  		bsr.w	Elev_Move
0001135E 3028 0034                  		move.w	$34(a0),d0
00011362 4440                       		neg.w	d0
00011364 D068 0030                  		add.w	elev_origY(a0),d0
00011368 3140 000C                  		move.w	d0,obY(a0)
0001136C 4A28 0028                  		tst.b	obSubtype(a0)
00011370 6700 0000                  		beq.w	@typereset
00011374 4E75                       		rts	
00011376                            ; ===========================================================================
00011376                            

00011376                            	@typereset:
00011376 0828 0003 0022             		btst	#3,obStatus(a0)
0001137C 6700                       		beq.s	@delete
0001137E 08E9 0001 0022             		bset	#1,obStatus(a1)
00011384 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001138A 137C 0002 0024             		move.b	#2,obRoutine(a1)
00011390                            

00011390                            	@delete:
00011390 6000 C94A                  		bra.w	DeleteObject
00011394                            

00011394                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011394                            

00011394                            

00011394                            Elev_Move:
00011394 3028 0038                  		move.w	$38(a0),d0
00011398 4A28 003A                  		tst.b	$3A(a0)
0001139C 6600                       		bne.s	loc_10CC8
0001139E 0C40 0800                  		cmpi.w	#$800,d0
000113A2 6400                       		bcc.s	loc_10CD0
000113A4 0640 0010                  		addi.w	#$10,d0
000113A8 6000                       		bra.s	loc_10CD0
000113AA                            ; ===========================================================================
000113AA                            

000113AA                            loc_10CC8:
000113AA 4A40                       		tst.w	d0
000113AC 6700                       		beq.s	loc_10CD0
000113AE 0440 0010                  		subi.w	#$10,d0
000113B2                            

000113B2                            loc_10CD0:
000113B2 3140 0038                  		move.w	d0,$38(a0)
000113B6 48C0                       		ext.l	d0
000113B8 E180                       		asl.l	#8,d0
000113BA D0A8 0034                  		add.l	$34(a0),d0
000113BE 2140 0034                  		move.l	d0,$34(a0)
000113C2 4840                       		swap	d0
000113C4 3428 003C                  		move.w	elev_dist(a0),d2
000113C8 B042                       		cmp.w	d2,d0
000113CA 6300                       		bls.s	loc_10CF0
000113CC 117C 0001 003A             		move.b	#1,$3A(a0)
000113D2                            

000113D2                            loc_10CF0:
000113D2 D442                       		add.w	d2,d2
000113D4 B042                       		cmp.w	d2,d0
000113D6 6600                       		bne.s	locret_10CFA
000113D8 4228 0028                  		clr.b	obSubtype(a0)
000113DC                            

000113DC                            locret_10CFA:
000113DC 4E75                       		rts	
000113DE                            ; End of function Elev_Move
000113DE                            

000113DE                            ; ===========================================================================
000113DE                            

000113DE                            Elev_MakeMulti:	; Routine 6
000113DE 5368 003C                  		subq.w	#1,elev_dist(a0)
000113E2 6600                       		bne.s	@chkdel
000113E4 3168 003E 003C             		move.w	$3E(a0),elev_dist(a0)
000113EA 6100 CD3C                  		bsr.w	FindFreeObj
000113EE 6600                       		bne.s	@chkdel
000113F0 137C 0059 0000             		move.b	#id_Elevator,0(a1) ; duplicate the object
000113F6 3368 0008 0008             		move.w	obX(a0),obX(a1)
000113FC 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011402 137C 000E 0028             		move.b	#$E,obSubtype(a1)
00011408                            

00011408                            @chkdel:
00011408 588F                       		addq.l	#4,sp
00011428 4E75                       		rts	
00011428 4E75                       		rts	
0001142A                            Map_Elev:	include	"_maps\SLZ Elevators.asm"
0001142A                            ; ---------------------------------------------------------------------------
0001142A                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
0001142A                            ; ---------------------------------------------------------------------------
0001142A                            Map_Elev_internal:
0001142A 0000                       		dc.w @elevator-Map_Elev_internal
0001142C 03                         @elevator:	dc.b 3
0001142D F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011432 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011437 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
0001143C                            		even
0001143C                            		even
0001143C                            		include	"_incObj\5A SLZ Circling Platform.asm"
0001143C                            ; ---------------------------------------------------------------------------
0001143C                            ; Object 5A - platforms	moving in circles (SLZ)
0001143C                            ; ---------------------------------------------------------------------------
0001143C                            

0001143C                            CirclingPlatform:
0001143C 7000                       		moveq	#0,d0
0001143E 1028 0024                  		move.b	obRoutine(a0),d0
00011442 323B 0000                  		move.w	Circ_Index(pc,d0.w),d1
00011446 4EBB 1000                  		jsr	Circ_Index(pc,d1.w)
00011468 6000 C836                  		bra.w	DisplaySprite
0001146C                            ; ===========================================================================
0001146C 0000                       Circ_Index:	dc.w Circ_Main-Circ_Index
0001146E 0000                       		dc.w Circ_Platform-Circ_Index
00011470 0000                       		dc.w Circ_Action-Circ_Index
00011472                            

00011472 =00000032                  circ_origX:	equ $32		; original x-axis position
00011472 =00000030                  circ_origY:	equ $30		; original y-axis position
00011472                            ; ===========================================================================
00011472                            

00011472                            Circ_Main:	; Routine 0
00011472 5428 0024                  		addq.b	#2,obRoutine(a0)
00011476 217C 0000 0000 0004        		move.l	#Map_Circ,obMap(a0)
0001147E 317C 4000 0002             		move.w	#$4000,obGfx(a0)
00011484 117C 0004 0001             		move.b	#4,obRender(a0)
0001148A 117C 0004 0018             		move.b	#4,obPriority(a0)
00011490 117C 0018 0019             		move.b	#$18,obActWid(a0)
00011496 3168 0008 0032             		move.w	obX(a0),circ_origX(a0)
0001149C 3168 000C 0030             		move.w	obY(a0),circ_origY(a0)
000114A2                            

000114A2                            Circ_Platform:	; Routine 2
000114A2 7200                       		moveq	#0,d1
000114A4 1228 0019                  		move.b	obActWid(a0),d1
000114A8 4EB9 0000 7AD8             		jsr	(PlatformObject).l
000114AE 6000 0000                  		bra.w	Circ_Types
000114B2                            ; ===========================================================================
000114B2                            

000114B2                            Circ_Action:	; Routine 4
000114B2 7200                       		moveq	#0,d1
000114B4 1228 0019                  		move.b	obActWid(a0),d1
000114B8 4EB9 0000 7C4C             		jsr	(ExitPlatform).l
000114BE 3F28 0008                  		move.w	obX(a0),-(sp)
000114C2 6100 0000                  		bsr.w	Circ_Types
000114C6 341F                       		move.w	(sp)+,d2
000114C8 4EF9 0000 81BA             		jmp	(MvSonicOnPtfm2).l
000114CE                            ; ===========================================================================
000114CE                            

000114CE                            Circ_Types:
000114CE 7000                       		moveq	#0,d0
000114D0 1028 0028                  		move.b	obSubtype(a0),d0
000114D4 0240 000C                  		andi.w	#$C,d0
000114D8 E248                       		lsr.w	#1,d0
000114DA 323B 0000                  		move.w	@index(pc,d0.w),d1
000114DE 4EFB 1000                  		jmp	@index(pc,d1.w)
000114E2                            ; ===========================================================================
000114E2 0000                       @index:		dc.w @type00-@index
000114E4 0000                       		dc.w @type04-@index
000114E6                            ; ===========================================================================
000114E6                            

000114E6                            @type00:
000114E6 1238 FE80                  		move.b	(v_oscillate+$22).w,d1 ; get rotating value
000114EA 0401 0050                  		subi.b	#$50,d1		; set radius of circle
000114EE 4881                       		ext.w	d1
000114F0 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
000114F4 0402 0050                  		subi.b	#$50,d2
000114F8 4882                       		ext.w	d2
000114FA 0828 0000 0028             		btst	#0,obSubtype(a0)
00011500 6700                       		beq.s	@noshift00a
00011502 4441                       		neg.w	d1
00011504 4442                       		neg.w	d2
00011506                            

00011506                            	@noshift00a:
00011506 0828 0001 0028             		btst	#1,obSubtype(a0)
0001150C 6700                       		beq.s	@noshift00b
0001150E 4441                       		neg.w	d1
00011510 C342                       		exg	d1,d2
00011512                            

00011512                            	@noshift00b:
00011512 D268 0032                  		add.w	circ_origX(a0),d1
00011516 3141 0008                  		move.w	d1,obX(a0)
0001151A D468 0030                  		add.w	circ_origY(a0),d2
0001151E 3142 000C                  		move.w	d2,obY(a0)
00011522 4E75                       		rts	
00011524                            ; ===========================================================================
00011524                            

00011524                            @type04:
00011524 1238 FE80                  		move.b	(v_oscillate+$22).w,d1
00011528 0401 0050                  		subi.b	#$50,d1
0001152C 4881                       		ext.w	d1
0001152E 1438 FE84                  		move.b	(v_oscillate+$26).w,d2
00011532 0402 0050                  		subi.b	#$50,d2
00011536 4882                       		ext.w	d2
00011538 0828 0000 0028             		btst	#0,obSubtype(a0)
0001153E 6700                       		beq.s	@noshift04a
00011540 4441                       		neg.w	d1
00011542 4442                       		neg.w	d2
00011544                            

00011544                            	@noshift04a:
00011544 0828 0001 0028             		btst	#1,obSubtype(a0)
0001154A 6700                       		beq.s	@noshift04b
0001154C 4441                       		neg.w	d1
0001154E C342                       		exg	d1,d2
00011550                            

00011550                            	@noshift04b:
00011550 4441                       		neg.w	d1
00011552 D268 0032                  		add.w	circ_origX(a0),d1
00011556 3141 0008                  		move.w	d1,obX(a0)
0001155A D468 0030                  		add.w	circ_origY(a0),d2
0001155E 3142 000C                  		move.w	d2,obY(a0)
00011562 4E75                       		rts	
00011562 4E75                       		rts	
00011564                            Map_Circ:	include	"_maps\SLZ Circling Platform.asm"
00011564                            ; ---------------------------------------------------------------------------
00011564                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011564                            ; ---------------------------------------------------------------------------
00011564                            Map_Circ_internal:
00011564 0000                       		dc.w @platform-Map_Circ_internal
00011566 02                         @platform:	dc.b 2
00011567 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
0001156C F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011572 00                         		even
00011572 00                         		even
00011572                            		include	"_incObj\5B Staircase.asm"
00011572                            ; ---------------------------------------------------------------------------
00011572                            ; Object 5B - blocks that form a staircase (SLZ)
00011572                            ; ---------------------------------------------------------------------------
00011572                            

00011572                            Staircase:
00011572 7000                       		moveq	#0,d0
00011574 1028 0024                  		move.b	obRoutine(a0),d0
00011578 323B 0000                  		move.w	Stair_Index(pc,d0.w),d1
0001157C 4EBB 1000                  		jsr	Stair_Index(pc,d1.w)
0001159E 6000 C700                  		bra.w	DisplaySprite
000115A2                            ; ===========================================================================
000115A2 0000                       Stair_Index:	dc.w Stair_Main-Stair_Index
000115A4 0000                       		dc.w Stair_Move-Stair_Index
000115A6 0000                       		dc.w Stair_Solid-Stair_Index
000115A8                            

000115A8 =00000030                  stair_origX:	equ $30		; original x-axis position
000115A8 =00000032                  stair_origY:	equ $32		; original y-axis position
000115A8                            

000115A8 =0000003C                  stair_parent:	equ $3C		; address of parent object (4 bytes)
000115A8                            ; ===========================================================================
000115A8                            

000115A8                            Stair_Main:	; Routine 0
000115A8 5428 0024                  		addq.b	#2,obRoutine(a0)
000115AC 7638                       		moveq	#$38,d3
000115AE 7801                       		moveq	#1,d4
000115B0 0828 0000 0022             		btst	#0,obStatus(a0)	; is object flipped?
000115B6 6700                       		beq.s	@notflipped	; if not, branch
000115B8 763B                       		moveq	#$3B,d3
000115BA 78FF                       		moveq	#-1,d4
000115BC                            

000115BC                            	@notflipped:
000115BC 3428 0008                  		move.w	obX(a0),d2
000115C0 2248                       		movea.l	a0,a1
000115C2 7203                       		moveq	#3,d1
000115C4 6000                       		bra.s	@makeblocks
000115C6                            ; ===========================================================================
000115C6                            

000115C6                            @loop:
000115C6 6100 CB76                  		bsr.w	FindNextFreeObj
000115CA 6600 0000                  		bne.w	@fail
000115CE 137C 0004 0024             		move.b	#4,obRoutine(a1)
000115D4                            

000115D4                            @makeblocks:
000115D4 137C 005B 0000             		move.b	#id_Staircase,0(a1) ; load another block object
000115DA 237C 0000 0000 0004        		move.l	#Map_Stair,obMap(a1)
000115E2 337C 4000 0002             		move.w	#$4000,obGfx(a1)
000115E8 137C 0004 0001             		move.b	#4,obRender(a1)
000115EE 137C 0003 0018             		move.b	#3,obPriority(a1)
000115F4 137C 0010 0019             		move.b	#$10,obActWid(a1)
000115FA 1368 0028 0028             		move.b	obSubtype(a0),obSubtype(a1)
00011600 3342 0008                  		move.w	d2,obX(a1)
00011604 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001160A 3368 0008 0030             		move.w	obX(a0),stair_origX(a1)
00011610 3369 000C 0032             		move.w	obY(a1),stair_origY(a1)
00011616 0642 0020                  		addi.w	#$20,d2
0001161A 1343 0037                  		move.b	d3,$37(a1)
0001161E 2348 003C                  		move.l	a0,stair_parent(a1)
00011622 D604                       		add.b	d4,d3
00011624 51C9 FFA0                  		dbf	d1,@loop	; repeat sequence 3 times
00011628                            

00011628                            	@fail:
00011628                            

00011628                            Stair_Move:	; Routine 2
00011628 7000                       		moveq	#0,d0
0001162A 1028 0028                  		move.b	obSubtype(a0),d0
0001162E 0240 0007                  		andi.w	#7,d0
00011632 D040                       		add.w	d0,d0
00011634 323B 0000                  		move.w	Stair_TypeIndex(pc,d0.w),d1
00011638 4EBB 1000                  		jsr	Stair_TypeIndex(pc,d1.w)
0001163C                            

0001163C                            Stair_Solid:	; Routine 4
0001163C 2468 003C                  		movea.l	stair_parent(a0),a2
00011640 7000                       		moveq	#0,d0
00011642 1028 0037                  		move.b	$37(a0),d0
00011646 1032 0000                  		move.b	(a2,d0.w),d0
0001164A D068 0032                  		add.w	stair_origY(a0),d0
0001164E 3140 000C                  		move.w	d0,obY(a0)
00011652 7200                       		moveq	#0,d1
00011654 1228 0019                  		move.b	obActWid(a0),d1
00011658 0641 000B                  		addi.w	#$B,d1
0001165C 343C 0010                  		move.w	#$10,d2
00011660 363C 0011                  		move.w	#$11,d3
00011664 3828 0008                  		move.w	obX(a0),d4
00011668 6100 EA06                  		bsr.w	SolidObject
0001166C 4A04                       		tst.b	d4
0001166E 6A00                       		bpl.s	loc_10F92
00011670 1544 0036                  		move.b	d4,$36(a2)
00011674                            

00011674                            loc_10F92:
00011674 0828 0003 0022             		btst	#3,obStatus(a0)
0001167A 6700                       		beq.s	locret_10FA0
0001167C 157C 0001 0036             		move.b	#1,$36(a2)
00011682                            

00011682                            locret_10FA0:
00011682 4E75                       		rts	
00011684                            ; ===========================================================================
00011684 0000                       Stair_TypeIndex: dc.w Stair_Type00-Stair_TypeIndex
00011686 0000                       		dc.w Stair_Type01-Stair_TypeIndex
00011688 0000                       		dc.w Stair_Type02-Stair_TypeIndex
0001168A 0000                       		dc.w Stair_Type01-Stair_TypeIndex
0001168C                            ; ===========================================================================
0001168C                            

0001168C                            Stair_Type00:
0001168C 4A68 0034                  		tst.w	$34(a0)
00011690 6600                       		bne.s	loc_10FC0
00011692 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011698 6600                       		bne.s	locret_10FBE
0001169A 317C 001E 0034             		move.w	#$1E,$34(a0)
000116A0                            

000116A0                            locret_10FBE:
000116A0 4E75                       		rts	
000116A2                            ; ===========================================================================
000116A2                            

000116A2                            loc_10FC0:
000116A2 5368 0034                  		subq.w	#1,$34(a0)
000116A6 66F8                       		bne.s	locret_10FBE
000116A8 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000116AC 4E75                       		rts	
000116AE                            ; ===========================================================================
000116AE                            

000116AE                            Stair_Type02:
000116AE 4A68 0034                  		tst.w	$34(a0)
000116B2 6600                       		bne.s	loc_10FE0
000116B4 4A28 0036                  		tst.b	$36(a0)
000116B8 6A00                       		bpl.s	locret_10FDE
000116BA 317C 003C 0034             		move.w	#$3C,$34(a0)
000116C0                            

000116C0                            locret_10FDE:
000116C0 4E75                       		rts	
000116C2                            ; ===========================================================================
000116C2                            

000116C2                            loc_10FE0:
000116C2 5368 0034                  		subq.w	#1,$34(a0)
000116C6 6600                       		bne.s	loc_10FEC
000116C8 5228 0028                  		addq.b	#1,obSubtype(a0) ; add 1 to type
000116CC 4E75                       		rts	
000116CE                            ; ===========================================================================
000116CE                            

000116CE                            loc_10FEC:
000116CE 43E8 0038                  		lea	$38(a0),a1
000116D2 3028 0034                  		move.w	$34(a0),d0
000116D6 E408                       		lsr.b	#2,d0
000116D8 0200 0001                  		andi.b	#1,d0
000116DC 12C0                       		move.b	d0,(a1)+
000116DE 0A00 0001                  		eori.b	#1,d0
000116E2 12C0                       		move.b	d0,(a1)+
000116E4 0A00 0001                  		eori.b	#1,d0
000116E8 12C0                       		move.b	d0,(a1)+
000116EA 0A00 0001                  		eori.b	#1,d0
000116EE 12C0                       		move.b	d0,(a1)+
000116F0 4E75                       		rts	
000116F2                            ; ===========================================================================
000116F2                            

000116F2                            Stair_Type01:
000116F2 43E8 0038                  		lea	$38(a0),a1
000116F6 0C11 0080                  		cmpi.b	#$80,(a1)
000116FA 6700                       		beq.s	locret_11038
000116FC 5211                       		addq.b	#1,(a1)
000116FE 7200                       		moveq	#0,d1
00011700 1219                       		move.b	(a1)+,d1
00011702 4841                       		swap	d1
00011704 E289                       		lsr.l	#1,d1
00011706 2401                       		move.l	d1,d2
00011708 E289                       		lsr.l	#1,d1
0001170A 2601                       		move.l	d1,d3
0001170C D682                       		add.l	d2,d3
0001170E 4841                       		swap	d1
00011710 4842                       		swap	d2
00011712 4843                       		swap	d3
00011714 12C3                       		move.b	d3,(a1)+
00011716 12C2                       		move.b	d2,(a1)+
00011718 12C1                       		move.b	d1,(a1)+
0001171A                            

0001171A                            locret_11038:
0001171A 4E75                       		rts	
0001171C 4E75                       		rts	
0001171C 4E75                       		rts	
0001171E                            Map_Stair:	include	"_maps\Staircase.asm"
0001171E                            ; ---------------------------------------------------------------------------
0001171E                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001171E                            ; ---------------------------------------------------------------------------
0001171E                            Map_Stair_internal:
0001171E 0000                       		dc.w @block-Map_Stair_internal
00011720 01                         @block:		dc.b 1
00011721 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011726                            		even
00011726                            		even
00011726                            		include	"_incObj\5C Pylon.asm"
00011726                            ; ---------------------------------------------------------------------------
00011726                            ; Object 5C - metal pylons in foreground (SLZ)
00011726                            ; ---------------------------------------------------------------------------
00011726                            

00011726                            Pylon:
00011726 7000                       		moveq	#0,d0
00011728 1028 0024                  		move.b	obRoutine(a0),d0
0001172C 323B 0000                  		move.w	Pyl_Index(pc,d0.w),d1
00011730 4EFB 1000                  		jmp	Pyl_Index(pc,d1.w)
00011734                            ; ===========================================================================
00011734 0000                       Pyl_Index:	dc.w Pyl_Main-Pyl_Index
00011736 0000                       		dc.w Pyl_Display-Pyl_Index
00011738                            ; ===========================================================================
00011738                            

00011738                            Pyl_Main:	; Routine 0
00011738 5428 0024                  		addq.b	#2,obRoutine(a0)
0001173C 217C 0000 0000 0004        		move.l	#Map_Pylon,obMap(a0)
00011744 317C 83CC 0002             		move.w	#$83CC,obGfx(a0)
0001174A 117C 0010 0019             		move.b	#$10,obActWid(a0)
00011750                            

00011750                            Pyl_Display:	; Routine 2
00011750 2238 F700                  		move.l	(v_screenposx).w,d1
00011754 D281                       		add.l	d1,d1
00011756 4841                       		swap	d1
00011758 4441                       		neg.w	d1
0001175A 3141 0008                  		move.w	d1,obX(a0)
0001175E 2238 F704                  		move.l	(v_screenposy).w,d1
00011762 D281                       		add.l	d1,d1
00011764 4841                       		swap	d1
00011766 0241 003F                  		andi.w	#$3F,d1
0001176A 4441                       		neg.w	d1
0001176C 0641 0100                  		addi.w	#$100,d1
00011770 3141 000A                  		move.w	d1,obScreenY(a0)
00011774 6000 C52A                  		bra.w	DisplaySprite
00011774 6000 C52A                  		bra.w	DisplaySprite
00011778                            Map_Pylon:	include	"_maps\Pylon.asm"
00011778                            ; ---------------------------------------------------------------------------
00011778                            ; Sprite mappings - metal pylons in foreground (SLZ)
00011778                            ; ---------------------------------------------------------------------------
00011778                            Map_Pylon_internal:
00011778 0000                       		dc.w @pylon-Map_Pylon_internal
0001177A 09                         @pylon:		dc.b 9
0001177B 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011780 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
00011785 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
0001178A E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
0001178F 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
00011794 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011799 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
0001179E 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000117A3 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000117A8                            		even
000117A8                            		even
000117A8                            

000117A8                            		include	"_incObj\1B Water Surface.asm"
000117A8                            ; ---------------------------------------------------------------------------
000117A8                            ; Object 1B - water surface (LZ)
000117A8                            ; ---------------------------------------------------------------------------
000117A8                            

000117A8                            WaterSurface:
000117A8 7000                       		moveq	#0,d0
000117AA 1028 0024                  		move.b	obRoutine(a0),d0
000117AE 323B 0000                  		move.w	Surf_Index(pc,d0.w),d1
000117B2 4EFB 1000                  		jmp	Surf_Index(pc,d1.w)
000117B6                            ; ===========================================================================
000117B6 0000                       Surf_Index:	dc.w Surf_Main-Surf_Index
000117B8 0000                       		dc.w Surf_Action-Surf_Index
000117BA                            

000117BA =00000030                  surf_origX:	equ $30		; original x-axis position
000117BA =00000032                  surf_freeze:	equ $32		; flag to freeze animation
000117BA                            ; ===========================================================================
000117BA                            

000117BA                            Surf_Main:	; Routine 0
000117BA 5428 0024                  		addq.b	#2,obRoutine(a0)
000117BE 217C 0000 0000 0004        		move.l	#Map_Surf,obMap(a0)
000117C6 317C C300 0002             		move.w	#$C300,obGfx(a0)
000117CC 117C 0004 0001             		move.b	#4,obRender(a0)
000117D2 117C 0080 0019             		move.b	#$80,obActWid(a0)
000117D8 3168 0008 0030             		move.w	obX(a0),surf_origX(a0)
000117DE                            

000117DE                            Surf_Action:	; Routine 2
000117DE 3238 F700                  		move.w	(v_screenposx).w,d1
000117E2 0241 FFE0                  		andi.w	#$FFE0,d1
000117E6 D268 0030                  		add.w	surf_origX(a0),d1
000117EA 0838 0000 FE05             		btst	#0,(v_framebyte).w
000117F0 6700                       		beq.s	@even		; branch on even frames
000117F2 0641 0020                  		addi.w	#$20,d1
000117F6                            

000117F6                            	@even:
000117F6 3141 0008                  		move.w	d1,obX(a0)	; match	obj x-position to screen position
000117FA 3238 F646                  		move.w	(v_waterpos1).w,d1
000117FE 3141 000C                  		move.w	d1,obY(a0)	; match	obj y-position to water	height
00011802 4A28 0032                  		tst.b	surf_freeze(a0)
00011806 6600                       		bne.s	@stopped
00011808 0838 0007 F605             		btst	#bitStart,(v_jpadpress1).w ; is Start button pressed?
0001180E 6700                       		beq.s	@animate	; if not, branch
00011810 5628 001A                  		addq.b	#3,obFrame(a0)	; use different	frames
00011814 117C 0001 0032             		move.b	#1,surf_freeze(a0) ; stop animation
0001181A 6000                       		bra.s	@display
0001181C                            ; ===========================================================================
0001181C                            

0001181C                            @stopped:
0001181C 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
00011820 6600                       		bne.s	@display	; if yes, branch
00011822 117C 0000 0032             		move.b	#0,surf_freeze(a0) ; resume animation
00011828 5728 001A                  		subq.b	#3,obFrame(a0)	; use normal frames
0001182C                            

0001182C                            @animate:
0001182C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00011830 6A00                       		bpl.s	@display
00011832 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
00011838 5228 001A                  		addq.b	#1,obFrame(a0)
0001183C 0C28 0003 001A             		cmpi.b	#3,obFrame(a0)
00011842 6500                       		bcs.s	@display
00011844 117C 0000 001A             		move.b	#0,obFrame(a0)
0001184A                            

0001184A                            @display:
0001184A 6000 C454                  		bra.w	DisplaySprite
0001184A 6000 C454                  		bra.w	DisplaySprite
0001184E                            Map_Surf:	include	"_maps\Water Surface.asm"
0001184E                            ; ---------------------------------------------------------------------------
0001184E                            ; Sprite mappings - water surface (LZ)
0001184E                            ; ---------------------------------------------------------------------------
0001184E                            Map_Surf_internal:
0001184E 0000                       		dc.w @normal1-Map_Surf_internal
00011850 0000                       		dc.w @normal2-Map_Surf_internal
00011852 0000                       		dc.w @normal3-Map_Surf_internal
00011854 0000                       		dc.w @paused1-Map_Surf_internal
00011856 0000                       		dc.w @paused2-Map_Surf_internal
00011858 0000                       		dc.w @paused3-Map_Surf_internal
0001185A 03                         @normal1:	dc.b 3
0001185B FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011860 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011865 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001186A 03                         @normal2:	dc.b 3
0001186B FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011870 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011875 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001187A 03                         @normal3:	dc.b 3
0001187B FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011880 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011885 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001188A 06                         @paused1:	dc.b 6
0001188B FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011890 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
00011895 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001189A FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
0001189F FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000118A4 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000118A9 06                         @paused2:	dc.b 6
000118AA FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000118AF FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
000118B4 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000118B9 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
000118BE FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000118C3 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
000118C8 06                         @paused3:	dc.b 6
000118C9 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000118CE FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
000118D3 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000118D8 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
000118DD FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000118E2 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
000118E8 00                         		even
000118E8 00                         		even
000118E8                            		include	"_incObj\0B Pole that Breaks.asm"
000118E8                            ; ---------------------------------------------------------------------------
000118E8                            ; Object 0B - pole that	breaks (LZ)
000118E8                            ; ---------------------------------------------------------------------------
000118E8                            

000118E8                            Pole:
000118E8 7000                       		moveq	#0,d0
000118EA 1028 0024                  		move.b	obRoutine(a0),d0
000118EE 323B 0000                  		move.w	Pole_Index(pc,d0.w),d1
000118F2 4EFB 1000                  		jmp	Pole_Index(pc,d1.w)
000118F6                            ; ===========================================================================
000118F6 0000                       Pole_Index:	dc.w Pole_Main-Pole_Index
000118F8 0000                       		dc.w Pole_Action-Pole_Index
000118FA 0000                       		dc.w Pole_Display-Pole_Index
000118FC                            

000118FC =00000030                  pole_time:	equ $30		; time between grabbing the pole & breaking
000118FC =00000032                  pole_grabbed:	equ $32		; flag set when Sonic grabs the pole
000118FC                            ; ===========================================================================
000118FC                            

000118FC                            Pole_Main:	; Routine 0
000118FC 5428 0024                  		addq.b	#2,obRoutine(a0)
00011900 217C 0000 0000 0004        		move.l	#Map_Pole,obMap(a0)
00011908 317C 43DE 0002             		move.w	#$43DE,obGfx(a0)
0001190E 117C 0004 0001             		move.b	#4,obRender(a0)
00011914 117C 0008 0019             		move.b	#8,obActWid(a0)
0001191A 117C 0004 0018             		move.b	#4,obPriority(a0)
00011920 117C 00E1 0020             		move.b	#$E1,obColType(a0)
00011926 7000                       		moveq	#0,d0
00011928 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
0001192C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011930 3140 0030                  		move.w	d0,pole_time(a0) ; set breakage time
00011934                            

00011934                            Pole_Action:	; Routine 2
00011934 4A28 0032                  		tst.b	pole_grabbed(a0) ; has pole already been grabbed?
00011938 6700                       		beq.s	@grab		; if not, branch
0001193A 4A68 0030                  		tst.w	pole_time(a0)
0001193E 6700                       		beq.s	@moveup
00011940 5368 0030                  		subq.w	#1,pole_time(a0) ; decrement time until break
00011944 6600                       		bne.s	@moveup
00011946 117C 0001 001A             		move.b	#1,obFrame(a0)	; break	the pole
0001194C 6000                       		bra.s	@release
0001194E                            ; ===========================================================================
0001194E                            

0001194E                            @moveup:
0001194E 43F8 D000                  		lea	(v_player).w,a1
00011952 3028 000C                  		move.w	obY(a0),d0
00011956 0440 0018                  		subi.w	#$18,d0
0001195A 0838 0000 F604             		btst	#bitUp,(v_jpadhold1).w ; is "up" pressed?
00011960 6700                       		beq.s	@movedown	; if not, branch
00011962 5369 000C                  		subq.w	#1,obY(a1)	; move Sonic up
00011966 B069 000C                  		cmp.w	obY(a1),d0
0001196A 6500                       		bcs.s	@movedown
0001196C 3340 000C                  		move.w	d0,obY(a1)
00011970                            

00011970                            @movedown:
00011970 0640 0024                  		addi.w	#$24,d0
00011974 0838 0001 F604             		btst	#bitDn,(v_jpadhold1).w ; is "down" pressed?
0001197A 6700                       		beq.s	@letgo		; if not, branch
0001197C 5269 000C                  		addq.w	#1,obY(a1)	; move Sonic down
00011980 B069 000C                  		cmp.w	obY(a1),d0
00011984 6400                       		bcc.s	@letgo
00011986 3340 000C                  		move.w	d0,obY(a1)
0001198A                            

0001198A                            @letgo:
0001198A 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001198E 0240 0070                  		andi.w	#btnABC,d0	; is A/B/C pressed?
00011992 6700                       		beq.s	Pole_Display	; if not, branch
00011994                            

00011994                            @release:
00011994 4228 0020                  		clr.b	obColType(a0)
00011998 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Pole_Display next
0001199C 4238 F7C8                  		clr.b	(f_playerctrl).w
000119A0 4238 F7C9                  		clr.b	(f_wtunnelallow).w
000119A4 4228 0032                  		clr.b	pole_grabbed(a0)
000119A8 6000                       		bra.s	Pole_Display
000119AA                            ; ===========================================================================
000119AA                            

000119AA                            @grab:
000119AA 4A28 0021                  		tst.b	obColProp(a0)	; has Sonic touched the	pole?
000119AE 6700                       		beq.s	Pole_Display	; if not, branch
000119B0 43F8 D000                  		lea	(v_player).w,a1
000119B4 3028 0008                  		move.w	obX(a0),d0
000119B8 0640 0014                  		addi.w	#$14,d0
000119BC B069 0008                  		cmp.w	obX(a1),d0
000119C0 6400                       		bcc.s	Pole_Display
000119C2 4228 0021                  		clr.b	obColProp(a0)
000119C6 0C29 0004 0024             		cmpi.b	#4,obRoutine(a1)
000119CC 6400                       		bcc.s	Pole_Display
000119CE 4269 0010                  		clr.w	obVelX(a1)	; stop Sonic moving
000119D2 4269 0012                  		clr.w	obVelY(a1)	; stop Sonic moving
000119D6 3028 0008                  		move.w	obX(a0),d0
000119DA 0640 0014                  		addi.w	#$14,d0
000119DE 3340 0008                  		move.w	d0,obX(a1)
000119E2 08A9 0000 0022             		bclr	#0,obStatus(a1)
000119E8 137C 0000 001C             		move.b	#id_Hang,obAnim(a1) ; set Sonic's animation to "hanging" ($11)
000119EE 11FC 0001 F7C8             		move.b	#1,(f_playerctrl).w ; lock controls
000119F4 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
000119FA 117C 0001 0032             		move.b	#1,pole_grabbed(a0) ; begin countdown to breakage
00011A00                            

00011A00                            Pole_Display:	; Routine 4
00011A00 6000 E344                  		bra.w	RememberState
00011A00 6000 E344                  		bra.w	RememberState
00011A04                            Map_Pole:	include	"_maps\Pole that Breaks.asm"
00011A04                            ; ---------------------------------------------------------------------------
00011A04                            ; Sprite mappings - pole that breaks (LZ)
00011A04                            ; ---------------------------------------------------------------------------
00011A04                            Map_Pole_internal:
00011A04 0000                       		dc.w @normal-Map_Pole_internal
00011A06 0000                       		dc.w @broken-Map_Pole_internal
00011A08 02                         @normal:	dc.b 2			; normal pole
00011A09 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011A0E 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011A13 04                         @broken:	dc.b 4			; broken pole
00011A14 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011A19 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011A1E 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011A23 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011A28                            		even
00011A28                            		even
00011A28                            		include	"_incObj\0C Flapping Door.asm"
00011A28                            ; ---------------------------------------------------------------------------
00011A28                            ; Object 0C - flapping door (LZ)
00011A28                            ; ---------------------------------------------------------------------------
00011A28                            

00011A28                            FlapDoor:
00011A28 7000                       		moveq	#0,d0
00011A2A 1028 0024                  		move.b	obRoutine(a0),d0
00011A2E 323B 0000                  		move.w	Flap_Index(pc,d0.w),d1
00011A32 4EFB 1000                  		jmp	Flap_Index(pc,d1.w)
00011A36                            ; ===========================================================================
00011A36 0000                       Flap_Index:	dc.w Flap_Main-Flap_Index
00011A38 0000                       		dc.w Flap_OpenClose-Flap_Index
00011A3A                            

00011A3A =00000032                  flap_time:	equ $32		; time between opening/closing
00011A3A =00000030                  flap_wait:	equ $30		; time until change
00011A3A                            ; ===========================================================================
00011A3A                            

00011A3A                            Flap_Main:	; Routine 0
00011A3A 5428 0024                  		addq.b	#2,obRoutine(a0)
00011A3E 217C 0000 0000 0004        		move.l	#Map_Flap,obMap(a0)
00011A46 317C 4328 0002             		move.w	#$4328,obGfx(a0)
00011A4C 0028 0004 0001             		ori.b	#4,obRender(a0)
00011A52 117C 0028 0019             		move.b	#$28,obActWid(a0)
00011A58 7000                       		moveq	#0,d0
00011A5A 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00011A5E C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011A62 3140 0032                  		move.w	d0,flap_time(a0) ; set flap delay time
00011A66                            

00011A66                            Flap_OpenClose:	; Routine 2
00011A66 5368 0030                  		subq.w	#1,flap_wait(a0) ; decrement time delay
00011A6A 6A00                       		bpl.s	@wait		; if time remains, branch
00011A6C 3168 0032 0030             		move.w	flap_time(a0),flap_wait(a0) ; reset time delay
00011A72 0868 0000 001C             		bchg	#0,obAnim(a0)	; open/close door
00011A78 4A28 0001                  		tst.b	obRender(a0)
00011A7C 6A00                       		bpl.s	@nosound
00011A7E 303C 0000                  		move.w	#sfx_Door,d0
00011A82 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play door sound
00011A88                            

00011A88                            	@wait:
00011A88                            	@nosound:
00011A88 43F9 0000 0000             		lea	(Ani_Flap).l,a1
00011A8E 6100 9320                  		bsr.w	AnimateSprite
00011A92 4238 F7C9                  		clr.b	(f_wtunnelallow).w ; enable wind tunnel
00011A96 4A28 001A                  		tst.b	obFrame(a0)	; is the door open?
00011A9A 6600                       		bne.s	@display	; if yes, branch
00011A9C 3038 D008                  		move.w	(v_player+obX).w,d0
00011AA0 B068 0008                  		cmp.w	obX(a0),d0	; has Sonic passed through the door?
00011AA4 6400                       		bcc.s	@display	; if yes, branch
00011AA6 11FC 0001 F7C9             		move.b	#1,(f_wtunnelallow).w ; disable wind tunnel
00011AAC 323C 0013                  		move.w	#$13,d1
00011AB0 343C 0020                  		move.w	#$20,d2
00011AB4 3602                       		move.w	d2,d3
00011AB6 5243                       		addq.w	#1,d3
00011AB8 3828 0008                  		move.w	obX(a0),d4
00011ABC 6100 E5B2                  		bsr.w	SolidObject	; make the door	solid
00011AC0                            

00011AC0                            	@display:
00011AC0 6000 E284                  		bra.w	RememberState
00011AC0 6000 E284                  		bra.w	RememberState
00011AC4                            		include	"_anim\Flapping Door.asm"
00011AC4                            ; ---------------------------------------------------------------------------
00011AC4                            ; Animation script - flapping door (LZ)
00011AC4                            ; ---------------------------------------------------------------------------
00011AC4 0000                       Ani_Flap:	dc.w @opening-Ani_Flap
00011AC6 0000                       		dc.w @closing-Ani_Flap
00011AC8 0300 0102 FE01             @opening:	dc.b 3,	0, 1, 2, afBack, 1
00011ACE 0302 0100 FE01             @closing:	dc.b 3,	2, 1, 0, afBack, 1
00011AD4                            		even
00011AD4                            		even
00011AD4                            Map_Flap:	include	"_maps\Flapping Door.asm"
00011AD4                            ; ---------------------------------------------------------------------------
00011AD4                            ; Sprite mappings - flapping door (LZ)
00011AD4                            ; ---------------------------------------------------------------------------
00011AD4                            Map_Flap_internal:
00011AD4 0000                       		dc.w @closed-Map_Flap_internal
00011AD6 0000                       		dc.w @halfway-Map_Flap_internal
00011AD8 0000                       		dc.w @open-Map_Flap_internal
00011ADA 02                         @closed:	dc.b 2
00011ADB E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011AE0 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011AE5 02                         @halfway:	dc.b 2
00011AE6 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011AEB 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011AF0 02                         @open:		dc.b 2
00011AF1 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011AF6 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011AFC 00                         		even
00011AFC 00                         		even
00011AFC                            

00011AFC                            		include	"_incObj\71 Invisible Barriers.asm"
00011AFC                            ; ---------------------------------------------------------------------------
00011AFC                            ; Object 71 - invisible	solid barriers
00011AFC                            ; ---------------------------------------------------------------------------
00011AFC                            

00011AFC                            Invisibarrier:
00011AFC 7000                       		moveq	#0,d0
00011AFE 1028 0024                  		move.b	obRoutine(a0),d0
00011B02 323B 0000                  		move.w	Invis_Index(pc,d0.w),d1
00011B06 4EFB 1000                  		jmp	Invis_Index(pc,d1.w)
00011B0A                            ; ===========================================================================
00011B0A 0000                       Invis_Index:	dc.w Invis_Main-Invis_Index
00011B0C 0000                       		dc.w Invis_Solid-Invis_Index
00011B0E                            

00011B0E =00000016                  invis_height:	equ $16		; height in pixels
00011B0E                            ; ===========================================================================
00011B0E                            

00011B0E                            Invis_Main:	; Routine 0
00011B0E 5428 0024                  		addq.b	#2,obRoutine(a0)
00011B12 217C 0000 0000 0004        		move.l	#Map_Invis,obMap(a0)
00011B1A 317C 8680 0002             		move.w	#$8680,obGfx(a0)
00011B20 0028 0004 0001             		ori.b	#4,obRender(a0)
00011B26 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00011B2A 1200                       		move.b	d0,d1
00011B2C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011B30 0640 0010                  		addi.w	#$10,d0
00011B34 E248                       		lsr.w	#1,d0
00011B36 1140 0019                  		move.b	d0,obActWid(a0)	; set object width
00011B3A 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011B3E 5241                       		addq.w	#1,d1
00011B40 E749                       		lsl.w	#3,d1
00011B42 1141 0016                  		move.b	d1,invis_height(a0) ; set object height
00011B46                            

00011B46                            Invis_Solid:	; Routine 2
00011B46 6100 C3D2                  		bsr.w	ChkObjectVisible
00011B4A 6600                       		bne.s	@chkdel
00011B4C 7200                       		moveq	#0,d1
00011B4E 1228 0019                  		move.b	obActWid(a0),d1
00011B52 0641 000B                  		addi.w	#$B,d1
00011B56 7400                       		moveq	#0,d2
00011B58 1428 0016                  		move.b	invis_height(a0),d2
00011B5C 3602                       		move.w	d2,d3
00011B5E 5243                       		addq.w	#1,d3
00011B60 3828 0008                  		move.w	obX(a0),d4
00011B64 6100 E550                  		bsr.w	SolidObject71
00011B68                            

00011B68                            @chkdel:
00011B84 4A78 FE08                  		tst.w	(v_debuguse).w	; are you using	debug mode?
00011B88 6700                       		beq.s	@nodisplay	; if not, branch
00011B8A 4EF9 0000 DCA0             		jmp	(DisplaySprite).l	; if yes, display the object
00011B90                            

00011B90                            	@nodisplay:
00011B90 4E75                       		rts	
00011B92                            

00011B92                            	@delete:
00011B92 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00011B92 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00011B98                            Map_Invis:	include	"_maps\Invisible Barriers.asm"
00011B98                            ; ---------------------------------------------------------------------------
00011B98                            ; Sprite mappings - invisible solid blocks
00011B98                            ; ---------------------------------------------------------------------------
00011B98                            Map_Invis_internal:
00011B98 0000                       		dc.w @solid-Map_Invis_internal
00011B9A 0000                       		dc.w @unused1-Map_Invis_internal
00011B9C 0000                       		dc.w @unused2-Map_Invis_internal
00011B9E 04                         @solid:		dc.b 4
00011B9F F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011BA4 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011BA9 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011BAE 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011BB3 04                         @unused1:	dc.b 4
00011BB4 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011BB9 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011BBE 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011BC3 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011BC8 04                         @unused2:	dc.b 4
00011BC9 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011BCE E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011BD3 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011BD8 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011BDE 00                         		even
00011BDE 00                         		even
00011BDE                            

00011BDE                            		include	"_incObj\5D Fan.asm"
00011BDE                            ; ---------------------------------------------------------------------------
00011BDE                            ; Object 5D - fans (SLZ)
00011BDE                            ; ---------------------------------------------------------------------------
00011BDE                            

00011BDE                            Fan:
00011BDE 7000                       		moveq	#0,d0
00011BE0 1028 0024                  		move.b	obRoutine(a0),d0
00011BE4 323B 0000                  		move.w	Fan_Index(pc,d0.w),d1
00011BE8 4EFB 1000                  		jmp	Fan_Index(pc,d1.w)
00011BEC                            ; ===========================================================================
00011BEC 0000                       Fan_Index:	dc.w Fan_Main-Fan_Index
00011BEE 0000                       		dc.w Fan_Delay-Fan_Index
00011BF0                            

00011BF0 =00000030                  fan_time:	equ $30		; time between switching on/off
00011BF0 =00000032                  fan_switch:	equ $32		; on/off switch
00011BF0                            ; ===========================================================================
00011BF0                            

00011BF0                            Fan_Main:	; Routine 0
00011BF0 5428 0024                  		addq.b	#2,obRoutine(a0)
00011BF4 217C 0000 0000 0004        		move.l	#Map_Fan,obMap(a0)
00011BFC 317C 43A0 0002             		move.w	#$43A0,obGfx(a0)
00011C02 0028 0004 0001             		ori.b	#4,obRender(a0)
00011C08 117C 0010 0019             		move.b	#$10,obActWid(a0)
00011C0E 117C 0004 0018             		move.b	#4,obPriority(a0)
00011C14                            

00011C14                            Fan_Delay:	; Routine 2
00011C14 0828 0001 0028             		btst	#1,obSubtype(a0) ; is object type 02/03 (always on)?
00011C1A 6600                       		bne.s	@blow		; if yes, branch
00011C1C 5368 0030                  		subq.w	#1,fan_time(a0)	; subtract 1 from time delay
00011C20 6A00                       		bpl.s	@blow		; if time remains, branch
00011C22 317C 0078 0030             		move.w	#120,fan_time(a0) ; set delay to 2 seconds
00011C28 0868 0000 0032             		bchg	#0,fan_switch(a0) ; switch fan on/off
00011C2E 6700                       		beq.s	@blow		; if fan is off, branch
00011C30 317C 00B4 0030             		move.w	#180,fan_time(a0) ; set delay to 3 seconds
00011C36                            

00011C36                            @blow:
00011C36 4A28 0032                  		tst.b	fan_switch(a0)	; is fan switched on?
00011C3A 6600 0000                  		bne.w	@chkdel		; if not, branch
00011C3E 43F8 D000                  		lea	(v_player).w,a1
00011C42 3029 0008                  		move.w	obX(a1),d0
00011C46 9068 0008                  		sub.w	obX(a0),d0
00011C4A 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00011C50 6600                       		bne.s	@chksonic	; if yes, branch
00011C52 4440                       		neg.w	d0
00011C54                            

00011C54                            @chksonic:
00011C54 0640 0050                  		addi.w	#$50,d0
00011C58 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011C5C 6400                       		bcc.s	@animate	; if yes, branch
00011C5E 3229 000C                  		move.w	obY(a1),d1
00011C62 0641 0060                  		addi.w	#$60,d1
00011C66 9268 000C                  		sub.w	obY(a0),d1
00011C6A 6500                       		bcs.s	@animate	; branch if Sonic is too low
00011C6C 0C41 0070                  		cmpi.w	#$70,d1
00011C70 6400                       		bcc.s	@animate	; branch if Sonic is too high
00011C72 0440 0050                  		subi.w	#$50,d0		; is Sonic more than $50 pixels from the fan?
00011C76 6400                       		bcc.s	@faraway	; if yes, branch
00011C78 4640                       		not.w	d0
00011C7A D040                       		add.w	d0,d0
00011C7C                            

00011C7C                            	@faraway:
00011C7C 0640 0060                  		addi.w	#$60,d0
00011C80 0828 0000 0022             		btst	#0,obStatus(a0)	; is fan facing right?
00011C86 6600                       		bne.s	@right		; if yes, branch
00011C88 4440                       		neg.w	d0
00011C8A                            

00011C8A                            	@right:
00011C8A 4400                       		neg.b	d0
00011C8C E840                       		asr.w	#4,d0
00011C8E 0828 0000 0028             		btst	#0,obSubtype(a0)
00011C94 6700                       		beq.s	@movesonic
00011C96 4440                       		neg.w	d0
00011C98                            

00011C98                            	@movesonic:
00011C98 D169 0008                  		add.w	d0,obX(a1)	; push Sonic away from the fan
00011C9C                            

00011C9C                            @animate:
00011C9C 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00011CA0 6A00                       		bpl.s	@chkdel
00011CA2 117C 0000 001E             		move.b	#0,obTimeFrame(a0)
00011CA8 5228 001B                  		addq.b	#1,obAniFrame(a0)
00011CAC 0C28 0003 001B             		cmpi.b	#3,obAniFrame(a0)
00011CB2 6500                       		bcs.s	@noreset
00011CB4 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset after 4 frames
00011CBA                            

00011CBA                            	@noreset:
00011CBA 7000                       		moveq	#0,d0
00011CBC 0828 0000 0028             		btst	#0,obSubtype(a0)
00011CC2 6700                       		beq.s	@noflip
00011CC4 7002                       		moveq	#2,d0
00011CC6                            

00011CC6                            	@noflip:
00011CC6 D028 001B                  		add.b	obAniFrame(a0),d0
00011CCA 1140 001A                  		move.b	d0,obFrame(a0)
00011CCE                            

00011CCE                            @chkdel:
00011CCE 6100 BFD0                  		bsr.w	DisplaySprite
00011CF0 4E75                       		rts	
00011CF0 4E75                       		rts	
00011CF2                            Map_Fan:	include	"_maps\Fan.asm"
00011CF2                            ; ---------------------------------------------------------------------------
00011CF2                            ; Sprite mappings - fans (SLZ)
00011CF2                            ; ---------------------------------------------------------------------------
00011CF2                            Map_Fan_internal:
00011CF2 0000                       		dc.w @fan1-Map_Fan_internal
00011CF4 0000                       		dc.w @fan2-Map_Fan_internal
00011CF6 0000                       		dc.w @fan3-Map_Fan_internal
00011CF8 0000                       		dc.w @fan2-Map_Fan_internal
00011CFA 0000                       		dc.w @fan1-Map_Fan_internal
00011CFC 02                         @fan1:		dc.b 2
00011CFD F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011D02 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011D07 02                         @fan2:		dc.b 2
00011D08 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011D0D 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011D12 02                         @fan3:		dc.b 2
00011D13 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011D18 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011D1E 00                         		even
00011D1E 00                         		even
00011D1E                            		include	"_incObj\5E Seesaw.asm"
00011D1E                            ; ---------------------------------------------------------------------------
00011D1E                            ; Object 5E - seesaws (SLZ)
00011D1E                            ; ---------------------------------------------------------------------------
00011D1E                            

00011D1E                            Seesaw:
00011D1E 7000                       		moveq	#0,d0
00011D20 1028 0024                  		move.b	obRoutine(a0),d0
00011D24 323B 0000                  		move.w	See_Index(pc,d0.w),d1
00011D28 4EBB 1000                  		jsr	See_Index(pc,d1.w)
00011D2C 3028 0000                  		move.w	see_origX(a0),d0
00011D30 0240 FF80                  		andi.w	#$FF80,d0
00011D34 3238 F700                  		move.w	(v_screenposx).w,d1
00011D38 0441 0080                  		subi.w	#$80,d1
00011D3C 0241 FF80                  		andi.w	#$FF80,d1
00011D40 9041                       		sub.w	d1,d0
00011D42 6B00 BF98                  		bmi.w	DeleteObject
00011D46 0C40 0280                  		cmpi.w	#$280,d0
00011D4A 6200 BF90                  		bhi.w	DeleteObject
00011D4E 6000 BF50                  		bra.w	DisplaySprite
00011D52                            ; ===========================================================================
00011D52 0000                       See_Index:	dc.w See_Main-See_Index
00011D54 0000                       		dc.w See_Slope-See_Index
00011D56 0000                       		dc.w See_Slope2-See_Index
00011D58 0000                       		dc.w See_Spikeball-See_Index
00011D5A 0000                       		dc.w See_MoveSpike-See_Index
00011D5C 0000                       		dc.w See_SpikeFall-See_Index
00011D5E                            

00011D5E =00000030                  see_origX:	equ $30		; original x-axis position
00011D5E =00000034                  see_origY:	equ $34		; original y-axis position
00011D5E =00000038                  see_speed:	equ $38		; speed of collision
00011D5E =0000003A                  see_frame:	equ $3A		; 
00011D5E =0000003C                  see_parent:	equ $3C		; RAM address of parent object
00011D5E                            ; ===========================================================================
00011D5E                            

00011D5E                            See_Main:	; Routine 0
00011D5E 5428 0024                  		addq.b	#2,obRoutine(a0)
00011D62 217C 0000 0000 0004        		move.l	#Map_Seesaw,obMap(a0)
00011D6A 317C 0374 0002             		move.w	#$374,obGfx(a0)
00011D70 0028 0004 0001             		ori.b	#4,obRender(a0)
00011D76 117C 0004 0018             		move.b	#4,obPriority(a0)
00011D7C 117C 0030 0019             		move.b	#$30,obActWid(a0)
00011D82 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00011D88 4A28 0028                  		tst.b	obSubtype(a0)	; is object type 00 ?
00011D8C 6600                       		bne.s	@noball		; if not, branch
00011D8E                            

00011D8E 6100 C3AE                  		bsr.w	FindNextFreeObj
00011D92 6600                       		bne.s	@noball
00011D94 137C 005E 0000             		move.b	#id_Seesaw,0(a1) ; load spikeball object
00011D9A 5C29 0024                  		addq.b	#6,obRoutine(a1) ; use See_Spikeball routine
00011D9E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00011DA4 3368 000C 000C             		move.w	obY(a0),obY(a1)
00011DAA 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00011DB0 2348 003C                  		move.l	a0,see_parent(a1)
00011DB4                            

00011DB4                            	@noball:
00011DB4 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00011DBA 6700                       		beq.s	@noflip		; if not, branch
00011DBC 117C 0002 001A             		move.b	#2,obFrame(a0)	; use different frame
00011DC2                            

00011DC2                            	@noflip:
00011DC2 1168 001A 003A             		move.b	obFrame(a0),see_frame(a0)
00011DC8                            

00011DC8                            See_Slope:	; Routine 2
00011DC8 1228 003A                  		move.b	see_frame(a0),d1
00011DCC 6100 0000                  		bsr.w	See_ChgFrame
00011DD0 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00011DD6 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00011DDC 6700                       		beq.s	@notflat	; if not, branch
00011DDE 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00011DE4                            

00011DE4                            	@notflat:
00011DE4 43F8 D000                  		lea	(v_player).w,a1
00011DE8 3169 0012 0038             		move.w	obVelY(a1),see_speed(a0)
00011DEE 323C 0030                  		move.w	#$30,d1
00011DF2 4EB9 0000 7BAC             		jsr	(SlopeObject).l
00011DF8 4E75                       		rts	
00011DFA                            ; ===========================================================================
00011DFA                            

00011DFA                            See_Slope2:	; Routine 4
00011DFA 6100 0000                  		bsr.w	See_ChkSide
00011DFE 45F9 0000 0000             		lea	(See_DataSlope).l,a2
00011E04 0828 0000 001A             		btst	#0,obFrame(a0)	; is seesaw flat?
00011E0A 6700                       		beq.s	@notflat	; if not, branch
00011E0C 45F9 0000 0000             		lea	(See_DataFlat).l,a2
00011E12                            

00011E12                            	@notflat:
00011E12 323C 0030                  		move.w	#$30,d1
00011E16 4EB9 0000 7C4C             		jsr	(ExitPlatform).l
00011E1C 323C 0030                  		move.w	#$30,d1
00011E20 3428 0008                  		move.w	obX(a0),d2
00011E24 4EB9 0000 8BB6             		jsr	(SlopeObject2).l
00011E2A 4E75                       		rts	
00011E2C                            ; ===========================================================================
00011E2C                            

00011E2C                            See_ChkSide:
00011E2C 7202                       		moveq	#2,d1
00011E2E 43F8 D000                  		lea	(v_player).w,a1
00011E32 3028 0008                  		move.w	obX(a0),d0
00011E36 9069 0008                  		sub.w	obX(a1),d0	; is Sonic on the left side of the seesaw?
00011E3A 6400                       		bcc.s	@leftside	; if yes, branch
00011E3C 4440                       		neg.w	d0
00011E3E 7200                       		moveq	#0,d1
00011E40                            

00011E40                            	@leftside:
00011E40 0C40 0008                  		cmpi.w	#8,d0
00011E44 6400                       		bcc.s	See_ChgFrame
00011E46 7201                       		moveq	#1,d1
00011E48                            

00011E48                            See_ChgFrame:
00011E48 1028 001A                  		move.b	obFrame(a0),d0
00011E4C B001                       		cmp.b	d1,d0		; does frame need to change?
00011E4E 6700                       		beq.s	@noflip		; if not, branch
00011E50 6400                       		bcc.s	@loc_11772
00011E52 5400                       		addq.b	#2,d0
00011E54                            

00011E54                            	@loc_11772:
00011E54 5300                       		subq.b	#1,d0
00011E56 1140 001A                  		move.b	d0,obFrame(a0)
00011E5A 1141 003A                  		move.b	d1,see_frame(a0)
00011E5E 08A8 0000 0001             		bclr	#0,obRender(a0)
00011E64 0828 0001 001A             		btst	#1,obFrame(a0)
00011E6A 6700                       		beq.s	@noflip
00011E6C 08E8 0000 0001             		bset	#0,obRender(a0)
00011E72                            

00011E72                            	@noflip:
00011E72 4E75                       		rts	
00011E74                            ; ===========================================================================
00011E74                            

00011E74                            See_Spikeball:	; Routine 6
00011E74 5428 0024                  		addq.b	#2,obRoutine(a0)
00011E78 217C 0000 0000 0004        		move.l	#Map_SSawBall,obMap(a0)
00011E80 317C 04F0 0002             		move.w	#$4F0,obGfx(a0)
00011E86 0028 0004 0001             		ori.b	#4,obRender(a0)
00011E8C 117C 0004 0018             		move.b	#4,obPriority(a0)
00011E92 117C 008B 0020             		move.b	#$8B,obColType(a0)
00011E98 117C 000C 0019             		move.b	#$C,obActWid(a0)
00011E9E 3168 0008 0030             		move.w	obX(a0),see_origX(a0)
00011EA4 0668 0028 0008             		addi.w	#$28,obX(a0)
00011EAA 3168 000C 0034             		move.w	obY(a0),see_origY(a0)
00011EB0 117C 0001 001A             		move.b	#1,obFrame(a0)
00011EB6 0828 0000 0022             		btst	#0,obStatus(a0)	; is seesaw flipped?
00011EBC 6700                       		beq.s	See_MoveSpike	; if not, branch
00011EBE 0468 0050 0008             		subi.w	#$50,obX(a0)	; move spikeball to the other side
00011EC4 117C 0002 003A             		move.b	#2,see_frame(a0)
00011ECA                            

00011ECA                            See_MoveSpike:	; Routine 8
00011ECA 2268 003C                  		movea.l	see_parent(a0),a1
00011ECE 7000                       		moveq	#0,d0
00011ED0 1028 003A                  		move.b	see_frame(a0),d0
00011ED4 9029 003A                  		sub.b	see_frame(a1),d0
00011ED8 6700                       		beq.s	loc_1183E
00011EDA 6400                       		bcc.s	loc_117FC
00011EDC 4400                       		neg.b	d0
00011EDE                            

00011EDE                            loc_117FC:
00011EDE 323C F7E8                  		move.w	#-$818,d1
00011EE2 343C FEEC                  		move.w	#-$114,d2
00011EE6 0C00 0001                  		cmpi.b	#1,d0
00011EEA 6700                       		beq.s	loc_11822
00011EEC 323C F510                  		move.w	#-$AF0,d1
00011EF0 343C FF34                  		move.w	#-$CC,d2
00011EF4 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00011EFA 6D00                       		blt.s	loc_11822
00011EFC 323C F200                  		move.w	#-$E00,d1
00011F00 343C FF60                  		move.w	#-$A0,d2
00011F04                            

00011F04                            loc_11822:
00011F04 3141 0012                  		move.w	d1,obVelY(a0)
00011F08 3142 0010                  		move.w	d2,obVelX(a0)
00011F0C 3028 0008                  		move.w	obX(a0),d0
00011F10 9068 0030                  		sub.w	see_origX(a0),d0
00011F14 6400                       		bcc.s	loc_11838
00011F16 4468 0010                  		neg.w	obVelX(a0)
00011F1A                            

00011F1A                            loc_11838:
00011F1A 5428 0024                  		addq.b	#2,obRoutine(a0)
00011F1E 6000                       		bra.s	See_SpikeFall
00011F20                            ; ===========================================================================
00011F20                            

00011F20                            loc_1183E:
00011F20 45F9 0000 0000             		lea	(See_Speeds).l,a2
00011F26 7000                       		moveq	#0,d0
00011F28 1029 001A                  		move.b	obFrame(a1),d0
00011F2C 343C 0028                  		move.w	#$28,d2
00011F30 3228 0008                  		move.w	obX(a0),d1
00011F34 9268 0030                  		sub.w	see_origX(a0),d1
00011F38 6400                       		bcc.s	loc_1185C
00011F3A 4442                       		neg.w	d2
00011F3C 5440                       		addq.w	#2,d0
00011F3E                            

00011F3E                            loc_1185C:
00011F3E D040                       		add.w	d0,d0
00011F40 3228 0034                  		move.w	see_origY(a0),d1
00011F44 D272 0000                  		add.w	(a2,d0.w),d1
00011F48 3141 000C                  		move.w	d1,obY(a0)
00011F4C D468 0030                  		add.w	see_origX(a0),d2
00011F50 3142 0008                  		move.w	d2,obX(a0)
00011F54 4268 000E                  		clr.w	obY+2(a0)
00011F58 4268 000A                  		clr.w	obX+2(a0)
00011F5C 4E75                       		rts	
00011F5E                            ; ===========================================================================
00011F5E                            

00011F5E                            See_SpikeFall:	; Routine $A
00011F5E 4A68 0012                  		tst.w	obVelY(a0)	; is spikeball falling down?
00011F62 6A00                       		bpl.s	loc_1189A	; if yes, branch
00011F64 6100 BCE8                  		bsr.w	ObjectFall
00011F68 3028 0034                  		move.w	see_origY(a0),d0
00011F6C 0440 002F                  		subi.w	#$2F,d0
00011F70 B068 000C                  		cmp.w	obY(a0),d0
00011F74 6E00                       		bgt.s	locret_11898
00011F76 6100 BCD6                  		bsr.w	ObjectFall
00011F7A                            

00011F7A                            locret_11898:
00011F7A 4E75                       		rts	
00011F7C                            ; ===========================================================================
00011F7C                            

00011F7C                            loc_1189A:
00011F7C 6100 BCD0                  		bsr.w	ObjectFall
00011F80 2268 003C                  		movea.l	see_parent(a0),a1
00011F84 45F9 0000 0000             		lea	(See_Speeds).l,a2
00011F8A 7000                       		moveq	#0,d0
00011F8C 1029 001A                  		move.b	obFrame(a1),d0
00011F90 3228 0008                  		move.w	obX(a0),d1
00011F94 9268 0030                  		sub.w	see_origX(a0),d1
00011F98 6400                       		bcc.s	loc_118BA
00011F9A 5440                       		addq.w	#2,d0
00011F9C                            

00011F9C                            loc_118BA:
00011F9C D040                       		add.w	d0,d0
00011F9E 3228 0034                  		move.w	see_origY(a0),d1
00011FA2 D272 0000                  		add.w	(a2,d0.w),d1
00011FA6 B268 000C                  		cmp.w	obY(a0),d1
00011FAA 6E00                       		bgt.s	locret_11938
00011FAC 2268 003C                  		movea.l	see_parent(a0),a1
00011FB0 7202                       		moveq	#2,d1
00011FB2 4A68 0010                  		tst.w	obVelX(a0)
00011FB6 6B00                       		bmi.s	See_Spring
00011FB8 7200                       		moveq	#0,d1
00011FBA                            

00011FBA                            See_Spring:
00011FBA 1341 003A                  		move.b	d1,$3A(a1)
00011FBE 1141 003A                  		move.b	d1,see_frame(a0)
00011FC2 B229 001A                  		cmp.b	obFrame(a1),d1
00011FC6 6700                       		beq.s	loc_1192C
00011FC8 08A9 0003 0022             		bclr	#3,obStatus(a1)
00011FCE 6700                       		beq.s	loc_1192C
00011FD0 4229 0025                  		clr.b	ob2ndRout(a1)
00011FD4 137C 0002 0024             		move.b	#2,obRoutine(a1)
00011FDA 45F8 D000                  		lea	(v_player).w,a2
00011FDE 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
00011FE4 446A 0012                  		neg.w	obVelY(a2)
00011FE8 08EA 0001 0022             		bset	#1,obStatus(a2)
00011FEE 08AA 0003 0022             		bclr	#3,obStatus(a2)
00011FF4 422A 003C                  		clr.b	$3C(a2)
00011FF8 157C 0000 001C             		move.b	#id_Spring,obAnim(a2) ; change Sonic's animation to "spring" ($10)
00011FFE 157C 0002 0024             		move.b	#2,obRoutine(a2)
00012004 303C 0000                  		move.w	#sfx_Spring,d0
00012008 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play spring sound
0001200E                            

0001200E                            loc_1192C:
0001200E 4268 0010                  		clr.w	obVelX(a0)
00012012 4268 0012                  		clr.w	obVelY(a0)
00012016 5528 0024                  		subq.b	#2,obRoutine(a0)
0001201A                            

0001201A                            locret_11938:
0001201A 4E75                       		rts	
0001201C                            ; ===========================================================================
0001201C FFF8 FFE4 FFD1 FFE4 FFF8   See_Speeds:	dc.w -8, -$1C, -$2F, -$1C, -8
00012026                            

00012026                            See_DataSlope:	incbin	"misc\slzssaw1.bin"
00012056                            		even
00012056                            See_DataFlat:	incbin	"misc\slzssaw2.bin"
00012086                            		even
00012086                            		even
00012086                            Map_Seesaw:	include	"_maps\Seesaw.asm"
00012086                            ; ---------------------------------------------------------------------------
00012086                            ; Sprite mappings - seesaws (SLZ)
00012086                            ; ---------------------------------------------------------------------------
00012086                            Map_Seesaw_internal:
00012086 0000                       		dc.w @sloping-Map_Seesaw_internal
00012088 0000                       		dc.w @flat-Map_Seesaw_internal
0001208A 0000                       		dc.w @sloping-Map_Seesaw_internal
0001208C 0000                       		dc.w @flat-Map_Seesaw_internal
0001208E 07                         @sloping:	dc.b 7
0001208F D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012094 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012099 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
0001209E EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
000120A3 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
000120A8 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
000120AD FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
000120B2 04                         @flat:		dc.b 4
000120B3 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
000120B8 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
000120BD E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
000120C2 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
000120C8 00                         		even
000120C8 00                         		even
000120C8                            Map_SSawBall:	include	"_maps\Seesaw Ball.asm"
000120C8                            ; ---------------------------------------------------------------------------
000120C8                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
000120C8                            ; ---------------------------------------------------------------------------
000120C8                            Map_SSawBall_internal:
000120C8 0000                       		dc.w @red-Map_SSawBall_internal
000120CA 0000                       		dc.w @silver-Map_SSawBall_internal
000120CC 01                         @red:		dc.b 1
000120CD F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000120D2 01                         @silver:	dc.b 1
000120D3 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000120D8                            		even
000120D8                            		even
000120D8                            		include	"_incObj\5F Bomb Enemy.asm"
000120D8                            ; ---------------------------------------------------------------------------
000120D8                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
000120D8                            ; ---------------------------------------------------------------------------
000120D8                            

000120D8                            Bomb:
000120D8 7000                       		moveq	#0,d0
000120DA 1028 0024                  		move.b	obRoutine(a0),d0
000120DE 323B 0000                  		move.w	Bom_Index(pc,d0.w),d1
000120E2 4EFB 1000                  		jmp	Bom_Index(pc,d1.w)
000120E6                            ; ===========================================================================
000120E6 0000                       Bom_Index:	dc.w Bom_Main-Bom_Index
000120E8 0000                       		dc.w Bom_Action-Bom_Index
000120EA 0000                       		dc.w Bom_Display-Bom_Index
000120EC 0000                       		dc.w Bom_End-Bom_Index
000120EE                            

000120EE =00000030                  bom_time:	equ $30		; time of fuse
000120EE =00000034                  bom_origY:	equ $34		; original y-axis position
000120EE =0000003C                  bom_parent:	equ $3C		; address of parent object
000120EE                            ; ===========================================================================
000120EE                            

000120EE                            Bom_Main:	; Routine 0
000120EE 5428 0024                  		addq.b	#2,obRoutine(a0)
000120F2 217C 0000 0000 0004        		move.l	#Map_Bomb,obMap(a0)
000120FA 317C 0400 0002             		move.w	#$400,obGfx(a0)
00012100 0028 0004 0001             		ori.b	#4,obRender(a0)
00012106 117C 0003 0018             		move.b	#3,obPriority(a0)
0001210C 117C 000C 0019             		move.b	#$C,obActWid(a0)
00012112 1028 0028                  		move.b	obSubtype(a0),d0
00012116 6700                       		beq.s	loc_11A3C
00012118 1140 0024                  		move.b	d0,obRoutine(a0)
0001211C 4E75                       		rts	
0001211E                            ; ===========================================================================
0001211E                            

0001211E                            loc_11A3C:
0001211E 117C 009A 0020             		move.b	#$9A,obColType(a0)
00012124 0868 0000 0022             		bchg	#0,obStatus(a0)
0001212A                            

0001212A                            Bom_Action:	; Routine 2
0001212A 7000                       		moveq	#0,d0
0001212C 1028 0025                  		move.b	ob2ndRout(a0),d0
00012130 323B 0000                  		move.w	@index(pc,d0.w),d1
00012134 4EBB 1000                  		jsr	@index(pc,d1.w)
00012138 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
0001213E 6100 8C70                  		bsr.w	AnimateSprite
00012142 6000 DC02                  		bra.w	RememberState
00012146                            ; ===========================================================================
00012146 0000                       @index:		dc.w @walk-@index
00012148 0000                       		dc.w @wait-@index
0001214A 0000                       		dc.w @explode-@index
0001214C                            ; ===========================================================================
0001214C                            

0001214C                            @walk:
0001214C 6100 0000                  		bsr.w	@chksonic
00012150 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00012154 6A00                       		bpl.s	@noflip		; if time remains, branch
00012156 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto @wait
0001215A 317C 05FF 0030             		move.w	#1535,bom_time(a0) ; set time delay to 25 seconds
00012160 317C 0010 0010             		move.w	#$10,obVelX(a0)
00012166 117C 0001 001C             		move.b	#1,obAnim(a0)	; use walking animation
0001216C 0868 0000 0022             		bchg	#0,obStatus(a0)
00012172 6700                       		beq.s	@noflip
00012174 4468 0010                  		neg.w	obVelX(a0)	; change direction
00012178                            

00012178                            	@noflip:
00012178 4E75                       		rts	
0001217A                            ; ===========================================================================
0001217A                            

0001217A                            @wait:
0001217A 6100 0000                  		bsr.w	@chksonic
0001217E 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
00012182 6B00                       		bmi.s	@stopwalking	; if time expires, branch
00012184 6100 BAF4                  		bsr.w	SpeedToPos
00012188 4E75                       		rts	
0001218A                            ; ===========================================================================
0001218A                            

0001218A                            	@stopwalking:
0001218A 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001218E 317C 00B3 0030             		move.w	#179,bom_time(a0) ; set time delay to 3 seconds
00012194 4268 0010                  		clr.w	obVelX(a0)	; stop walking
00012198 117C 0000 001C             		move.b	#0,obAnim(a0)	; use waiting animation
0001219E 4E75                       		rts	
000121A0                            ; ===========================================================================
000121A0                            

000121A0                            @explode:
000121A0 5368 0030                  		subq.w	#1,bom_time(a0)	; subtract 1 from time delay
000121A4 6A00                       		bpl.s	@noexplode	; if time remains, branch
000121A6 117C 003F 0000             		move.b	#id_ExplosionBomb,0(a0) ; change bomb into an explosion
000121AC 117C 0000 0024             		move.b	#0,obRoutine(a0)
000121B2                            

000121B2                            	@noexplode:
000121B2 4E75                       		rts	
000121B4                            ; ===========================================================================
000121B4                            

000121B4                            @chksonic:
000121B4 3038 D008                  		move.w	(v_player+obX).w,d0
000121B8 9068 0008                  		sub.w	obX(a0),d0
000121BC 6400                       		bcc.s	@isleft
000121BE 4440                       		neg.w	d0
000121C0                            

000121C0                            	@isleft:
000121C0 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels?
000121C4 6400                       		bcc.s	@outofrange	; if not, branch
000121C6 3038 D00C                  		move.w	(v_player+obY).w,d0
000121CA 9068 000C                  		sub.w	obY(a0),d0
000121CE 6400                       		bcc.s	@isabove
000121D0 4440                       		neg.w	d0
000121D2                            

000121D2                            	@isabove:
000121D2 0C40 0060                  		cmpi.w	#$60,d0
000121D6 6400                       		bcc.s	@outofrange
000121D8 4A78 FE08                  		tst.w	(v_debuguse).w
000121DC 6600                       		bne.s	@outofrange
000121DE                            

000121DE 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
000121E4 317C 008F 0030             		move.w	#143,bom_time(a0) ; set fuse time
000121EA 4268 0010                  		clr.w	obVelX(a0)
000121EE 117C 0002 001C             		move.b	#2,obAnim(a0)	; use activated animation
000121F4 6100 BF48                  		bsr.w	FindNextFreeObj
000121F8 6600                       		bne.s	@outofrange
000121FA 137C 005F 0000             		move.b	#id_Bomb,0(a1)	; load fuse object
00012200 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012206 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001220C 3368 000C 0034             		move.w	obY(a0),bom_origY(a1)
00012212 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00012218 137C 0004 0028             		move.b	#4,obSubtype(a1)
0001221E 137C 0003 001C             		move.b	#3,obAnim(a1)
00012224 337C 0010 0012             		move.w	#$10,obVelY(a1)
0001222A 0828 0001 0022             		btst	#1,obStatus(a0)	; is bomb upside-down?
00012230 6700                       		beq.s	@normal		; if not, branch
00012232 4469 0012                  		neg.w	obVelY(a1)	; reverse direction for fuse
00012236                            

00012236                            	@normal:
00012236 337C 008F 0030             		move.w	#143,bom_time(a1) ; set fuse time
0001223C 2348 003C                  		move.l	a0,bom_parent(a1)
00012240                            

00012240                            @outofrange:
00012240 4E75                       		rts	
00012242                            ; ===========================================================================
00012242                            

00012242                            Bom_Display:	; Routine 4
00012242 6100                       		bsr.s	loc_11B70
00012244 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
0001224A 6100 8B64                  		bsr.w	AnimateSprite
0001224E 6000 DAF6                  		bra.w	RememberState
00012252                            ; ===========================================================================
00012252                            

00012252                            loc_11B70:
00012252 5368 0030                  		subq.w	#1,bom_time(a0)
00012256 6B00                       		bmi.s	loc_11B7C
00012258 6100 BA20                  		bsr.w	SpeedToPos
0001225C 4E75                       		rts	
0001225E                            ; ===========================================================================
0001225E                            

0001225E                            loc_11B7C:
0001225E 4268 0030                  		clr.w	bom_time(a0)
00012262 4228 0024                  		clr.b	obRoutine(a0)
00012266 3168 0034 000C             		move.w	bom_origY(a0),obY(a0)
0001226C 7203                       		moveq	#3,d1
0001226E 2248                       		movea.l	a0,a1
00012270 45F9 0000 0000             		lea	(Bom_ShrSpeed).l,a2 ; load shrapnel speed data
00012276 6000                       		bra.s	@makeshrapnel
00012278                            ; ===========================================================================
00012278                            

00012278                            	@loop:
00012278 6100 BEC4                  		bsr.w	FindNextFreeObj
0001227C 6600                       		bne.s	@fail
0001227E                            

0001227E                            @makeshrapnel:
0001227E 137C 005F 0000             		move.b	#id_Bomb,0(a1)	; load shrapnel	object
00012284 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001228A 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012290 137C 0006 0028             		move.b	#6,obSubtype(a1)
00012296 137C 0004 001C             		move.b	#4,obAnim(a1)
0001229C 335A 0010                  		move.w	(a2)+,obVelX(a1)
000122A0 335A 0012                  		move.w	(a2)+,obVelY(a1)
000122A4 137C 0098 0020             		move.b	#$98,obColType(a1)
000122AA 08E9 0007 0001             		bset	#7,obRender(a1)
000122B0                            

000122B0                            	@fail:
000122B0 51C9 FFC6                  		dbf	d1,@loop	; repeat 3 more	times
000122B4                            

000122B4 117C 0006 0024             		move.b	#6,obRoutine(a0)
000122BA                            

000122BA                            Bom_End:	; Routine 6
000122BA 6100 B9BE                  		bsr.w	SpeedToPos
000122BE 0668 0018 0012             		addi.w	#$18,obVelY(a0)
000122C4 43F9 0000 0000             		lea	(Ani_Bomb).l,a1
000122CA 6100 8AE4                  		bsr.w	AnimateSprite
000122CE 4A28 0001                  		tst.b	obRender(a0)
000122D2 6A00 BA08                  		bpl.w	DeleteObject
000122D6 6000 B9C8                  		bra.w	DisplaySprite
000122DA                            ; ===========================================================================
000122DA FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
000122DA FE00 FD00 FF00 FE00 0200+  Bom_ShrSpeed:	dc.w -$200, -$300, -$100, -$200, $200, -$300, $100, -$200
000122EA                            		include	"_anim\Bomb Enemy.asm"
000122EA                            ; ---------------------------------------------------------------------------
000122EA                            ; Animation script - Bomb enemy
000122EA                            ; ---------------------------------------------------------------------------
000122EA 0000                       Ani_Bomb:	dc.w @stand-Ani_Bomb
000122EC 0000                       		dc.w @walk-Ani_Bomb
000122EE 0000                       		dc.w @activated-Ani_Bomb
000122F0 0000                       		dc.w @fuse-Ani_Bomb
000122F2 0000                       		dc.w @shrapnel-Ani_Bomb
000122F4 1301 00FF                  @stand:		dc.b $13, 1, 0,	afEnd
000122F8 1305 0403 02FF             @walk:		dc.b $13, 5, 4,	3, 2, afEnd
000122FE 1307 06FF                  @activated:	dc.b $13, 7, 6,	afEnd
00012302 0308 09FF                  @fuse:		dc.b 3,	8, 9, afEnd
00012306 030A 0BFF                  @shrapnel:	dc.b 3,	$A, $B,	afEnd
0001230A                            		even
0001230A                            		even
0001230A                            Map_Bomb:	include	"_maps\Bomb Enemy.asm"
0001230A                            ; ---------------------------------------------------------------------------
0001230A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
0001230A                            ; ---------------------------------------------------------------------------
0001230A                            Map_Bomb_internal:
0001230A 0000                       		dc.w @stand1-Map_Bomb_internal
0001230C 0000                       		dc.w @stand2-Map_Bomb_internal
0001230E 0000                       		dc.w @walk1-Map_Bomb_internal
00012310 0000                       		dc.w @walk2-Map_Bomb_internal
00012312 0000                       		dc.w @walk3-Map_Bomb_internal
00012314 0000                       		dc.w @walk4-Map_Bomb_internal
00012316 0000                       		dc.w @activate1-Map_Bomb_internal
00012318 0000                       		dc.w @activate2-Map_Bomb_internal
0001231A 0000                       		dc.w @fuse1-Map_Bomb_internal
0001231C 0000                       		dc.w @fuse2-Map_Bomb_internal
0001231E 0000                       		dc.w @shrapnel1-Map_Bomb_internal
00012320 0000                       		dc.w @shrapnel2-Map_Bomb_internal
00012322 03                         @stand1:	dc.b 3
00012323 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb standing still
00012328 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001232D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012332 03                         @stand2:	dc.b 3
00012333 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012338 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001233D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012342 03                         @walk1:		dc.b 3
00012343 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4	; bomb walking
00012348 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
0001234D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012352 03                         @walk2:		dc.b 3
00012353 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012358 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
0001235D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012362 03                         @walk3:		dc.b 3
00012363 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012368 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
0001236D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012372 03                         @walk4:		dc.b 3
00012373 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012378 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
0001237D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012382 02                         @activate1:	dc.b 2
00012383 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4	; bomb during detonation countdown
00012388 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
0001238D 02                         @activate2:	dc.b 2
0001238E F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012393 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012398 01                         @fuse1:		dc.b 1
00012399 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC ; fuse	(just before it	explodes)
0001239E 01                         @fuse2:		dc.b 1
0001239F E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000123A4 01                         @shrapnel1:	dc.b 1
000123A5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC ; shrapnel (after it exploded)
000123AA 01                         @shrapnel2:	dc.b 1
000123AB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000123B0                            		even
000123B0                            		even
000123B0                            

000123B0                            		include	"_incObj\60 Orbinaut.asm"
000123B0                            ; ---------------------------------------------------------------------------
000123B0                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
000123B0                            ; ---------------------------------------------------------------------------
000123B0                            

000123B0                            Orbinaut:
000123B0 7000                       		moveq	#0,d0
000123B2 1028 0024                  		move.b	obRoutine(a0),d0
000123B6 323B 0000                  		move.w	Orb_Index(pc,d0.w),d1
000123BA 4EFB 1000                  		jmp	Orb_Index(pc,d1.w)
000123BE                            ; ===========================================================================
000123BE 0000                       Orb_Index:	dc.w Orb_Main-Orb_Index
000123C0 0000                       		dc.w Orb_ChkSonic-Orb_Index
000123C2 0000                       		dc.w Orb_Display-Orb_Index
000123C4 0000                       		dc.w Orb_MoveOrb-Orb_Index
000123C6 0000                       		dc.w Orb_ChkDel2-Orb_Index
000123C8                            

000123C8 =0000003C                  orb_parent:	equ $3C		; address of parent object
000123C8                            ; ===========================================================================
000123C8                            

000123C8                            Orb_Main:	; Routine 0
000123C8 217C 0000 0000 0004        		move.l	#Map_Orb,obMap(a0)
000123D0 317C 0429 0002             		move.w	#$429,obGfx(a0)	; SBZ specific code
000123D6 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; check if level is SBZ
000123DC 6700                       		beq.s	@isscrap
000123DE 317C 2429 0002             		move.w	#$2429,obGfx(a0) ; SLZ specific code
000123E4                            

000123E4                            	@isscrap:
000123E4 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ
000123EA 6600                       		bne.s	@notlabyrinth
000123EC 317C 0467 0002             		move.w	#$467,obGfx(a0)	; LZ specific code
000123F2                            

000123F2                            	@notlabyrinth:
000123F2 0028 0004 0001             		ori.b	#4,obRender(a0)
000123F8 117C 0004 0018             		move.b	#4,obPriority(a0)
000123FE 117C 000B 0020             		move.b	#$B,obColType(a0)
00012404 117C 000C 0019             		move.b	#$C,obActWid(a0)
0001240A 7400                       		moveq	#0,d2
0001240C 45E8 0037                  		lea	$37(a0),a2
00012410 264A                       		movea.l	a2,a3
00012412 524A                       		addq.w	#1,a2
00012414 7203                       		moveq	#3,d1
00012416                            

00012416                            @makesatellites:
00012416 6100 BD26                  		bsr.w	FindNextFreeObj
0001241A 6600                       		bne.s	@fail
0001241C 5213                       		addq.b	#1,(a3)
0001241E 3A09                       		move.w	a1,d5
00012420 0445 D000                  		subi.w	#v_objspace&$FFFF,d5
00012424 EC4D                       		lsr.w	#6,d5
00012426 0245 007F                  		andi.w	#$7F,d5
0001242A 14C5                       		move.b	d5,(a2)+
0001242C 1368 0000 0000             		move.b	0(a0),0(a1)	; load spiked orb object
00012432 137C 0006 0024             		move.b	#6,obRoutine(a1) ; use Orb_MoveOrb routine
00012438 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
0001243E 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
00012444 0029 0004 0001             		ori.b	#4,obRender(a1)
0001244A 137C 0004 0018             		move.b	#4,obPriority(a1)
00012450 137C 0008 0019             		move.b	#8,obActWid(a1)
00012456 137C 0003 001A             		move.b	#3,obFrame(a1)
0001245C 137C 0098 0020             		move.b	#$98,obColType(a1)
00012462 1342 0026                  		move.b	d2,obAngle(a1)
00012466 0602 0040                  		addi.b	#$40,d2
0001246A 2348 003C                  		move.l	a0,orb_parent(a1)
0001246E 51C9 FFA6                  		dbf	d1,@makesatellites ; repeat sequence 3 more times
00012472                            

00012472                            	@fail:
00012472 7001                       		moveq	#1,d0
00012474 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left?
0001247A 6700                       		beq.s	@noflip		; if not, branch
0001247C 4440                       		neg.w	d0
0001247E                            

0001247E                            	@noflip:
0001247E 1140 0036                  		move.b	d0,$36(a0)
00012482 1168 0028 0024             		move.b	obSubtype(a0),obRoutine(a0) ; if type is 02, skip Orb_ChkSonic
00012488 5428 0024                  		addq.b	#2,obRoutine(a0)
0001248C 317C FFC0 0010             		move.w	#-$40,obVelX(a0) ; move orbinaut to the left
00012492 0828 0000 0022             		btst	#0,obStatus(a0)	; is orbinaut facing left??
00012498 6700                       		beq.s	@noflip2	; if not, branch
0001249A 4468 0010                  		neg.w	obVelX(a0)	; move orbinaut	to the right
0001249E                            

0001249E                            	@noflip2:
0001249E 4E75                       		rts	
000124A0                            ; ===========================================================================
000124A0                            

000124A0                            Orb_ChkSonic:	; Routine 2
000124A0 3038 D008                  		move.w	(v_player+obX).w,d0
000124A4 9068 0008                  		sub.w	obX(a0),d0	; is Sonic to the right of the orbinaut?
000124A8 6400                       		bcc.s	@isright	; if yes, branch
000124AA 4440                       		neg.w	d0
000124AC                            

000124AC                            	@isright:
000124AC 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
000124B0 6400                       		bcc.s	@animate	; if not, branch
000124B2 3038 D00C                  		move.w	(v_player+obY).w,d0
000124B6 9068 000C                  		sub.w	obY(a0),d0	; is Sonic above the orbinaut?
000124BA 6400                       		bcc.s	@isabove	; if yes, branch
000124BC 4440                       		neg.w	d0
000124BE                            

000124BE                            	@isabove:
000124BE 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
000124C2 6400                       		bcc.s	@animate	; if not, branch
000124C4 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	on?
000124C8 6600                       		bne.s	@animate	; if yes, branch
000124CA 117C 0001 001C             		move.b	#1,obAnim(a0)	; use "angry" animation
000124D0                            

000124D0                            @animate:
000124D0 43F9 0000 0000             		lea	(Ani_Orb).l,a1
000124D6 6100 88D8                  		bsr.w	AnimateSprite
000124DA 6000 0000                  		bra.w	Orb_ChkDel
000124DE                            ; ===========================================================================
000124DE                            

000124DE                            Orb_Display:	; Routine 4
000124DE 6100 B79A                  		bsr.w	SpeedToPos
000124E2                            

000124E2                            Orb_ChkDel:
00012500 6000 B79E                  		bra.w	DisplaySprite
00012504                            

00012504                            @chkgone:
00012504 45F8 FC00                  		lea	(v_objstate).w,a2
00012508 7000                       		moveq	#0,d0
0001250A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001250E 6700                       		beq.s	loc_11E34
00012510 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012516                            

00012516                            loc_11E34:
00012516 45E8 0037                  		lea	$37(a0),a2
0001251A 7400                       		moveq	#0,d2
0001251C 141A                       		move.b	(a2)+,d2
0001251E 5342                       		subq.w	#1,d2
00012520 6500                       		bcs.s	Orb_Delete
00012522                            

00012522                            loc_11E40:
00012522 7000                       		moveq	#0,d0
00012524 101A                       		move.b	(a2)+,d0
00012526 ED48                       		lsl.w	#6,d0
00012528 0680 00FF D000             		addi.l	#v_objspace&$FFFFFF,d0
0001252E 2240                       		movea.l	d0,a1
00012530 6100 B7AC                  		bsr.w	DeleteChild
00012534 51CA FFEC                  		dbf	d2,loc_11E40
00012538                            

00012538                            Orb_Delete:
00012538 6000 B7A2                  		bra.w	DeleteObject
0001253C                            ; ===========================================================================
0001253C                            

0001253C                            Orb_MoveOrb:	; Routine 6
0001253C 2268 003C                  		movea.l	orb_parent(a0),a1
00012540 0C29 0060 0000             		cmpi.b	#id_Orbinaut,0(a1) ; does parent object still exist?
00012546 6600 B794                  		bne.w	DeleteObject	; if not, delete
0001254A 0C29 0002 001A             		cmpi.b	#2,obFrame(a1)	; is orbinaut angry?
00012550 6600                       		bne.s	@circle		; if not, branch
00012552 0C28 0040 0026             		cmpi.b	#$40,obAngle(a0) ; is spikeorb directly under the orbinaut?
00012558 6600                       		bne.s	@circle		; if not, branch
0001255A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001255E 5329 0037                  		subq.b	#1,$37(a1)
00012562 6600                       		bne.s	@fire
00012564 5429 0024                  		addq.b	#2,obRoutine(a1)
00012568                            

00012568                            	@fire:
00012568 317C FE00 0010             		move.w	#-$200,obVelX(a0) ; move orb to the left (quickly)
0001256E 0829 0000 0022             		btst	#0,obStatus(a1)
00012574 6700                       		beq.s	@noflip
00012576 4468 0010                  		neg.w	obVelX(a0)
0001257A                            

0001257A                            	@noflip:
0001257A 6000 B724                  		bra.w	DisplaySprite
0001257E                            ; ===========================================================================
0001257E                            

0001257E                            @circle:
0001257E 1028 0026                  		move.b	obAngle(a0),d0
00012582 4EB9 0000 29E0             		jsr	(CalcSine).l
00012588 E841                       		asr.w	#4,d1
0001258A D269 0008                  		add.w	obX(a1),d1
0001258E 3141 0008                  		move.w	d1,obX(a0)
00012592 E840                       		asr.w	#4,d0
00012594 D069 000C                  		add.w	obY(a1),d0
00012598 3140 000C                  		move.w	d0,obY(a0)
0001259C 1029 0036                  		move.b	$36(a1),d0
000125A0 D128 0026                  		add.b	d0,obAngle(a0)
000125A4 6000 B6FA                  		bra.w	DisplaySprite
000125A8                            ; ===========================================================================
000125A8                            

000125A8                            Orb_ChkDel2:	; Routine 8
000125A8 6100 B6D0                  		bsr.w	SpeedToPos
000125AC 4A28 0001                  		tst.b	obRender(a0)
000125B0 6A00 B72A                  		bpl.w	DeleteObject
000125B4 6000 B6EA                  		bra.w	DisplaySprite
000125B4 6000 B6EA                  		bra.w	DisplaySprite
000125B8                            		include	"_anim\Orbinaut.asm"
000125B8                            ; ---------------------------------------------------------------------------
000125B8                            ; Animation script - Orbinaut enemy
000125B8                            ; ---------------------------------------------------------------------------
000125B8 0000                       Ani_Orb:	dc.w @normal-Ani_Orb
000125BA 0000                       		dc.w @angers-Ani_Orb
000125BC 0F00 FF                    @normal:	dc.b $F, 0, afEnd
000125C0 00                         		even
000125C0 0F01 02FE 01               @angers:	dc.b $F, 1, 2, afBack, 1
000125C6 00                         		even
000125C6 00                         		even
000125C6                            Map_Orb:	include	"_maps\Orbinaut.asm"
000125C6                            ; ---------------------------------------------------------------------------
000125C6                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
000125C6                            ; ---------------------------------------------------------------------------
000125C6                            Map_Orb_internal:
000125C6 0000                       		dc.w @normal-Map_Orb_internal
000125C8 0000                       		dc.w @medium-Map_Orb_internal
000125CA 0000                       		dc.w @angry-Map_Orb_internal
000125CC 0000                       		dc.w @spikeball-Map_Orb_internal
000125CE 01                         @normal:	dc.b 1
000125CF F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000125D4 01                         @medium:	dc.b 1
000125D5 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
000125DA 01                         @angry:		dc.b 1
000125DB F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000125E0 01                         @spikeball:	dc.b 1
000125E1 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
000125E6                            		even
000125E6                            		even
000125E6                            

000125E6                            		include	"_incObj\16 Harpoon.asm"
000125E6                            ; ---------------------------------------------------------------------------
000125E6                            ; Object 16 - harpoon (LZ)
000125E6                            ; ---------------------------------------------------------------------------
000125E6                            

000125E6                            Harpoon:
000125E6 7000                       		moveq	#0,d0
000125E8 1028 0024                  		move.b	obRoutine(a0),d0
000125EC 323B 0000                  		move.w	Harp_Index(pc,d0.w),d1
000125F0 4EFB 1000                  		jmp	Harp_Index(pc,d1.w)
000125F4                            ; ===========================================================================
000125F4 0000                       Harp_Index:	dc.w Harp_Main-Harp_Index
000125F6 0000                       		dc.w Harp_Move-Harp_Index
000125F8 0000                       		dc.w Harp_Wait-Harp_Index
000125FA                            

000125FA =00000030                  harp_time:	equ $30		; time between stabbing/retracting
000125FA                            ; ===========================================================================
000125FA                            

000125FA                            Harp_Main:	; Routine 0
000125FA 5428 0024                  		addq.b	#2,obRoutine(a0)
000125FE 217C 0000 0000 0004        		move.l	#Map_Harp,obMap(a0)
00012606 317C 03CC 0002             		move.w	#$3CC,obGfx(a0)
0001260C 0028 0004 0001             		ori.b	#4,obRender(a0)
00012612 117C 0004 0018             		move.b	#4,obPriority(a0)
00012618 1168 0028 001C             		move.b	obSubtype(a0),obAnim(a0) ; get type (vert/horiz)
0001261E 117C 0014 0019             		move.b	#$14,obActWid(a0)
00012624 317C 003C 0030             		move.w	#60,harp_time(a0) ; set time to 1 second
0001262A                            

0001262A                            Harp_Move:	; Routine 2
0001262A 43F9 0000 0000             		lea	(Ani_Harp).l,a1
00012630 6100 877E                  		bsr.w	AnimateSprite
00012634 7000                       		moveq	#0,d0
00012636 1028 001A                  		move.b	obFrame(a0),d0	; get frame number
0001263A 117B 0000 0020             		move.b	@types(pc,d0.w),obColType(a0) ; get collision type
00012640 6000 D704                  		bra.w	RememberState
00012644                            

00012644                            	@types:
00012644 9B9C 9D9E 9FA0             		dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001264A                            		even
0001264A                            

0001264A                            Harp_Wait:	; Routine 4
0001264A 5368 0030                  		subq.w	#1,harp_time(a0) ; decrement timer
0001264E 6A00                       		bpl.s	@chkdel		; branch if time remains
00012650 317C 003C 0030             		move.w	#60,harp_time(a0) ; reset timer
00012656 5528 0024                  		subq.b	#2,obRoutine(a0) ; run "Harp_Move" subroutine
0001265A 0868 0000 001C             		bchg	#0,obAnim(a0)	; reverse animation
00012660                            

00012660                            	@chkdel:
00012660 6000 D6E4                  		bra.w	RememberState
00012660 6000 D6E4                  		bra.w	RememberState
00012664                            		include	"_anim\Harpoon.asm"
00012664                            ; ---------------------------------------------------------------------------
00012664                            ; Animation script - harpoon (LZ)
00012664                            ; ---------------------------------------------------------------------------
00012664 0000                       Ani_Harp:	dc.w @h_extending-Ani_Harp
00012666 0000                       		dc.w @h_retracting-Ani_Harp
00012668 0000                       		dc.w @v_extending-Ani_Harp
0001266A 0000                       		dc.w @v_retracting-Ani_Harp
0001266C 0301 02FC                  @h_extending:	dc.b 3,	1, 2, afRoutine
00012670 0301 00FC                  @h_retracting:	dc.b 3,	1, 0, afRoutine
00012674 0304 05FC                  @v_extending:	dc.b 3,	4, 5, afRoutine
00012678 0304 03FC                  @v_retracting:	dc.b 3,	4, 3, afRoutine
0001267C                            		even
0001267C                            		even
0001267C                            Map_Harp:	include	"_maps\Harpoon.asm"
0001267C                            ; ---------------------------------------------------------------------------
0001267C                            ; Sprite mappings - harpoon (LZ)
0001267C                            ; ---------------------------------------------------------------------------
0001267C                            Map_Harp_internal:
0001267C 0000                       		dc.w @h_retracted-Map_Harp_internal
0001267E 0000                       		dc.w @h_middle-Map_Harp_internal
00012680 0000                       		dc.w @h_extended-Map_Harp_internal
00012682 0000                       		dc.w @v_retracted-Map_Harp_internal
00012684 0000                       		dc.w @v_middle-Map_Harp_internal
00012686 0000                       		dc.w @v_extended-Map_Harp_internal
00012688 01                         @h_retracted:	dc.b 1
00012689 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0001268E 01                         @h_middle:	dc.b 1
0001268F FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00012694 02                         @h_extended:	dc.b 2
00012695 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
0001269A FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
0001269F 01                         @v_retracted:	dc.b 1
000126A0 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000126A5 01                         @v_middle:	dc.b 1
000126A6 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000126AB 02                         @v_extended:	dc.b 2
000126AC D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000126B1 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000126B6                            		even
000126B6                            		even
000126B6                            		include	"_incObj\61 LZ Blocks.asm"
000126B6                            ; ---------------------------------------------------------------------------
000126B6                            ; Object 61 - blocks (LZ)
000126B6                            ; ---------------------------------------------------------------------------
000126B6                            

000126B6                            LabyrinthBlock:
000126B6 7000                       		moveq	#0,d0
000126B8 1028 0024                  		move.b	obRoutine(a0),d0
000126BC 323B 0000                  		move.w	LBlk_Index(pc,d0.w),d1
000126C0 4EFB 1000                  		jmp	LBlk_Index(pc,d1.w)
000126C4                            ; ===========================================================================
000126C4 0000                       LBlk_Index:	dc.w LBlk_Main-LBlk_Index
000126C6 0000                       		dc.w LBlk_Action-LBlk_Index
000126C8                            

000126C8 1010                       LBlk_Var:	dc.b $10, $10		; width, height
000126CA 200C                       		dc.b $20, $C
000126CC 1010                       		dc.b $10, $10
000126CE 1010                       		dc.b $10, $10
000126D0                            

000126D0 =00000016                  lblk_height:	equ $16		; block height
000126D0 =00000034                  lblk_origX:	equ $34		; original x-axis position
000126D0 =00000030                  lblk_origY:	equ $30		; original y-axis position
000126D0 =00000036                  lblk_time:	equ $36		; time delay for block movement
000126D0 =00000038                  lblk_untouched:	equ $38		; flag block as untouched
000126D0                            ; ===========================================================================
000126D0                            

000126D0                            LBlk_Main:	; Routine 0
000126D0 5428 0024                  		addq.b	#2,obRoutine(a0)
000126D4 217C 0000 0000 0004        		move.l	#Map_LBlock,obMap(a0)
000126DC 317C 43E6 0002             		move.w	#$43E6,obGfx(a0)
000126E2 117C 0004 0001             		move.b	#4,obRender(a0)
000126E8 117C 0003 0018             		move.b	#3,obPriority(a0)
000126EE 7000                       		moveq	#0,d0
000126F0 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
000126F4 E648                       		lsr.w	#3,d0		; read only the 1st digit
000126F6 0240 000E                  		andi.w	#$E,d0
000126FA 45FB 00CC                  		lea	LBlk_Var(pc,d0.w),a2
000126FE 115A 0019                  		move.b	(a2)+,obActWid(a0) ; set width
00012702 1152 0016                  		move.b	(a2),lblk_height(a0) ; set height
00012706 E248                       		lsr.w	#1,d0
00012708 1140 001A                  		move.b	d0,obFrame(a0)
0001270C 3168 0008 0034             		move.w	obX(a0),lblk_origX(a0)
00012712 3168 000C 0030             		move.w	obY(a0),lblk_origY(a0)
00012718 1028 0028                  		move.b	obSubtype(a0),d0 ; get block type
0001271C 0200 000F                  		andi.b	#$F,d0		; read only the 2nd digit
00012720 6700                       		beq.s	LBlk_Action	; branch if 0
00012722 0C00 0007                  		cmpi.b	#7,d0
00012726 6700                       		beq.s	LBlk_Action	; branch if 7
00012728 117C 0001 0038             		move.b	#1,lblk_untouched(a0)
0001272E                            

0001272E                            LBlk_Action:	; Routine 2
0001272E 3F28 0008                  		move.w	obX(a0),-(sp)
00012732 7000                       		moveq	#0,d0
00012734 1028 0028                  		move.b	obSubtype(a0),d0
00012738 0240 000F                  		andi.w	#$F,d0
0001273C D040                       		add.w	d0,d0
0001273E 323B 0000                  		move.w	@index(pc,d0.w),d1
00012742 4EBB 1000                  		jsr	@index(pc,d1.w)
00012746 381F                       		move.w	(sp)+,d4
00012748 4A28 0001                  		tst.b	obRender(a0)
0001274C 6A00                       		bpl.s	@chkdel
0001274E 7200                       		moveq	#0,d1
00012750 1228 0019                  		move.b	obActWid(a0),d1
00012754 0641 000B                  		addi.w	#$B,d1
00012758 7400                       		moveq	#0,d2
0001275A 1428 0016                  		move.b	lblk_height(a0),d2
0001275E 3602                       		move.w	d2,d3
00012760 5243                       		addq.w	#1,d3
00012762 6100 D90C                  		bsr.w	SolidObject
00012766 1144 003F                  		move.b	d4,$3F(a0)
0001276A 6100 0000                  		bsr.w	loc_12180
0001276E                            

0001276E                            @chkdel:
0001278C 6000 B512                  		bra.w	DisplaySprite
00012790                            ; ===========================================================================
00012790 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00012794 0000 0000                  		dc.w @type02-@index, @type03-@index
00012798 0000 0000                  		dc.w @type04-@index, @type05-@index
0001279C 0000 0000                  		dc.w @type06-@index, @type07-@index
000127A0                            ; ===========================================================================
000127A0                            

000127A0                            @type00:
000127A0 4E75                       		rts	
000127A2                            ; ===========================================================================
000127A2                            

000127A2                            @type01:
000127A2                            @type03:
000127A2 4A68 0036                  		tst.w	lblk_time(a0)	; does time remain?
000127A6 6600                       		bne.s	@wait01		; if yes, branch
000127A8 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on the object?
000127AE 6700                       		beq.s	@donothing01	; if not, branch
000127B0 317C 001E 0036             		move.w	#30,lblk_time(a0) ; wait for half second
000127B6                            

000127B6                            	@donothing01:
000127B6 4E75                       		rts	
000127B8                            ; ===========================================================================
000127B8                            

000127B8                            	@wait01:
000127B8 5368 0036                  		subq.w	#1,lblk_time(a0); decrement waiting time
000127BC 66F8                       		bne.s	@donothing01	; if time remains, branch
000127BE 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type02 or @type04
000127C2 4228 0038                  		clr.b	lblk_untouched(a0) ; flag block as touched
000127C6 4E75                       		rts	
000127C8                            ; ===========================================================================
000127C8                            

000127C8                            @type02:
000127C8                            @type06:
000127C8 6100 B4B0                  		bsr.w	SpeedToPos
000127CC 5068 0012                  		addq.w	#8,obVelY(a0)	; make block fall
000127D0 6100 0000                  		bsr.w	ObjFloorDist
000127D4 4A41                       		tst.w	d1		; has block hit the floor?
000127D6 6A00 0000                  		bpl.w	@nofloor02	; if not, branch
000127DA 5241                       		addq.w	#1,d1
000127DC D368 000C                  		add.w	d1,obY(a0)
000127E0 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the floor
000127E4 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
000127E8                            

000127E8                            	@nofloor02:
000127E8 4E75                       		rts	
000127EA                            ; ===========================================================================
000127EA                            

000127EA                            @type04:
000127EA 6100 B48E                  		bsr.w	SpeedToPos
000127EE 5168 0012                  		subq.w	#8,obVelY(a0)	; make block rise
000127F2 6100 0000                  		bsr.w	ObjHitCeiling
000127F6 4A41                       		tst.w	d1		; has block hit the ceiling?
000127F8 6A00 0000                  		bpl.w	@noceiling04	; if not, branch
000127FC 9368 000C                  		sub.w	d1,obY(a0)
00012800 4268 0012                  		clr.w	obVelY(a0)	; stop when it touches the ceiling
00012804 4228 0028                  		clr.b	obSubtype(a0)	; set type to 00 (non-moving type)
00012808                            

00012808                            	@noceiling04:
00012808 4E75                       		rts	
0001280A                            ; ===========================================================================
0001280A                            

0001280A                            @type05:
0001280A 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	block?
00012810 6600                       		bne.s	@notouch05	; if not, branch
00012812 5228 0028                  		addq.b	#1,obSubtype(a0) ; goto @type06
00012816 4228 0038                  		clr.b	lblk_untouched(a0)
0001281A                            

0001281A                            	@notouch05:
0001281A 4E75                       		rts	
0001281C                            ; ===========================================================================
0001281C                            

0001281C                            @type07:
0001281C 3038 F646                  		move.w	(v_waterpos1).w,d0
00012820 9068 000C                  		sub.w	obY(a0),d0	; is block level with water?
00012824 6700                       		beq.s	@stop07		; if yes, branch
00012826 6400                       		bcc.s	@fall07		; branch if block is above water
00012828 0C40 FFFE                  		cmpi.w	#-2,d0
0001282C 6C00                       		bge.s	@loc_1214E
0001282E 70FE                       		moveq	#-2,d0
00012830                            

00012830                            	@loc_1214E:
00012830 D168 000C                  		add.w	d0,obY(a0)	; make the block rise with water level
00012834 6100 0000                  		bsr.w	ObjHitCeiling
00012838 4A41                       		tst.w	d1		; has block hit the ceiling?
0001283A 6A00 0000                  		bpl.w	@noceiling07	; if not, branch
0001283E 9368 000C                  		sub.w	d1,obY(a0)	; stop block
00012842                            

00012842                            	@noceiling07:
00012842 4E75                       		rts	
00012844                            ; ===========================================================================
00012844                            

00012844                            @fall07:
00012844 0C40 0002                  		cmpi.w	#2,d0
00012848 6F00                       		ble.s	@loc_1216A
0001284A 7002                       		moveq	#2,d0
0001284C                            

0001284C                            	@loc_1216A:
0001284C D168 000C                  		add.w	d0,obY(a0)	; make the block sink with water level
00012850 6100 0000                  		bsr.w	ObjFloorDist
00012854 4A41                       		tst.w	d1
00012856 6A00 0000                  		bpl.w	@stop07
0001285A 5241                       		addq.w	#1,d1
0001285C D368 000C                  		add.w	d1,obY(a0)
00012860                            

00012860                            	@stop07:
00012860 4E75                       		rts	
00012862                            ; ===========================================================================
00012862                            

00012862                            loc_12180:
00012862 4A28 0038                  		tst.b	lblk_untouched(a0) ; has block been stood on or touched?
00012866 6700                       		beq.s	locret_121C0	; if yes, branch
00012868 0828 0003 0022             		btst	#3,obStatus(a0)	; is Sonic standing on it now?
0001286E 6600                       		bne.s	loc_1219A	; if yes, branch
00012870 4A28 003E                  		tst.b	$3E(a0)
00012874 6700                       		beq.s	locret_121C0
00012876 5928 003E                  		subq.b	#4,$3E(a0)
0001287A 6000                       		bra.s	loc_121A6
0001287C                            ; ===========================================================================
0001287C                            

0001287C                            loc_1219A:
0001287C 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012882 6700                       		beq.s	locret_121C0
00012884 5828 003E                  		addq.b	#4,$3E(a0)
00012888                            

00012888                            loc_121A6:
00012888 1028 003E                  		move.b	$3E(a0),d0
0001288C 4EB9 0000 29E0             		jsr	(CalcSine).l
00012892 323C 0400                  		move.w	#$400,d1
00012896 C1C1                       		muls.w	d1,d0
00012898 4840                       		swap	d0
0001289A D068 0030                  		add.w	lblk_origY(a0),d0
0001289E 3140 000C                  		move.w	d0,obY(a0)
000128A2                            

000128A2                            locret_121C0:
000128A2 4E75                       		rts	
000128A2 4E75                       		rts	
000128A4                            Map_LBlock:	include	"_maps\LZ Blocks.asm"
000128A4                            ; ---------------------------------------------------------------------------
000128A4                            ; Sprite mappings - blocks (LZ)
000128A4                            ; ---------------------------------------------------------------------------
000128A4                            Map_LBlock_internal:
000128A4 0000                       		dc.w @sinkblock-Map_LBlock_internal
000128A6 0000                       		dc.w @riseplatform-Map_LBlock_internal
000128A8 0000                       		dc.w @cork-Map_LBlock_internal
000128AA 0000                       		dc.w @block-Map_LBlock_internal
000128AC 01                         @sinkblock:	dc.b 1
000128AD F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0	; block, sinks when stood on
000128B2 02                         @riseplatform:	dc.b 2
000128B3 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0 ; platform, rises when stood on
000128B8 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000128BD 01                         @cork:		dc.b 1
000128BE F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0 ; cork, floats on water
000128C3 01                         @block:		dc.b 1
000128C4 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0 ; block
000128CA 00                         		even
000128CA 00                         		even
000128CA                            		include	"_incObj\62 Gargoyle.asm"
000128CA                            ; ---------------------------------------------------------------------------
000128CA                            ; Object 62 - gargoyle head (LZ)
000128CA                            ; ---------------------------------------------------------------------------
000128CA                            

000128CA                            Gargoyle:
000128CA 7000                       		moveq	#0,d0
000128CC 1028 0024                  		move.b	obRoutine(a0),d0
000128D0 323B 0000                  		move.w	Gar_Index(pc,d0.w),d1
000128D4 4EBB 1000                  		jsr	Gar_Index(pc,d1.w)
000128D8 6000 D46C                  		bra.w	RememberState
000128DC                            ; ===========================================================================
000128DC 0000                       Gar_Index:	dc.w Gar_Main-Gar_Index
000128DE 0000                       		dc.w Gar_MakeFire-Gar_Index
000128E0 0000                       		dc.w Gar_FireBall-Gar_Index
000128E2 0000                       		dc.w Gar_AniFire-Gar_Index
000128E4                            

000128E4 1E3C 5A78 96B4 D2F0        Gar_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
000128EC                            ; ===========================================================================
000128EC                            

000128EC                            Gar_Main:	; Routine 0
000128EC 5428 0024                  		addq.b	#2,obRoutine(a0)
000128F0 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
000128F8 317C 42E9 0002             		move.w	#$42E9,obGfx(a0)
000128FE 0028 0004 0001             		ori.b	#4,obRender(a0)
00012904 117C 0003 0018             		move.b	#3,obPriority(a0)
0001290A 117C 0010 0019             		move.b	#$10,obActWid(a0)
00012910 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00012914 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012918 117B 00CA 001F             		move.b	Gar_SpitRate(pc,d0.w),obDelayAni(a0) ; set fireball spit rate
0001291E 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00012924 0228 000F 0028             		andi.b	#$F,obSubtype(a0)
0001292A                            

0001292A                            Gar_MakeFire:	; Routine 2
0001292A 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement timer
0001292E 6600                       		bne.s	@nofire		; if time remains, branch
00012930                            

00012930 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0) ; reset timer
00012936 6100 B5E2                  		bsr.w	ChkObjectVisible
0001293A 6600                       		bne.s	@nofire
0001293C 6100 B7EA                  		bsr.w	FindFreeObj
00012940 6600                       		bne.s	@nofire
00012942 137C 0062 0000             		move.b	#id_Gargoyle,0(a1) ; load fireball object
00012948 5829 0024                  		addq.b	#4,obRoutine(a1) ; use Gar_FireBall routine
0001294C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012952 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012958 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0001295E 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00012964                            

00012964                            	@nofire:
00012964 4E75                       		rts	
00012966                            ; ===========================================================================
00012966                            

00012966                            Gar_FireBall:	; Routine 4
00012966 5428 0024                  		addq.b	#2,obRoutine(a0)
0001296A 117C 0008 0016             		move.b	#8,obHeight(a0)
00012970 117C 0008 0017             		move.b	#8,obWidth(a0)
00012976 217C 0000 0000 0004        		move.l	#Map_Gar,obMap(a0)
0001297E 317C 02E9 0002             		move.w	#$2E9,obGfx(a0)
00012984 0028 0004 0001             		ori.b	#4,obRender(a0)
0001298A 117C 0004 0018             		move.b	#4,obPriority(a0)
00012990 117C 0098 0020             		move.b	#$98,obColType(a0)
00012996 117C 0008 0019             		move.b	#8,obActWid(a0)
0001299C 117C 0002 001A             		move.b	#2,obFrame(a0)
000129A2 5068 000C                  		addq.w	#8,obY(a0)
000129A6 317C 0200 0010             		move.w	#$200,obVelX(a0)
000129AC 0828 0000 0022             		btst	#0,obStatus(a0)	; is gargoyle facing left?
000129B2 6600                       		bne.s	@noflip		; if not, branch
000129B4 4468 0010                  		neg.w	obVelX(a0)
000129B8                            

000129B8                            	@noflip:
000129B8 303C 0000                  		move.w	#sfx_Fireball,d0
000129BC 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play lava ball sound
000129C2                            

000129C2                            Gar_AniFire:	; Routine 6
000129C2 1038 FE05                  		move.b	(v_framebyte).w,d0
000129C6 0200 0007                  		andi.b	#7,d0
000129CA 6600                       		bne.s	@nochg
000129CC 0868 0000 001A             		bchg	#0,obFrame(a0)	; change every 8 frames
000129D2                            

000129D2                            	@nochg:
000129D2 6100 B2A6                  		bsr.w	SpeedToPos
000129D6 0828 0000 0022             		btst	#0,obStatus(a0) ; is fireball moving left?
000129DC 6600                       		bne.s	@isright	; if not, branch
000129DE 76F8                       		moveq	#-8,d3
000129E0 6100 0000                  		bsr.w	ObjHitWallLeft
000129E4 4A41                       		tst.w	d1
000129E6 6B00 B2F4                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
000129EA 4E75                       		rts	
000129EC                            

000129EC                            	@isright:
000129EC 7608                       		moveq	#8,d3
000129EE 6100 0000                  		bsr.w	ObjHitWallRight
000129F2 4A41                       		tst.w	d1
000129F4 6B00 B2E6                  		bmi.w	DeleteObject
000129F8 4E75                       		rts	
000129F8 4E75                       		rts	
000129FA                            Map_Gar:	include	"_maps\Gargoyle.asm"
000129FA                            ; ---------------------------------------------------------------------------
000129FA                            ; Sprite mappings - gargoyle head (LZ)
000129FA                            ; ---------------------------------------------------------------------------
000129FA                            Map_Gar_internal:
000129FA 0000                       		dc.w @head-Map_Gar_internal
000129FC 0000                       		dc.w @head-Map_Gar_internal
000129FE 0000                       		dc.w @fireball1-Map_Gar_internal
00012A00 0000                       		dc.w @fireball2-Map_Gar_internal
00012A02 03                         @head:		dc.b 3
00012A03 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012A08 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012A0D 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012A12 01                         @fireball1:	dc.b 1
00012A13 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012A18 01                         @fireball2:	dc.b 1
00012A19 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012A1E                            		even
00012A1E                            		even
00012A1E                            		include	"_incObj\63 LZ Conveyor.asm"
00012A1E                            ; ---------------------------------------------------------------------------
00012A1E                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012A1E                            ; ---------------------------------------------------------------------------
00012A1E                            

00012A1E                            LabyrinthConvey:
00012A1E 7000                       		moveq	#0,d0
00012A20 1028 0024                  		move.b	obRoutine(a0),d0
00012A24 323B 0000                  		move.w	LCon_Index(pc,d0.w),d1
00012A28 4EBB 1000                  		jsr	LCon_Index(pc,d1.w)
00012A48                            

00012A48                            LCon_Display:
00012A48 6000 B256                  		bra.w	DisplaySprite
00012A4C                            ; ===========================================================================
00012A4C                            

00012A4C                            loc_1236A:
00012A4C 0C38 0002 FE11             		cmpi.b	#2,(v_act).w
00012A52 6600                       		bne.s	loc_12378
00012A54 0C40 FF80                  		cmpi.w	#-$80,d0
00012A58 64EE                       		bcc.s	LCon_Display
00012A5A                            

00012A5A                            loc_12378:
00012A5A 1028 002F                  		move.b	$2F(a0),d0
00012A5E 6A00 B27C                  		bpl.w	DeleteObject
00012A62 0240 007F                  		andi.w	#$7F,d0
00012A66 45F8 F7C1                  		lea	(v_obj63).w,a2
00012A6A 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012A70 6000 B26A                  		bra.w	DeleteObject
00012A74                            ; ===========================================================================
00012A74 0000                       LCon_Index:	dc.w LCon_Main-LCon_Index
00012A76 0000                       		dc.w loc_124B2-LCon_Index
00012A78 0000                       		dc.w loc_124C2-LCon_Index
00012A7A 0000                       		dc.w loc_124DE-LCon_Index
00012A7C                            ; ===========================================================================
00012A7C                            

00012A7C                            LCon_Main:	; Routine 0
00012A7C 1028 0028                  		move.b	obSubtype(a0),d0
00012A80 6B00 0000                  		bmi.w	loc_12460
00012A84 5428 0024                  		addq.b	#2,obRoutine(a0)
00012A88 217C 0000 0000 0004        		move.l	#Map_LConv,obMap(a0)
00012A90 317C 43F6 0002             		move.w	#$43F6,obGfx(a0)
00012A96 0028 0004 0001             		ori.b	#4,obRender(a0)
00012A9C 117C 0010 0019             		move.b	#$10,obActWid(a0)
00012AA2 117C 0004 0018             		move.b	#4,obPriority(a0)
00012AA8 0C28 007F 0028             		cmpi.b	#$7F,obSubtype(a0)
00012AAE 6600                       		bne.s	loc_123E2
00012AB0 5828 0024                  		addq.b	#4,obRoutine(a0)
00012AB4 317C 03F6 0002             		move.w	#$3F6,obGfx(a0)
00012ABA 117C 0001 0018             		move.b	#1,obPriority(a0)
00012AC0 6000 0000                  		bra.w	loc_124DE
00012AC4                            ; ===========================================================================
00012AC4                            

00012AC4                            loc_123E2:
00012AC4 117C 0004 001A             		move.b	#4,obFrame(a0)
00012ACA 7000                       		moveq	#0,d0
00012ACC 1028 0028                  		move.b	obSubtype(a0),d0
00012AD0 3200                       		move.w	d0,d1
00012AD2 E648                       		lsr.w	#3,d0
00012AD4 0240 001E                  		andi.w	#$1E,d0
00012AD8 45FA 0000                  		lea	LCon_Data(pc),a2
00012ADC D4F2 0000                  		adda.w	(a2,d0.w),a2
00012AE0 315A 0038                  		move.w	(a2)+,$38(a0)
00012AE4 315A 0030                  		move.w	(a2)+,$30(a0)
00012AE8 214A 003C                  		move.l	a2,$3C(a0)
00012AEC 0241 000F                  		andi.w	#$F,d1
00012AF0 E549                       		lsl.w	#2,d1
00012AF2 1141 0038                  		move.b	d1,$38(a0)
00012AF6 117C 0004 003A             		move.b	#4,$3A(a0)
00012AFC 4A38 F7C0                  		tst.b	(f_conveyrev).w
00012B00 6700                       		beq.s	loc_1244C
00012B02 117C 0001 003B             		move.b	#1,$3B(a0)
00012B08 4428 003A                  		neg.b	$3A(a0)
00012B0C 7200                       		moveq	#0,d1
00012B0E 1228 0038                  		move.b	$38(a0),d1
00012B12 D228 003A                  		add.b	$3A(a0),d1
00012B16 B228 0039                  		cmp.b	$39(a0),d1
00012B1A 6500                       		bcs.s	loc_12448
00012B1C 1001                       		move.b	d1,d0
00012B1E 7200                       		moveq	#0,d1
00012B20 4A00                       		tst.b	d0
00012B22 6A00                       		bpl.s	loc_12448
00012B24 1228 0039                  		move.b	$39(a0),d1
00012B28 5901                       		subq.b	#4,d1
00012B2A                            

00012B2A                            loc_12448:
00012B2A 1141 0038                  		move.b	d1,$38(a0)
00012B2E                            

00012B2E                            loc_1244C:
00012B2E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012B34 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012B3A 6100 0000                  		bsr.w	LCon_ChangeDir
00012B3E 6000 0000                  		bra.w	loc_124B2
00012B42                            ; ===========================================================================
00012B42                            

00012B42                            loc_12460:
00012B42 1140 002F                  		move.b	d0,$2F(a0)
00012B46 0240 007F                  		andi.w	#$7F,d0
00012B4A 45F8 F7C1                  		lea	(v_obj63).w,a2
00012B4E 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012B54 6600 B186                  		bne.w	DeleteObject
00012B58 D040                       		add.w	d0,d0
00012B5A 0240 001E                  		andi.w	#$1E,d0
00012B5E 0640 0000                  		addi.w	#ObjPosLZPlatform_Index-ObjPos_Index,d0
00012B62 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012B68 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012B6C 321A                       		move.w	(a2)+,d1
00012B6E 2248                       		movea.l	a0,a1
00012B70 6000                       		bra.s	LCon_MakePtfms
00012B72                            ; ===========================================================================
00012B72                            

00012B72                            LCon_Loop:
00012B72 6100 B5B4                  		bsr.w	FindFreeObj
00012B76 6600                       		bne.s	loc_124AA
00012B78                            

00012B78                            LCon_MakePtfms:
00012B78 137C 0063 0000             		move.b	#id_LabyrinthConvey,0(a1)
00012B7E 335A 0008                  		move.w	(a2)+,obX(a1)
00012B82 335A 000C                  		move.w	(a2)+,obY(a1)
00012B86 301A                       		move.w	(a2)+,d0
00012B88 1340 0028                  		move.b	d0,obSubtype(a1)
00012B8C                            

00012B8C                            loc_124AA:
00012B8C 51C9 FFE4                  		dbf	d1,LCon_Loop
00012B90                            

00012B90 588F                       		addq.l	#4,sp
00012B92 4E75                       		rts	
00012B94                            ; ===========================================================================
00012B94                            

00012B94                            loc_124B2:	; Routine 2
00012B94 7200                       		moveq	#0,d1
00012B96 1228 0019                  		move.b	obActWid(a0),d1
00012B9A 4EB9 0000 7AD8             		jsr	(PlatformObject).l
00012BA0 6000 0000                  		bra.w	sub_12502
00012BA4                            ; ===========================================================================
00012BA4                            

00012BA4                            loc_124C2:	; Routine 4
00012BA4 7200                       		moveq	#0,d1
00012BA6 1228 0019                  		move.b	obActWid(a0),d1
00012BAA 4EB9 0000 7C4C             		jsr	(ExitPlatform).l
00012BB0 3F28 0008                  		move.w	obX(a0),-(sp)
00012BB4 6100 0000                  		bsr.w	sub_12502
00012BB8 341F                       		move.w	(sp)+,d2
00012BBA 4EF9 0000 81BA             		jmp	(MvSonicOnPtfm2).l
00012BC0                            ; ===========================================================================
00012BC0                            

00012BC0                            loc_124DE:	; Routine 6
00012BC0 3038 FE04                  		move.w	(v_framecount).w,d0
00012BC4 0240 0003                  		andi.w	#3,d0
00012BC8 6600                       		bne.s	loc_124FC
00012BCA 7201                       		moveq	#1,d1
00012BCC 4A38 F7C0                  		tst.b	(f_conveyrev).w
00012BD0 6700                       		beq.s	loc_124F2
00012BD2 4401                       		neg.b	d1
00012BD4                            

00012BD4                            loc_124F2:
00012BD4 D328 001A                  		add.b	d1,obFrame(a0)
00012BD8 0228 0003 001A             		andi.b	#3,obFrame(a0)
00012BDE                            

00012BDE                            loc_124FC:
00012BDE 588F                       		addq.l	#4,sp
00012BE0 6000 D164                  		bra.w	RememberState
00012BE4                            

00012BE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012BE4                            

00012BE4                            

00012BE4                            sub_12502:
00012BE4 4A38 F7EE                  		tst.b	(f_switch+$E).w
00012BE8 6700                       		beq.s	loc_12520
00012BEA 4A28 003B                  		tst.b	$3B(a0)
00012BEE 6600                       		bne.s	loc_12520
00012BF0 117C 0001 003B             		move.b	#1,$3B(a0)
00012BF6 11FC 0001 F7C0             		move.b	#1,(f_conveyrev).w
00012BFC 4428 003A                  		neg.b	$3A(a0)
00012C00 6000                       		bra.s	loc_12534
00012C02                            ; ===========================================================================
00012C02                            

00012C02                            loc_12520:
00012C02 3028 0008                  		move.w	obX(a0),d0
00012C06 B068 0034                  		cmp.w	$34(a0),d0
00012C0A 6600                       		bne.s	loc_1256A
00012C0C 3028 000C                  		move.w	obY(a0),d0
00012C10 B068 0036                  		cmp.w	$36(a0),d0
00012C14 6600                       		bne.s	loc_1256A
00012C16                            

00012C16                            loc_12534:
00012C16 7200                       		moveq	#0,d1
00012C18 1228 0038                  		move.b	$38(a0),d1
00012C1C D228 003A                  		add.b	$3A(a0),d1
00012C20 B228 0039                  		cmp.b	$39(a0),d1
00012C24 6500                       		bcs.s	loc_12552
00012C26 1001                       		move.b	d1,d0
00012C28 7200                       		moveq	#0,d1
00012C2A 4A00                       		tst.b	d0
00012C2C 6A00                       		bpl.s	loc_12552
00012C2E 1228 0039                  		move.b	$39(a0),d1
00012C32 5901                       		subq.b	#4,d1
00012C34                            

00012C34                            loc_12552:
00012C34 1141 0038                  		move.b	d1,$38(a0)
00012C38 2268 003C                  		movea.l	$3C(a0),a1
00012C3C 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012C42 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012C48 6100 0000                  		bsr.w	LCon_ChangeDir
00012C4C                            

00012C4C                            loc_1256A:
00012C4C 6100 B02C                  		bsr.w	SpeedToPos
00012C50 4E75                       		rts	
00012C52                            ; End of function sub_12502
00012C52                            

00012C52                            

00012C52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012C52                            

00012C52                            

00012C52                            LCon_ChangeDir:
00012C52 7000                       		moveq	#0,d0
00012C54 343C FF00                  		move.w	#-$100,d2
00012C58 3028 0008                  		move.w	obX(a0),d0
00012C5C 9068 0034                  		sub.w	$34(a0),d0
00012C60 6400                       		bcc.s	loc_12584
00012C62 4440                       		neg.w	d0
00012C64 4442                       		neg.w	d2
00012C66                            

00012C66                            loc_12584:
00012C66 7200                       		moveq	#0,d1
00012C68 363C FF00                  		move.w	#-$100,d3
00012C6C 3228 000C                  		move.w	obY(a0),d1
00012C70 9268 0036                  		sub.w	$36(a0),d1
00012C74 6400                       		bcc.s	loc_12598
00012C76 4441                       		neg.w	d1
00012C78 4443                       		neg.w	d3
00012C7A                            

00012C7A                            loc_12598:
00012C7A B240                       		cmp.w	d0,d1
00012C7C 6500                       		bcs.s	loc_125C2
00012C7E 3028 0008                  		move.w	obX(a0),d0
00012C82 9068 0034                  		sub.w	$34(a0),d0
00012C86 6700                       		beq.s	loc_125AE
00012C88 48C0                       		ext.l	d0
00012C8A E180                       		asl.l	#8,d0
00012C8C 81C1                       		divs.w	d1,d0
00012C8E 4440                       		neg.w	d0
00012C90                            

00012C90                            loc_125AE:
00012C90 3140 0010                  		move.w	d0,obVelX(a0)
00012C94 3143 0012                  		move.w	d3,obVelY(a0)
00012C98 4840                       		swap	d0
00012C9A 3140 000A                  		move.w	d0,obX+2(a0)
00012C9E 4268 000E                  		clr.w	obY+2(a0)
00012CA2 4E75                       		rts	
00012CA4                            ; ===========================================================================
00012CA4                            

00012CA4                            loc_125C2:
00012CA4 3228 000C                  		move.w	obY(a0),d1
00012CA8 9268 0036                  		sub.w	$36(a0),d1
00012CAC 6700                       		beq.s	loc_125D4
00012CAE 48C1                       		ext.l	d1
00012CB0 E181                       		asl.l	#8,d1
00012CB2 83C0                       		divs.w	d0,d1
00012CB4 4441                       		neg.w	d1
00012CB6                            

00012CB6                            loc_125D4:
00012CB6 3141 0012                  		move.w	d1,obVelY(a0)
00012CBA 3142 0010                  		move.w	d2,obVelX(a0)
00012CBE 4841                       		swap	d1
00012CC0 3141 000E                  		move.w	d1,obY+2(a0)
00012CC4 4268 000A                  		clr.w	obX+2(a0)
00012CC8 4E75                       		rts	
00012CCA                            ; End of function LCon_ChangeDir
00012CCA                            

00012CCA                            ; ===========================================================================
00012CCA 0000                       LCon_Data:	dc.w word_125F4-LCon_Data
00012CCC 0000                       		dc.w word_12610-LCon_Data
00012CCE 0000                       		dc.w word_12628-LCon_Data
00012CD0 0000                       		dc.w word_1263C-LCon_Data
00012CD2 0000                       		dc.w word_12650-LCon_Data
00012CD4 0000                       		dc.w word_12668-LCon_Data
00012CD6 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012CE6 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012CF2 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012D02 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012D0A 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012D1E 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012D32 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012D4A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012D4A 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012D5E                            Map_LConv:	include	"_maps\LZ Conveyor.asm"
00012D5E                            ; ---------------------------------------------------------------------------
00012D5E                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012D5E                            ; ---------------------------------------------------------------------------
00012D5E                            Map_LConv_internal:
00012D5E 0000                       		dc.w @wheel1-Map_LConv_internal
00012D60 0000                       		dc.w @wheel2-Map_LConv_internal
00012D62 0000                       		dc.w @wheel3-Map_LConv_internal
00012D64 0000                       		dc.w @wheel4-Map_LConv_internal
00012D66 0000                       		dc.w @platform-Map_LConv_internal
00012D68 01                         @wheel1:	dc.b 1
00012D69 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012D6E 01                         @wheel2:	dc.b 1
00012D6F F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012D74 01                         @wheel3:	dc.b 1
00012D75 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012D7A 01                         @wheel4:	dc.b 1
00012D7B F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012D80 01                         @platform:	dc.b 1
00012D81 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012D86                            		even
00012D86                            		even
00012D86                            		include	"_incObj\64 Bubbles.asm"
00012D86                            ; ---------------------------------------------------------------------------
00012D86                            ; Object 64 - bubbles (LZ)
00012D86                            ; ---------------------------------------------------------------------------
00012D86                            

00012D86                            Bubble:
00012D86 7000                       		moveq	#0,d0
00012D88 1028 0024                  		move.b	obRoutine(a0),d0
00012D8C 323B 0000                  		move.w	Bub_Index(pc,d0.w),d1
00012D90 4EFB 1000                  		jmp	Bub_Index(pc,d1.w)
00012D94                            ; ===========================================================================
00012D94 0000                       Bub_Index:	dc.w Bub_Main-Bub_Index
00012D96 0000                       		dc.w Bub_Animate-Bub_Index
00012D98 0000                       		dc.w Bub_ChkWater-Bub_Index
00012D9A 0000                       		dc.w Bub_Display-Bub_Index
00012D9C 0000                       		dc.w Bub_Delete-Bub_Index
00012D9E 0000                       		dc.w Bub_BblMaker-Bub_Index
00012DA0                            

00012DA0 =0000002E                  bub_inhalable:	equ $2E		; flag set when bubble is collectable
00012DA0 =00000030                  bub_origX:	equ $30		; original x-axis position
00012DA0 =00000032                  bub_time:	equ $32		; time until next bubble spawn
00012DA0 =00000033                  bub_freq:	equ $33		; frequency of bubble spawn
00012DA0                            ; ===========================================================================
00012DA0                            

00012DA0                            Bub_Main:	; Routine 0
00012DA0 5428 0024                  		addq.b	#2,obRoutine(a0)
00012DA4 217C 0000 0000 0004        		move.l	#Map_Bub,obMap(a0)
00012DAC 317C 8348 0002             		move.w	#$8348,obGfx(a0)
00012DB2 117C 0084 0001             		move.b	#$84,obRender(a0)
00012DB8 117C 0010 0019             		move.b	#$10,obActWid(a0)
00012DBE 117C 0001 0018             		move.b	#1,obPriority(a0)
00012DC4 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
00012DC8 6A00                       		bpl.s	@bubble		; if type is $0-$7F, branch
00012DCA                            

00012DCA 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Bub_BblMaker next
00012DCE 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012DD2 1140 0032                  		move.b	d0,bub_time(a0)
00012DD6 1140 0033                  		move.b	d0,bub_freq(a0)	; set bubble frequency
00012DDA 117C 0006 001C             		move.b	#6,obAnim(a0)
00012DE0 6000 0000                  		bra.w	Bub_BblMaker
00012DE4                            ; ===========================================================================
00012DE4                            

00012DE4                            @bubble:
00012DE4 1140 001C                  		move.b	d0,obAnim(a0)
00012DE8 3168 0008 0030             		move.w	obX(a0),bub_origX(a0)
00012DEE 317C FF78 0012             		move.w	#-$88,obVelY(a0) ; float bubble upwards
00012DF4 4EB9 0000 29BA             		jsr	(RandomNumber).l
00012DFA 1140 0026                  		move.b	d0,obAngle(a0)
00012DFE                            

00012DFE                            Bub_Animate:	; Routine 2
00012DFE 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00012E04 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00012E0A 0C28 0006 001A             		cmpi.b	#6,obFrame(a0)	; is bubble full-size?
00012E10 6600                       		bne.s	Bub_ChkWater	; if not, branch
00012E12                            

00012E12 117C 0001 002E             		move.b	#1,bub_inhalable(a0) ; set "inhalable" flag
00012E18                            

00012E18                            Bub_ChkWater:	; Routine 4
00012E18 3038 F646                  		move.w	(v_waterpos1).w,d0
00012E1C B068 000C                  		cmp.w	obY(a0),d0	; is bubble underwater?
00012E20 6500                       		bcs.s	@wobble		; if yes, branch
00012E22                            

00012E22                            @burst:
00012E22 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto Bub_Display next
00012E28 5628 001C                  		addq.b	#3,obAnim(a0)	; run "bursting" animation
00012E2C 6000 0000                  		bra.w	Bub_Display
00012E30                            ; ===========================================================================
00012E30                            

00012E30                            @wobble:
00012E30 1028 0026                  		move.b	obAngle(a0),d0
00012E34 5228 0026                  		addq.b	#1,obAngle(a0)
00012E38 0240 007F                  		andi.w	#$7F,d0
00012E3C 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00012E42 1031 0000                  		move.b	(a1,d0.w),d0
00012E46 4880                       		ext.w	d0
00012E48 D068 0030                  		add.w	bub_origX(a0),d0
00012E4C 3140 0008                  		move.w	d0,obX(a0)	; change bubble's x-axis position
00012E50 4A28 002E                  		tst.b	bub_inhalable(a0)
00012E54 6700                       		beq.s	@display
00012E56 6100 0000                  		bsr.w	Bub_ChkSonic	; has Sonic touched the	bubble?
00012E5A 6700                       		beq.s	@display	; if not, branch
00012E5C                            

00012E5C 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012E60 303C 0000                  		move.w	#sfx_Bubble,d0
00012E64 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play collecting bubble sound
00012E6A 43F8 D000                  		lea	(v_player).w,a1
00012E6E 4269 0010                  		clr.w	obVelX(a1)
00012E72 4269 0012                  		clr.w	obVelY(a1)
00012E76 4269 0014                  		clr.w	obInertia(a1)	; stop Sonic
00012E7A 137C 0000 001C             		move.b	#id_GetAir,obAnim(a1) ; use bubble-collecting animation
00012E80 337C 0023 003E             		move.w	#$23,$3E(a1)
00012E86 137C 0000 003C             		move.b	#0,$3C(a1)
00012E8C 08A9 0005 0022             		bclr	#5,obStatus(a1)
00012E92 08A9 0004 0022             		bclr	#4,obStatus(a1)
00012E98 0829 0002 0022             		btst	#2,obStatus(a1)
00012E9E 6700 FF82                  		beq.w	@burst
00012EA2 08A9 0002 0022             		bclr	#2,obStatus(a1)
00012EA8 137C 0013 0016             		move.b	#$13,obHeight(a1)
00012EAE 137C 0009 0017             		move.b	#9,obWidth(a1)
00012EB4 5B69 000C                  		subq.w	#5,obY(a1)
00012EB8 6000 FF68                  		bra.w	@burst
00012EBC                            ; ===========================================================================
00012EBC                            

00012EBC                            @display:
00012EBC 6100 ADBC                  		bsr.w	SpeedToPos
00012EC0 4A28 0001                  		tst.b	obRender(a0)
00012EC4 6A00                       		bpl.s	@delete
00012EC6 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00012ECC                            

00012ECC                            	@delete:
00012ECC 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00012ED2                            ; ===========================================================================
00012ED2                            

00012ED2                            Bub_Display:	; Routine 6
00012ED2 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00012ED8 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00012EDE 4A28 0001                  		tst.b	obRender(a0)
00012EE2 6A00                       		bpl.s	@delete
00012EE4 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00012EEA                            

00012EEA                            	@delete:
00012EEA 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00012EF0                            ; ===========================================================================
00012EF0                            

00012EF0                            Bub_Delete:	; Routine 8
00012EF0 6000 ADEA                  		bra.w	DeleteObject
00012EF4                            ; ===========================================================================
00012EF4                            

00012EF4                            Bub_BblMaker:	; Routine $A
00012EF4 4A68 0036                  		tst.w	$36(a0)
00012EF8 6600                       		bne.s	@loc_12874
00012EFA 3038 F646                  		move.w	(v_waterpos1).w,d0
00012EFE B068 000C                  		cmp.w	obY(a0),d0	; is bubble maker underwater?
00012F02 6400 0000                  		bcc.w	@chkdel		; if not, branch
00012F06 4A28 0001                  		tst.b	obRender(a0)
00012F0A 6A00 0000                  		bpl.w	@chkdel
00012F0E 5368 0038                  		subq.w	#1,$38(a0)
00012F12 6A00 0000                  		bpl.w	@loc_12914
00012F16 317C 0001 0036             		move.w	#1,$36(a0)
00012F1C                            

00012F1C                            	@tryagain:
00012F1C 4EB9 0000 29BA             		jsr	(RandomNumber).l
00012F22 3200                       		move.w	d0,d1
00012F24 0240 0007                  		andi.w	#7,d0
00012F28 0C40 0006                  		cmpi.w	#6,d0		; random number over 6?
00012F2C 64EE                       		bcc.s	@tryagain	; if yes, branch
00012F2E                            

00012F2E 1140 0034                  		move.b	d0,$34(a0)
00012F32 0241 000C                  		andi.w	#$C,d1
00012F36 43F9 0000 0000             		lea	(Bub_BblTypes).l,a1
00012F3C D2C1                       		adda.w	d1,a1
00012F3E 2149 003C                  		move.l	a1,$3C(a0)
00012F42 5328 0032                  		subq.b	#1,bub_time(a0)
00012F46 6A00                       		bpl.s	@loc_12872
00012F48 1168 0033 0032             		move.b	bub_freq(a0),bub_time(a0)
00012F4E 08E8 0007 0036             		bset	#7,$36(a0)
00012F54                            

00012F54                            @loc_12872:
00012F54 6000                       		bra.s	@loc_1287C
00012F56                            ; ===========================================================================
00012F56                            

00012F56                            @loc_12874:
00012F56 5368 0038                  		subq.w	#1,$38(a0)
00012F5A 6A00 0000                  		bpl.w	@loc_12914
00012F5E                            

00012F5E                            @loc_1287C:
00012F5E 4EB9 0000 29BA             		jsr	(RandomNumber).l
00012F64 0240 001F                  		andi.w	#$1F,d0
00012F68 3140 0038                  		move.w	d0,$38(a0)
00012F6C 6100 B1BA                  		bsr.w	FindFreeObj
00012F70 6600                       		bne.s	@fail
00012F72 137C 0064 0000             		move.b	#id_Bubble,0(a1) ; load bubble object
00012F78 3368 0008 0008             		move.w	obX(a0),obX(a1)
00012F7E 4EB9 0000 29BA             		jsr	(RandomNumber).l
00012F84 0240 000F                  		andi.w	#$F,d0
00012F88 5140                       		subq.w	#8,d0
00012F8A D169 0008                  		add.w	d0,obX(a1)
00012F8E 3368 000C 000C             		move.w	obY(a0),obY(a1)
00012F94 7000                       		moveq	#0,d0
00012F96 1028 0034                  		move.b	$34(a0),d0
00012F9A 2468 003C                  		movea.l	$3C(a0),a2
00012F9E 1372 0000 0028             		move.b	(a2,d0.w),obSubtype(a1)
00012FA4 0828 0007 0036             		btst	#7,$36(a0)
00012FAA 6700                       		beq.s	@fail
00012FAC 4EB9 0000 29BA             		jsr	(RandomNumber).l
00012FB2 0240 0003                  		andi.w	#3,d0
00012FB6 6600                       		bne.s	@loc_buh
00012FB8 08E8 0006 0036             		bset	#6,$36(a0)
00012FBE 6600                       		bne.s	@fail
00012FC0 137C 0002 0028             		move.b	#2,obSubtype(a1)
00012FC6                            

00012FC6                            @loc_buh:
00012FC6 4A28 0034                  		tst.b	$34(a0)
00012FCA 6600                       		bne.s	@fail
00012FCC 08E8 0006 0036             		bset	#6,$36(a0)
00012FD2 6600                       		bne.s	@fail
00012FD4 137C 0002 0028             		move.b	#2,obSubtype(a1)
00012FDA                            

00012FDA                            	@fail:
00012FDA 5328 0034                  		subq.b	#1,$34(a0)
00012FDE 6A00                       		bpl.s	@loc_12914
00012FE0 4EB9 0000 29BA             		jsr	(RandomNumber).l
00012FE6 0240 007F                  		andi.w	#$7F,d0
00012FEA 0640 0080                  		addi.w	#$80,d0
00012FEE D168 0038                  		add.w	d0,$38(a0)
00012FF2 4268 0036                  		clr.w	$36(a0)
00012FF6                            

00012FF6                            @loc_12914:
00012FF6 43F9 0000 0000             		lea	(Ani_Bub).l,a1
00012FFC 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00013002                            

00013002                            @chkdel:
00013020 3038 F646                  		move.w	(v_waterpos1).w,d0
00013024 B068 000C                  		cmp.w	obY(a0),d0
00013028 6500 AC76                  		bcs.w	DisplaySprite
0001302C 4E75                       		rts	
0001302E                            ; ===========================================================================
0001302E                            ; bubble production sequence
0001302E                            

0001302E                            ; 0 = small bubble, 1 =	large bubble
0001302E                            

0001302E 0001 0000 0000 0100 0000+  Bub_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013040                            

00013040                            ; ===========================================================================
00013040                            

00013040                            Bub_ChkSonic:
00013040 4A38 F7C8                  		tst.b	(f_playerctrl).w
00013044 6B00                       		bmi.s	@loc_12998
00013046 43F8 D000                  		lea	(v_player).w,a1
0001304A 3029 0008                  		move.w	obX(a1),d0
0001304E 3228 0008                  		move.w	obX(a0),d1
00013052 0441 0010                  		subi.w	#$10,d1
00013056 B240                       		cmp.w	d0,d1
00013058 6400                       		bcc.s	@loc_12998
0001305A 0641 0020                  		addi.w	#$20,d1
0001305E B240                       		cmp.w	d0,d1
00013060 6500                       		bcs.s	@loc_12998
00013062 3029 000C                  		move.w	obY(a1),d0
00013066 3228 000C                  		move.w	obY(a0),d1
0001306A B240                       		cmp.w	d0,d1
0001306C 6400                       		bcc.s	@loc_12998
0001306E 0641 0010                  		addi.w	#$10,d1
00013072 B240                       		cmp.w	d0,d1
00013074 6500                       		bcs.s	@loc_12998
00013076 7001                       		moveq	#1,d0
00013078 4E75                       		rts	
0001307A                            ; ===========================================================================
0001307A                            

0001307A                            @loc_12998:
0001307A 7000                       		moveq	#0,d0
0001307C 4E75                       		rts	
0001307C 4E75                       		rts	
0001307E                            		include	"_anim\Bubbles.asm"
0001307E                            ; ---------------------------------------------------------------------------
0001307E                            ; Animation script - bubbles (LZ)
0001307E                            ; ---------------------------------------------------------------------------
0001307E 0000                       Ani_Bub:	dc.w @small-Ani_Bub
00013080 0000                       		dc.w @medium-Ani_Bub
00013082 0000                       		dc.w @large-Ani_Bub
00013084 0000                       		dc.w @incroutine-Ani_Bub
00013086 0000                       		dc.w @incroutine-Ani_Bub
00013088 0000                       		dc.w @burst-Ani_Bub
0001308A 0000                       		dc.w @bubmaker-Ani_Bub
0001308C 0E00 0102 FC               @small:		dc.b $E, 0, 1, 2, afRoutine ; small bubble forming
00013092 00                         		even
00013092 0E01 0203 04FC             @medium:	dc.b $E, 1, 2, 3, 4, afRoutine ; medium bubble forming
00013098 0E02 0304 0506 FC          @large:		dc.b $E, 2, 3, 4, 5, 6,	afRoutine ; full size bubble forming
000130A0 00                         		even
000130A0 04FC                       @incroutine:	dc.b 4,	afRoutine	; increment routine counter (no animation)
000130A2 0406 0708 FC               @burst:		dc.b 4,	6, 7, 8, afRoutine ; large bubble bursts
000130A8 00                         		even
000130A8 0F13 1415 FF               @bubmaker:	dc.b $F, $13, $14, $15,	afEnd ; bubble maker on the floor
000130AE 00                         		even
000130AE 00                         		even
000130AE                            Map_Bub:	include	"_maps\Bubbles.asm"
000130AE                            ; ---------------------------------------------------------------------------
000130AE                            ; Sprite mappings - bubbles (LZ)
000130AE                            ; ---------------------------------------------------------------------------
000130AE                            Map_Bub_internal:
000130AE 0000                       		dc.w @bubble1-Map_Bub_internal
000130B0 0000                       		dc.w @bubble2-Map_Bub_internal
000130B2 0000                       		dc.w @bubble3-Map_Bub_internal
000130B4 0000                       		dc.w @bubble4-Map_Bub_internal
000130B6 0000                       		dc.w @bubble5-Map_Bub_internal
000130B8 0000                       		dc.w @bubble6-Map_Bub_internal
000130BA 0000                       		dc.w @bubblefull-Map_Bub_internal
000130BC 0000                       		dc.w @burst1-Map_Bub_internal
000130BE 0000                       		dc.w @burst2-Map_Bub_internal
000130C0 0000                       		dc.w @zero_sm-Map_Bub_internal
000130C2 0000                       		dc.w @five_sm-Map_Bub_internal
000130C4 0000                       		dc.w @three_sm-Map_Bub_internal
000130C6 0000                       		dc.w @one_sm-Map_Bub_internal
000130C8 0000                       		dc.w @zero-Map_Bub_internal
000130CA 0000                       		dc.w @five-Map_Bub_internal
000130CC 0000                       		dc.w @four-Map_Bub_internal
000130CE 0000                       		dc.w @three-Map_Bub_internal
000130D0 0000                       		dc.w @two-Map_Bub_internal
000130D2 0000                       		dc.w @one-Map_Bub_internal
000130D4 0000                       		dc.w @bubmaker1-Map_Bub_internal
000130D6 0000                       		dc.w @bubmaker2-Map_Bub_internal
000130D8 0000                       		dc.w @bubmaker3-Map_Bub_internal
000130DA 0000                       		dc.w @blank-Map_Bub_internal
000130DC 01                         @bubble1:	dc.b 1
000130DD FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC	; bubbles, increasing in size
000130E2 01                         @bubble2:	dc.b 1
000130E3 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
000130E8 01                         @bubble3:	dc.b 1
000130E9 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
000130EE 01                         @bubble4:	dc.b 1
000130EF F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
000130F4 01                         @bubble5:	dc.b 1
000130F5 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
000130FA 01                         @bubble6:	dc.b 1
000130FB F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013100 01                         @bubblefull:	dc.b 1
00013101 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013106 04                         @burst1:	dc.b 4
00013107 F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0 ; large bubble bursting
0001310C F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013111 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013116 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001311B 04                         @burst2:	dc.b 4
0001311C F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013121 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013126 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001312B 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013130 01                         @zero_sm:	dc.b 1
00013131 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8 ; small, partially-formed countdown numbers
00013136 01                         @five_sm:	dc.b 1
00013137 F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
0001313C 01                         @three_sm:	dc.b 1
0001313D F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013142 01                         @one_sm:	dc.b 1
00013143 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013148 01                         @zero:		dc.b 1
00013149 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8 ; fully-formed countdown numbers
0001314E 01                         @five:		dc.b 1
0001314F F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013154 01                         @four:		dc.b 1
00013155 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001315A 01                         @three:		dc.b 1
0001315B F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013160 01                         @two:		dc.b 1
00013161 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013166 01                         @one:		dc.b 1
00013167 F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
0001316C 01                         @bubmaker1:	dc.b 1
0001316D F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013172 01                         @bubmaker2:	dc.b 1
00013173 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013178 01                         @bubmaker3:	dc.b 1
00013179 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
0001317E 00                         @blank:		dc.b 0
00013180 00                         		even
00013180 00                         		even
00013180                            		include	"_incObj\65 Waterfalls.asm"
00013180                            ; ---------------------------------------------------------------------------
00013180                            ; Object 65 - waterfalls (LZ)
00013180                            ; ---------------------------------------------------------------------------
00013180                            

00013180                            Waterfall:
00013180 7000                       		moveq	#0,d0
00013182 1028 0024                  		move.b	obRoutine(a0),d0
00013186 323B 0000                  		move.w	WFall_Index(pc,d0.w),d1
0001318A 4EFB 1000                  		jmp	WFall_Index(pc,d1.w)
0001318E                            ; ===========================================================================
0001318E 0000                       WFall_Index:	dc.w WFall_Main-WFall_Index
00013190 0000                       		dc.w WFall_Animate-WFall_Index
00013192 0000                       		dc.w WFall_ChkDel-WFall_Index
00013194 0000                       		dc.w WFall_OnWater-WFall_Index
00013196 0000                       		dc.w loc_12B36-WFall_Index
00013198                            ; ===========================================================================
00013198                            

00013198                            WFall_Main:	; Routine 0
00013198 5828 0024                  		addq.b	#4,obRoutine(a0)
0001319C 217C 0000 0000 0004        		move.l	#Map_WFall,obMap(a0)
000131A4 317C 4259 0002             		move.w	#$4259,obGfx(a0)
000131AA 0028 0004 0001             		ori.b	#4,obRender(a0)
000131B0 117C 0018 0019             		move.b	#$18,obActWid(a0)
000131B6 117C 0001 0018             		move.b	#1,obPriority(a0)
000131BC 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000131C0 6A00                       		bpl.s	@under80	; branch if $00-$7F
000131C2 08E8 0007 0002             		bset	#7,obGfx(a0)
000131C8                            

000131C8                            	@under80:
000131C8 0200 000F                  		andi.b	#$F,d0		; read only the	2nd digit
000131CC 1140 001A                  		move.b	d0,obFrame(a0)	; set frame number
000131D0 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
000131D4 6600                       		bne.s	WFall_ChkDel	; if not, branch
000131D6                            

000131D6 4228 0018                  		clr.b	obPriority(a0)	; object is in front of Sonic
000131DA 5528 0024                  		subq.b	#2,obRoutine(a0) ; goto WFall_Animate next
000131DE 0828 0006 0028             		btst	#6,obSubtype(a0) ; is object type $49 ?
000131E4 6700                       		beq.s	@not49		; if not, branch
000131E6                            

000131E6 117C 0006 0024             		move.b	#6,obRoutine(a0) ; goto WFall_OnWater next
000131EC                            

000131EC                            	@not49:
000131EC 0828 0005 0028             		btst	#5,obSubtype(a0) ; is object type $A9 ?
000131F2 6700                       		beq.s	WFall_Animate	; if not, branch
000131F4 117C 0008 0024             		move.b	#8,obRoutine(a0) ; goto loc_12B36 next
000131FA                            

000131FA                            WFall_Animate:	; Routine 2
000131FA 43F9 0000 0000             		lea	(Ani_WFall).l,a1
00013200 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00013206                            

00013206                            WFall_ChkDel:	; Routine 4
00013206 6000 CB3E                  		bra.w	RememberState
0001320A                            ; ===========================================================================
0001320A                            

0001320A                            WFall_OnWater:	; Routine 6
0001320A 3038 F646                  		move.w	(v_waterpos1).w,d0
0001320E 0440 0010                  		subi.w	#$10,d0
00013212 3140 000C                  		move.w	d0,obY(a0)	; match	object position	to water height
00013216 60E2                       		bra.s	WFall_Animate
00013218                            ; ===========================================================================
00013218                            

00013218                            loc_12B36:	; Routine 8
00013218 08A8 0007 0002             		bclr	#7,obGfx(a0)
0001321E 0C38 0007 A506             		cmpi.b	#7,(v_lvllayout+$106).w
00013224 6600                       		bne.s	@animate
00013226 08E8 0007 0002             		bset	#7,obGfx(a0)
0001322C                            

0001322C                            	@animate:
0001322C 60CC                       		bra.s	WFall_Animate
0001322C 60CC                       		bra.s	WFall_Animate
0001322E                            		include	"_anim\Waterfalls.asm"
0001322E                            ; ---------------------------------------------------------------------------
0001322E                            ; Animation script - waterfall (LZ)
0001322E                            ; ---------------------------------------------------------------------------
0001322E 0000                       Ani_WFall:	dc.w @splash-Ani_WFall
00013230 0509 0A0B FF               @splash:	dc.b 5,	9, $A, $B, afEnd
00013236 00                         		even
00013236 00                         		even
00013236                            Map_WFall	include	"_maps\Waterfalls.asm"
00013236                            ; ---------------------------------------------------------------------------
00013236                            ; Sprite mappings - waterfalls (LZ)
00013236                            ; ---------------------------------------------------------------------------
00013236                            Map_WFall_internal:
00013236 0000                       		dc.w @vertnarrow-Map_WFall_internal
00013238 0000                       		dc.w @cornerwide-Map_WFall_internal
0001323A 0000                       		dc.w @cornermedium-Map_WFall_internal
0001323C 0000                       		dc.w @cornernarrow-Map_WFall_internal
0001323E 0000                       		dc.w @cornermedium2-Map_WFall_internal
00013240 0000                       		dc.w @cornernarrow2-Map_WFall_internal
00013242 0000                       		dc.w @cornernarrow3-Map_WFall_internal
00013244 0000                       		dc.w @vertwide-Map_WFall_internal
00013246 0000                       		dc.w @diagonal-Map_WFall_internal
00013248 0000                       		dc.w @splash1-Map_WFall_internal
0001324A 0000                       		dc.w @splash2-Map_WFall_internal
0001324C 0000                       		dc.w @splash3-Map_WFall_internal
0001324E 01                         @vertnarrow:	dc.b 1
0001324F F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013254 02                         @cornerwide:	dc.b 2
00013255 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001325A 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
0001325F 02                         @cornermedium:	dc.b 2
00013260 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013265 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001326A 01                         @cornernarrow:	dc.b 1
0001326B F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013270 02                         @cornermedium2:	dc.b 2
00013271 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013276 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
0001327B 01                         @cornernarrow2:	dc.b 1
0001327C F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013281 01                         @cornernarrow3:	dc.b 1
00013282 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013287 01                         @vertwide:	dc.b 1
00013288 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
0001328D 02                         @diagonal:	dc.b 2
0001328E F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013293 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013298 02                         @splash1:	dc.b 2
00013299 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
0001329E F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000132A3 02                         @splash2:	dc.b 2
000132A4 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000132A9 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000132AE 02                         @splash3:	dc.b 2
000132AF F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000132B4 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000132BA 00                         		even
000132BA 00                         		even
000132BA                            

000132BA                            ; ===========================================================================
000132BA                            ; ---------------------------------------------------------------------------
000132BA                            ; Object 01 - Sonic
000132BA                            ; ---------------------------------------------------------------------------
000132BA                            

000132BA                            SonicPlayer:
000132BA 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
000132BE 6700                       		beq.s	Sonic_Normal	; if not, branch
000132C0 4EF9 0000 0000             		jmp	(DebugMode).l
000132C6                            ; ===========================================================================
000132C6                            

000132C6                            Sonic_Normal:
000132C6 7000                       		moveq	#0,d0
000132C8 1028 0024                  		move.b	obRoutine(a0),d0
000132CC 323B 0000                  		move.w	Sonic_Index(pc,d0.w),d1
000132D0 4EFB 1000                  		jmp	Sonic_Index(pc,d1.w)
000132D4                            ; ===========================================================================
000132D4 0000                       Sonic_Index:	dc.w Sonic_Main-Sonic_Index
000132D6 0000                       		dc.w Sonic_Control-Sonic_Index
000132D8 0000                       		dc.w Sonic_Hurt-Sonic_Index
000132DA 0000                       		dc.w Sonic_Death-Sonic_Index
000132DC 0000                       		dc.w Sonic_ResetLevel-Sonic_Index
000132DE                            ; ===========================================================================
000132DE                            

000132DE                            Sonic_Main:	; Routine 0
000132DE 5428 0024                  		addq.b	#2,obRoutine(a0)
000132E2 117C 0013 0016             		move.b	#$13,obHeight(a0)
000132E8 117C 0009 0017             		move.b	#9,obWidth(a0)
000132EE 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
000132F6 317C 0780 0002             		move.w	#$780,obGfx(a0)
000132FC 117C 0002 0018             		move.b	#2,obPriority(a0)
00013302 117C 0018 0019             		move.b	#$18,obActWid(a0)
00013308 117C 0004 0001             		move.b	#4,obRender(a0)
0001330E 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; Sonic's top speed
00013314 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; Sonic's acceleration
0001331A 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; Sonic's deceleration
00013320                            

00013320                            Sonic_Control:	; Routine 2
00013320 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug cheat enabled?
00013324 6700                       		beq.s	loc_12C58	; if not, branch
00013326 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001332C 6700                       		beq.s	loc_12C58	; if not, branch
0001332E 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring/item
00013334 4238 F7CC                  		clr.b	(f_lockctrl).w
00013338 4E75                       		rts	
0001333A                            ; ===========================================================================
0001333A                            

0001333A                            loc_12C58:
0001333A 4A38 F7CC                  		tst.b	(f_lockctrl).w	; are controls locked?
0001333E 6600                       		bne.s	loc_12C64	; if yes, branch
00013340 31F8 F604 F602             		move.w	(v_jpadhold1).w,(v_jpadhold2).w ; enable joypad control
00013346                            

00013346                            loc_12C64:
00013346 0838 0000 F7C8             		btst	#0,(f_playerctrl).w ; are controls locked?
0001334C 6600                       		bne.s	loc_12C7E	; if yes, branch
0001334E 7000                       		moveq	#0,d0
00013350 1028 0022                  		move.b	obStatus(a0),d0
00013354 0240 0006                  		andi.w	#6,d0
00013358 323B 0000                  		move.w	Sonic_Modes(pc,d0.w),d1
0001335C 4EBB 1000                  		jsr	Sonic_Modes(pc,d1.w)
00013360                            

00013360                            loc_12C7E:
00013360 6100                       		bsr.s	Sonic_Display
00013362 6100 0000                  		bsr.w	Sonic_RecordPosition
00013366 6100 0000                  		bsr.w	Sonic_Water
0001336A 1178 F768 0036             		move.b	(v_anglebuffer).w,$36(a0)
00013370 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013376 4A38 F7C7                  		tst.b	(f_wtunnelmode).w
0001337A 6700                       		beq.s	loc_12CA6
0001337C 4A28 001C                  		tst.b	obAnim(a0)
00013380 6600                       		bne.s	loc_12CA6
00013382 1168 001D 001C             		move.b	obNextAni(a0),obAnim(a0)
00013388                            

00013388                            loc_12CA6:
00013388 6100 0000                  		bsr.w	Sonic_Animate
0001338C 4A38 F7C8                  		tst.b	(f_playerctrl).w
00013390 6B00                       		bmi.s	loc_12CB6
00013392 4EB9 0000 0000             		jsr	(ReactToItem).l
00013398                            

00013398                            loc_12CB6:
00013398 6100 0000                  		bsr.w	Sonic_Loops
0001339C 6100 0000                  		bsr.w	Sonic_LoadGfx
000133A0 4E75                       		rts	
000133A2                            ; ===========================================================================
000133A2 0000                       Sonic_Modes:	dc.w Sonic_MdNormal-Sonic_Modes
000133A4 0000                       		dc.w Sonic_MdJump-Sonic_Modes
000133A6 0000                       		dc.w Sonic_MdRoll-Sonic_Modes
000133A8 0000                       		dc.w Sonic_MdJump2-Sonic_Modes
000133AA                            ; ---------------------------------------------------------------------------
000133AA                            ; Music	to play	after invincibility wears off
000133AA                            ; ---------------------------------------------------------------------------
000133AA                            MusicList2:
000133AA 00                         		dc.b bgm_GHZ
000133AB 00                         		dc.b bgm_LZ
000133AC 00                         		dc.b bgm_MZ
000133AD 00                         		dc.b bgm_SLZ
000133AE 00                         		dc.b bgm_SYZ
000133AF 00                         		dc.b bgm_SBZ
000133B0                            		; The ending doesn't get an entry
000133B0                            		even
000133B0                            

000133B0                            		include	"_incObj\Sonic Display.asm"
000133B0                            ; ---------------------------------------------------------------------------
000133B0                            ; Subroutine to display Sonic and set music
000133B0                            ; ---------------------------------------------------------------------------
000133B0                            

000133B0                            Sonic_Display:
000133B0 3028 0030                  		move.w	flashtime(a0),d0
000133B4 6700                       		beq.s	@display
000133B6 5368 0030                  		subq.w	#1,flashtime(a0)
000133BA E648                       		lsr.w	#3,d0
000133BC 6400                       		bcc.s	@chkinvincible
000133BE                            

000133BE                            	@display:
000133BE 4EB9 0000 DCA0             		jsr	(DisplaySprite).l
000133C4                            

000133C4                            	@chkinvincible:
000133C4 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
000133C8 6700                       		beq.s	@chkshoes	; if not, branch
000133CA 4A68 0032                  		tst.w	invtime(a0)	; check	time remaining for invinciblity
000133CE 6700                       		beq.s	@chkshoes	; if no	time remains, branch
000133D0 5368 0032                  		subq.w	#1,invtime(a0)	; subtract 1 from time
000133D4 6600                       		bne.s	@chkshoes
000133D6 4A38 F7AA                  		tst.b	(f_lockscreen).w
000133DA 6600                       		bne.s	@removeinvincible
000133DC 0C78 000C FE14             		cmpi.w	#$C,(v_air).w
000133E2 6500                       		bcs.s	@removeinvincible
000133E4 7000                       		moveq	#0,d0
000133E6 1038 FE10                  		move.b	(v_zone).w,d0
000133EA 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is SBZ3
000133F0 6600                       		bne.s	@music
000133F2 7005                       		moveq	#5,d0		; play SBZ music
000133F4                            

000133F4                            	@music:
000133F4 43F9 0001 33AA             		lea	(MusicList2).l,a1
000133FA 1031 0000                  		move.b	(a1,d0.w),d0
000133FE 4EB9 0000 139C             		jsr	(PlaySound).l	; play normal music
00013404                            

00013404                            	@removeinvincible:
00013404 11FC 0000 FE2D             		move.b	#0,(v_invinc).w ; cancel invincibility
0001340A                            

0001340A                            	@chkshoes:
0001340A 4A38 FE2E                  		tst.b	(v_shoes).w	; does Sonic have speed	shoes?
0001340E 6700                       		beq.s	@exit		; if not, branch
00013410 4A68 0034                  		tst.w	shoetime(a0)	; check	time remaining
00013414 6700                       		beq.s	@exit
00013416 5368 0034                  		subq.w	#1,shoetime(a0)	; subtract 1 from time
0001341A 6600                       		bne.s	@exit
0001341C 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
00013422 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
00013428 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
0001342E 11FC 0000 FE2E             		move.b	#0,(v_shoes).w	; cancel speed shoes
00013434 303C 0000                  		move.w	#bgm_Slowdown,d0
00013438 4EF9 0000 139C             		jmp	(PlaySound).l	; run music at normal speed
0001343E                            

0001343E                            	@exit:
0001343E 4E75                       		rts	
0001343E 4E75                       		rts	
00013440                            		include	"_incObj\Sonic RecordPosition.asm"
00013440                            ; ---------------------------------------------------------------------------
00013440                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013440                            ; ---------------------------------------------------------------------------
00013440                            

00013440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013440                            

00013440                            

00013440                            Sonic_RecordPosition:
00013440 3038 F7A8                  		move.w	(v_trackpos).w,d0
00013444 43F8 CB00                  		lea	(v_tracksonic).w,a1
00013448 43F1 0000                  		lea	(a1,d0.w),a1
0001344C 32E8 0008                  		move.w	obX(a0),(a1)+
00013450 32E8 000C                  		move.w	obY(a0),(a1)+
00013454 5838 F7A9                  		addq.b	#4,(v_trackbyte).w
00013458 4E75                       		rts	
0001345A                            ; End of function Sonic_RecordPosition
0001345A                            ; End of function Sonic_RecordPosition
0001345A                            		include	"_incObj\Sonic Water.asm"
0001345A                            ; ---------------------------------------------------------------------------
0001345A                            ; Subroutine for Sonic when he's underwater
0001345A                            ; ---------------------------------------------------------------------------
0001345A                            

0001345A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001345A                            

0001345A                            

0001345A                            Sonic_Water:
0001345A 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is level LZ?
00013460 6700                       		beq.s	@islabyrinth	; if yes, branch
00013462                            

00013462                            	@exit:
00013462 4E75                       		rts	
00013464                            ; ===========================================================================
00013464                            

00013464                            	@islabyrinth:
00013464 3038 F646                  		move.w	(v_waterpos1).w,d0
00013468 B068 000C                  		cmp.w	obY(a0),d0	; is Sonic above the water?
0001346C 6C00                       		bge.s	@abovewater	; if yes, branch
0001346E 08E8 0006 0022             		bset	#6,obStatus(a0)
00013474 66EC                       		bne.s	@exit
00013476 6100 0000                  		bsr.w	ResumeMusic
0001347A 11FC 000A D340             		move.b	#id_DrownCount,(v_sonicbubbles).w ; load bubbles object from Sonic's mouth
00013480 11FC 0081 D368             		move.b	#$81,(v_sonicbubbles+obSubtype).w
00013486 31FC 0300 F760             		move.w	#$300,(v_sonspeedmax).w ; change Sonic's top speed
0001348C 31FC 0006 F762             		move.w	#6,(v_sonspeedacc).w ; change Sonic's acceleration
00013492 31FC 0040 F764             		move.w	#$40,(v_sonspeeddec).w ; change Sonic's deceleration
00013498 E0E8 0010                  		asr	obVelX(a0)
0001349C E0E8 0012                  		asr	obVelY(a0)
000134A0 E0E8 0012                  		asr	obVelY(a0)	; slow Sonic
000134A4 67BC                       		beq.s	@exit		; branch if Sonic stops moving
000134A6 11FC 0008 D300             		move.b	#id_Splash,(v_splash).w ; load splash object
000134AC 303C 0000                  		move.w	#sfx_Splash,d0
000134B0 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	 ; play splash sound
000134B6                            ; ===========================================================================
000134B6                            

000134B6                            @abovewater:
000134B6 08A8 0006 0022             		bclr	#6,obStatus(a0)
000134BC 67A4                       		beq.s	@exit
000134BE 6100 0000                  		bsr.w	ResumeMusic
000134C2 31FC 0600 F760             		move.w	#$600,(v_sonspeedmax).w ; restore Sonic's speed
000134C8 31FC 000C F762             		move.w	#$C,(v_sonspeedacc).w ; restore Sonic's acceleration
000134CE 31FC 0080 F764             		move.w	#$80,(v_sonspeeddec).w ; restore Sonic's deceleration
000134D4 E1E8 0012                  		asl	obVelY(a0)
000134D8 6700 FF88                  		beq.w	@exit
000134DC 11FC 0008 D300             		move.b	#id_Splash,(v_splash).w ; load splash object
000134E2 0C68 F000 0012             		cmpi.w	#-$1000,obVelY(a0)
000134E8 6E00                       		bgt.s	@belowmaxspeed
000134EA 317C F000 0012             		move.w	#-$1000,obVelY(a0) ; set maximum speed on leaving water
000134F0                            

000134F0                            	@belowmaxspeed:
000134F0 303C 0000                  		move.w	#sfx_Splash,d0
000134F4 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	 ; play splash sound
000134FA                            ; End of function Sonic_Water
000134FA                            ; End of function Sonic_Water
000134FA                            

000134FA                            ; ===========================================================================
000134FA                            ; ---------------------------------------------------------------------------
000134FA                            ; Modes	for controlling	Sonic
000134FA                            ; ---------------------------------------------------------------------------
000134FA                            

000134FA                            Sonic_MdNormal:
000134FA 6100 0000                  		bsr.w	Sonic_Jump
000134FE 6100 0000                  		bsr.w	Sonic_SlopeResist
00013502 6100 0000                  		bsr.w	Sonic_Move
00013506 6100 0000                  		bsr.w	Sonic_Roll
0001350A 6100 0000                  		bsr.w	Sonic_LevelBound
0001350E 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
00013514 6100 0000                  		bsr.w	Sonic_AnglePos
00013518 6100 0000                  		bsr.w	Sonic_SlopeRepel
0001351C 4E75                       		rts	
0001351E                            ; ===========================================================================
0001351E                            

0001351E                            Sonic_MdJump:
0001351E 6100 0000                  		bsr.w	Sonic_JumpHeight
00013522 6100 0000                  		bsr.w	Sonic_JumpDirection
00013526 6100 0000                  		bsr.w	Sonic_LevelBound
0001352A 4EB9 0000 DC4E             		jsr	(ObjectFall).l
00013530 0828 0006 0022             		btst	#6,obStatus(a0)
00013536 6700                       		beq.s	loc_12E5C
00013538 0468 0028 0012             		subi.w	#$28,obVelY(a0)
0001353E                            

0001353E                            loc_12E5C:
0001353E 6100 0000                  		bsr.w	Sonic_JumpAngle
00013542 6100 0000                  		bsr.w	Sonic_Floor
00013546 4E75                       		rts	
00013548                            ; ===========================================================================
00013548                            

00013548                            Sonic_MdRoll:
00013548 6100 0000                  		bsr.w	Sonic_Jump
0001354C 6100 0000                  		bsr.w	Sonic_RollRepel
00013550 6100 0000                  		bsr.w	Sonic_RollSpeed
00013554 6100 0000                  		bsr.w	Sonic_LevelBound
00013558 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
0001355E 6100 0000                  		bsr.w	Sonic_AnglePos
00013562 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013566 4E75                       		rts	
00013568                            ; ===========================================================================
00013568                            

00013568                            Sonic_MdJump2:
00013568 6100 0000                  		bsr.w	Sonic_JumpHeight
0001356C 6100 0000                  		bsr.w	Sonic_JumpDirection
00013570 6100 0000                  		bsr.w	Sonic_LevelBound
00013574 4EB9 0000 DC4E             		jsr	(ObjectFall).l
0001357A 0828 0006 0022             		btst	#6,obStatus(a0)
00013580 6700                       		beq.s	loc_12EA6
00013582 0468 0028 0012             		subi.w	#$28,obVelY(a0)
00013588                            

00013588                            loc_12EA6:
00013588 6100 0000                  		bsr.w	Sonic_JumpAngle
0001358C 6100 0000                  		bsr.w	Sonic_Floor
00013590 4E75                       		rts	
00013592                            

00013592                            		include	"_incObj\Sonic Move.asm"
00013592                            ; ---------------------------------------------------------------------------
00013592                            ; Subroutine to	make Sonic walk/run
00013592                            ; ---------------------------------------------------------------------------
00013592                            

00013592                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013592                            

00013592                            

00013592                            Sonic_Move:
00013592 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00013596 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
0001359A 3838 F764                  		move.w	(v_sonspeeddec).w,d4
0001359E 4A38 F7CA                  		tst.b	(f_slidemode).w
000135A2 6600 0000                  		bne.w	loc_12FEE
000135A6 4A68 003E                  		tst.w	$3E(a0)
000135AA 6600 0000                  		bne.w	Sonic_ResetScr
000135AE 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
000135B4 6700                       		beq.s	@notleft	; if not, branch
000135B6 6100 0000                  		bsr.w	Sonic_MoveLeft
000135BA                            

000135BA                            	@notleft:
000135BA 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
000135C0 6700                       		beq.s	@notright	; if not, branch
000135C2 6100 0000                  		bsr.w	Sonic_MoveRight
000135C6                            

000135C6                            	@notright:
000135C6 1028 0026                  		move.b	obAngle(a0),d0
000135CA 0600 0020                  		addi.b	#$20,d0
000135CE 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
000135D2 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000135D6 4A68 0014                  		tst.w	obInertia(a0)	; is Sonic moving?
000135DA 6600 0000                  		bne.w	Sonic_ResetScr	; if yes, branch
000135DE 08A8 0005 0022             		bclr	#5,obStatus(a0)
000135E4 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000135EA 0828 0003 0022             		btst	#3,obStatus(a0)
000135F0 6700                       		beq.s	Sonic_Balance
000135F2 7000                       		moveq	#0,d0
000135F4 1028 003D                  		move.b	standonobject(a0),d0
000135F8 ED48                       		lsl.w	#6,d0
000135FA 43F8 D000                  		lea	(v_objspace).w,a1
000135FE 43F1 0000                  		lea	(a1,d0.w),a1
00013602 4A29 0022                  		tst.b	obStatus(a1)
00013606 6B00                       		bmi.s	Sonic_LookUp
00013608 7200                       		moveq	#0,d1
0001360A 1229 0019                  		move.b	obActWid(a1),d1
0001360E 3401                       		move.w	d1,d2
00013610 D442                       		add.w	d2,d2
00013612 5942                       		subq.w	#4,d2
00013614 D268 0008                  		add.w	obX(a0),d1
00013618 9269 0008                  		sub.w	obX(a1),d1
0001361C 0C41 0004                  		cmpi.w	#4,d1
00013620 6D00                       		blt.s	loc_12F6A
00013622 B242                       		cmp.w	d2,d1
00013624 6C00                       		bge.s	loc_12F5A
00013626 6000                       		bra.s	Sonic_LookUp
00013628                            ; ===========================================================================
00013628                            

00013628                            Sonic_Balance:
00013628 4EB9 0000 0000             		jsr	(ObjFloorDist).l
0001362E 0C41 000C                  		cmpi.w	#$C,d1
00013632 6D00                       		blt.s	Sonic_LookUp
00013634 0C28 0003 0036             		cmpi.b	#3,$36(a0)
0001363A 6600                       		bne.s	loc_12F62
0001363C                            

0001363C                            loc_12F5A:
0001363C 08A8 0000 0022             		bclr	#0,obStatus(a0)
00013642 6000                       		bra.s	loc_12F70
00013644                            ; ===========================================================================
00013644                            

00013644                            loc_12F62:
00013644 0C28 0003 0037             		cmpi.b	#3,$37(a0)
0001364A 6600                       		bne.s	Sonic_LookUp
0001364C                            

0001364C                            loc_12F6A:
0001364C 08E8 0000 0022             		bset	#0,obStatus(a0)
00013652                            

00013652                            loc_12F70:
00013652 117C 0000 001C             		move.b	#id_Balance,obAnim(a0) ; use "balancing" animation
00013658 6000                       		bra.s	Sonic_ResetScr
0001365A                            ; ===========================================================================
0001365A                            

0001365A                            Sonic_LookUp:
0001365A 0838 0000 F602             		btst	#bitUp,(v_jpadhold2).w ; is up being pressed?
00013660 6700                       		beq.s	Sonic_Duck	; if not, branch
00013662 117C 0000 001C             		move.b	#id_LookUp,obAnim(a0) ; use "looking up" animation
00013668 0C78 00C8 F73E             		cmpi.w	#$C8,(v_lookshift).w
0001366E 6700                       		beq.s	loc_12FC2
00013670 5478 F73E                  		addq.w	#2,(v_lookshift).w
00013674 6000                       		bra.s	loc_12FC2
00013676                            ; ===========================================================================
00013676                            

00013676                            Sonic_Duck:
00013676 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
0001367C 6700                       		beq.s	Sonic_ResetScr	; if not, branch
0001367E 117C 0000 001C             		move.b	#id_Duck,obAnim(a0) ; use "ducking" animation
00013684 0C78 0008 F73E             		cmpi.w	#8,(v_lookshift).w
0001368A 6700                       		beq.s	loc_12FC2
0001368C 5578 F73E                  		subq.w	#2,(v_lookshift).w
00013690 6000                       		bra.s	loc_12FC2
00013692                            ; ===========================================================================
00013692                            

00013692                            Sonic_ResetScr:
00013692 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is screen in its default position?
00013698 6700                       		beq.s	loc_12FC2	; if yes, branch
0001369A 6400                       		bcc.s	loc_12FBE
0001369C 5878 F73E                  		addq.w	#4,(v_lookshift).w ; move screen back to default
000136A0                            

000136A0                            loc_12FBE:
000136A0 5578 F73E                  		subq.w	#2,(v_lookshift).w ; move screen back to default
000136A4                            

000136A4                            loc_12FC2:
000136A4 1038 F602                  		move.b	(v_jpadhold2).w,d0
000136A8 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	pressed?
000136AC 6600                       		bne.s	loc_12FEE	; if yes, branch
000136AE 3028 0014                  		move.w	obInertia(a0),d0
000136B2 6700                       		beq.s	loc_12FEE
000136B4 6B00                       		bmi.s	loc_12FE2
000136B6 9045                       		sub.w	d5,d0
000136B8 6400                       		bcc.s	loc_12FDC
000136BA 303C 0000                  		move.w	#0,d0
000136BE                            

000136BE                            loc_12FDC:
000136BE 3140 0014                  		move.w	d0,obInertia(a0)
000136C2 6000                       		bra.s	loc_12FEE
000136C4                            ; ===========================================================================
000136C4                            

000136C4                            loc_12FE2:
000136C4 D045                       		add.w	d5,d0
000136C6 6400                       		bcc.s	loc_12FEA
000136C8 303C 0000                  		move.w	#0,d0
000136CC                            

000136CC                            loc_12FEA:
000136CC 3140 0014                  		move.w	d0,obInertia(a0)
000136D0                            

000136D0                            loc_12FEE:
000136D0 1028 0026                  		move.b	obAngle(a0),d0
000136D4 4EB9 0000 29E0             		jsr	(CalcSine).l
000136DA C3E8 0014                  		muls.w	obInertia(a0),d1
000136DE E081                       		asr.l	#8,d1
000136E0 3141 0010                  		move.w	d1,obVelX(a0)
000136E4 C1E8 0014                  		muls.w	obInertia(a0),d0
000136E8 E080                       		asr.l	#8,d0
000136EA 3140 0012                  		move.w	d0,obVelY(a0)
000136EE                            

000136EE                            loc_1300C:
000136EE 1028 0026                  		move.b	obAngle(a0),d0
000136F2 0600 0040                  		addi.b	#$40,d0
000136F6 6B00                       		bmi.s	locret_1307C
000136F8 123C 0040                  		move.b	#$40,d1
000136FC 4A68 0014                  		tst.w	obInertia(a0)
00013700 6700                       		beq.s	locret_1307C
00013702 6B00                       		bmi.s	loc_13024
00013704 4441                       		neg.w	d1
00013706                            

00013706                            loc_13024:
00013706 1028 0026                  		move.b	obAngle(a0),d0
0001370A D001                       		add.b	d1,d0
0001370C 3F00                       		move.w	d0,-(sp)
0001370E 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013712 301F                       		move.w	(sp)+,d0
00013714 4A41                       		tst.w	d1
00013716 6A00                       		bpl.s	locret_1307C
00013718 E141                       		asl.w	#8,d1
0001371A 0600 0020                  		addi.b	#$20,d0
0001371E 0200 00C0                  		andi.b	#$C0,d0
00013722 6700                       		beq.s	loc_13078
00013724 0C00 0040                  		cmpi.b	#$40,d0
00013728 6700                       		beq.s	loc_13066
0001372A 0C00 0080                  		cmpi.b	#$80,d0
0001372E 6700                       		beq.s	loc_13060
00013730 D368 0010                  		add.w	d1,obVelX(a0)
00013734 08E8 0005 0022             		bset	#5,obStatus(a0)
0001373A 317C 0000 0014             		move.w	#0,obInertia(a0)
00013740 4E75                       		rts	
00013742                            ; ===========================================================================
00013742                            

00013742                            loc_13060:
00013742 9368 0012                  		sub.w	d1,obVelY(a0)
00013746 4E75                       		rts	
00013748                            ; ===========================================================================
00013748                            

00013748                            loc_13066:
00013748 9368 0010                  		sub.w	d1,obVelX(a0)
0001374C 08E8 0005 0022             		bset	#5,obStatus(a0)
00013752 317C 0000 0014             		move.w	#0,obInertia(a0)
00013758 4E75                       		rts	
0001375A                            ; ===========================================================================
0001375A                            

0001375A                            loc_13078:
0001375A D368 0012                  		add.w	d1,obVelY(a0)
0001375E                            

0001375E                            locret_1307C:
0001375E 4E75                       		rts	
00013760                            ; End of function Sonic_Move
00013760                            

00013760                            

00013760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013760                            

00013760                            

00013760                            Sonic_MoveLeft:
00013760 3028 0014                  		move.w	obInertia(a0),d0
00013764 6700                       		beq.s	loc_13086
00013766 6A00                       		bpl.s	loc_130B2
00013768                            

00013768                            loc_13086:
00013768 08E8 0000 0022             		bset	#0,obStatus(a0)
0001376E 6600                       		bne.s	loc_1309A
00013770 08A8 0005 0022             		bclr	#5,obStatus(a0)
00013776 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001377C                            

0001377C                            loc_1309A:
0001377C 9045                       		sub.w	d5,d0
0001377E 3206                       		move.w	d6,d1
00013780 4441                       		neg.w	d1
00013782 B041                       		cmp.w	d1,d0
00013784 6E00                       		bgt.s	loc_130A6
00013786 3001                       		move.w	d1,d0
00013788                            

00013788                            loc_130A6:
00013788 3140 0014                  		move.w	d0,obInertia(a0)
0001378C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use walking animation
00013792 4E75                       		rts	
00013794                            ; ===========================================================================
00013794                            

00013794                            loc_130B2:
00013794 9044                       		sub.w	d4,d0
00013796 6400                       		bcc.s	loc_130BA
00013798 303C FF80                  		move.w	#-$80,d0
0001379C                            

0001379C                            loc_130BA:
0001379C 3140 0014                  		move.w	d0,obInertia(a0)
000137A0 1028 0026                  		move.b	obAngle(a0),d0
000137A4 0600 0020                  		addi.b	#$20,d0
000137A8 0200 00C0                  		andi.b	#$C0,d0
000137AC 6600                       		bne.s	locret_130E8
000137AE 0C40 0400                  		cmpi.w	#$400,d0
000137B2 6D00                       		blt.s	locret_130E8
000137B4 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
000137BA 08A8 0000 0022             		bclr	#0,obStatus(a0)
000137C0 303C 0000                  		move.w	#sfx_Skid,d0
000137C4 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play stopping sound
000137CA                            

000137CA                            locret_130E8:
000137CA 4E75                       		rts	
000137CC                            ; End of function Sonic_MoveLeft
000137CC                            

000137CC                            

000137CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137CC                            

000137CC                            

000137CC                            Sonic_MoveRight:
000137CC 3028 0014                  		move.w	obInertia(a0),d0
000137D0 6B00                       		bmi.s	loc_13118
000137D2 08A8 0000 0022             		bclr	#0,obStatus(a0)
000137D8 6700                       		beq.s	loc_13104
000137DA 08A8 0005 0022             		bclr	#5,obStatus(a0)
000137E0 117C 0001 001D             		move.b	#1,obNextAni(a0)
000137E6                            

000137E6                            loc_13104:
000137E6 D045                       		add.w	d5,d0
000137E8 B046                       		cmp.w	d6,d0
000137EA 6D00                       		blt.s	loc_1310C
000137EC 3006                       		move.w	d6,d0
000137EE                            

000137EE                            loc_1310C:
000137EE 3140 0014                  		move.w	d0,obInertia(a0)
000137F2 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use walking animation
000137F8 4E75                       		rts	
000137FA                            ; ===========================================================================
000137FA                            

000137FA                            loc_13118:
000137FA D044                       		add.w	d4,d0
000137FC 6400                       		bcc.s	loc_13120
000137FE 303C 0080                  		move.w	#$80,d0
00013802                            

00013802                            loc_13120:
00013802 3140 0014                  		move.w	d0,obInertia(a0)
00013806 1028 0026                  		move.b	obAngle(a0),d0
0001380A 0600 0020                  		addi.b	#$20,d0
0001380E 0200 00C0                  		andi.b	#$C0,d0
00013812 6600                       		bne.s	locret_1314E
00013814 0C40 FC00                  		cmpi.w	#-$400,d0
00013818 6E00                       		bgt.s	locret_1314E
0001381A 117C 0000 001C             		move.b	#id_Stop,obAnim(a0) ; use "stopping" animation
00013820 08E8 0000 0022             		bset	#0,obStatus(a0)
00013826 303C 0000                  		move.w	#sfx_Skid,d0
0001382A 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play stopping sound
00013830                            

00013830                            locret_1314E:
00013830 4E75                       		rts	
00013832                            ; End of function Sonic_MoveRight
00013832                            ; End of function Sonic_MoveRight
00013832                            		include	"_incObj\Sonic RollSpeed.asm"
00013832                            ; ---------------------------------------------------------------------------
00013832                            ; Subroutine to	change Sonic's speed as he rolls
00013832                            ; ---------------------------------------------------------------------------
00013832                            

00013832                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013832                            

00013832                            

00013832                            Sonic_RollSpeed:
00013832 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
00013836 E346                       		asl.w	#1,d6
00013838 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
0001383C E245                       		asr.w	#1,d5
0001383E 3838 F764                  		move.w	(v_sonspeeddec).w,d4
00013842 E444                       		asr.w	#2,d4
00013844 4A38 F7CA                  		tst.b	(f_slidemode).w
00013848 6600 0000                  		bne.w	loc_131CC
0001384C 4A68 003E                  		tst.w	$3E(a0)
00013850 6600                       		bne.s	@notright
00013852 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00013858 6700                       		beq.s	@notleft	; if not, branch
0001385A 6100 0000                  		bsr.w	Sonic_RollLeft
0001385E                            

0001385E                            	@notleft:
0001385E 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00013864 6700                       		beq.s	@notright	; if not, branch
00013866 6100 0000                  		bsr.w	Sonic_RollRight
0001386A                            

0001386A                            	@notright:
0001386A 3028 0014                  		move.w	obInertia(a0),d0
0001386E 6700                       		beq.s	loc_131AA
00013870 6B00                       		bmi.s	loc_1319E
00013872 9045                       		sub.w	d5,d0
00013874 6400                       		bcc.s	loc_13198
00013876 303C 0000                  		move.w	#0,d0
0001387A                            

0001387A                            loc_13198:
0001387A 3140 0014                  		move.w	d0,obInertia(a0)
0001387E 6000                       		bra.s	loc_131AA
00013880                            ; ===========================================================================
00013880                            

00013880                            loc_1319E:
00013880 D045                       		add.w	d5,d0
00013882 6400                       		bcc.s	loc_131A6
00013884 303C 0000                  		move.w	#0,d0
00013888                            

00013888                            loc_131A6:
00013888 3140 0014                  		move.w	d0,obInertia(a0)
0001388C                            

0001388C                            loc_131AA:
0001388C 4A68 0014                  		tst.w	obInertia(a0)	; is Sonic moving?
00013890 6600                       		bne.s	loc_131CC	; if yes, branch
00013892 08A8 0002 0022             		bclr	#2,obStatus(a0)
00013898 117C 0013 0016             		move.b	#$13,obHeight(a0)
0001389E 117C 0009 0017             		move.b	#9,obWidth(a0)
000138A4 117C 0000 001C             		move.b	#id_Wait,obAnim(a0) ; use "standing" animation
000138AA 5B68 000C                  		subq.w	#5,obY(a0)
000138AE                            

000138AE                            loc_131CC:
000138AE 1028 0026                  		move.b	obAngle(a0),d0
000138B2 4EB9 0000 29E0             		jsr	(CalcSine).l
000138B8 C1E8 0014                  		muls.w	obInertia(a0),d0
000138BC E080                       		asr.l	#8,d0
000138BE 3140 0012                  		move.w	d0,obVelY(a0)
000138C2 C3E8 0014                  		muls.w	obInertia(a0),d1
000138C6 E081                       		asr.l	#8,d1
000138C8 0C41 1000                  		cmpi.w	#$1000,d1
000138CC 6F00                       		ble.s	loc_131F0
000138CE 323C 1000                  		move.w	#$1000,d1
000138D2                            

000138D2                            loc_131F0:
000138D2 0C41 F000                  		cmpi.w	#-$1000,d1
000138D6 6C00                       		bge.s	loc_131FA
000138D8 323C F000                  		move.w	#-$1000,d1
000138DC                            

000138DC                            loc_131FA:
000138DC 3141 0010                  		move.w	d1,obVelX(a0)
000138E0 6000 FE0C                  		bra.w	loc_1300C
000138E4                            ; End of function Sonic_RollSpeed
000138E4                            

000138E4                            

000138E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138E4                            

000138E4                            

000138E4                            Sonic_RollLeft:
000138E4 3028 0014                  		move.w	obInertia(a0),d0
000138E8 6700                       		beq.s	loc_1320A
000138EA 6A00                       		bpl.s	loc_13218
000138EC                            

000138EC                            loc_1320A:
000138EC 08E8 0000 0022             		bset	#0,obStatus(a0)
000138F2 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
000138F8 4E75                       		rts	
000138FA                            ; ===========================================================================
000138FA                            

000138FA                            loc_13218:
000138FA 9044                       		sub.w	d4,d0
000138FC 6400                       		bcc.s	loc_13220
000138FE 303C FF80                  		move.w	#-$80,d0
00013902                            

00013902                            loc_13220:
00013902 3140 0014                  		move.w	d0,obInertia(a0)
00013906 4E75                       		rts	
00013908                            ; End of function Sonic_RollLeft
00013908                            

00013908                            

00013908                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013908                            

00013908                            

00013908                            Sonic_RollRight:
00013908 3028 0014                  		move.w	obInertia(a0),d0
0001390C 6B00                       		bmi.s	loc_1323A
0001390E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00013914 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
0001391A 4E75                       		rts	
0001391C                            ; ===========================================================================
0001391C                            

0001391C                            loc_1323A:
0001391C D044                       		add.w	d4,d0
0001391E 6400                       		bcc.s	loc_13242
00013920 303C 0080                  		move.w	#$80,d0
00013924                            

00013924                            loc_13242:
00013924 3140 0014                  		move.w	d0,obInertia(a0)
00013928 4E75                       		rts	
0001392A                            ; End of function Sonic_RollRight
0001392A                            ; End of function Sonic_RollRight
0001392A                            		include	"_incObj\Sonic JumpDirection.asm"
0001392A                            ; ---------------------------------------------------------------------------
0001392A                            ; Subroutine to	change Sonic's direction while jumping
0001392A                            ; ---------------------------------------------------------------------------
0001392A                            

0001392A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001392A                            

0001392A                            

0001392A                            Sonic_JumpDirection:
0001392A 3C38 F760                  		move.w	(v_sonspeedmax).w,d6
0001392E 3A38 F762                  		move.w	(v_sonspeedacc).w,d5
00013932 E345                       		asl.w	#1,d5
00013934 0828 0004 0022             		btst	#4,obStatus(a0)
0001393A 6600                       		bne.s	Obj01_ResetScr2
0001393C 3028 0010                  		move.w	obVelX(a0),d0
00013940 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
00013946 6700                       		beq.s	loc_13278	; if not, branch
00013948 08E8 0000 0022             		bset	#0,obStatus(a0)
0001394E 9045                       		sub.w	d5,d0
00013950 3206                       		move.w	d6,d1
00013952 4441                       		neg.w	d1
00013954 B041                       		cmp.w	d1,d0
00013956 6E00                       		bgt.s	loc_13278
00013958 3001                       		move.w	d1,d0
0001395A                            

0001395A                            loc_13278:
0001395A 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
00013960 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013962 08A8 0000 0022             		bclr	#0,obStatus(a0)
00013968 D045                       		add.w	d5,d0
0001396A B046                       		cmp.w	d6,d0
0001396C 6D00                       		blt.s	Obj01_JumpMove
0001396E 3006                       		move.w	d6,d0
00013970                            

00013970                            Obj01_JumpMove:
00013970 3140 0010                  		move.w	d0,obVelX(a0)	; change Sonic's horizontal speed
00013974                            

00013974                            Obj01_ResetScr2:
00013974 0C78 0060 F73E             		cmpi.w	#$60,(v_lookshift).w ; is the screen in its default position?
0001397A 6700                       		beq.s	loc_132A4	; if yes, branch
0001397C 6400                       		bcc.s	loc_132A0
0001397E 5878 F73E                  		addq.w	#4,(v_lookshift).w
00013982                            

00013982                            loc_132A0:
00013982 5578 F73E                  		subq.w	#2,(v_lookshift).w
00013986                            

00013986                            loc_132A4:
00013986 0C68 FC00 0012             		cmpi.w	#-$400,obVelY(a0) ; is Sonic moving faster than -$400 upwards?
0001398C 6500                       		bcs.s	locret_132D2	; if yes, branch
0001398E 3028 0010                  		move.w	obVelX(a0),d0
00013992 3200                       		move.w	d0,d1
00013994 EA41                       		asr.w	#5,d1
00013996 6700                       		beq.s	locret_132D2
00013998 6B00                       		bmi.s	loc_132C6
0001399A 9041                       		sub.w	d1,d0
0001399C 6400                       		bcc.s	loc_132C0
0001399E 303C 0000                  		move.w	#0,d0
000139A2                            

000139A2                            loc_132C0:
000139A2 3140 0010                  		move.w	d0,obVelX(a0)
000139A6 4E75                       		rts	
000139A8                            ; ===========================================================================
000139A8                            

000139A8                            loc_132C6:
000139A8 9041                       		sub.w	d1,d0
000139AA 6500                       		bcs.s	loc_132CE
000139AC 303C 0000                  		move.w	#0,d0
000139B0                            

000139B0                            loc_132CE:
000139B0 3140 0010                  		move.w	d0,obVelX(a0)
000139B4                            

000139B4                            locret_132D2:
000139B4 4E75                       		rts	
000139B6                            ; End of function Sonic_JumpDirection
000139B6                            ; End of function Sonic_JumpDirection
000139B6                            

000139B6                            ; ===========================================================================
000139B6                            ; ---------------------------------------------------------------------------
000139B6                            ; Unused subroutine to squash Sonic
000139B6                            ; ---------------------------------------------------------------------------
000139B6 1028 0026                  		move.b	obAngle(a0),d0
000139BA 0600 0020                  		addi.b	#$20,d0
000139BE 0200 00C0                  		andi.b	#$C0,d0
000139C2 6600                       		bne.s	locret_13302
000139C4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000139C8 4A41                       		tst.w	d1
000139CA 6A00                       		bpl.s	locret_13302
000139CC 317C 0000 0014             		move.w	#0,obInertia(a0) ; stop Sonic moving
000139D2 317C 0000 0010             		move.w	#0,obVelX(a0)
000139D8 317C 0000 0012             		move.w	#0,obVelY(a0)
000139DE 117C 0000 001C             		move.b	#id_Warp3,obAnim(a0) ; use "warping" animation
000139E4                            

000139E4                            locret_13302:
000139E4 4E75                       		rts	
000139E6                            

000139E6                            		include	"_incObj\Sonic LevelBound.asm"
000139E6                            ; ---------------------------------------------------------------------------
000139E6                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000139E6                            ; ---------------------------------------------------------------------------
000139E6                            

000139E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139E6                            

000139E6                            

000139E6                            Sonic_LevelBound:
000139E6 2228 0008                  		move.l	obX(a0),d1
000139EA 3028 0010                  		move.w	obVelX(a0),d0
000139EE 48C0                       		ext.l	d0
000139F0 E180                       		asl.l	#8,d0
000139F2 D280                       		add.l	d0,d1
000139F4 4841                       		swap	d1
000139F6 3038 F728                  		move.w	(v_limitleft2).w,d0
000139FA 0640 0010                  		addi.w	#$10,d0
000139FE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013A00 6200                       		bhi.s	@sides		; if yes, branch
00013A02 3038 F72A                  		move.w	(v_limitright2).w,d0
00013A06 0640 0128                  		addi.w	#$128,d0
00013A0A 4A38 F7AA                  		tst.b	(f_lockscreen).w
00013A0E 6600                       		bne.s	@screenlocked
00013A10 0640 0040                  		addi.w	#$40,d0
00013A14                            

00013A14                            	@screenlocked:
00013A14 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013A16 6300                       		bls.s	@sides		; if yes, branch
00013A18                            

00013A18                            	@chkbottom:
00013A18 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00013A1C 0640 00E0                  		addi.w	#$E0,d0
00013A20 B068 000C                  		cmp.w	obY(a0),d0	; has Sonic touched the	bottom boundary?
00013A24 6D00                       		blt.s	@bottom		; if yes, branch
00013A26 4E75                       		rts	
00013A28                            ; ===========================================================================
00013A28                            

00013A28                            @bottom:
00013A28 0C78 0501 FE10             		cmpi.w	#(id_SBZ<<8)+1,(v_zone).w ; is level SBZ2 ?
00013A2E 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013A32 0C78 2000 D008             		cmpi.w	#$2000,(v_player+obX).w
00013A38 6500 0000                  		bcs.w	KillSonic
00013A3C 4238 FE30                  		clr.b	(v_lastlamp).w	; clear	lamppost counter
00013A40 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00013A46 31FC 0103 FE10             		move.w	#(id_LZ<<8)+3,(v_zone).w ; set level to SBZ3 (LZ4)
00013A4C 4E75                       		rts	
00013A4E                            ; ===========================================================================
00013A4E                            

00013A4E                            @sides:
00013A4E 3140 0008                  		move.w	d0,obX(a0)
00013A52 317C 0000 000A             		move.w	#0,obX+2(a0)
00013A58 317C 0000 0010             		move.w	#0,obVelX(a0)	; stop Sonic moving
00013A5E 317C 0000 0014             		move.w	#0,obInertia(a0)
00013A64 60B2                       		bra.s	@chkbottom
00013A66                            ; End of function Sonic_LevelBound
00013A66                            ; End of function Sonic_LevelBound
00013A66                            		include	"_incObj\Sonic Roll.asm"
00013A66                            ; ---------------------------------------------------------------------------
00013A66                            ; Subroutine allowing Sonic to roll when he's moving
00013A66                            ; ---------------------------------------------------------------------------
00013A66                            

00013A66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A66                            

00013A66                            

00013A66                            Sonic_Roll:
00013A66 4A38 F7CA                  		tst.b	(f_slidemode).w
00013A6A 6600                       		bne.s	@noroll
00013A6C 3028 0014                  		move.w	obInertia(a0),d0
00013A70 6A00                       		bpl.s	@ispositive
00013A72 4440                       		neg.w	d0
00013A74                            

00013A74                            	@ispositive:
00013A74 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013A78 6500                       		bcs.s	@noroll		; if not, branch
00013A7A 1038 F602                  		move.b	(v_jpadhold2).w,d0
00013A7E 0200 000C                  		andi.b	#btnL+btnR,d0	; is left/right	being pressed?
00013A82 6600                       		bne.s	@noroll		; if yes, branch
00013A84 0838 0001 F602             		btst	#bitDn,(v_jpadhold2).w ; is down being pressed?
00013A8A 6600                       		bne.s	Sonic_ChkRoll	; if yes, branch
00013A8C                            

00013A8C                            	@noroll:
00013A8C 4E75                       		rts	
00013A8E                            ; ===========================================================================
00013A8E                            

00013A8E                            Sonic_ChkRoll:
00013A8E 0828 0002 0022             		btst	#2,obStatus(a0)	; is Sonic already rolling?
00013A94 6700                       		beq.s	@roll		; if not, branch
00013A96 4E75                       		rts	
00013A98                            ; ===========================================================================
00013A98                            

00013A98                            @roll:
00013A98 08E8 0002 0022             		bset	#2,obStatus(a0)
00013A9E 117C 000E 0016             		move.b	#$E,obHeight(a0)
00013AA4 117C 0007 0017             		move.b	#7,obWidth(a0)
00013AAA 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "rolling" animation
00013AB0 5A68 000C                  		addq.w	#5,obY(a0)
00013AB4 303C 0000                  		move.w	#sfx_Roll,d0
00013AB8 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play rolling sound
00013ABE 4A68 0014                  		tst.w	obInertia(a0)
00013AC2 6600                       		bne.s	@ismoving
00013AC4 317C 0200 0014             		move.w	#$200,obInertia(a0) ; set inertia if 0
00013ACA                            

00013ACA                            	@ismoving:
00013ACA 4E75                       		rts	
00013ACC                            ; End of function Sonic_Roll
00013ACC                            ; End of function Sonic_Roll
00013ACC                            		include	"_incObj\Sonic Jump.asm"
00013ACC                            ; ---------------------------------------------------------------------------
00013ACC                            ; Subroutine allowing Sonic to jump
00013ACC                            ; ---------------------------------------------------------------------------
00013ACC                            

00013ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ACC                            

00013ACC                            

00013ACC                            Sonic_Jump:
00013ACC 1038 F603                  		move.b	(v_jpadpress2).w,d0
00013AD0 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00013AD4 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013AD8 7000                       		moveq	#0,d0
00013ADA 1028 0026                  		move.b	obAngle(a0),d0
00013ADE 0600 0080                  		addi.b	#$80,d0
00013AE2 6100 0000                  		bsr.w	sub_14D48
00013AE6 0C41 0006                  		cmpi.w	#6,d1
00013AEA 6D00 0000                  		blt.w	locret_1348E
00013AEE 343C 0680                  		move.w	#$680,d2
00013AF2 0828 0006 0022             		btst	#6,obStatus(a0)
00013AF8 6700                       		beq.s	loc_1341C
00013AFA 343C 0380                  		move.w	#$380,d2
00013AFE                            

00013AFE                            loc_1341C:
00013AFE 7000                       		moveq	#0,d0
00013B00 1028 0026                  		move.b	obAngle(a0),d0
00013B04 0400 0040                  		subi.b	#$40,d0
00013B08 4EB9 0000 29E0             		jsr	(CalcSine).l
00013B0E C3C2                       		muls.w	d2,d1
00013B10 E081                       		asr.l	#8,d1
00013B12 D368 0010                  		add.w	d1,obVelX(a0)	; make Sonic jump
00013B16 C1C2                       		muls.w	d2,d0
00013B18 E080                       		asr.l	#8,d0
00013B1A D168 0012                  		add.w	d0,obVelY(a0)	; make Sonic jump
00013B1E 08E8 0001 0022             		bset	#1,obStatus(a0)
00013B24 08A8 0005 0022             		bclr	#5,obStatus(a0)
00013B2A 588F                       		addq.l	#4,sp
00013B2C 117C 0001 003C             		move.b	#1,$3C(a0)
00013B32 4228 0038                  		clr.b	$38(a0)
00013B36 303C 0000                  		move.w	#sfx_Jump,d0
00013B3A 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play jumping sound
00013B40 117C 0013 0016             		move.b	#$13,obHeight(a0)
00013B46 117C 0009 0017             		move.b	#9,obWidth(a0)
00013B4C 0828 0002 0022             		btst	#2,obStatus(a0)
00013B52 6600                       		bne.s	loc_13490
00013B54 117C 000E 0016             		move.b	#$E,obHeight(a0)
00013B5A 117C 0007 0017             		move.b	#7,obWidth(a0)
00013B60 117C 0000 001C             		move.b	#id_Roll,obAnim(a0) ; use "jumping" animation
00013B66 08E8 0002 0022             		bset	#2,obStatus(a0)
00013B6C 5A68 000C                  		addq.w	#5,obY(a0)
00013B70                            

00013B70                            locret_1348E:
00013B70 4E75                       		rts	
00013B72                            ; ===========================================================================
00013B72                            

00013B72                            loc_13490:
00013B72 08E8 0004 0022             		bset	#4,obStatus(a0)
00013B78 4E75                       		rts	
00013B7A                            ; End of function Sonic_Jump
00013B7A                            ; End of function Sonic_Jump
00013B7A                            		include	"_incObj\Sonic JumpHeight.asm"
00013B7A                            ; ---------------------------------------------------------------------------
00013B7A                            ; Subroutine controlling Sonic's jump height/duration
00013B7A                            ; ---------------------------------------------------------------------------
00013B7A                            

00013B7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B7A                            

00013B7A                            

00013B7A                            Sonic_JumpHeight:
00013B7A 4A28 003C                  		tst.b	$3C(a0)
00013B7E 6700                       		beq.s	loc_134C4
00013B80 323C FC00                  		move.w	#-$400,d1
00013B84 0828 0006 0022             		btst	#6,obStatus(a0)
00013B8A 6700                       		beq.s	loc_134AE
00013B8C 323C FE00                  		move.w	#-$200,d1
00013B90                            

00013B90                            loc_134AE:
00013B90 B268 0012                  		cmp.w	obVelY(a0),d1
00013B94 6F00                       		ble.s	locret_134C2
00013B96 1038 F602                  		move.b	(v_jpadhold2).w,d0
00013B9A 0200 0070                  		andi.b	#btnABC,d0	; is A, B or C pressed?
00013B9E 6600                       		bne.s	locret_134C2	; if yes, branch
00013BA0 3141 0012                  		move.w	d1,obVelY(a0)
00013BA4                            

00013BA4                            locret_134C2:
00013BA4 4E75                       		rts	
00013BA6                            ; ===========================================================================
00013BA6                            

00013BA6                            loc_134C4:
00013BA6 0C68 F040 0012             		cmpi.w	#-$FC0,obVelY(a0)
00013BAC 6C00                       		bge.s	locret_134D2
00013BAE 317C F040 0012             		move.w	#-$FC0,obVelY(a0)
00013BB4                            

00013BB4                            locret_134D2:
00013BB4 4E75                       		rts	
00013BB6                            ; End of function Sonic_JumpHeight
00013BB6                            ; End of function Sonic_JumpHeight
00013BB6                            		include	"_incObj\Sonic SlopeResist.asm"
00013BB6                            ; ---------------------------------------------------------------------------
00013BB6                            ; Subroutine to	slow Sonic walking up a	slope
00013BB6                            ; ---------------------------------------------------------------------------
00013BB6                            

00013BB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BB6                            

00013BB6                            

00013BB6                            Sonic_SlopeResist:
00013BB6 1028 0026                  		move.b	obAngle(a0),d0
00013BBA 0600 0060                  		addi.b	#$60,d0
00013BBE 0C00 00C0                  		cmpi.b	#$C0,d0
00013BC2 6400                       		bcc.s	locret_13508
00013BC4 1028 0026                  		move.b	obAngle(a0),d0
00013BC8 4EB9 0000 29E0             		jsr	(CalcSine).l
00013BCE C1FC 0020                  		muls.w	#$20,d0
00013BD2 E080                       		asr.l	#8,d0
00013BD4 4A68 0014                  		tst.w	obInertia(a0)
00013BD8 6700                       		beq.s	locret_13508
00013BDA 6B00                       		bmi.s	loc_13504
00013BDC 4A40                       		tst.w	d0
00013BDE 6700                       		beq.s	locret_13502
00013BE0 D168 0014                  		add.w	d0,obInertia(a0) ; change Sonic's inertia
00013BE4                            

00013BE4                            locret_13502:
00013BE4 4E75                       		rts	
00013BE6                            ; ===========================================================================
00013BE6                            

00013BE6                            loc_13504:
00013BE6 D168 0014                  		add.w	d0,obInertia(a0)
00013BEA                            

00013BEA                            locret_13508:
00013BEA 4E75                       		rts	
00013BEC                            ; End of function Sonic_SlopeResist
00013BEC                            ; End of function Sonic_SlopeResist
00013BEC                            		include	"_incObj\Sonic RollRepel.asm"
00013BEC                            ; ---------------------------------------------------------------------------
00013BEC                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013BEC                            ; ---------------------------------------------------------------------------
00013BEC                            

00013BEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013BEC                            

00013BEC                            

00013BEC                            Sonic_RollRepel:
00013BEC 1028 0026                  		move.b	obAngle(a0),d0
00013BF0 0600 0060                  		addi.b	#$60,d0
00013BF4 0C00 00C0                  		cmpi.b	#-$40,d0
00013BF8 6400                       		bcc.s	locret_13544
00013BFA 1028 0026                  		move.b	obAngle(a0),d0
00013BFE 4EB9 0000 29E0             		jsr	(CalcSine).l
00013C04 C1FC 0050                  		muls.w	#$50,d0
00013C08 E080                       		asr.l	#8,d0
00013C0A 4A68 0014                  		tst.w	obInertia(a0)
00013C0E 6B00                       		bmi.s	loc_1353A
00013C10 4A40                       		tst.w	d0
00013C12 6A00                       		bpl.s	loc_13534
00013C14 E480                       		asr.l	#2,d0
00013C16                            

00013C16                            loc_13534:
00013C16 D168 0014                  		add.w	d0,obInertia(a0)
00013C1A 4E75                       		rts	
00013C1C                            ; ===========================================================================
00013C1C                            

00013C1C                            loc_1353A:
00013C1C 4A40                       		tst.w	d0
00013C1E 6B00                       		bmi.s	loc_13540
00013C20 E480                       		asr.l	#2,d0
00013C22                            

00013C22                            loc_13540:
00013C22 D168 0014                  		add.w	d0,obInertia(a0)
00013C26                            

00013C26                            locret_13544:
00013C26 4E75                       		rts	
00013C28                            ; End of function Sonic_RollRepel
00013C28                            ; End of function Sonic_RollRepel
00013C28                            		include	"_incObj\Sonic SlopeRepel.asm"
00013C28                            ; ---------------------------------------------------------------------------
00013C28                            ; Subroutine to	push Sonic down	a slope
00013C28                            ; ---------------------------------------------------------------------------
00013C28                            

00013C28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C28                            

00013C28                            

00013C28                            Sonic_SlopeRepel:
00013C28 4E71                       		nop	
00013C2A 4A28 0038                  		tst.b	$38(a0)
00013C2E 6600                       		bne.s	locret_13580
00013C30 4A68 003E                  		tst.w	$3E(a0)
00013C34 6600                       		bne.s	loc_13582
00013C36 1028 0026                  		move.b	obAngle(a0),d0
00013C3A 0600 0020                  		addi.b	#$20,d0
00013C3E 0200 00C0                  		andi.b	#$C0,d0
00013C42 6700                       		beq.s	locret_13580
00013C44 3028 0014                  		move.w	obInertia(a0),d0
00013C48 6A00                       		bpl.s	loc_1356A
00013C4A 4440                       		neg.w	d0
00013C4C                            

00013C4C                            loc_1356A:
00013C4C 0C40 0280                  		cmpi.w	#$280,d0
00013C50 6400                       		bcc.s	locret_13580
00013C52 4268 0014                  		clr.w	obInertia(a0)
00013C56 08E8 0001 0022             		bset	#1,obStatus(a0)
00013C5C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013C62                            

00013C62                            locret_13580:
00013C62 4E75                       		rts	
00013C64                            ; ===========================================================================
00013C64                            

00013C64                            loc_13582:
00013C64 5368 003E                  		subq.w	#1,$3E(a0)
00013C68 4E75                       		rts	
00013C6A                            ; End of function Sonic_SlopeRepel
00013C6A                            ; End of function Sonic_SlopeRepel
00013C6A                            		include	"_incObj\Sonic JumpAngle.asm"
00013C6A                            ; ---------------------------------------------------------------------------
00013C6A                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013C6A                            ; ---------------------------------------------------------------------------
00013C6A                            

00013C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C6A                            

00013C6A                            

00013C6A                            Sonic_JumpAngle:
00013C6A 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00013C6E 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013C70 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013C72                            

00013C72 5400                       		addq.b	#2,d0		; increase angle
00013C74 6400                       		bcc.s	loc_13596
00013C76 7000                       		moveq	#0,d0
00013C78                            

00013C78                            loc_13596:
00013C78 6000                       		bra.s	loc_1359E
00013C7A                            ; ===========================================================================
00013C7A                            

00013C7A                            loc_13598:
00013C7A 5500                       		subq.b	#2,d0		; decrease angle
00013C7C 6400                       		bcc.s	loc_1359E
00013C7E 7000                       		moveq	#0,d0
00013C80                            

00013C80                            loc_1359E:
00013C80 1140 0026                  		move.b	d0,obAngle(a0)
00013C84                            

00013C84                            locret_135A2:
00013C84 4E75                       		rts	
00013C86                            ; End of function Sonic_JumpAngle
00013C86                            ; End of function Sonic_JumpAngle
00013C86                            		include	"_incObj\Sonic Floor.asm"
00013C86                            ; ---------------------------------------------------------------------------
00013C86                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013C86                            ; ---------------------------------------------------------------------------
00013C86                            

00013C86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C86                            

00013C86                            

00013C86                            Sonic_Floor:
00013C86 3228 0010                  		move.w	obVelX(a0),d1
00013C8A 3428 0012                  		move.w	obVelY(a0),d2
00013C8E 4EB9 0000 2C78             		jsr	(CalcAngle).l
00013C94 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013C98 0400 0020                  		subi.b	#$20,d0
00013C9C 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013CA0 0200 00C0                  		andi.b	#$C0,d0
00013CA4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013CA8 0C00 0040                  		cmpi.b	#$40,d0
00013CAC 6700 0000                  		beq.w	loc_13680
00013CB0 0C00 0080                  		cmpi.b	#$80,d0
00013CB4 6700 0000                  		beq.w	loc_136E2
00013CB8 0C00 00C0                  		cmpi.b	#$C0,d0
00013CBC 6700 0000                  		beq.w	loc_1373E
00013CC0 6100 0000                  		bsr.w	Sonic_HitWall
00013CC4 4A41                       		tst.w	d1
00013CC6 6A00                       		bpl.s	loc_135F0
00013CC8 9368 0008                  		sub.w	d1,obX(a0)
00013CCC 317C 0000 0010             		move.w	#0,obVelX(a0)
00013CD2                            

00013CD2                            loc_135F0:
00013CD2 6100 0000                  		bsr.w	sub_14EB4
00013CD6 4A41                       		tst.w	d1
00013CD8 6A00                       		bpl.s	loc_13602
00013CDA D368 0008                  		add.w	d1,obX(a0)
00013CDE 317C 0000 0010             		move.w	#0,obVelX(a0)
00013CE4                            

00013CE4                            loc_13602:
00013CE4 6100 0000                  		bsr.w	Sonic_HitFloor
00013CE8 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013CEC 4A41                       		tst.w	d1
00013CEE 6A00                       		bpl.s	locret_1367E
00013CF0 1428 0012                  		move.b	obVelY(a0),d2
00013CF4 5002                       		addq.b	#8,d2
00013CF6 4402                       		neg.b	d2
00013CF8 B202                       		cmp.b	d2,d1
00013CFA 6C00                       		bge.s	loc_1361E
00013CFC B002                       		cmp.b	d2,d0
00013CFE 6D00                       		blt.s	locret_1367E
00013D00                            

00013D00                            loc_1361E:
00013D00 D368 000C                  		add.w	d1,obY(a0)
00013D04 1143 0026                  		move.b	d3,obAngle(a0)
00013D08 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013D0C 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00013D12 1003                       		move.b	d3,d0
00013D14 0600 0020                  		addi.b	#$20,d0
00013D18 0200 0040                  		andi.b	#$40,d0
00013D1C 6600                       		bne.s	loc_1365C
00013D1E 1003                       		move.b	d3,d0
00013D20 0600 0010                  		addi.b	#$10,d0
00013D24 0200 0020                  		andi.b	#$20,d0
00013D28 6700                       		beq.s	loc_1364E
00013D2A E0E8 0012                  		asr	obVelY(a0)
00013D2E 6000                       		bra.s	loc_13670
00013D30                            ; ===========================================================================
00013D30                            

00013D30                            loc_1364E:
00013D30 317C 0000 0012             		move.w	#0,obVelY(a0)
00013D36 3168 0010 0014             		move.w	obVelX(a0),obInertia(a0)
00013D3C 4E75                       		rts	
00013D3E                            ; ===========================================================================
00013D3E                            

00013D3E                            loc_1365C:
00013D3E 317C 0000 0010             		move.w	#0,obVelX(a0)
00013D44 0C68 0FC0 0012             		cmpi.w	#$FC0,obVelY(a0)
00013D4A 6F00                       		ble.s	loc_13670
00013D4C 317C 0FC0 0012             		move.w	#$FC0,obVelY(a0)
00013D52                            

00013D52                            loc_13670:
00013D52 3168 0012 0014             		move.w	obVelY(a0),obInertia(a0)
00013D58 4A03                       		tst.b	d3
00013D5A 6A00                       		bpl.s	locret_1367E
00013D5C 4468 0014                  		neg.w	obInertia(a0)
00013D60                            

00013D60                            locret_1367E:
00013D60 4E75                       		rts	
00013D62                            ; ===========================================================================
00013D62                            

00013D62                            loc_13680:
00013D62 6100 0000                  		bsr.w	Sonic_HitWall
00013D66 4A41                       		tst.w	d1
00013D68 6A00                       		bpl.s	loc_1369A
00013D6A 9368 0008                  		sub.w	d1,obX(a0)
00013D6E 317C 0000 0010             		move.w	#0,obVelX(a0)
00013D74 3168 0012 0014             		move.w	obVelY(a0),obInertia(a0)
00013D7A 4E75                       		rts	
00013D7C                            ; ===========================================================================
00013D7C                            

00013D7C                            loc_1369A:
00013D7C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013D80 4A41                       		tst.w	d1
00013D82 6A00                       		bpl.s	loc_136B4
00013D84 9368 000C                  		sub.w	d1,obY(a0)
00013D88 4A68 0012                  		tst.w	obVelY(a0)
00013D8C 6A00                       		bpl.s	locret_136B2
00013D8E 317C 0000 0012             		move.w	#0,obVelY(a0)
00013D94                            

00013D94                            locret_136B2:
00013D94 4E75                       		rts	
00013D96                            ; ===========================================================================
00013D96                            

00013D96                            loc_136B4:
00013D96 4A68 0012                  		tst.w	obVelY(a0)
00013D9A 6B00                       		bmi.s	locret_136E0
00013D9C 6100 0000                  		bsr.w	Sonic_HitFloor
00013DA0 4A41                       		tst.w	d1
00013DA2 6A00                       		bpl.s	locret_136E0
00013DA4 D368 000C                  		add.w	d1,obY(a0)
00013DA8 1143 0026                  		move.b	d3,obAngle(a0)
00013DAC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013DB0 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00013DB6 317C 0000 0012             		move.w	#0,obVelY(a0)
00013DBC 3168 0010 0014             		move.w	obVelX(a0),obInertia(a0)
00013DC2                            

00013DC2                            locret_136E0:
00013DC2 4E75                       		rts	
00013DC4                            ; ===========================================================================
00013DC4                            

00013DC4                            loc_136E2:
00013DC4 6100 0000                  		bsr.w	Sonic_HitWall
00013DC8 4A41                       		tst.w	d1
00013DCA 6A00                       		bpl.s	loc_136F4
00013DCC 9368 0008                  		sub.w	d1,obX(a0)
00013DD0 317C 0000 0010             		move.w	#0,obVelX(a0)
00013DD6                            

00013DD6                            loc_136F4:
00013DD6 6100 0000                  		bsr.w	sub_14EB4
00013DDA 4A41                       		tst.w	d1
00013DDC 6A00                       		bpl.s	loc_13706
00013DDE D368 0008                  		add.w	d1,obX(a0)
00013DE2 317C 0000 0010             		move.w	#0,obVelX(a0)
00013DE8                            

00013DE8                            loc_13706:
00013DE8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013DEC 4A41                       		tst.w	d1
00013DEE 6A00                       		bpl.s	locret_1373C
00013DF0 9368 000C                  		sub.w	d1,obY(a0)
00013DF4 1003                       		move.b	d3,d0
00013DF6 0600 0020                  		addi.b	#$20,d0
00013DFA 0200 0040                  		andi.b	#$40,d0
00013DFE 6600                       		bne.s	loc_13726
00013E00 317C 0000 0012             		move.w	#0,obVelY(a0)
00013E06 4E75                       		rts	
00013E08                            ; ===========================================================================
00013E08                            

00013E08                            loc_13726:
00013E08 1143 0026                  		move.b	d3,obAngle(a0)
00013E0C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E10 3168 0012 0014             		move.w	obVelY(a0),obInertia(a0)
00013E16 4A03                       		tst.b	d3
00013E18 6A00                       		bpl.s	locret_1373C
00013E1A 4468 0014                  		neg.w	obInertia(a0)
00013E1E                            

00013E1E                            locret_1373C:
00013E1E 4E75                       		rts	
00013E20                            ; ===========================================================================
00013E20                            

00013E20                            loc_1373E:
00013E20 6100 0000                  		bsr.w	sub_14EB4
00013E24 4A41                       		tst.w	d1
00013E26 6A00                       		bpl.s	loc_13758
00013E28 D368 0008                  		add.w	d1,obX(a0)
00013E2C 317C 0000 0010             		move.w	#0,obVelX(a0)
00013E32 3168 0012 0014             		move.w	obVelY(a0),obInertia(a0)
00013E38 4E75                       		rts	
00013E3A                            ; ===========================================================================
00013E3A                            

00013E3A                            loc_13758:
00013E3A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013E3E 4A41                       		tst.w	d1
00013E40 6A00                       		bpl.s	loc_13772
00013E42 9368 000C                  		sub.w	d1,obY(a0)
00013E46 4A68 0012                  		tst.w	obVelY(a0)
00013E4A 6A00                       		bpl.s	locret_13770
00013E4C 317C 0000 0012             		move.w	#0,obVelY(a0)
00013E52                            

00013E52                            locret_13770:
00013E52 4E75                       		rts	
00013E54                            ; ===========================================================================
00013E54                            

00013E54                            loc_13772:
00013E54 4A68 0012                  		tst.w	obVelY(a0)
00013E58 6B00                       		bmi.s	locret_1379E
00013E5A 6100 0000                  		bsr.w	Sonic_HitFloor
00013E5E 4A41                       		tst.w	d1
00013E60 6A00                       		bpl.s	locret_1379E
00013E62 D368 000C                  		add.w	d1,obY(a0)
00013E66 1143 0026                  		move.b	d3,obAngle(a0)
00013E6A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013E6E 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00013E74 317C 0000 0012             		move.w	#0,obVelY(a0)
00013E7A 3168 0010 0014             		move.w	obVelX(a0),obInertia(a0)
00013E80                            

00013E80                            locret_1379E:
00013E80 4E75                       		rts	
00013E82                            ; End of function Sonic_Floor
00013E82                            ; End of function Sonic_Floor
00013E82                            		include	"_incObj\Sonic ResetOnFloor.asm"
00013E82                            ; ---------------------------------------------------------------------------
00013E82                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00013E82                            ; ---------------------------------------------------------------------------
00013E82                            

00013E82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E82                            

00013E82                            

00013E82                            Sonic_ResetOnFloor:
00013E82 0828 0004 0022             		btst	#4,obStatus(a0)
00013E88 6700                       		beq.s	loc_137AE
00013E8A 4E71                       		nop	
00013E8C 4E71                       		nop	
00013E8E 4E71                       		nop	
00013E90                            

00013E90                            loc_137AE:
00013E90 08A8 0005 0022             		bclr	#5,obStatus(a0)
00013E96 08A8 0001 0022             		bclr	#1,obStatus(a0)
00013E9C 08A8 0004 0022             		bclr	#4,obStatus(a0)
00013EA2 0828 0002 0022             		btst	#2,obStatus(a0)
00013EA8 6700                       		beq.s	loc_137E4
00013EAA 08A8 0002 0022             		bclr	#2,obStatus(a0)
00013EB0 117C 0013 0016             		move.b	#$13,obHeight(a0)
00013EB6 117C 0009 0017             		move.b	#9,obWidth(a0)
00013EBC 117C 0000 001C             		move.b	#id_Walk,obAnim(a0) ; use running/walking animation
00013EC2 5B68 000C                  		subq.w	#5,obY(a0)
00013EC6                            

00013EC6                            loc_137E4:
00013EC6 117C 0000 003C             		move.b	#0,$3C(a0)
00013ECC 31FC 0000 F7D0             		move.w	#0,(v_itembonus).w
00013ED2 4E75                       		rts	
00013ED4                            ; End of function Sonic_ResetOnFloor
00013ED4                            ; End of function Sonic_ResetOnFloor
00013ED4                            		include	"_incObj\Sonic (part 2).asm"
00013ED4                            ; ---------------------------------------------------------------------------
00013ED4                            ; Sonic	when he	gets hurt
00013ED4                            ; ---------------------------------------------------------------------------
00013ED4                            

00013ED4                            Sonic_Hurt:	; Routine 4
00013ED4 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
00013EDA 0668 0030 0012             		addi.w	#$30,obVelY(a0)
00013EE0 0828 0006 0022             		btst	#6,obStatus(a0)
00013EE6 6700                       		beq.s	loc_1380C
00013EE8 0468 0020 0012             		subi.w	#$20,obVelY(a0)
00013EEE                            

00013EEE                            loc_1380C:
00013EEE 6100 0000                  		bsr.w	Sonic_HurtStop
00013EF2 6100 FAF2                  		bsr.w	Sonic_LevelBound
00013EF6 6100 F548                  		bsr.w	Sonic_RecordPosition
00013EFA 6100 0000                  		bsr.w	Sonic_Animate
00013EFE 6100 0000                  		bsr.w	Sonic_LoadGfx
00013F02 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00013F08                            

00013F08                            ; ---------------------------------------------------------------------------
00013F08                            ; Subroutine to	stop Sonic falling after he's been hurt
00013F08                            ; ---------------------------------------------------------------------------
00013F08                            

00013F08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F08                            

00013F08                            

00013F08                            Sonic_HurtStop:
00013F08 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00013F0C 0640 00E0                  		addi.w	#$E0,d0
00013F10 B068 000C                  		cmp.w	obY(a0),d0
00013F14 6500 0000                  		bcs.w	KillSonic
00013F18 6100 FD6C                  		bsr.w	Sonic_Floor
00013F1C 0828 0001 0022             		btst	#1,obStatus(a0)
00013F22 6600                       		bne.s	locret_13860
00013F24 7000                       		moveq	#0,d0
00013F26 3140 0012                  		move.w	d0,obVelY(a0)
00013F2A 3140 0010                  		move.w	d0,obVelX(a0)
00013F2E 3140 0014                  		move.w	d0,obInertia(a0)
00013F32 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
00013F38 5528 0024                  		subq.b	#2,obRoutine(a0)
00013F3C 317C 0078 0030             		move.w	#$78,$30(a0)
00013F42                            

00013F42                            locret_13860:
00013F42 4E75                       		rts	
00013F44                            ; End of function Sonic_HurtStop
00013F44                            

00013F44                            ; ---------------------------------------------------------------------------
00013F44                            ; Sonic	when he	dies
00013F44                            ; ---------------------------------------------------------------------------
00013F44                            

00013F44                            Sonic_Death:	; Routine 6
00013F44 6100 0000                  		bsr.w	GameOver
00013F48 4EB9 0000 DC4E             		jsr	(ObjectFall).l
00013F4E 6100 F4F0                  		bsr.w	Sonic_RecordPosition
00013F52 6100 0000                  		bsr.w	Sonic_Animate
00013F56 6100 0000                  		bsr.w	Sonic_LoadGfx
00013F5A 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00013F60                            

00013F60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013F60                            

00013F60                            

00013F60                            GameOver:
00013F60 3038 F72E                  		move.w	(v_limitbtm2).w,d0
00013F64 0640 0100                  		addi.w	#$100,d0
00013F68 B068 000C                  		cmp.w	obY(a0),d0
00013F6C 6400 0000                  		bcc.w	locret_13900
00013F70 317C FFC8 0012             		move.w	#-$38,obVelY(a0)
00013F76 5428 0024                  		addq.b	#2,obRoutine(a0)
00013F7A 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
00013F7E 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update lives counter
00013F82 5338 FE12                  		subq.b	#1,(v_lives).w	; subtract 1 from number of lives
00013F86 6600                       		bne.s	loc_138D4
00013F88 317C 0000 003A             		move.w	#0,$3A(a0)
00013F8E 11FC 0039 D080             		move.b	#id_GameOverCard,(v_gameovertext1).w ; load GAME object
00013F94 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_gameovertext2).w ; load OVER object
00013F9A 11FC 0001 D0DA             		move.b	#1,(v_gameovertext2+obFrame).w ; set OVER object to correct frame
00013FA0 4238 FE1A                  		clr.b	(f_timeover).w
00013FA4                            

00013FA4                            loc_138C2:
00013FA4 303C 0000                  		move.w	#bgm_GameOver,d0
00013FA8 4EB9 0000 139C             		jsr	(PlaySound).l	; play game over music
00013FAE 7003                       		moveq	#3,d0
00013FB0 4EF9 0000 1586             		jmp	(AddPLC).l	; load game over patterns
00013FB6                            ; ===========================================================================
00013FB6                            

00013FB6                            loc_138D4:
00013FB6 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013FBC 4A38 FE1A                  		tst.b	(f_timeover).w	; is TIME OVER tag set?
00013FC0 6700                       		beq.s	locret_13900	; if not, branch
00013FC2 317C 0000 003A             		move.w	#0,$3A(a0)
00013FC8 11FC 0039 D080             		move.b	#id_GameOverCard,(v_gameovertext1).w ; load TIME object
00013FCE 11FC 0039 D0C0             		move.b	#id_GameOverCard,(v_gameovertext2).w ; load OVER object
00013FD4 11FC 0002 D09A             		move.b	#2,(v_gameovertext1+obFrame).w
00013FDA 11FC 0003 D0DA             		move.b	#3,(v_gameovertext2+obFrame).w
00013FE0 60C2                       		bra.s	loc_138C2
00013FE2                            ; ===========================================================================
00013FE2                            

00013FE2                            locret_13900:
00013FE2 4E75                       		rts	
00013FE4                            ; End of function GameOver
00013FE4                            

00013FE4                            ; ---------------------------------------------------------------------------
00013FE4                            ; Sonic	when the level is restarted
00013FE4                            ; ---------------------------------------------------------------------------
00013FE4                            

00013FE4                            Sonic_ResetLevel:; Routine 8
00013FE4 4A68 003A                  		tst.w	$3A(a0)
00013FE8 6700                       		beq.s	locret_13914
00013FEA 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013FEE 6600                       		bne.s	locret_13914
00013FF0 31FC 0001 FE02             		move.w	#1,(f_restart).w ; restart the level
00013FF6                            

00013FF6                            	locret_13914:
00013FF6 4E75                       		rts	
00013FF6 4E75                       		rts	
00013FF8                            		include	"_incObj\Sonic Loops.asm"
00013FF8                            ; ---------------------------------------------------------------------------
00013FF8                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013FF8                            ; ---------------------------------------------------------------------------
00013FF8                            

00013FF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FF8                            

00013FF8                            

00013FF8                            Sonic_Loops:
00013FF8 0C38 0003 FE10             		cmpi.b	#id_SLZ,(v_zone).w ; is level SLZ ?
00013FFE 6700                       		beq.s	@isstarlight	; if yes, branch
00014000 4A38 FE10                  		tst.b	(v_zone).w	; is level GHZ ?
00014004 6600 0000                  		bne.w	@noloops	; if not, branch
00014008                            

00014008                            	@isstarlight:
00014008 3028 000C                  		move.w	obY(a0),d0
0001400C E248                       		lsr.w	#1,d0
0001400E 0240 0380                  		andi.w	#$380,d0
00014012 1228 0008                  		move.b	obX(a0),d1
00014016 0241 007F                  		andi.w	#$7F,d1
0001401A D041                       		add.w	d1,d0
0001401C 43F8 A400                  		lea	(v_lvllayout).w,a1
00014020 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014024                            

00014024 B238 F7AE                  		cmp.b	(v_256roll1).w,d1 ; is Sonic on a "roll tunnel" tile?
00014028 6700 FA64                  		beq.w	Sonic_ChkRoll	; if yes, branch
0001402C B238 F7AF                  		cmp.b	(v_256roll2).w,d1
00014030 6700 FA5C                  		beq.w	Sonic_ChkRoll
00014034                            

00014034 B238 F7AC                  		cmp.b	(v_256loop1).w,d1 ; is Sonic on a loop tile?
00014038 6700                       		beq.s	@chkifleft	; if yes, branch
0001403A B238 F7AD                  		cmp.b	(v_256loop2).w,d1
0001403E 6700                       		beq.s	@chkifinair
00014040 08A8 0006 0001             		bclr	#6,obRender(a0) ; return Sonic to high plane
00014046 4E75                       		rts	
00014048                            ; ===========================================================================
00014048                            

00014048                            @chkifinair:
00014048 0828 0001 0022             		btst	#1,obStatus(a0)	; is Sonic in the air?
0001404E 6700                       		beq.s	@chkifleft	; if not, branch
00014050                            

00014050 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00014056 4E75                       		rts	
00014058                            ; ===========================================================================
00014058                            

00014058                            @chkifleft:
00014058 3428 0008                  		move.w	obX(a0),d2
0001405C 0C02 002C                  		cmpi.b	#$2C,d2
00014060 6400                       		bcc.s	@chkifright
00014062                            

00014062 08A8 0006 0001             		bclr	#6,obRender(a0)	; return Sonic to high plane
00014068 4E75                       		rts	
0001406A                            ; ===========================================================================
0001406A                            

0001406A                            @chkifright:
0001406A 0C02 00E0                  		cmpi.b	#$E0,d2
0001406E 6500                       		bcs.s	@chkangle1
00014070                            

00014070 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00014076 4E75                       		rts	
00014078                            ; ===========================================================================
00014078                            

00014078                            @chkangle1:
00014078 0828 0006 0001             		btst	#6,obRender(a0) ; is Sonic on low plane?
0001407E 6600                       		bne.s	@chkangle2	; if yes, branch
00014080                            

00014080 1228 0026                  		move.b	obAngle(a0),d1
00014084 6700                       		beq.s	@done
00014086 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upside-down?
0001408A 6200                       		bhi.s	@done		; if yes, branch
0001408C 08E8 0006 0001             		bset	#6,obRender(a0)	; send Sonic to	low plane
00014092 4E75                       		rts	
00014094                            ; ===========================================================================
00014094                            

00014094                            @chkangle2:
00014094 1228 0026                  		move.b	obAngle(a0),d1
00014098 0C01 0080                  		cmpi.b	#$80,d1		; is Sonic upright?
0001409C 6300                       		bls.s	@done		; if yes, branch
0001409E 08A8 0006 0001             		bclr	#6,obRender(a0)	; send Sonic to	high plane
000140A4                            

000140A4                            @noloops:
000140A4                            @done:
000140A4 4E75                       		rts	
000140A6                            ; End of function Sonic_Loops
000140A6                            ; End of function Sonic_Loops
000140A6                            		include	"_incObj\Sonic Animate.asm"
000140A6                            ; ---------------------------------------------------------------------------
000140A6                            ; Subroutine to	animate	Sonic's sprites
000140A6                            ; ---------------------------------------------------------------------------
000140A6                            

000140A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140A6                            

000140A6                            

000140A6                            Sonic_Animate:
000140A6 43F9 0000 0000             		lea	(Ani_Sonic).l,a1
000140AC 7000                       		moveq	#0,d0
000140AE 1028 001C                  		move.b	obAnim(a0),d0
000140B2 B028 001D                  		cmp.b	obNextAni(a0),d0 ; is animation set to restart?
000140B6 6700                       		beq.s	@do		; if not, branch
000140B8 1140 001D                  		move.b	d0,obNextAni(a0) ; set to "no restart"
000140BC 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; reset animation
000140C2 117C 0000 001E             		move.b	#0,obTimeFrame(a0) ; reset frame duration
000140C8                            

000140C8                            	@do:
000140C8 D040                       		add.w	d0,d0
000140CA D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000140CE 1011                       		move.b	(a1),d0
000140D0 6B00                       		bmi.s	@walkrunroll	; if animation is walk/run/roll/jump, branch
000140D2 1228 0022                  		move.b	obStatus(a0),d1
000140D6 0201 0001                  		andi.b	#1,d1
000140DA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000140E0 8328 0001                  		or.b	d1,obRender(a0)
000140E4 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
000140E8 6A00                       		bpl.s	@delay		; if time remains, branch
000140EA 1140 001E                  		move.b	d0,obTimeFrame(a0) ; load frame duration
000140EE                            

000140EE                            @loadframe:
000140EE 7200                       		moveq	#0,d1
000140F0 1228 001B                  		move.b	obAniFrame(a0),d1 ; load current frame number
000140F4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
000140F8 6B00                       		bmi.s	@end_FF		; if animation is complete, branch
000140FA                            

000140FA                            	@next:
000140FA 1140 001A                  		move.b	d0,obFrame(a0)	; load sprite number
000140FE 5228 001B                  		addq.b	#1,obAniFrame(a0) ; next frame number
00014102                            

00014102                            	@delay:
00014102 4E75                       		rts	
00014104                            ; ===========================================================================
00014104                            

00014104                            @end_FF:
00014104 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014106 6600                       		bne.s	@end_FE		; if not, branch
00014108 117C 0000 001B             		move.b	#0,obAniFrame(a0) ; restart the animation
0001410E 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014112 60E6                       		bra.s	@next
00014114                            ; ===========================================================================
00014114                            

00014114                            @end_FE:
00014114 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014116 6600                       		bne.s	@end_FD		; if not, branch
00014118 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001411C 9128 001B                  		sub.b	d0,obAniFrame(a0) ; jump back d0 bytes in the script
00014120 9200                       		sub.b	d0,d1
00014122 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014126 60D2                       		bra.s	@next
00014128                            ; ===========================================================================
00014128                            

00014128                            @end_FD:
00014128 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001412A 6600                       		bne.s	@end		; if not, branch
0001412C 1171 1002 001C             		move.b	2(a1,d1.w),obAnim(a0) ; read next byte, run that animation
00014132                            

00014132                            	@end:
00014132 4E75                       		rts	
00014134                            ; ===========================================================================
00014134                            

00014134                            @walkrunroll:
00014134 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; subtract 1 from frame duration
00014138 6AC8                       		bpl.s	@delay		; if time remains, branch
0001413A 5200                       		addq.b	#1,d0		; is animation walking/running?
0001413C 6600 0000                  		bne.w	@rolljump	; if not, branch
00014140 7200                       		moveq	#0,d1
00014142 1028 0026                  		move.b	obAngle(a0),d0	; get Sonic's angle
00014146 1428 0022                  		move.b	obStatus(a0),d2
0001414A 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001414E 6600                       		bne.s	@flip		; if yes, branch
00014150 4600                       		not.b	d0		; reverse angle
00014152                            

00014152                            	@flip:
00014152 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014156 6A00                       		bpl.s	@noinvert	; if angle is $0-$7F, branch
00014158 7203                       		moveq	#3,d1
0001415A                            

0001415A                            	@noinvert:
0001415A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00014160 B302                       		eor.b	d1,d2
00014162 8528 0001                  		or.b	d2,obRender(a0)
00014166 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing something?
0001416C 6600 0000                  		bne.w	@push		; if yes, branch
00014170                            

00014170 E808                       		lsr.b	#4,d0		; divide angle by $10
00014172 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014176 3428 0014                  		move.w	obInertia(a0),d2 ; get Sonic's speed
0001417A 6A00                       		bpl.s	@nomodspeed
0001417C 4442                       		neg.w	d2		; modulus speed
0001417E                            

0001417E                            	@nomodspeed:
0001417E 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014184 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014188 6400                       		bcc.s	@running	; if yes, branch
0001418A                            

0001418A 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014190 1200                       		move.b	d0,d1
00014192 E209                       		lsr.b	#1,d1
00014194 D001                       		add.b	d1,d0
00014196                            

00014196                            	@running:
00014196 D000                       		add.b	d0,d0
00014198 1600                       		move.b	d0,d3
0001419A 4442                       		neg.w	d2
0001419C 0642 0800                  		addi.w	#$800,d2
000141A0 6A00                       		bpl.s	@belowmax
000141A2 7400                       		moveq	#0,d2		; max animation speed
000141A4                            

000141A4                            	@belowmax:
000141A4 E04A                       		lsr.w	#8,d2
000141A6 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000141AA 6100 FF42                  		bsr.w	@loadframe
000141AE D728 001A                  		add.b	d3,obFrame(a0)	; modify frame number
000141B2 4E75                       		rts	
000141B4                            ; ===========================================================================
000141B4                            

000141B4                            @rolljump:
000141B4 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000141B6 6600                       		bne.s	@push		; if not, branch
000141B8 3428 0014                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000141BC 6A00                       		bpl.s	@nomodspeed2
000141BE 4442                       		neg.w	d2
000141C0                            

000141C0                            	@nomodspeed2:
000141C0 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000141C6 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000141CA 6400                       		bcc.s	@rollfast	; if yes, branch
000141CC 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
000141D2                            

000141D2                            	@rollfast:
000141D2 4442                       		neg.w	d2
000141D4 0642 0400                  		addi.w	#$400,d2
000141D8 6A00                       		bpl.s	@belowmax2
000141DA 7400                       		moveq	#0,d2
000141DC                            

000141DC                            	@belowmax2:
000141DC E04A                       		lsr.w	#8,d2
000141DE 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
000141E2 1228 0022                  		move.b	obStatus(a0),d1
000141E6 0201 0001                  		andi.b	#1,d1
000141EA 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000141F0 8328 0001                  		or.b	d1,obRender(a0)
000141F4 6000 FEF8                  		bra.w	@loadframe
000141F8                            ; ===========================================================================
000141F8                            

000141F8                            @push:
000141F8 3428 0014                  		move.w	obInertia(a0),d2 ; get Sonic's speed
000141FC 6B00                       		bmi.s	@negspeed
000141FE 4442                       		neg.w	d2
00014200                            

00014200                            	@negspeed:
00014200 0642 0800                  		addi.w	#$800,d2
00014204 6A00                       		bpl.s	@belowmax3	
00014206 7400                       		moveq	#0,d2
00014208                            

00014208                            	@belowmax3:
00014208 EC4A                       		lsr.w	#6,d2
0001420A 1142 001E                  		move.b	d2,obTimeFrame(a0) ; modify frame duration
0001420E 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014214 1228 0022                  		move.b	obStatus(a0),d1
00014218 0201 0001                  		andi.b	#1,d1
0001421C 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00014222 8328 0001                  		or.b	d1,obRender(a0)
00014226 6000 FEC6                  		bra.w	@loadframe
0001422A                            

0001422A                            ; End of function Sonic_Animate
0001422A                            ; End of function Sonic_Animate
0001422A                            		include	"_anim\Sonic.asm"
0001422A                            ; ---------------------------------------------------------------------------
0001422A                            ; Animation script - Sonic
0001422A                            ; ---------------------------------------------------------------------------
0001422A                            Ani_Sonic:
0001422A                            

0001422A 0000                       ptr_Walk:	dc.w SonAni_Walk-Ani_Sonic
0001422C 0000                       ptr_Run:	dc.w SonAni_Run-Ani_Sonic
0001422E 0000                       ptr_Roll:	dc.w SonAni_Roll-Ani_Sonic
00014230 0000                       ptr_Roll2:	dc.w SonAni_Roll2-Ani_Sonic
00014232 0000                       ptr_Push:	dc.w SonAni_Push-Ani_Sonic
00014234 0000                       ptr_Wait:	dc.w SonAni_Wait-Ani_Sonic
00014236 0000                       ptr_Balance:	dc.w SonAni_Balance-Ani_Sonic
00014238 0000                       ptr_LookUp:	dc.w SonAni_LookUp-Ani_Sonic
0001423A 0000                       ptr_Duck:	dc.w SonAni_Duck-Ani_Sonic
0001423C 0000                       ptr_Warp1:	dc.w SonAni_Warp1-Ani_Sonic
0001423E 0000                       ptr_Warp2:	dc.w SonAni_Warp2-Ani_Sonic
00014240 0000                       ptr_Warp3:	dc.w SonAni_Warp3-Ani_Sonic
00014242 0000                       ptr_Warp4:	dc.w SonAni_Warp4-Ani_Sonic
00014244 0000                       ptr_Stop:	dc.w SonAni_Stop-Ani_Sonic
00014246 0000                       ptr_Float1:	dc.w SonAni_Float1-Ani_Sonic
00014248 0000                       ptr_Float2:	dc.w SonAni_Float2-Ani_Sonic
0001424A 0000                       ptr_Spring:	dc.w SonAni_Spring-Ani_Sonic
0001424C 0000                       ptr_Hang:	dc.w SonAni_Hang-Ani_Sonic
0001424E 0000                       ptr_Leap1:	dc.w SonAni_Leap1-Ani_Sonic
00014250 0000                       ptr_Leap2:	dc.w SonAni_Leap2-Ani_Sonic
00014252 0000                       ptr_Surf:	dc.w SonAni_Surf-Ani_Sonic
00014254 0000                       ptr_GetAir:	dc.w SonAni_GetAir-Ani_Sonic
00014256 0000                       ptr_Burnt:	dc.w SonAni_Burnt-Ani_Sonic
00014258 0000                       ptr_Drown:	dc.w SonAni_Drown-Ani_Sonic
0001425A 0000                       ptr_Death:	dc.w SonAni_Death-Ani_Sonic
0001425C 0000                       ptr_Shrink:	dc.w SonAni_Shrink-Ani_Sonic
0001425E 0000                       ptr_Hurt:	dc.w SonAni_Hurt-Ani_Sonic
00014260 0000                       ptr_WaterSlide:	dc.w SonAni_WaterSlide-Ani_Sonic
00014262 0000                       ptr_Null:	dc.w SonAni_Null-Ani_Sonic
00014264 0000                       ptr_Float3:	dc.w SonAni_Float3-Ani_Sonic
00014266 0000                       ptr_Float4:	dc.w SonAni_Float4-Ani_Sonic
00014268                            

00014268 FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, fr_Walk13, fr_Walk14,	fr_Walk15, fr_Walk16, fr_Walk11, fr_Walk12, afEnd
00014270                            		even
00014270 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF,  fr_Run11,  fr_Run12,  fr_Run13,  fr_Run14,     afEnd,     afEnd, afEnd
00014278                            		even
00014278 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE,  fr_Roll1,  fr_Roll2,  fr_Roll3,  fr_Roll4,  fr_Roll5,     afEnd, afEnd
00014280                            		even
00014280 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE,  fr_Roll1,  fr_Roll2,  fr_Roll5,  fr_Roll3,  fr_Roll4,  fr_Roll5, afEnd
00014288                            		even
00014288 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD,  fr_Push1,  fr_Push2,  fr_Push3,  fr_Push4,     afEnd,     afEnd, afEnd
00014290                            		even
00014290 1701 0101 0101 0101 0101   SonAni_Wait:	dc.b $17, fr_Stand, fr_Stand, fr_Stand, fr_Stand, fr_Stand, fr_Stand, fr_Stand, fr_Stand, fr_Stand
0001429A 0101 0103 0202 0203 04FE+  		dc.b fr_Stand, fr_Stand, fr_Stand, fr_Wait2, fr_Wait1, fr_Wait1, fr_Wait1, fr_Wait2, fr_Wait3, afBack, 2
000142A6 00                         		even
000142A6 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, fr_Balance1, fr_Balance2, afEnd
000142AA                            		even
000142AA 3F05 FF                    SonAni_LookUp:	dc.b $3F, fr_LookUp, afEnd
000142AE 00                         		even
000142AE 3F39 FF                    SonAni_Duck:	dc.b $3F, fr_Duck, afEnd
000142B2 00                         		even
000142B2 3F33 FF                    SonAni_Warp1:	dc.b $3F, fr_Warp1, afEnd
000142B6 00                         		even
000142B6 3F34 FF                    SonAni_Warp2:	dc.b $3F, fr_Warp2, afEnd
000142BA 00                         		even
000142BA 3F35 FF                    SonAni_Warp3:	dc.b $3F, fr_Warp3, afEnd
000142BE 00                         		even
000142BE 3F36 FF                    SonAni_Warp4:	dc.b $3F, fr_Warp4, afEnd
000142C2 00                         		even
000142C2 0737 38FF                  SonAni_Stop:	dc.b 7,	fr_Stop1, fr_Stop2, afEnd
000142C6                            		even
000142C6 073C 3FFF                  SonAni_Float1:	dc.b 7,	fr_Float1, fr_Float4, afEnd
000142CA                            		even
000142CA 073C 3D53 3E54 FF          SonAni_Float2:	dc.b 7,	fr_Float1, fr_Float2, fr_Float5, fr_Float3, fr_Float6, afEnd
000142D2 00                         		even
000142D2 2F40 FD00                  SonAni_Spring:	dc.b $2F, fr_Spring, afChange, id_Walk
000142D6                            		even
000142D6 0441 42FF                  SonAni_Hang:	dc.b 4,	fr_Hang1, fr_Hang2, afEnd
000142DA                            		even
000142DA 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, fr_Leap1, fr_Leap1, fr_Leap1,	afBack, 1
000142E0                            		even
000142E0 0F43 44FE 01               SonAni_Leap2:	dc.b $F, fr_Leap1, fr_Leap2, afBack, 1
000142E6 00                         		even
000142E6 3F49 FF                    SonAni_Surf:	dc.b $3F, fr_Surf, afEnd
000142EA 00                         		even
000142EA 0B56 560A 0BFD 00          SonAni_GetAir:	dc.b $B, fr_GetAir, fr_GetAir, fr_Walk15, fr_Walk16, afChange, id_Walk
000142F2 00                         		even
000142F2 204B FF                    SonAni_Burnt:	dc.b $20, fr_Burnt, afEnd
000142F6 00                         		even
000142F6 2F4C FF                    SonAni_Drown:	dc.b $2F, fr_Drown, afEnd
000142FA 00                         		even
000142FA 034D FF                    SonAni_Death:	dc.b 3,	fr_Death, afEnd
000142FE 00                         		even
000142FE 034E 4F50 5152 00FE 01     SonAni_Shrink:	dc.b 3,	fr_Shrink1, fr_Shrink2, fr_Shrink3, fr_Shrink4, fr_Shrink5, fr_Null, afBack, 1
00014308 00                         		even
00014308 0355 FF                    SonAni_Hurt:	dc.b 3,	fr_Injury, afEnd
0001430C 00                         		even
0001430C                            SonAni_WaterSlide:
0001430C 0755 57FF                  		dc.b 7, fr_Injury, fr_WaterSlide, afEnd
00014310                            		even
00014310 7700 FD00                  SonAni_Null:	dc.b $77, fr_Null, afChange, id_Walk
00014314                            		even
00014314 033C 3D53 3E54 FF          SonAni_Float3:	dc.b 3,	fr_Float1, fr_Float2, fr_Float5, fr_Float3, fr_Float6, afEnd
0001431C 00                         		even
0001431C 033C FD00                  SonAni_Float4:	dc.b 3,	fr_Float1, afChange, id_Walk
00014320                            		even
00014320                            

00014320 =00000000                  id_Walk:	equ (ptr_Walk-Ani_Sonic)/2	; 0
00014320 =00000001                  id_Run:		equ (ptr_Run-Ani_Sonic)/2	; 1
00014320 =00000002                  id_Roll:	equ (ptr_Roll-Ani_Sonic)/2	; 2
00014320 =00000003                  id_Roll2:	equ (ptr_Roll2-Ani_Sonic)/2	; 3
00014320 =00000004                  id_Push:	equ (ptr_Push-Ani_Sonic)/2	; 4
00014320 =00000005                  id_Wait:	equ (ptr_Wait-Ani_Sonic)/2	; 5
00014320 =00000006                  id_Balance:	equ (ptr_Balance-Ani_Sonic)/2	; 6
00014320 =00000007                  id_LookUp:	equ (ptr_LookUp-Ani_Sonic)/2	; 7
00014320 =00000008                  id_Duck:	equ (ptr_Duck-Ani_Sonic)/2	; 8
00014320 =00000009                  id_Warp1:	equ (ptr_Warp1-Ani_Sonic)/2	; 9
00014320 =0000000A                  id_Warp2:	equ (ptr_Warp2-Ani_Sonic)/2	; $A
00014320 =0000000B                  id_Warp3:	equ (ptr_Warp3-Ani_Sonic)/2	; $B
00014320 =0000000C                  id_Warp4:	equ (ptr_Warp4-Ani_Sonic)/2	; $C
00014320 =0000000D                  id_Stop:	equ (ptr_Stop-Ani_Sonic)/2	; $D
00014320 =0000000E                  id_Float1:	equ (ptr_Float1-Ani_Sonic)/2	; $E
00014320 =0000000F                  id_Float2:	equ (ptr_Float2-Ani_Sonic)/2	; $F
00014320 =00000010                  id_Spring:	equ (ptr_Spring-Ani_Sonic)/2	; $10
00014320 =00000011                  id_Hang:	equ (ptr_Hang-Ani_Sonic)/2	; $11
00014320 =00000012                  id_Leap1:	equ (ptr_Leap1-Ani_Sonic)/2	; $12
00014320 =00000013                  id_Leap2:	equ (ptr_Leap2-Ani_Sonic)/2	; $13
00014320 =00000014                  id_Surf:	equ (ptr_Surf-Ani_Sonic)/2	; $14
00014320 =00000015                  id_GetAir:	equ (ptr_GetAir-Ani_Sonic)/2	; $15
00014320 =00000016                  id_Burnt:	equ (ptr_Burnt-Ani_Sonic)/2	; $16
00014320 =00000017                  id_Drown:	equ (ptr_Drown-Ani_Sonic)/2	; $17
00014320 =00000018                  id_Death:	equ (ptr_Death-Ani_Sonic)/2	; $18
00014320 =00000019                  id_Shrink:	equ (ptr_Shrink-Ani_Sonic)/2	; $19
00014320 =0000001A                  id_Hurt:	equ (ptr_Hurt-Ani_Sonic)/2	; $1A
00014320 =0000001B                  id_WaterSlide:	equ (ptr_WaterSlide-Ani_Sonic)/2 ; $1B
00014320 =0000001C                  id_Null:	equ (ptr_Null-Ani_Sonic)/2	; $1C
00014320 =0000001D                  id_Float3:	equ (ptr_Float3-Ani_Sonic)/2	; $1D
00014320 =0000001E                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1E
00014320 =0000001E                  id_Float4:	equ (ptr_Float4-Ani_Sonic)/2	; $1E
00014320                            		include	"_incObj\Sonic LoadGfx.asm"
00014320                            ; ---------------------------------------------------------------------------
00014320                            ; Sonic	graphics loading subroutine
00014320                            ; ---------------------------------------------------------------------------
00014320                            

00014320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014320                            

00014320                            

00014320                            Sonic_LoadGfx:
00014320 7000                       		moveq	#0,d0
00014322 1028 001A                  		move.b	obFrame(a0),d0	; load frame number
00014326 B038 F766                  		cmp.b	(v_sonframenum).w,d0 ; has frame changed?
0001432A 6700                       		beq.s	@nochange	; if not, branch
0001432C                            

0001432C 11C0 F766                  		move.b	d0,(v_sonframenum).w
00014330 45F9 0000 0000             		lea	(SonicDynPLC).l,a2 ; load PLC script
00014336 D040                       		add.w	d0,d0
00014338 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001433C 7200                       		moveq	#0,d1
0001433E 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014340 5301                       		subq.b	#1,d1
00014342 6B00                       		bmi.s	@nochange	; if zero, branch
00014344 47F8 C800                  		lea	(v_sgfx_buffer).w,a3
00014348 11FC 0001 F767             		move.b	#1,(f_sonframechg).w ; set flag for Sonic graphics DMA
0001434E                            

0001434E                            	@readentry:
0001434E 7400                       		moveq	#0,d2
00014350 141A                       		move.b	(a2)+,d2
00014352 3002                       		move.w	d2,d0
00014354 E808                       		lsr.b	#4,d0
00014356 E14A                       		lsl.w	#8,d2
00014358 141A                       		move.b	(a2)+,d2
0001435A EB4A                       		lsl.w	#5,d2
0001435C 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00014362 D3C2                       		adda.l	d2,a1
00014364                            

00014364                            	@loadtile:
00014364 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014368 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
0001436C 47EB 0020                  		lea	$20(a3),a3	; next tile
00014370 51C8 FFF2                  		dbf	d0,@loadtile	; repeat for number of tiles
00014374                            

00014374 51C9 FFD8                  		dbf	d1,@readentry	; repeat for number of entries
00014378                            

00014378                            	@nochange:
00014378 4E75                       		rts	
0001437A                            

0001437A                            ; End of function Sonic_LoadGfx
0001437A                            ; End of function Sonic_LoadGfx
0001437A                            

0001437A                            		include	"_incObj\0A Drowning Countdown.asm"
0001437A                            ; ---------------------------------------------------------------------------
0001437A                            ; Object 0A - drowning countdown numbers and small bubbles that float out of
0001437A                            ; Sonic's mouth (LZ)
0001437A                            ; ---------------------------------------------------------------------------
0001437A                            

0001437A                            DrownCount:
0001437A 7000                       		moveq	#0,d0
0001437C 1028 0024                  		move.b	obRoutine(a0),d0
00014380 323B 0000                  		move.w	Drown_Index(pc,d0.w),d1
00014384 4EFB 1000                  		jmp	Drown_Index(pc,d1.w)
00014388                            ; ===========================================================================
00014388                            Drown_Index:
00014388 0000                       ptr_Drown_Main:		dc.w Drown_Main-Drown_Index
0001438A 0000                       ptr_Drown_Animate:	dc.w Drown_Animate-Drown_Index
0001438C 0000                       ptr_Drown_ChkWater:	dc.w Drown_ChkWater-Drown_Index
0001438E 0000                       ptr_Drown_Display:	dc.w Drown_Display-Drown_Index
00014390 0000                       ptr_Drown_Delete:	dc.w Drown_Delete-Drown_Index
00014392 0000                       ptr_Drown_Countdown:	dc.w Drown_Countdown-Drown_Index
00014394 0000                       ptr_Drown_AirLeft:	dc.w Drown_AirLeft-Drown_Index
00014396 0000                       			dc.w Drown_Display-Drown_Index
00014398 0000                       			dc.w Drown_Delete-Drown_Index
0001439A                            

0001439A =00000030                  drown_origX:		equ $30		; original x-axis position
0001439A =00000038                  drown_time:		equ $38		; time between each number changes
0001439A                            

0001439A =00000000                  id_Drown_Main:		equ ptr_Drown_Main-Drown_Index		; 0
0001439A =00000002                  id_Drown_Animate:	equ ptr_Drown_Animate-Drown_Index		; 2
0001439A =00000004                  id_Drown_ChkWater:	equ ptr_Drown_ChkWater-Drown_Index	; 4
0001439A =00000006                  id_Drown_Display:	equ ptr_Drown_Display-Drown_Index		; 6
0001439A =00000008                  id_Drown_Delete:		equ ptr_Drown_Delete-Drown_Index		; 8
0001439A =0000000A                  id_Drown_Countdown:	equ ptr_Drown_Countdown-Drown_Index	; $A
0001439A =0000000C                  id_Drown_AirLeft:	equ ptr_Drown_AirLeft-Drown_Index		; $C
0001439A                            ; ===========================================================================
0001439A                            

0001439A                            Drown_Main:	; Routine 0
0001439A 5428 0024                  		addq.b	#2,obRoutine(a0)
0001439E 217C 0001 30AE 0004        		move.l	#Map_Bub,obMap(a0)
000143A6 317C 8348 0002             		move.w	#$8348,obGfx(a0)
000143AC 117C 0084 0001             		move.b	#$84,obRender(a0)
000143B2 117C 0010 0019             		move.b	#$10,obActWid(a0)
000143B8 117C 0001 0018             		move.b	#1,obPriority(a0)
000143BE 1028 0028                  		move.b	obSubtype(a0),d0 ; get bubble type
000143C2 6A00                       		bpl.s	@smallbubble	; branch if $00-$7F
000143C4                            

000143C4 5028 0024                  		addq.b	#8,obRoutine(a0) ; goto Drown_Countdown next
000143C8 217C 0000 0000 0004        		move.l	#Map_Drown,obMap(a0)
000143D0 317C 0440 0002             		move.w	#$440,obGfx(a0)
000143D6 0240 007F                  		andi.w	#$7F,d0
000143DA 1140 0033                  		move.b	d0,$33(a0)
000143DE 6000 0000                  		bra.w	Drown_Countdown
000143E2                            ; ===========================================================================
000143E2                            

000143E2                            @smallbubble:
000143E2 1140 001C                  		move.b	d0,obAnim(a0)
000143E6 3168 0008 0030             		move.w	obX(a0),drown_origX(a0)
000143EC 317C FF78 0012             		move.w	#-$88,obVelY(a0)
000143F2                            

000143F2                            Drown_Animate:	; Routine 2
000143F2 43F9 0000 0000             		lea	(Ani_Drown).l,a1
000143F8 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
000143FE                            

000143FE                            Drown_ChkWater:	; Routine 4
000143FE 3038 F646                  		move.w	(v_waterpos1).w,d0
00014402 B068 000C                  		cmp.w	obY(a0),d0	; has bubble reached the water surface?
00014406 6500                       		bcs.s	@wobble		; if not, branch
00014408                            

00014408 117C 0006 0024             		move.b	#id_Drown_Display,obRoutine(a0) ; goto Drown_Display next
0001440E 5E28 001C                  		addq.b	#7,obAnim(a0)
00014412 0C28 000D 001C             		cmpi.b	#$D,obAnim(a0)
00014418 6700                       		beq.s	Drown_Display
0001441A 6000                       		bra.s	Drown_Display
0001441C                            ; ===========================================================================
0001441C                            

0001441C                            @wobble:
0001441C 4A38 F7C7                  		tst.b	(f_wtunnelmode).w ; is Sonic in a water tunnel?
00014420 6700                       		beq.s	@notunnel	; if not, branch
00014422 5868 0030                  		addq.w	#4,drown_origX(a0)
00014426                            

00014426                            	@notunnel:
00014426 1028 0026                  		move.b	obAngle(a0),d0
0001442A 5228 0026                  		addq.b	#1,obAngle(a0)
0001442E 0240 007F                  		andi.w	#$7F,d0
00014432 43F9 0000 0000             		lea	(Drown_WobbleData).l,a1
00014438 1031 0000                  		move.b	(a1,d0.w),d0
0001443C 4880                       		ext.w	d0
0001443E D068 0030                  		add.w	drown_origX(a0),d0
00014442 3140 0008                  		move.w	d0,obX(a0)
00014446 6100                       		bsr.s	Drown_ShowNumber
00014448 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
0001444E 4A28 0001                  		tst.b	obRender(a0)
00014452 6A00                       		bpl.s	@delete
00014454 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001445A                            

0001445A                            	@delete:
0001445A 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00014460                            ; ===========================================================================
00014460                            

00014460                            Drown_Display:	; Routine 6, Routine $E
00014460 6100                       		bsr.s	Drown_ShowNumber
00014462 43F9 0000 0000             		lea	(Ani_Drown).l,a1
00014468 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
0001446E 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00014474                            ; ===========================================================================
00014474                            

00014474                            Drown_Delete:	; Routine 8, Routine $10
00014474 4EF9 0000 DCDC             		jmp	(DeleteObject).l
0001447A                            ; ===========================================================================
0001447A                            

0001447A                            Drown_AirLeft:	; Routine $C
0001447A 0C78 000C FE14             		cmpi.w	#$C,(v_air).w	; check air remaining
00014480 6200                       		bhi.s	Drown_AirLeft_Delete		; if higher than $C, branch
00014482 5368 0038                  		subq.w	#1,drown_time(a0)
00014486 6600                       		bne.s	@display
00014488 117C 000E 0024             		move.b	#id_Drown_Display+8,obRoutine(a0) ; goto Drown_Display next
0001448E 5E28 001C                  		addq.b	#7,obAnim(a0)
00014492 60CC                       		bra.s	Drown_Display
00014494                            ; ===========================================================================
00014494                            

00014494                            	@display:
00014494 43F9 0000 0000             		lea	(Ani_Drown).l,a1
0001449A 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
000144A0 4A28 0001                  		tst.b	obRender(a0)
000144A4 6A00                       		bpl.s	Drown_AirLeft_Delete
000144A6 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
000144AC                            

000144AC                            Drown_AirLeft_Delete:	
000144AC 4EF9 0000 DCDC             		jmp	(DeleteObject).l
000144B2                            ; ===========================================================================
000144B2                            

000144B2                            Drown_ShowNumber:
000144B2 4A68 0038                  		tst.w	drown_time(a0)
000144B6 6700                       		beq.s	@nonumber
000144B8 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
000144BC 6600                       		bne.s	@nonumber	; if time remains, branch
000144BE 0C28 0007 001C             		cmpi.b	#7,obAnim(a0)
000144C4 6400                       		bcc.s	@nonumber
000144C6                            

000144C6 317C 000F 0038             		move.w	#15,drown_time(a0)
000144CC 4268 0012                  		clr.w	obVelY(a0)
000144D0 117C 0080 0001             		move.b	#$80,obRender(a0)
000144D6 3028 0008                  		move.w	obX(a0),d0
000144DA 9078 F700                  		sub.w	(v_screenposx).w,d0
000144DE 0640 0080                  		addi.w	#$80,d0
000144E2 3140 0008                  		move.w	d0,obX(a0)
000144E6 3028 000C                  		move.w	obY(a0),d0
000144EA 9078 F704                  		sub.w	(v_screenposy).w,d0
000144EE 0640 0080                  		addi.w	#$80,d0
000144F2 3140 000A                  		move.w	d0,obScreenY(a0)
000144F6 117C 000C 0024             		move.b	#id_Drown_AirLeft,obRoutine(a0) ; goto Drown_AirLeft next
000144FC                            

000144FC                            	@nonumber:
000144FC 4E75                       		rts	
000144FE                            ; ===========================================================================
000144FE                            Drown_WobbleData:
000144FE 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0001450E 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
0001451E 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
0001452E 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
0001453E 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001454E FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
0001455E FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
0001456E FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
0001457E 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
0001458E 0202 0303 0303 0303 0303+  		dc.b 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3
0001459E 0303 0303 0303 0303 0303+  		dc.b 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2
000145AE 0202 0202 0202 0101 0101+  		dc.b 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0
000145BE 00FF FFFF FFFF FEFE FEFE+  		dc.b 0, -1, -1, -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000145CE FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000145DE FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -3
000145EE FDFD FDFD FDFD FEFE FEFE+  		dc.b -3, -3, -3, -3, -3, -3, -2, -2, -2, -2, -2, -1, -1, -1, -1, -1
000145FE                            ; ===========================================================================
000145FE                            

000145FE                            Drown_Countdown:; Routine $A
000145FE 4A68 002C                  		tst.w	$2C(a0)
00014602 6600 0000                  		bne.w	@loc_13F86
00014606 0C38 0006 D024             		cmpi.b	#6,(v_player+obRoutine).w
0001460C 6400 0000                  		bcc.w	@nocountdown
00014610 0838 0006 D022             		btst	#6,(v_player+obStatus).w ; is Sonic underwater?
00014616 6700 0000                  		beq.w	@nocountdown	; if not, branch
0001461A                            

0001461A 5368 0038                  		subq.w	#1,drown_time(a0)	; decrement timer
0001461E 6A00 0000                  		bpl.w	@nochange	; branch if time remains
00014622 317C 003B 0038             		move.w	#59,drown_time(a0)
00014628 317C 0001 0036             		move.w	#1,$36(a0)
0001462E 4EB9 0000 29BA             		jsr	(RandomNumber).l
00014634 0240 0001                  		andi.w	#1,d0
00014638 1140 0034                  		move.b	d0,$34(a0)
0001463C 3038 FE14                  		move.w	(v_air).w,d0	; check air remaining
00014640 0C40 0019                  		cmpi.w	#25,d0
00014644 6700                       		beq.s	@warnsound	; play sound if	air is 25
00014646 0C40 0014                  		cmpi.w	#20,d0
0001464A 6700                       		beq.s	@warnsound
0001464C 0C40 000F                  		cmpi.w	#15,d0
00014650 6700                       		beq.s	@warnsound
00014652 0C40 000C                  		cmpi.w	#12,d0
00014656 6200                       		bhi.s	@reduceair	; if air is above 12, branch
00014658                            

00014658 6600                       		bne.s	@skipmusic	; if air is less than 12, branch
0001465A 303C 0000                  		move.w	#bgm_Drowning,d0
0001465E 4EB9 0000 139C             		jsr	(PlaySound).l	; play countdown music
00014664                            

00014664                            	@skipmusic:
00014664 5328 0032                  		subq.b	#1,$32(a0)
00014668 6A00                       		bpl.s	@reduceair
0001466A 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014670 08E8 0007 0036             		bset	#7,$36(a0)
00014676 6000                       		bra.s	@reduceair
00014678                            ; ===========================================================================
00014678                            

00014678                            @warnsound:
00014678 303C 0000                  		move.w	#sfx_Warning,d0
0001467C 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play "ding-ding" warning sound
00014682                            

00014682                            @reduceair:
00014682 5378 FE14                  		subq.w	#1,(v_air).w	; subtract 1 from air remaining
00014686 6400 0000                  		bcc.w	@gotomakenum	; if air is above 0, branch
0001468A                            

0001468A                            		; Sonic drowns here
0001468A 6100 0000                  		bsr.w	ResumeMusic
0001468E 11FC 0081 F7C8             		move.b	#$81,(f_playerctrl).w ; lock controls and disable object interaction
00014694 303C 0000                  		move.w	#sfx_Drown,d0
00014698 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play drowning sound
0001469E 117C 000A 0034             		move.b	#$A,$34(a0)
000146A4 317C 0001 0036             		move.w	#1,$36(a0)
000146AA 317C 0078 002C             		move.w	#$78,$2C(a0)
000146B0 2F08                       		move.l	a0,-(sp)
000146B2 41F8 D000                  		lea	(v_player).w,a0
000146B6 6100 F7CA                  		bsr.w	Sonic_ResetOnFloor
000146BA 117C 0017 001C             		move.b	#id_Drown,obAnim(a0)	; use Sonic's drowning animation
000146C0 08E8 0001 0022             		bset	#1,obStatus(a0)
000146C6 08E8 0007 0002             		bset	#7,obGfx(a0)
000146CC 317C 0000 0012             		move.w	#0,obVelY(a0)
000146D2 317C 0000 0010             		move.w	#0,obVelX(a0)
000146D8 317C 0000 0014             		move.w	#0,obInertia(a0)
000146DE 11FC 0001 F744             		move.b	#1,(f_nobgscroll).w
000146E4 205F                       		movea.l	(sp)+,a0
000146E6 4E75                       		rts	
000146E8                            ; ===========================================================================
000146E8                            

000146E8                            @loc_13F86:
000146E8 5368 002C                  		subq.w	#1,$2C(a0)
000146EC 6600                       		bne.s	@loc_13F94
000146EE 11FC 0006 D024             		move.b	#6,(v_player+obRoutine).w
000146F4 4E75                       		rts	
000146F6                            ; ===========================================================================
000146F6                            

000146F6                            	@loc_13F94:
000146F6 2F08                       		move.l	a0,-(sp)
000146F8 41F8 D000                  		lea	(v_player).w,a0
000146FC 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
00014702 0668 0010 0012             		addi.w	#$10,obVelY(a0)
00014708 205F                       		movea.l	(sp)+,a0
0001470A 6000                       		bra.s	@nochange
0001470C                            ; ===========================================================================
0001470C                            

0001470C                            @gotomakenum:
0001470C 6000                       		bra.s	@makenum
0001470E                            ; ===========================================================================
0001470E                            

0001470E                            @nochange:
0001470E 4A68 0036                  		tst.w	$36(a0)
00014712 6700 0000                  		beq.w	@nocountdown
00014716 5368 003A                  		subq.w	#1,$3A(a0)
0001471A 6A00 0000                  		bpl.w	@nocountdown
0001471E                            

0001471E                            @makenum:
0001471E 4EB9 0000 29BA             		jsr	(RandomNumber).l
00014724 0240 000F                  		andi.w	#$F,d0
00014728 3140 003A                  		move.w	d0,$3A(a0)
0001472C 4EB9 0000 E128             		jsr	(FindFreeObj).l
00014732 6600 0000                  		bne.w	@nocountdown
00014736 137C 000A 0000             		move.b	#id_DrownCount,0(a1) ; load object
0001473C 3378 D008 0008             		move.w	(v_player+obX).w,obX(a1) ; match X position to Sonic
00014742 7006                       		moveq	#6,d0
00014744 0838 0000 D022             		btst	#0,(v_player+obStatus).w
0001474A 6700                       		beq.s	@noflip
0001474C 4440                       		neg.w	d0
0001474E 137C 0040 0026             		move.b	#$40,obAngle(a1)
00014754                            

00014754                            	@noflip:
00014754 D169 0008                  		add.w	d0,obX(a1)
00014758 3378 D00C 000C             		move.w	(v_player+obY).w,obY(a1)
0001475E 137C 0006 0028             		move.b	#6,obSubtype(a1)
00014764 4A68 002C                  		tst.w	$2C(a0)
00014768 6700 0000                  		beq.w	@loc_1403E
0001476C 0268 0007 003A             		andi.w	#7,$3A(a0)
00014772 0668 0000 003A             		addi.w	#0,$3A(a0)
00014778 3038 D00C                  		move.w	(v_player+obY).w,d0
0001477C 0440 000C                  		subi.w	#$C,d0
00014780 3340 000C                  		move.w	d0,obY(a1)
00014784 4EB9 0000 29BA             		jsr	(RandomNumber).l
0001478A 1340 0026                  		move.b	d0,obAngle(a1)
0001478E 3038 FE04                  		move.w	(v_framecount).w,d0
00014792 0200 0003                  		andi.b	#3,d0
00014796 6600                       		bne.s	@loc_14082
00014798 137C 000E 0028             		move.b	#$E,obSubtype(a1)
0001479E 6000                       		bra.s	@loc_14082
000147A0                            ; ===========================================================================
000147A0                            

000147A0                            @loc_1403E:
000147A0 0828 0007 0036             		btst	#7,$36(a0)
000147A6 6700                       		beq.s	@loc_14082
000147A8 3438 FE14                  		move.w	(v_air).w,d2
000147AC E24A                       		lsr.w	#1,d2
000147AE 4EB9 0000 29BA             		jsr	(RandomNumber).l
000147B4 0240 0003                  		andi.w	#3,d0
000147B8 6600                       		bne.s	@loc_1406A
000147BA 08E8 0006 0036             		bset	#6,$36(a0)
000147C0 6600                       		bne.s	@loc_14082
000147C2 1342 0028                  		move.b	d2,obSubtype(a1)
000147C6 337C 001C 0038             		move.w	#$1C,drown_time(a1)
000147CC                            

000147CC                            	@loc_1406A:
000147CC 4A28 0034                  		tst.b	$34(a0)
000147D0 6600                       		bne.s	@loc_14082
000147D2 08E8 0006 0036             		bset	#6,$36(a0)
000147D8 6600                       		bne.s	@loc_14082
000147DA 1342 0028                  		move.b	d2,obSubtype(a1)
000147DE 337C 001C 0038             		move.w	#$1C,drown_time(a1)
000147E4                            

000147E4                            @loc_14082:
000147E4 5328 0034                  		subq.b	#1,$34(a0)
000147E8 6A00                       		bpl.s	@nocountdown
000147EA 4268 0036                  		clr.w	$36(a0)
000147EE                            

000147EE                            @nocountdown:
000147EE 4E75                       		rts	
000147EE 4E75                       		rts	
000147F0                            

000147F0                            

000147F0                            ; ---------------------------------------------------------------------------
000147F0                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000147F0                            ; ---------------------------------------------------------------------------
000147F0                            

000147F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147F0                            

000147F0                            

000147F0                            ResumeMusic:
000147F0 0C78 000C FE14             		cmpi.w	#12,(v_air).w	; more than 12 seconds of air left?
000147F6 6200                       		bhi.s	@over12		; if yes, branch
000147F8 303C 0000                  		move.w	#bgm_LZ,d0	; play LZ music
000147FC 0C78 0103 FE10             		cmpi.w	#(id_LZ<<8)+3,(v_zone).w ; check if level is 0103 (SBZ3)
00014802 6600                       		bne.s	@notsbz
00014804 303C 0000                  		move.w	#bgm_SBZ,d0	; play SBZ music
00014808                            

00014808                            	@notsbz:
00014808 4A38 FE2D                  			tst.b	(v_invinc).w ; is Sonic invincible?
0001480C 6700                       			beq.s	@notinvinc ; if not, branch
0001480E 303C 0000                  			move.w	#bgm_Invincible,d0
00014812                            	@notinvinc:
00014812 4A38 F7AA                  			tst.b	(f_lockscreen).w ; is Sonic at a boss?
00014816 6700                       			beq.s	@playselected ; if not, branch
00014818 303C 0000                  			move.w	#bgm_Boss,d0
0001481C                            	@playselected:
0001481C                            

0001481C 4EB9 0000 139C             		jsr	(PlaySound).l
00014822                            

00014822                            	@over12:
00014822 31FC 001E FE14             		move.w	#30,(v_air).w	; reset air to 30 seconds
00014828 4238 D372                  		clr.b	(v_sonicbubbles+$32).w
0001482C 4E75                       		rts	
0001482E                            ; End of function ResumeMusic
0001482E                            

0001482E                            ; ===========================================================================
0001482E                            

0001482E                            		include	"_anim\Drowning Countdown.asm"
0001482E                            ; ---------------------------------------------------------------------------
0001482E                            ; Animation script - countdown numbers and bubbles (LZ)
0001482E                            ; ---------------------------------------------------------------------------
0001482E 0000                       Ani_Drown:	dc.w @zeroappear-Ani_Drown
00014830 0000                       		dc.w @oneappear-Ani_Drown
00014832 0000                       		dc.w @twoappear-Ani_Drown
00014834 0000                       		dc.w @threeappear-Ani_Drown
00014836 0000                       		dc.w @fourappear-Ani_Drown
00014838 0000                       		dc.w @fiveappear-Ani_Drown
0001483A 0000                       		dc.w @smallbubble-Ani_Drown
0001483C 0000                       		dc.w @zeroflash-Ani_Drown
0001483E 0000                       		dc.w @oneflash-Ani_Drown
00014840 0000                       		dc.w @twoflash-Ani_Drown
00014842 0000                       		dc.w @threeflash-Ani_Drown
00014844 0000                       		dc.w @fourflash-Ani_Drown
00014846 0000                       		dc.w @fiveflash-Ani_Drown
00014848 0000                       		dc.w @blank-Ani_Drown
0001484A 0000                       		dc.w @mediumbubble-Ani_Drown
0001484C 0500 0102 0304 090D FC     @zeroappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, afRoutine
00014856 00                         		even
00014856 0500 0102 0304 0C12 FC     @oneappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	afRoutine
00014860 00                         		even
00014860 0500 0102 0304 0C11 FC     @twoappear:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	afRoutine
0001486A 00                         		even
0001486A 0500 0102 0304 0B10 FC     @threeappear:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	afRoutine
00014874 00                         		even
00014874 0500 0102 0304 090F FC     @fourappear:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, afRoutine
0001487E 00                         		even
0001487E 0500 0102 0304 0A0E FC     @fiveappear:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, afRoutine
00014888 00                         		even
00014888 0E00 0102 FC               @smallbubble:	dc.b $E, 0, 1, 2, afRoutine
0001488E 00                         		even
0001488E 0716 0D16 0D16 0DFC        @zeroflash:	dc.b 7,	$16, $D, $16, $D, $16, $D, afRoutine
00014896 0716 1216 1216 12FC        @oneflash:	dc.b 7,	$16, $12, $16, $12, $16, $12, afRoutine
0001489E 0716 1116 1116 11FC        @twoflash:	dc.b 7,	$16, $11, $16, $11, $16, $11, afRoutine
000148A6 0716 1016 1016 10FC        @threeflash:	dc.b 7,	$16, $10, $16, $10, $16, $10, afRoutine
000148AE 0716 0F16 0F16 0FFC        @fourflash:	dc.b 7,	$16, $F, $16, $F, $16, $F, afRoutine
000148B6 0716 0E16 0E16 0EFC        @fiveflash:	dc.b 7,	$16, $E, $16, $E, $16, $E, afRoutine
000148BE 0EFC                       @blank:		dc.b $E, afRoutine
000148C0 0E01 0203 04FC             @mediumbubble:	dc.b $E, 1, 2, 3, 4, afRoutine
000148C6                            		even
000148C6                            		even
000148C6                            Map_Drown:	include	"_maps\Drowning Countdown.asm"
000148C6                            ; ---------------------------------------------------------------------------
000148C6                            ; Sprite mappings - drowning countdown numbers (LZ)
000148C6                            ; ---------------------------------------------------------------------------
000148C6                            Map_Drown_internal:
000148C6 0000                       		dc.w @num-Map_Drown_internal
000148C8 01                         @num:		dc.b 1
000148C9 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000148CE                            		even
000148CE                            		even
000148CE                            

000148CE                            		include	"_incObj\38 Shield and Invincibility.asm"
000148CE                            ; ---------------------------------------------------------------------------
000148CE                            ; Object 38 - shield and invincibility stars
000148CE                            ; ---------------------------------------------------------------------------
000148CE                            

000148CE                            ShieldItem:
000148CE 7000                       		moveq	#0,d0
000148D0 1028 0024                  		move.b	obRoutine(a0),d0
000148D4 323B 0000                  		move.w	Shi_Index(pc,d0.w),d1
000148D8 4EFB 1000                  		jmp	Shi_Index(pc,d1.w)
000148DC                            ; ===========================================================================
000148DC 0000                       Shi_Index:	dc.w Shi_Main-Shi_Index
000148DE 0000                       		dc.w Shi_Shield-Shi_Index
000148E0 0000                       		dc.w Shi_Stars-Shi_Index
000148E2                            ; ===========================================================================
000148E2                            

000148E2                            Shi_Main:	; Routine 0
000148E2 5428 0024                  		addq.b	#2,obRoutine(a0)
000148E6 217C 0000 0000 0004        		move.l	#Map_Shield,obMap(a0)
000148EE 117C 0004 0001             		move.b	#4,obRender(a0)
000148F4 117C 0001 0018             		move.b	#1,obPriority(a0)
000148FA 117C 0010 0019             		move.b	#$10,obActWid(a0)
00014900 4A28 001C                  		tst.b	obAnim(a0)	; is object a shield?
00014904 6600                       		bne.s	@stars		; if not, branch
00014906 317C 0541 0002             		move.w	#$541,obGfx(a0)	; shield specific code
0001490C 4E75                       		rts	
0001490E                            ; ===========================================================================
0001490E                            

0001490E                            @stars:
0001490E 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Shi_Stars next
00014912 317C 055C 0002             		move.w	#$55C,obGfx(a0)
00014918 4E75                       		rts	
0001491A                            ; ===========================================================================
0001491A                            

0001491A                            Shi_Shield:	; Routine 2
0001491A 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
0001491E 6600                       		bne.s	@remove		; if yes, branch
00014920 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have shield?
00014924 6700                       		beq.s	@delete		; if not, branch
00014926 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
0001492C 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00014932 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00014938 43F9 0000 0000             		lea	(Ani_Shield).l,a1
0001493E 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00014944 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001494A                            

0001494A                            	@remove:
0001494A 4E75                       		rts	
0001494C                            

0001494C                            	@delete:
0001494C 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00014952                            ; ===========================================================================
00014952                            

00014952                            Shi_Stars:	; Routine 4
00014952 4A38 FE2D                  		tst.b	(v_invinc).w	; does Sonic have invincibility?
00014956 6700                       		beq.s	Shi_Start_Delete		; if not, branch
00014958 3038 F7A8                  		move.w	(v_trackpos).w,d0 ; get index value for tracking data
0001495C 1228 001C                  		move.b	obAnim(a0),d1
00014960 5301                       		subq.b	#1,d1
00014962 6000                       		bra.s	@trail
00014964                            ; ===========================================================================
00014964 E909                       		lsl.b	#4,d1
00014966 5801                       		addq.b	#4,d1
00014968 9001                       		sub.b	d1,d0
0001496A 1228 0030                  		move.b	$30(a0),d1
0001496E 9001                       		sub.b	d1,d0
00014970 5801                       		addq.b	#4,d1
00014972 0201 000F                  		andi.b	#$F,d1
00014976 1141 0030                  		move.b	d1,$30(a0)
0001497A 6000                       		bra.s	@b
0001497C                            ; ===========================================================================
0001497C                            

0001497C                            @trail:
0001497C E709                       		lsl.b	#3,d1		; multiply animation number by 8
0001497E 1401                       		move.b	d1,d2
00014980 D201                       		add.b	d1,d1
00014982 D202                       		add.b	d2,d1		; multiply by 3
00014984 5801                       		addq.b	#4,d1
00014986 9001                       		sub.b	d1,d0
00014988 1228 0030                  		move.b	$30(a0),d1
0001498C 9001                       		sub.b	d1,d0		; use earlier tracking data to create trail
0001498E 5801                       		addq.b	#4,d1
00014990 0C01 0018                  		cmpi.b	#$18,d1
00014994 6500                       		bcs.s	@a
00014996 7200                       		moveq	#0,d1
00014998                            

00014998                            	@a:
00014998 1141 0030                  		move.b	d1,$30(a0)
0001499C                            

0001499C                            	@b:
0001499C 43F8 CB00                  		lea	(v_tracksonic).w,a1
000149A0 43F1 0000                  		lea	(a1,d0.w),a1
000149A4 3159 0008                  		move.w	(a1)+,obX(a0)
000149A8 3159 000C                  		move.w	(a1)+,obY(a0)
000149AC 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
000149B2 43F9 0000 0000             		lea	(Ani_Shield).l,a1
000149B8 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
000149BE 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
000149C4                            ; ===========================================================================
000149C4                            

000149C4                            Shi_Start_Delete:	
000149C4 4EF9 0000 DCDC             		jmp	(DeleteObject).l
000149C4 4EF9 0000 DCDC             		jmp	(DeleteObject).l
000149CA                            		include	"_incObj\4A Special Stage Entry (Unused).asm"
000149CA                            ; ---------------------------------------------------------------------------
000149CA                            ; Object 4A - special stage entry from beta
000149CA                            ; ---------------------------------------------------------------------------
000149CA                            

000149CA                            VanishSonic:
000149CA 7000                       		moveq	#0,d0
000149CC 1028 0024                  		move.b	obRoutine(a0),d0
000149D0 323B 0000                  		move.w	Van_Index(pc,d0.w),d1
000149D4 4EFB 1000                  		jmp	Van_Index(pc,d1.w)
000149D8                            ; ===========================================================================
000149D8 0000                       Van_Index:	dc.w Van_Main-Van_Index
000149DA 0000                       		dc.w Van_RmvSonic-Van_Index
000149DC 0000                       		dc.w Van_LoadSonic-Van_Index
000149DE                            

000149DE =00000030                  van_time:	equ $30		; time for Sonic to disappear
000149DE                            ; ===========================================================================
000149DE                            

000149DE                            Van_Main:	; Routine 0
000149DE 4AB8 F680                  		tst.l	(v_plc_buffer).w ; are pattern load cues empty?
000149E2 6700                       		beq.s	@isempty	; if yes, branch
000149E4 4E75                       		rts	
000149E6                            

000149E6                            	@isempty:
000149E6 5428 0024                  		addq.b	#2,obRoutine(a0)
000149EA 217C 0000 0000 0004        		move.l	#Map_Vanish,obMap(a0)
000149F2 117C 0004 0001             		move.b	#4,obRender(a0)
000149F8 117C 0001 0018             		move.b	#1,obPriority(a0)
000149FE 117C 0038 0019             		move.b	#$38,obActWid(a0)
00014A04 317C 0541 0002             		move.w	#$541,obGfx(a0)
00014A0A 317C 0078 0030             		move.w	#120,van_time(a0) ; set time for Sonic's disappearance to 2 seconds
00014A10                            

00014A10                            Van_RmvSonic:	; Routine 2
00014A10 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0)
00014A16 3178 D00C 000C             		move.w	(v_player+obY).w,obY(a0)
00014A1C 1178 D022 0022             		move.b	(v_player+obStatus).w,obStatus(a0)
00014A22 43F9 0000 0000             		lea	(Ani_Vanish).l,a1
00014A28 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00014A2E 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
00014A34 6600                       		bne.s	@display
00014A36 4A38 D000                  		tst.b	(v_player).w
00014A3A 6700                       		beq.s	@display
00014A3C 11FC 0000 D000             		move.b	#0,(v_player).w	; remove Sonic
00014A42 303C 0000                  		move.w	#sfx_SSGoal,d0
00014A46 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play Special Stage "GOAL" sound
00014A4C                            

00014A4C                            	@display:
00014A4C 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00014A52                            ; ===========================================================================
00014A52                            

00014A52                            Van_LoadSonic:	; Routine 4
00014A52 5368 0030                  		subq.w	#1,van_time(a0)	; subtract 1 from time
00014A56 6600                       		bne.s	@wait		; if time remains, branch
00014A58 11FC 0001 D000             		move.b	#id_SonicPlayer,(v_player).w ; load Sonic object
00014A5E 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00014A64                            

00014A64                            	@wait:
00014A64 4E75                       		rts	
00014A64 4E75                       		rts	
00014A66                            		include	"_incObj\08 Water Splash.asm"
00014A66                            ; ---------------------------------------------------------------------------
00014A66                            ; Object 08 - water splash (LZ)
00014A66                            ; ---------------------------------------------------------------------------
00014A66                            

00014A66                            Splash:
00014A66 7000                       		moveq	#0,d0
00014A68 1028 0024                  		move.b	obRoutine(a0),d0
00014A6C 323B 0000                  		move.w	Spla_Index(pc,d0.w),d1
00014A70 4EFB 1000                  		jmp	Spla_Index(pc,d1.w)
00014A74                            ; ===========================================================================
00014A74 0000                       Spla_Index:	dc.w Spla_Main-Spla_Index
00014A76 0000                       		dc.w Spla_Display-Spla_Index
00014A78 0000                       		dc.w Spla_Delete-Spla_Index
00014A7A                            ; ===========================================================================
00014A7A                            

00014A7A                            Spla_Main:	; Routine 0
00014A7A 5428 0024                  		addq.b	#2,obRoutine(a0)
00014A7E 217C 0000 0000 0004        		move.l	#Map_Splash,obMap(a0)
00014A86 0028 0004 0001             		ori.b	#4,obRender(a0)
00014A8C 117C 0001 0018             		move.b	#1,obPriority(a0)
00014A92 117C 0010 0019             		move.b	#$10,obActWid(a0)
00014A98 317C 4259 0002             		move.w	#$4259,obGfx(a0)
00014A9E 3178 D008 0008             		move.w	(v_player+obX).w,obX(a0) ; copy x-position from Sonic
00014AA4                            

00014AA4                            Spla_Display:	; Routine 2
00014AA4 3178 F646 000C             		move.w	(v_waterpos1).w,obY(a0) ; copy y-position from water height
00014AAA 43F9 0000 0000             		lea	(Ani_Splash).l,a1
00014AB0 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00014AB6 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00014ABC                            ; ===========================================================================
00014ABC                            

00014ABC                            Spla_Delete:	; Routine 4
00014ABC 4EF9 0000 DCDC             		jmp	(DeleteObject).l	; delete when animation	is complete
00014ABC 4EF9 0000 DCDC             		jmp	(DeleteObject).l	; delete when animation	is complete
00014AC2                            		include	"_anim\Shield and Invincibility.asm"
00014AC2                            ; ---------------------------------------------------------------------------
00014AC2                            ; Animation script - shield and invincibility stars
00014AC2                            ; ---------------------------------------------------------------------------
00014AC2 0000                       Ani_Shield:	dc.w @shield-Ani_Shield
00014AC4 0000                       		dc.w @stars1-Ani_Shield
00014AC6 0000                       		dc.w @stars2-Ani_Shield
00014AC8 0000                       		dc.w @stars3-Ani_Shield
00014ACA 0000                       		dc.w @stars4-Ani_Shield
00014ACC 0101 0002 0003 00FF        @shield:	dc.b 1,	1, 0, 2, 0, 3, 0, afEnd
00014AD4 0504 0506 07FF             @stars1:	dc.b 5,	4, 5, 6, 7, afEnd
00014ADA 0004 0400 0404 0005 0500+  @stars2:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014AEB 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, afEnd
00014AF4 0004 0400 0400 0005 0500+  @stars3:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014B05 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, afEnd
00014B0E 0004 0000 0400 0005 0000+  @stars4:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014B1F 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, afEnd
00014B28                            		even
00014B28                            		even
00014B28                            Map_Shield:	include	"_maps\Shield and Invincibility.asm"
00014B28                            ; ---------------------------------------------------------------------------
00014B28                            ; Sprite mappings - shield and invincibility stars
00014B28                            ; ---------------------------------------------------------------------------
00014B28                            Map_Shield_internal:
00014B28 0000                       		dc.w @shield1-Map_Shield_internal
00014B2A 0000                       		dc.w @shield2-Map_Shield_internal
00014B2C 0000                       		dc.w @shield3-Map_Shield_internal
00014B2E 0000                       		dc.w @shield4-Map_Shield_internal
00014B30 0000                       		dc.w @stars1-Map_Shield_internal
00014B32 0000                       		dc.w @stars2-Map_Shield_internal
00014B34 0000                       		dc.w @stars3-Map_Shield_internal
00014B36 0000                       		dc.w @stars4-Map_Shield_internal
00014B38 04                         @shield2:	dc.b 4
00014B39 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014B3E E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014B43 000A 1000 E8               @shield1:	dc.b 0,	$A, $10, 0, $E8
00014B48 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014B4D 04                         @shield3:	dc.b 4
00014B4E E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014B53 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014B58 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014B5D 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014B62 04                         @shield4:	dc.b 4
00014B63 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014B68 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014B6D 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014B72 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014B77 04                         @stars1:	dc.b 4
00014B78 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014B7D E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014B82 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014B87 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014B8C 04                         @stars2:	dc.b 4
00014B8D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014B92 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014B97 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014B9C 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014BA1 04                         @stars3:	dc.b 4
00014BA2 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014BA7 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014BAC 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014BB1 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014BB6 04                         @stars4:	dc.b 4
00014BB7 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014BBC E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014BC1 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014BC6 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014BCC 00                         		even
00014BCC 00                         		even
00014BCC                            		include	"_anim\Special Stage Entry (Unused).asm"
00014BCC                            ; ---------------------------------------------------------------------------
00014BCC                            ; Animation script - special stage entry effect from beta
00014BCC                            ; ---------------------------------------------------------------------------
00014BCC 0000                       Ani_Vanish:	dc.w @vanish-Ani_Vanish
00014BCE 0500 0100 0100 0701 0702+  @vanish:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, afRoutine
00014BE2                            		even
00014BE2                            		even
00014BE2                            Map_Vanish:	include	"_maps\Special Stage Entry (Unused).asm"
00014BE2                            ; ---------------------------------------------------------------------------
00014BE2                            ; Sprite mappings - special stage entry	from beta
00014BE2                            ; ---------------------------------------------------------------------------
00014BE2                            Map_Vanish_internal:
00014BE2 0000                       		dc.w @flash1-Map_Vanish_internal
00014BE4 0000                       		dc.w @flash2-Map_Vanish_internal
00014BE6 0000                       		dc.w @flash3-Map_Vanish_internal
00014BE8 0000                       		dc.w @sparkle1-Map_Vanish_internal
00014BEA 0000                       		dc.w @sparkle2-Map_Vanish_internal
00014BEC 0000                       		dc.w @sparkle3-Map_Vanish_internal
00014BEE 0000                       		dc.w @sparkle4-Map_Vanish_internal
00014BF0 0000                       		dc.w @blank-Map_Vanish_internal
00014BF2 03                         @flash1:	dc.b 3
00014BF3 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014BF8 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014BFD 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014C02 03                         @flash2:	dc.b 3
00014C03 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014C08 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014C0D 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014C12 05                         @flash3:	dc.b 5
00014C13 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014C18 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014C1D FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014C22 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014C27 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014C2C 09                         @sparkle1:	dc.b 9
00014C2D F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014C32 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014C37 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014C3C 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014C41 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014C46 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014C4B F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014C50 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014C55 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014C5A 12                         @sparkle2:	dc.b $12
00014C5B 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014C60 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014C65 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014C6A 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014C6F 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014C74 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014C79 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014C7E F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014C83 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014C88 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014C8D 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014C92 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014C97 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014C9C F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014CA1 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014CA6 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014CAB 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014CB0 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014CB5 11                         @sparkle3:	dc.b $11
00014CB6 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014CBB F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014CC0 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014CC5 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014CCA 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014CCF F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014CD4 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014CD9 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014CDE 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014CE3 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014CE8 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014CED 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014CF2 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014CF7 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014CFC F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014D01 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014D06 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014D0B 09                         @sparkle4:	dc.b 9
00014D0C FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014D11 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014D16 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014D1B 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014D20 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014D25 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014D2A 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014D2F 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014D34 04                         		dc.b 4
00014D35 0008 2758 00               @blank:		dc.b 0,	8, $27,	$58, 0
00014D3A                            		even
00014D3A                            		even
00014D3A                            		include	"_anim\Water Splash.asm"
00014D3A                            ; ---------------------------------------------------------------------------
00014D3A                            ; Animation script - water splash (LZ)
00014D3A                            ; ---------------------------------------------------------------------------
00014D3A 0000                       Ani_Splash:	dc.w @splash-Ani_Splash
00014D3C 0400 0102 FC               @splash:	dc.b 4,	0, 1, 2, afRoutine
00014D42 00                         		even
00014D42 00                         		even
00014D42                            Map_Splash:	include	"_maps\Water Splash.asm"
00014D42                            ; ---------------------------------------------------------------------------
00014D42                            ; Sprite mappings - water splash (LZ)
00014D42                            ; ---------------------------------------------------------------------------
00014D42                            Map_Splash_internal:
00014D42 0000                       		dc.w @splash1-Map_Splash_internal
00014D44 0000                       		dc.w @splash2-Map_Splash_internal
00014D46 0000                       		dc.w @splash3-Map_Splash_internal
00014D48 02                         @splash1:	dc.b 2
00014D49 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014D4E FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014D53 02                         @splash2:	dc.b 2
00014D54 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014D59 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014D5E 01                         @splash3:	dc.b 1
00014D5F E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014D64                            		even
00014D64                            		even
00014D64                            

00014D64                            		include	"_incObj\Sonic AnglePos.asm"
00014D64                            ; ---------------------------------------------------------------------------
00014D64                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014D64                            ; ---------------------------------------------------------------------------
00014D64                            

00014D64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D64                            

00014D64                            

00014D64                            Sonic_AnglePos:
00014D64 0828 0003 0022             		btst	#3,obStatus(a0)
00014D6A 6700                       		beq.s	loc_14602
00014D6C 7000                       		moveq	#0,d0
00014D6E 11C0 F768                  		move.b	d0,($FFFFF768).w
00014D72 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014D76 4E75                       		rts	
00014D78                            ; ===========================================================================
00014D78                            

00014D78                            loc_14602:
00014D78 7003                       		moveq	#3,d0
00014D7A 11C0 F768                  		move.b	d0,($FFFFF768).w
00014D7E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014D82 1028 0026                  		move.b	obAngle(a0),d0
00014D86 0600 0020                  		addi.b	#$20,d0
00014D8A 6A00                       		bpl.s	loc_14624
00014D8C 1028 0026                  		move.b	obAngle(a0),d0
00014D90 6A00                       		bpl.s	loc_1461E
00014D92 5300                       		subq.b	#1,d0
00014D94                            

00014D94                            loc_1461E:
00014D94 0600 0020                  		addi.b	#$20,d0
00014D98 6000                       		bra.s	loc_14630
00014D9A                            ; ===========================================================================
00014D9A                            

00014D9A                            loc_14624:
00014D9A 1028 0026                  		move.b	obAngle(a0),d0
00014D9E 6A00                       		bpl.s	loc_1462C
00014DA0 5200                       		addq.b	#1,d0
00014DA2                            

00014DA2                            loc_1462C:
00014DA2 0600 001F                  		addi.b	#$1F,d0
00014DA6                            

00014DA6                            loc_14630:
00014DA6 0200 00C0                  		andi.b	#$C0,d0
00014DAA 0C00 0040                  		cmpi.b	#$40,d0
00014DAE 6700 0000                  		beq.w	Sonic_WalkVertL
00014DB2 0C00 0080                  		cmpi.b	#$80,d0
00014DB6 6700 0000                  		beq.w	Sonic_WalkCeiling
00014DBA 0C00 00C0                  		cmpi.b	#$C0,d0
00014DBE 6700 0000                  		beq.w	Sonic_WalkVertR
00014DC2 3428 000C                  		move.w	obY(a0),d2
00014DC6 3628 0008                  		move.w	obX(a0),d3
00014DCA 7000                       		moveq	#0,d0
00014DCC 1028 0016                  		move.b	obHeight(a0),d0
00014DD0 4880                       		ext.w	d0
00014DD2 D440                       		add.w	d0,d2
00014DD4 1028 0017                  		move.b	obWidth(a0),d0
00014DD8 4880                       		ext.w	d0
00014DDA D640                       		add.w	d0,d3
00014DDC 49F8 F768                  		lea	($FFFFF768).w,a4
00014DE0 367C 0010                  		movea.w	#$10,a3
00014DE4 3C3C 0000                  		move.w	#0,d6
00014DE8 7A0D                       		moveq	#$D,d5
00014DEA 6100 0000                  		bsr.w	FindFloor
00014DEE 3F01                       		move.w	d1,-(sp)
00014DF0 3428 000C                  		move.w	obY(a0),d2
00014DF4 3628 0008                  		move.w	obX(a0),d3
00014DF8 7000                       		moveq	#0,d0
00014DFA 1028 0016                  		move.b	obHeight(a0),d0
00014DFE 4880                       		ext.w	d0
00014E00 D440                       		add.w	d0,d2
00014E02 1028 0017                  		move.b	obWidth(a0),d0
00014E06 4880                       		ext.w	d0
00014E08 4440                       		neg.w	d0
00014E0A D640                       		add.w	d0,d3
00014E0C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E10 367C 0010                  		movea.w	#$10,a3
00014E14 3C3C 0000                  		move.w	#0,d6
00014E18 7A0D                       		moveq	#$D,d5
00014E1A 6100 0000                  		bsr.w	FindFloor
00014E1E 301F                       		move.w	(sp)+,d0
00014E20 6100 0000                  		bsr.w	Sonic_Angle
00014E24 4A41                       		tst.w	d1
00014E26 6700                       		beq.s	locret_146BE
00014E28 6A00                       		bpl.s	loc_146C0
00014E2A 0C41 FFF2                  		cmpi.w	#-$E,d1
00014E2E 6D00                       		blt.s	locret_146E6
00014E30 D368 000C                  		add.w	d1,obY(a0)
00014E34                            

00014E34                            locret_146BE:
00014E34 4E75                       		rts	
00014E36                            ; ===========================================================================
00014E36                            

00014E36                            loc_146C0:
00014E36 0C41 000E                  		cmpi.w	#$E,d1
00014E3A 6E00                       		bgt.s	loc_146CC
00014E3C                            

00014E3C                            loc_146C6:
00014E3C D368 000C                  		add.w	d1,obY(a0)
00014E40 4E75                       		rts	
00014E42                            ; ===========================================================================
00014E42                            

00014E42                            loc_146CC:
00014E42 4A28 0038                  		tst.b	$38(a0)
00014E46 66F4                       		bne.s	loc_146C6
00014E48 08E8 0001 0022             		bset	#1,obStatus(a0)
00014E4E 08A8 0005 0022             		bclr	#5,obStatus(a0)
00014E54 117C 0001 001D             		move.b	#1,obNextAni(a0)
00014E5A 4E75                       		rts	
00014E5C                            ; ===========================================================================
00014E5C                            

00014E5C                            locret_146E6:
00014E5C 4E75                       		rts	
00014E5E                            ; End of function Sonic_AnglePos
00014E5E                            

00014E5E                            ; ===========================================================================
00014E5E 2428 0008                  		move.l	obX(a0),d2
00014E62 3028 0010                  		move.w	obVelX(a0),d0
00014E66 48C0                       		ext.l	d0
00014E68 E180                       		asl.l	#8,d0
00014E6A 9480                       		sub.l	d0,d2
00014E6C 2142 0008                  		move.l	d2,obX(a0)
00014E70 303C 0038                  		move.w	#$38,d0
00014E74 48C0                       		ext.l	d0
00014E76 E180                       		asl.l	#8,d0
00014E78 9680                       		sub.l	d0,d3
00014E7A 2143 000C                  		move.l	d3,obY(a0)
00014E7E 4E75                       		rts	
00014E80                            ; ===========================================================================
00014E80                            

00014E80                            locret_1470A:
00014E80 4E75                       		rts	
00014E82                            ; ===========================================================================
00014E82 2628 000C                  		move.l	obY(a0),d3
00014E86 3028 0012                  		move.w	obVelY(a0),d0
00014E8A 0440 0038                  		subi.w	#$38,d0
00014E8E 3140 0012                  		move.w	d0,obVelY(a0)
00014E92 48C0                       		ext.l	d0
00014E94 E180                       		asl.l	#8,d0
00014E96 9680                       		sub.l	d0,d3
00014E98 2143 000C                  		move.l	d3,obY(a0)
00014E9C 4E75                       		rts	
00014E9E 4E75                       		rts	
00014EA0                            ; ===========================================================================
00014EA0 2428 0008                  		move.l	obX(a0),d2
00014EA4 2628 000C                  		move.l	obY(a0),d3
00014EA8 3028 0010                  		move.w	obVelX(a0),d0
00014EAC 48C0                       		ext.l	d0
00014EAE E180                       		asl.l	#8,d0
00014EB0 9480                       		sub.l	d0,d2
00014EB2 3028 0012                  		move.w	obVelY(a0),d0
00014EB6 48C0                       		ext.l	d0
00014EB8 E180                       		asl.l	#8,d0
00014EBA 9680                       		sub.l	d0,d3
00014EBC 2142 0008                  		move.l	d2,obX(a0)
00014EC0 2143 000C                  		move.l	d3,obY(a0)
00014EC4 4E75                       		rts	
00014EC6                            

00014EC6                            ; ---------------------------------------------------------------------------
00014EC6                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014EC6                            ; ---------------------------------------------------------------------------
00014EC6                            

00014EC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EC6                            

00014EC6                            

00014EC6                            Sonic_Angle:
00014EC6 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014ECA B240                       		cmp.w	d0,d1
00014ECC 6F00                       		ble.s	loc_1475E
00014ECE 1438 F768                  		move.b	($FFFFF768).w,d2
00014ED2 3200                       		move.w	d0,d1
00014ED4                            

00014ED4                            loc_1475E:
00014ED4 0802 0000                  		btst	#0,d2
00014ED8 6600                       		bne.s	loc_1476A
00014EDA 1142 0026                  		move.b	d2,obAngle(a0)
00014EDE 4E75                       		rts	
00014EE0                            ; ===========================================================================
00014EE0                            

00014EE0                            loc_1476A:
00014EE0 1428 0026                  		move.b	obAngle(a0),d2
00014EE4 0602 0020                  		addi.b	#$20,d2
00014EE8 0202 00C0                  		andi.b	#$C0,d2
00014EEC 1142 0026                  		move.b	d2,obAngle(a0)
00014EF0 4E75                       		rts	
00014EF2                            ; End of function Sonic_Angle
00014EF2                            

00014EF2                            ; ---------------------------------------------------------------------------
00014EF2                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
00014EF2                            ; ---------------------------------------------------------------------------
00014EF2                            

00014EF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EF2                            

00014EF2                            

00014EF2                            Sonic_WalkVertR:
00014EF2 3428 000C                  		move.w	obY(a0),d2
00014EF6 3628 0008                  		move.w	obX(a0),d3
00014EFA 7000                       		moveq	#0,d0
00014EFC 1028 0017                  		move.b	obWidth(a0),d0
00014F00 4880                       		ext.w	d0
00014F02 4440                       		neg.w	d0
00014F04 D440                       		add.w	d0,d2
00014F06 1028 0016                  		move.b	obHeight(a0),d0
00014F0A 4880                       		ext.w	d0
00014F0C D640                       		add.w	d0,d3
00014F0E 49F8 F768                  		lea	($FFFFF768).w,a4
00014F12 367C 0010                  		movea.w	#$10,a3
00014F16 3C3C 0000                  		move.w	#0,d6
00014F1A 7A0D                       		moveq	#$D,d5
00014F1C 6100 0000                  		bsr.w	FindWall
00014F20 3F01                       		move.w	d1,-(sp)
00014F22 3428 000C                  		move.w	obY(a0),d2
00014F26 3628 0008                  		move.w	obX(a0),d3
00014F2A 7000                       		moveq	#0,d0
00014F2C 1028 0017                  		move.b	obWidth(a0),d0
00014F30 4880                       		ext.w	d0
00014F32 D440                       		add.w	d0,d2
00014F34 1028 0016                  		move.b	obHeight(a0),d0
00014F38 4880                       		ext.w	d0
00014F3A D640                       		add.w	d0,d3
00014F3C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F40 367C 0010                  		movea.w	#$10,a3
00014F44 3C3C 0000                  		move.w	#0,d6
00014F48 7A0D                       		moveq	#$D,d5
00014F4A 6100 0000                  		bsr.w	FindWall
00014F4E 301F                       		move.w	(sp)+,d0
00014F50 6100 FF74                  		bsr.w	Sonic_Angle
00014F54 4A41                       		tst.w	d1
00014F56 6700                       		beq.s	locret_147F0
00014F58 6A00                       		bpl.s	loc_147F2
00014F5A 0C41 FFF2                  		cmpi.w	#-$E,d1
00014F5E 6D00 FF20                  		blt.w	locret_1470A
00014F62 D368 0008                  		add.w	d1,obX(a0)
00014F66                            

00014F66                            locret_147F0:
00014F66 4E75                       		rts	
00014F68                            ; ===========================================================================
00014F68                            

00014F68                            loc_147F2:
00014F68 0C41 000E                  		cmpi.w	#$E,d1
00014F6C 6E00                       		bgt.s	loc_147FE
00014F6E                            

00014F6E                            loc_147F8:
00014F6E D368 0008                  		add.w	d1,obX(a0)
00014F72 4E75                       		rts	
00014F74                            ; ===========================================================================
00014F74                            

00014F74                            loc_147FE:
00014F74 4A28 0038                  		tst.b	$38(a0)
00014F78 66F4                       		bne.s	loc_147F8
00014F7A 08E8 0001 0022             		bset	#1,obStatus(a0)
00014F80 08A8 0005 0022             		bclr	#5,obStatus(a0)
00014F86 117C 0001 001D             		move.b	#1,obNextAni(a0)
00014F8C 4E75                       		rts	
00014F8E                            ; End of function Sonic_WalkVertR
00014F8E                            

00014F8E                            ; ---------------------------------------------------------------------------
00014F8E                            ; Subroutine allowing Sonic to walk upside-down
00014F8E                            ; ---------------------------------------------------------------------------
00014F8E                            

00014F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F8E                            

00014F8E                            

00014F8E                            Sonic_WalkCeiling:
00014F8E 3428 000C                  		move.w	obY(a0),d2
00014F92 3628 0008                  		move.w	obX(a0),d3
00014F96 7000                       		moveq	#0,d0
00014F98 1028 0016                  		move.b	obHeight(a0),d0
00014F9C 4880                       		ext.w	d0
00014F9E 9440                       		sub.w	d0,d2
00014FA0 0A42 000F                  		eori.w	#$F,d2
00014FA4 1028 0017                  		move.b	obWidth(a0),d0
00014FA8 4880                       		ext.w	d0
00014FAA D640                       		add.w	d0,d3
00014FAC 49F8 F768                  		lea	($FFFFF768).w,a4
00014FB0 367C FFF0                  		movea.w	#-$10,a3
00014FB4 3C3C 1000                  		move.w	#$1000,d6
00014FB8 7A0D                       		moveq	#$D,d5
00014FBA 6100 0000                  		bsr.w	FindFloor
00014FBE 3F01                       		move.w	d1,-(sp)
00014FC0 3428 000C                  		move.w	obY(a0),d2
00014FC4 3628 0008                  		move.w	obX(a0),d3
00014FC8 7000                       		moveq	#0,d0
00014FCA 1028 0016                  		move.b	obHeight(a0),d0
00014FCE 4880                       		ext.w	d0
00014FD0 9440                       		sub.w	d0,d2
00014FD2 0A42 000F                  		eori.w	#$F,d2
00014FD6 1028 0017                  		move.b	obWidth(a0),d0
00014FDA 4880                       		ext.w	d0
00014FDC 9640                       		sub.w	d0,d3
00014FDE 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014FE2 367C FFF0                  		movea.w	#-$10,a3
00014FE6 3C3C 1000                  		move.w	#$1000,d6
00014FEA 7A0D                       		moveq	#$D,d5
00014FEC 6100 0000                  		bsr.w	FindFloor
00014FF0 301F                       		move.w	(sp)+,d0
00014FF2 6100 FED2                  		bsr.w	Sonic_Angle
00014FF6 4A41                       		tst.w	d1
00014FF8 6700                       		beq.s	locret_14892
00014FFA 6A00                       		bpl.s	loc_14894
00014FFC 0C41 FFF2                  		cmpi.w	#-$E,d1
00015000 6D00 FE5A                  		blt.w	locret_146E6
00015004 9368 000C                  		sub.w	d1,obY(a0)
00015008                            

00015008                            locret_14892:
00015008 4E75                       		rts	
0001500A                            ; ===========================================================================
0001500A                            

0001500A                            loc_14894:
0001500A 0C41 000E                  		cmpi.w	#$E,d1
0001500E 6E00                       		bgt.s	loc_148A0
00015010                            

00015010                            loc_1489A:
00015010 9368 000C                  		sub.w	d1,obY(a0)
00015014 4E75                       		rts	
00015016                            ; ===========================================================================
00015016                            

00015016                            loc_148A0:
00015016 4A28 0038                  		tst.b	$38(a0)
0001501A 66F4                       		bne.s	loc_1489A
0001501C 08E8 0001 0022             		bset	#1,obStatus(a0)
00015022 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015028 117C 0001 001D             		move.b	#1,obNextAni(a0)
0001502E 4E75                       		rts	
00015030                            ; End of function Sonic_WalkCeiling
00015030                            

00015030                            ; ---------------------------------------------------------------------------
00015030                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015030                            ; ---------------------------------------------------------------------------
00015030                            

00015030                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015030                            

00015030                            

00015030                            Sonic_WalkVertL:
00015030 3428 000C                  		move.w	obY(a0),d2
00015034 3628 0008                  		move.w	obX(a0),d3
00015038 7000                       		moveq	#0,d0
0001503A 1028 0017                  		move.b	obWidth(a0),d0
0001503E 4880                       		ext.w	d0
00015040 9440                       		sub.w	d0,d2
00015042 1028 0016                  		move.b	obHeight(a0),d0
00015046 4880                       		ext.w	d0
00015048 9640                       		sub.w	d0,d3
0001504A 0A43 000F                  		eori.w	#$F,d3
0001504E 49F8 F768                  		lea	($FFFFF768).w,a4
00015052 367C FFF0                  		movea.w	#-$10,a3
00015056 3C3C 0800                  		move.w	#$800,d6
0001505A 7A0D                       		moveq	#$D,d5
0001505C 6100 0000                  		bsr.w	FindWall
00015060 3F01                       		move.w	d1,-(sp)
00015062 3428 000C                  		move.w	obY(a0),d2
00015066 3628 0008                  		move.w	obX(a0),d3
0001506A 7000                       		moveq	#0,d0
0001506C 1028 0017                  		move.b	obWidth(a0),d0
00015070 4880                       		ext.w	d0
00015072 D440                       		add.w	d0,d2
00015074 1028 0016                  		move.b	obHeight(a0),d0
00015078 4880                       		ext.w	d0
0001507A 9640                       		sub.w	d0,d3
0001507C 0A43 000F                  		eori.w	#$F,d3
00015080 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015084 367C FFF0                  		movea.w	#-$10,a3
00015088 3C3C 0800                  		move.w	#$800,d6
0001508C 7A0D                       		moveq	#$D,d5
0001508E 6100 0000                  		bsr.w	FindWall
00015092 301F                       		move.w	(sp)+,d0
00015094 6100 FE30                  		bsr.w	Sonic_Angle
00015098 4A41                       		tst.w	d1
0001509A 6700                       		beq.s	locret_14934
0001509C 6A00                       		bpl.s	loc_14936
0001509E 0C41 FFF2                  		cmpi.w	#-$E,d1
000150A2 6D00 FDDC                  		blt.w	locret_1470A
000150A6 9368 0008                  		sub.w	d1,obX(a0)
000150AA                            

000150AA                            locret_14934:
000150AA 4E75                       		rts	
000150AC                            ; ===========================================================================
000150AC                            

000150AC                            loc_14936:
000150AC 0C41 000E                  		cmpi.w	#$E,d1
000150B0 6E00                       		bgt.s	loc_14942
000150B2                            

000150B2                            loc_1493C:
000150B2 9368 0008                  		sub.w	d1,obX(a0)
000150B6 4E75                       		rts	
000150B8                            ; ===========================================================================
000150B8                            

000150B8                            loc_14942:
000150B8 4A28 0038                  		tst.b	$38(a0)
000150BC 66F4                       		bne.s	loc_1493C
000150BE 08E8 0001 0022             		bset	#1,obStatus(a0)
000150C4 08A8 0005 0022             		bclr	#5,obStatus(a0)
000150CA 117C 0001 001D             		move.b	#1,obNextAni(a0)
000150D0 4E75                       		rts	
000150D2                            ; End of function Sonic_WalkVertL
000150D2                            ; End of function Sonic_WalkVertL
000150D2                            

000150D2                            		include	"_incObj\sub FindNearestTile.asm"
000150D2                            ; ---------------------------------------------------------------------------
000150D2                            ; Subroutine to	find which tile	the object is standing on
000150D2                            

000150D2                            ; input:
000150D2                            ;	d2 = y-position of object's bottom edge
000150D2                            ;	d3 = x-position of object
000150D2                            

000150D2                            ; output:
000150D2                            ;	a1 = address within 256x256 mappings where object is standing
000150D2                            ;	     (refers to a 16x16 tile number)
000150D2                            ; ---------------------------------------------------------------------------
000150D2                            

000150D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150D2                            

000150D2                            

000150D2                            FindNearestTile:
000150D2 3002                       		move.w	d2,d0		; get y-pos. of bottom edge of object
000150D4 E248                       		lsr.w	#1,d0
000150D6 0240 0380                  		andi.w	#$380,d0
000150DA 3203                       		move.w	d3,d1		; get x-pos. of object
000150DC E049                       		lsr.w	#8,d1
000150DE 0241 007F                  		andi.w	#$7F,d1
000150E2 D041                       		add.w	d1,d0		; combine
000150E4 72FF                       		moveq	#-1,d1
000150E6 43F8 A400                  		lea	(v_lvllayout).w,a1
000150EA 1231 0000                  		move.b	(a1,d0.w),d1	; get 256x256 tile number
000150EE 6700                       		beq.s	@blanktile	; branch if 0
000150F0 6B00                       		bmi.s	@specialtile	; branch if >$7F
000150F2 5301                       		subq.b	#1,d1
000150F4 4881                       		ext.w	d1
000150F6 EE59                       		ror.w	#7,d1
000150F8 3002                       		move.w	d2,d0
000150FA D040                       		add.w	d0,d0
000150FC 0240 01E0                  		andi.w	#$1E0,d0
00015100 D240                       		add.w	d0,d1
00015102 3003                       		move.w	d3,d0
00015104 E648                       		lsr.w	#3,d0
00015106 0240 001E                  		andi.w	#$1E,d0
0001510A D240                       		add.w	d0,d1
0001510C                            

0001510C                            @blanktile:
0001510C 2241                       		movea.l	d1,a1
0001510E 4E75                       		rts	
00015110                            ; ===========================================================================
00015110                            

00015110                            @specialtile:
00015110 0241 007F                  		andi.w	#$7F,d1
00015114 0828 0006 0001             		btst	#6,obRender(a0) ; is object "behind a loop"?
0001511A 6700                       		beq.s	@treatasnormal	; if not, branch
0001511C 5241                       		addq.w	#1,d1
0001511E 0C41 0029                  		cmpi.w	#$29,d1
00015122 6600                       		bne.s	@treatasnormal
00015124 323C 0051                  		move.w	#$51,d1
00015128                            

00015128                            	@treatasnormal:
00015128 5301                       		subq.b	#1,d1
0001512A EE59                       		ror.w	#7,d1
0001512C 3002                       		move.w	d2,d0
0001512E D040                       		add.w	d0,d0
00015130 0240 01E0                  		andi.w	#$1E0,d0
00015134 D240                       		add.w	d0,d1
00015136 3003                       		move.w	d3,d0
00015138 E648                       		lsr.w	#3,d0
0001513A 0240 001E                  		andi.w	#$1E,d0
0001513E D240                       		add.w	d0,d1
00015140 2241                       		movea.l	d1,a1
00015142 4E75                       		rts	
00015144                            ; End of function FindNearestTile
00015144                            ; End of function FindNearestTile
00015144                            		include	"_incObj\sub FindFloor.asm"
00015144                            ; ---------------------------------------------------------------------------
00015144                            ; Subroutine to	find the floor
00015144                            

00015144                            ; input:
00015144                            ;	d2 = y-position of object's bottom edge
00015144                            ;	d3 = x-position of object
00015144                            ;	d5 = bit to test for solidness
00015144                            

00015144                            ; output:
00015144                            ;	d1 = distance to the floor
00015144                            ;	a1 = address within 256x256 mappings where object is standing
00015144                            ;	     (refers to a 16x16 tile number)
00015144                            ;	(a4) = floor angle
00015144                            ; ---------------------------------------------------------------------------
00015144                            

00015144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015144                            

00015144                            

00015144                            FindFloor:
00015144 618C                       		bsr.s	FindNearestTile
00015146 3011                       		move.w	(a1),d0		; get value for solidness, orientation and 16x16 tile number
00015148 3800                       		move.w	d0,d4
0001514A 0240 07FF                  		andi.w	#$7FF,d0
0001514E 6700                       		beq.s	@isblank	; branch if tile is blank
00015150 0B04                       		btst	d5,d4		; is the tile solid?
00015152 6600                       		bne.s	@issolid	; if yes, branch
00015154                            

00015154                            @isblank:
00015154 D44B                       		add.w	a3,d2
00015156 6100 0000                  		bsr.w	FindFloor2	; try tile below the nearest
0001515A 944B                       		sub.w	a3,d2
0001515C 0641 0010                  		addi.w	#$10,d1		; return distance to floor
00015160 4E75                       		rts	
00015162                            ; ===========================================================================
00015162                            

00015162                            @issolid:
00015162 2478 F796                  		movea.l	(v_collindex).w,a2
00015166 1032 0000                  		move.b	(a2,d0.w),d0	; get collision block number
0001516A 0240 00FF                  		andi.w	#$FF,d0
0001516E 67E4                       		beq.s	@isblank	; branch if 0
00015170 45F9 0000 0000             		lea	(AngleMap).l,a2
00015176 18B2 0000                  		move.b	(a2,d0.w),(a4)	; get collision angle value
0001517A E948                       		lsl.w	#4,d0
0001517C 3203                       		move.w	d3,d1		; get x-pos. of object
0001517E 0804 000B                  		btst	#$B,d4		; is block flipped horizontally?
00015182 6700                       		beq.s	@noflip		; if not, branch
00015184 4641                       		not.w	d1
00015186 4414                       		neg.b	(a4)
00015188                            

00015188                            	@noflip:
00015188 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
0001518C 6700                       		beq.s	@noflip2	; if not, branch
0001518E 0614 0040                  		addi.b	#$40,(a4)
00015192 4414                       		neg.b	(a4)
00015194 0414 0040                  		subi.b	#$40,(a4)
00015198                            

00015198                            	@noflip2:
00015198 0241 000F                  		andi.w	#$F,d1
0001519C D240                       		add.w	d0,d1		; (block num. * $10) + x-pos. = place in array
0001519E 45F9 0000 0000             		lea	(CollArray1).l,a2
000151A4 1032 1000                  		move.b	(a2,d1.w),d0	; get collision height
000151A8 4880                       		ext.w	d0
000151AA BD44                       		eor.w	d6,d4
000151AC 0804 000C                  		btst	#$C,d4		; is block flipped vertically?
000151B0 6700                       		beq.s	@noflip3	; if not, branch
000151B2 4440                       		neg.w	d0
000151B4                            

000151B4                            	@noflip3:
000151B4 4A40                       		tst.w	d0
000151B6 679C                       		beq.s	@isblank	; branch if height is 0
000151B8 6B00                       		bmi.s	@negfloor	; branch if height is negative
000151BA 0C00 0010                  		cmpi.b	#$10,d0
000151BE 6700                       		beq.s	@maxfloor	; branch if height is $10 (max)
000151C0 3202                       		move.w	d2,d1		; get y-pos. of object
000151C2 0241 000F                  		andi.w	#$F,d1
000151C6 D041                       		add.w	d1,d0
000151C8 323C 000F                  		move.w	#$F,d1
000151CC 9240                       		sub.w	d0,d1		; return distance to floor
000151CE 4E75                       		rts	
000151D0                            ; ===========================================================================
000151D0                            

000151D0                            @negfloor:
000151D0 3202                       		move.w	d2,d1
000151D2 0241 000F                  		andi.w	#$F,d1
000151D6 D041                       		add.w	d1,d0
000151D8 6A00 FF7A                  		bpl.w	@isblank
000151DC                            

000151DC                            @maxfloor:
000151DC 944B                       		sub.w	a3,d2
000151DE 6100 0000                  		bsr.w	FindFloor2	; try tile above the nearest
000151E2 D44B                       		add.w	a3,d2
000151E4 0441 0010                  		subi.w	#$10,d1		; return distance to floor
000151E8 4E75                       		rts	
000151EA                            ; End of function FindFloor
000151EA                            

000151EA                            

000151EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151EA                            

000151EA                            

000151EA                            FindFloor2:
000151EA 6100 FEE6                  		bsr.w	FindNearestTile
000151EE 3011                       		move.w	(a1),d0
000151F0 3800                       		move.w	d0,d4
000151F2 0240 07FF                  		andi.w	#$7FF,d0
000151F6 6700                       		beq.s	@isblank2
000151F8 0B04                       		btst	d5,d4
000151FA 6600                       		bne.s	@issolid
000151FC                            

000151FC                            @isblank2:
000151FC 323C 000F                  		move.w	#$F,d1
00015200 3002                       		move.w	d2,d0
00015202 0240 000F                  		andi.w	#$F,d0
00015206 9240                       		sub.w	d0,d1
00015208 4E75                       		rts	
0001520A                            ; ===========================================================================
0001520A                            

0001520A                            @issolid:
0001520A 2478 F796                  		movea.l	(v_collindex).w,a2
0001520E 1032 0000                  		move.b	(a2,d0.w),d0
00015212 0240 00FF                  		andi.w	#$FF,d0
00015216 67E4                       		beq.s	@isblank2
00015218 45F9 0000 0000             		lea	(AngleMap).l,a2
0001521E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015222 E948                       		lsl.w	#4,d0
00015224 3203                       		move.w	d3,d1
00015226 0804 000B                  		btst	#$B,d4
0001522A 6700                       		beq.s	@noflip
0001522C 4641                       		not.w	d1
0001522E 4414                       		neg.b	(a4)
00015230                            

00015230                            	@noflip:
00015230 0804 000C                  		btst	#$C,d4
00015234 6700                       		beq.s	@noflip2
00015236 0614 0040                  		addi.b	#$40,(a4)
0001523A 4414                       		neg.b	(a4)
0001523C 0414 0040                  		subi.b	#$40,(a4)
00015240                            

00015240                            	@noflip2:
00015240 0241 000F                  		andi.w	#$F,d1
00015244 D240                       		add.w	d0,d1
00015246 45F9 0000 0000             		lea	(CollArray1).l,a2
0001524C 1032 1000                  		move.b	(a2,d1.w),d0
00015250 4880                       		ext.w	d0
00015252 BD44                       		eor.w	d6,d4
00015254 0804 000C                  		btst	#$C,d4
00015258 6700                       		beq.s	@noflip3
0001525A 4440                       		neg.w	d0
0001525C                            

0001525C                            	@noflip3:
0001525C 4A40                       		tst.w	d0
0001525E 679C                       		beq.s	@isblank2
00015260 6B00                       		bmi.s	@negfloor
00015262 3202                       		move.w	d2,d1
00015264 0241 000F                  		andi.w	#$F,d1
00015268 D041                       		add.w	d1,d0
0001526A 323C 000F                  		move.w	#$F,d1
0001526E 9240                       		sub.w	d0,d1
00015270 4E75                       		rts	
00015272                            ; ===========================================================================
00015272                            

00015272                            @negfloor:
00015272 3202                       		move.w	d2,d1
00015274 0241 000F                  		andi.w	#$F,d1
00015278 D041                       		add.w	d1,d0
0001527A 6A00 FF80                  		bpl.w	@isblank2
0001527E 4641                       		not.w	d1
00015280 4E75                       		rts	
00015282                            ; End of function FindFloor2
00015282                            ; End of function FindFloor2
00015282                            		include	"_incObj\sub FindWall.asm"
00015282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015282                            

00015282                            

00015282                            FindWall:
00015282 6100 FE4E                  		bsr.w	FindNearestTile
00015286 3011                       		move.w	(a1),d0
00015288 3800                       		move.w	d0,d4
0001528A 0240 07FF                  		andi.w	#$7FF,d0
0001528E 6700                       		beq.s	loc_14B1E
00015290 0B04                       		btst	d5,d4
00015292 6600                       		bne.s	loc_14B2C
00015294                            

00015294                            loc_14B1E:
00015294 D64B                       		add.w	a3,d3
00015296 6100 0000                  		bsr.w	FindWall2
0001529A 964B                       		sub.w	a3,d3
0001529C 0641 0010                  		addi.w	#$10,d1
000152A0 4E75                       		rts	
000152A2                            ; ===========================================================================
000152A2                            

000152A2                            loc_14B2C:
000152A2 2478 F796                  		movea.l	(v_collindex).w,a2
000152A6 1032 0000                  		move.b	(a2,d0.w),d0
000152AA 0240 00FF                  		andi.w	#$FF,d0
000152AE 67E4                       		beq.s	loc_14B1E
000152B0 45F9 0000 0000             		lea	(AngleMap).l,a2
000152B6 18B2 0000                  		move.b	(a2,d0.w),(a4)
000152BA E948                       		lsl.w	#4,d0
000152BC 3202                       		move.w	d2,d1
000152BE 0804 000C                  		btst	#$C,d4
000152C2 6700                       		beq.s	loc_14B5A
000152C4 4641                       		not.w	d1
000152C6 0614 0040                  		addi.b	#$40,(a4)
000152CA 4414                       		neg.b	(a4)
000152CC 0414 0040                  		subi.b	#$40,(a4)
000152D0                            

000152D0                            loc_14B5A:
000152D0 0804 000B                  		btst	#$B,d4
000152D4 6700                       		beq.s	loc_14B62
000152D6 4414                       		neg.b	(a4)
000152D8                            

000152D8                            loc_14B62:
000152D8 0241 000F                  		andi.w	#$F,d1
000152DC D240                       		add.w	d0,d1
000152DE 45F9 0000 0000             		lea	(CollArray2).l,a2
000152E4 1032 1000                  		move.b	(a2,d1.w),d0
000152E8 4880                       		ext.w	d0
000152EA BD44                       		eor.w	d6,d4
000152EC 0804 000B                  		btst	#$B,d4
000152F0 6700                       		beq.s	loc_14B7E
000152F2 4440                       		neg.w	d0
000152F4                            

000152F4                            loc_14B7E:
000152F4 4A40                       		tst.w	d0
000152F6 679C                       		beq.s	loc_14B1E
000152F8 6B00                       		bmi.s	loc_14B9A
000152FA 0C00 0010                  		cmpi.b	#$10,d0
000152FE 6700                       		beq.s	loc_14BA6
00015300 3203                       		move.w	d3,d1
00015302 0241 000F                  		andi.w	#$F,d1
00015306 D041                       		add.w	d1,d0
00015308 323C 000F                  		move.w	#$F,d1
0001530C 9240                       		sub.w	d0,d1
0001530E 4E75                       		rts	
00015310                            ; ===========================================================================
00015310                            

00015310                            loc_14B9A:
00015310 3203                       		move.w	d3,d1
00015312 0241 000F                  		andi.w	#$F,d1
00015316 D041                       		add.w	d1,d0
00015318 6A00 FF7A                  		bpl.w	loc_14B1E
0001531C                            

0001531C                            loc_14BA6:
0001531C 964B                       		sub.w	a3,d3
0001531E 6100 0000                  		bsr.w	FindWall2
00015322 D64B                       		add.w	a3,d3
00015324 0441 0010                  		subi.w	#$10,d1
00015328 4E75                       		rts	
0001532A                            ; End of function FindWall
0001532A                            

0001532A                            

0001532A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001532A                            

0001532A                            

0001532A                            FindWall2:
0001532A 6100 FDA6                  		bsr.w	FindNearestTile
0001532E 3011                       		move.w	(a1),d0
00015330 3800                       		move.w	d0,d4
00015332 0240 07FF                  		andi.w	#$7FF,d0
00015336 6700                       		beq.s	loc_14BC6
00015338 0B04                       		btst	d5,d4
0001533A 6600                       		bne.s	loc_14BD4
0001533C                            

0001533C                            loc_14BC6:
0001533C 323C 000F                  		move.w	#$F,d1
00015340 3003                       		move.w	d3,d0
00015342 0240 000F                  		andi.w	#$F,d0
00015346 9240                       		sub.w	d0,d1
00015348 4E75                       		rts	
0001534A                            ; ===========================================================================
0001534A                            

0001534A                            loc_14BD4:
0001534A 2478 F796                  		movea.l	(v_collindex).w,a2
0001534E 1032 0000                  		move.b	(a2,d0.w),d0
00015352 0240 00FF                  		andi.w	#$FF,d0
00015356 67E4                       		beq.s	loc_14BC6
00015358 45F9 0000 0000             		lea	(AngleMap).l,a2
0001535E 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015362 E948                       		lsl.w	#4,d0
00015364 3202                       		move.w	d2,d1
00015366 0804 000C                  		btst	#$C,d4
0001536A 6700                       		beq.s	loc_14C02
0001536C 4641                       		not.w	d1
0001536E 0614 0040                  		addi.b	#$40,(a4)
00015372 4414                       		neg.b	(a4)
00015374 0414 0040                  		subi.b	#$40,(a4)
00015378                            

00015378                            loc_14C02:
00015378 0804 000B                  		btst	#$B,d4
0001537C 6700                       		beq.s	loc_14C0A
0001537E 4414                       		neg.b	(a4)
00015380                            

00015380                            loc_14C0A:
00015380 0241 000F                  		andi.w	#$F,d1
00015384 D240                       		add.w	d0,d1
00015386 45F9 0000 0000             		lea	(CollArray2).l,a2
0001538C 1032 1000                  		move.b	(a2,d1.w),d0
00015390 4880                       		ext.w	d0
00015392 BD44                       		eor.w	d6,d4
00015394 0804 000B                  		btst	#$B,d4
00015398 6700                       		beq.s	loc_14C26
0001539A 4440                       		neg.w	d0
0001539C                            

0001539C                            loc_14C26:
0001539C 4A40                       		tst.w	d0
0001539E 679C                       		beq.s	loc_14BC6
000153A0 6B00                       		bmi.s	loc_14C3C
000153A2 3203                       		move.w	d3,d1
000153A4 0241 000F                  		andi.w	#$F,d1
000153A8 D041                       		add.w	d1,d0
000153AA 323C 000F                  		move.w	#$F,d1
000153AE 9240                       		sub.w	d0,d1
000153B0 4E75                       		rts	
000153B2                            ; ===========================================================================
000153B2                            

000153B2                            loc_14C3C:
000153B2 3203                       		move.w	d3,d1
000153B4 0241 000F                  		andi.w	#$F,d1
000153B8 D041                       		add.w	d1,d0
000153BA 6A00 FF80                  		bpl.w	loc_14BC6
000153BE 4641                       		not.w	d1
000153C0 4E75                       		rts	
000153C2                            ; End of function FindWall2
000153C2                            ; End of function FindWall2
000153C2                            

000153C2                            ; ---------------------------------------------------------------------------
000153C2                            ; This subroutine takes 'raw' bitmap-like collision block data as input and
000153C2                            ; converts it into the proper collision arrays (ColArray and ColArray2).
000153C2                            ; Pointers to said raw data are dummied out.
000153C2                            ; Curiously, an example of the original 'raw' data that this was intended
000153C2                            ; to process can be found in the J2ME version, in a file called 'blkcol.bct'.
000153C2                            ; ---------------------------------------------------------------------------
000153C2                            

000153C2                            RawColBlocks		equ CollArray1
000153C2                            ConvRowColBlocks	equ CollArray1
000153C2                            

000153C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153C2                            

000153C2                            

000153C2                            ConvertCollisionArray:
000153C2 4E75                       		rts	
000153C4                            ; ---------------------------------------------------------------------------
000153C4                            		; The raw format stores the collision data column by column for the normal collision array.
000153C4                            		; This makes a copy of the data, but stored row by row, for the rotated collision array.
000153C4 43F9 0000 0000             		lea	(RawColBlocks).l,a1	; Source location of raw collision block data
000153CA 45F9 0000 0000             		lea	(ConvRowColBlocks).l,a2	; Destinatation location for row-converted collision block data
000153D0                            

000153D0 363C 00FF                  		move.w	#$100-1,d3		; Number of blocks in collision data
000153D4                            

000153D4                            	@blockLoop:
000153D4 7A10                       		moveq	#16,d5			; Start on the 16th bit (the leftmost pixel)
000153D6                            

000153D6 343C 000F                  		move.w	#16-1,d2		; Width of a block in pixels
000153DA                            

000153DA                            	@columnLoop:
000153DA 7800                       		moveq	#0,d4
000153DC                            

000153DC 323C 000F                  		move.w	#16-1,d1		; Height of a block in pixels
000153E0                            

000153E0                            	@rowLoop:
000153E0 3019                       		move.w	(a1)+,d0		; Get row of collision bits
000153E2 EAA8                       		lsr.l	d5,d0			; Push the selected bit of this row into the 'eXtend' flag
000153E4 D944                       		addx.w	d4,d4			; Shift d4 to the left, and insert the selected bit into bit 0
000153E6 51C9 FFF8                  		dbf	d1,@rowLoop		; Loop for each row of pixels in a block
000153EA                            

000153EA 34C4                       		move.w	d4,(a2)+		; Store column of collision bits
000153EC 92FC 0020                  		suba.w	#2*16,a1		; Back to the start of the block
000153F0 5345                       		subq.w	#1,d5			; Get next bit in the row
000153F2 51CA FFE6                  		dbf	d2,@columnLoop		; Loop for each column of pixels in a block
000153F6                            

000153F6 D2FC 0020                  		adda.w	#2*16,a1		; Next block
000153FA 51CB FFD8                  		dbf	d3,@blockLoop		; Loop for each block in the raw collision block data
000153FE                            

000153FE                            		; This then converts the collision data into the final collision arrays
000153FE 43F9 0000 0000             		lea	(ConvRowColBlocks).l,a1
00015404 45F9 0000 0000             		lea	(CollArray2).l,a2	; Convert the row-converted collision block data into final rotated collision array
0001540A 6100                       		bsr.s	@convertArray
0001540C 43F9 0000 0000             		lea	(RawColBlocks).l,a1
00015412 45F9 0000 0000             		lea	(CollArray1).l,a2	; Convert the raw collision block data into final normal collision array
00015418                            

00015418                            

00015418                            	@convertArray:
00015418 363C 0FFF                  		move.w	#$1000-1,d3		; Size of the collision array
0001541C                            

0001541C                            	@processLoop:
0001541C 7400                       		moveq	#0,d2
0001541E 323C 000F                  		move.w	#$F,d1
00015422 3019                       		move.w	(a1)+,d0		; Get current column of collision pixels
00015424 6700                       		beq.s	@noCollision		; Branch if there's no collision in this column
00015426 6B00                       		bmi.s	@topPixelSolid		; Branch if top pixel of collision is solid
00015428                            

00015428                            	; Here we count, starting from the bottom, how many pixels tall
00015428                            	; the collision in this column is.
00015428                            	@processColumnLoop1:
00015428 E248                       		lsr.w	#1,d0
0001542A 6400                       		bhs.s	@pixelNotSolid1
0001542C 5202                       		addq.b	#1,d2
0001542E                            

0001542E                            	@pixelNotSolid1:
0001542E 51C9 FFF8                  		dbf	d1,@processColumnLoop1
00015432                            

00015432 6000                       		bra.s	@columnProcessed
00015434                            ; ===========================================================================
00015434                            

00015434                            	@topPixelSolid:
00015434 0C40 FFFF                  		cmpi.w	#$FFFF,d0		; Is entire column solid?
00015438 6700                       		beq.s	@entireColumnSolid	; Branch if so
0001543A                            

0001543A                            	; Here we count, starting from the top, how many pixels tall
0001543A                            	; the collision in this column is (the resulting number is negative).
0001543A                            	@processColumnLoop2:
0001543A E348                       		lsl.w	#1,d0
0001543C 6400                       		bhs.s	@pixelNotSolid2
0001543E 5302                       		subq.b	#1,d2
00015440                            

00015440                            	@pixelNotSolid2:
00015440 51C9 FFF8                  		dbf	d1,@processColumnLoop2
00015444                            

00015444 6000                       		bra.s	@columnProcessed
00015446                            ; ===========================================================================
00015446                            

00015446                            	@entireColumnSolid:
00015446 303C 0010                  		move.w	#$10,d0
0001544A                            

0001544A                            	@noCollision:
0001544A 3400                       		move.w	d0,d2
0001544C                            

0001544C                            	@columnProcessed:
0001544C 14C2                       		move.b	d2,(a2)+		; Store column collision height
0001544E 51CB FFCC                  		dbf	d3,@processLoop
00015452                            

00015452 4E75                       		rts	
00015454                            

00015454                            ; End of function ConvertCollisionArray
00015454                            

00015454                            

00015454                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015454                            

00015454                            

00015454                            Sonic_WalkSpeed:
00015454 2628 0008                  		move.l	obX(a0),d3
00015458 2428 000C                  		move.l	obY(a0),d2
0001545C 3228 0010                  		move.w	obVelX(a0),d1
00015460 48C1                       		ext.l	d1
00015462 E181                       		asl.l	#8,d1
00015464 D681                       		add.l	d1,d3
00015466 3228 0012                  		move.w	obVelY(a0),d1
0001546A 48C1                       		ext.l	d1
0001546C E181                       		asl.l	#8,d1
0001546E D481                       		add.l	d1,d2
00015470 4842                       		swap	d2
00015472 4843                       		swap	d3
00015474 11C0 F768                  		move.b	d0,(v_anglebuffer).w
00015478 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001547C 1200                       		move.b	d0,d1
0001547E 0600 0020                  		addi.b	#$20,d0
00015482 6A00                       		bpl.s	loc_14D1A
00015484 1001                       		move.b	d1,d0
00015486 6A00                       		bpl.s	loc_14D14
00015488 5300                       		subq.b	#1,d0
0001548A                            

0001548A                            loc_14D14:
0001548A 0600 0020                  		addi.b	#$20,d0
0001548E 6000                       		bra.s	loc_14D24
00015490                            ; ===========================================================================
00015490                            

00015490                            loc_14D1A:
00015490 1001                       		move.b	d1,d0
00015492 6A00                       		bpl.s	loc_14D20
00015494 5200                       		addq.b	#1,d0
00015496                            

00015496                            loc_14D20:
00015496 0600 001F                  		addi.b	#$1F,d0
0001549A                            

0001549A                            loc_14D24:
0001549A 0200 00C0                  		andi.b	#$C0,d0
0001549E 6700 0000                  		beq.w	loc_14DF0
000154A2 0C00 0080                  		cmpi.b	#$80,d0
000154A6 6700 0000                  		beq.w	loc_14F7C
000154AA 0201 0038                  		andi.b	#$38,d1
000154AE 6600                       		bne.s	loc_14D3C
000154B0 5042                       		addq.w	#8,d2
000154B2                            

000154B2                            loc_14D3C:
000154B2 0C00 0040                  		cmpi.b	#$40,d0
000154B6 6700 0000                  		beq.w	loc_1504A
000154BA 6000 0000                  		bra.w	loc_14EBC
000154BE                            

000154BE                            ; End of function Sonic_WalkSpeed
000154BE                            

000154BE                            

000154BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154BE                            

000154BE                            

000154BE                            sub_14D48:
000154BE 11C0 F768                  		move.b	d0,(v_anglebuffer).w
000154C2 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000154C6 0600 0020                  		addi.b	#$20,d0
000154CA 0200 00C0                  		andi.b	#$C0,d0
000154CE 0C00 0040                  		cmpi.b	#$40,d0
000154D2 6700 0000                  		beq.w	loc_14FD6
000154D6 0C00 0080                  		cmpi.b	#$80,d0
000154DA 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000154DE 0C00 00C0                  		cmpi.b	#$C0,d0
000154E2 6700 0000                  		beq.w	sub_14E50
000154E6                            

000154E6                            ; End of function sub_14D48
000154E6                            

000154E6                            ; ---------------------------------------------------------------------------
000154E6                            ; Subroutine to	make Sonic land	on the floor after jumping
000154E6                            ; ---------------------------------------------------------------------------
000154E6                            

000154E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000154E6                            

000154E6                            

000154E6                            Sonic_HitFloor:
000154E6 3428 000C                  		move.w	obY(a0),d2
000154EA 3628 0008                  		move.w	obX(a0),d3
000154EE 7000                       		moveq	#0,d0
000154F0 1028 0016                  		move.b	obHeight(a0),d0
000154F4 4880                       		ext.w	d0
000154F6 D440                       		add.w	d0,d2
000154F8 1028 0017                  		move.b	obWidth(a0),d0
000154FC 4880                       		ext.w	d0
000154FE D640                       		add.w	d0,d3
00015500 49F8 F768                  		lea	(v_anglebuffer).w,a4
00015504 367C 0010                  		movea.w	#$10,a3
00015508 3C3C 0000                  		move.w	#0,d6
0001550C 7A0D                       		moveq	#$D,d5
0001550E 6100 FC34                  		bsr.w	FindFloor
00015512 3F01                       		move.w	d1,-(sp)
00015514 3428 000C                  		move.w	obY(a0),d2
00015518 3628 0008                  		move.w	obX(a0),d3
0001551C 7000                       		moveq	#0,d0
0001551E 1028 0016                  		move.b	obHeight(a0),d0
00015522 4880                       		ext.w	d0
00015524 D440                       		add.w	d0,d2
00015526 1028 0017                  		move.b	obWidth(a0),d0
0001552A 4880                       		ext.w	d0
0001552C 9640                       		sub.w	d0,d3
0001552E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015532 367C 0010                  		movea.w	#$10,a3
00015536 3C3C 0000                  		move.w	#0,d6
0001553A 7A0D                       		moveq	#$D,d5
0001553C 6100 FC06                  		bsr.w	FindFloor
00015540 301F                       		move.w	(sp)+,d0
00015542 143C 0000                  		move.b	#0,d2
00015546                            

00015546                            loc_14DD0:
00015546 1638 F76A                  		move.b	($FFFFF76A).w,d3
0001554A B240                       		cmp.w	d0,d1
0001554C 6F00                       		ble.s	loc_14DDE
0001554E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00015552 C141                       		exg	d0,d1
00015554                            

00015554                            loc_14DDE:
00015554 0803 0000                  		btst	#0,d3
00015558 6700                       		beq.s	locret_14DE6
0001555A 1602                       		move.b	d2,d3
0001555C                            

0001555C                            locret_14DE6:
0001555C 4E75                       		rts	
0001555E                            

0001555E                            ; End of function Sonic_HitFloor
0001555E                            

0001555E                            ; ===========================================================================
0001555E 3428 000C                  		move.w	obY(a0),d2
00015562 3628 0008                  		move.w	obX(a0),d3
00015566                            

00015566                            loc_14DF0:
00015566 0642 000A                  		addi.w	#$A,d2
0001556A 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001556E 367C 0010                  		movea.w	#$10,a3
00015572 3C3C 0000                  		move.w	#0,d6
00015576 7A0E                       		moveq	#$E,d5
00015578 6100 FBCA                  		bsr.w	FindFloor
0001557C 143C 0000                  		move.b	#0,d2
00015580                            

00015580                            loc_14E0A:
00015580 1638 F768                  		move.b	(v_anglebuffer).w,d3
00015584 0803 0000                  		btst	#0,d3
00015588 6700                       		beq.s	locret_14E16
0001558A 1602                       		move.b	d2,d3
0001558C                            

0001558C                            locret_14E16:
0001558C 4E75                       		rts	
0001558E                            

0001558E                            		include	"_incObj\sub ObjFloorDist.asm"
0001558E                            ; ---------------------------------------------------------------------------
0001558E                            ; Subroutine to find the distance of an object to the floor
0001558E                            

0001558E                            ; input:
0001558E                            ;	d3 = x-pos. of object (ObjFloorDist2 only)
0001558E                            

0001558E                            ; output:
0001558E                            ;	d1 = distance to the floor
0001558E                            ;	d3 = floor angle
0001558E                            ;	a1 = address within 256x256 mappings where object is standing
0001558E                            ;	     (refers to a 16x16 tile number)
0001558E                            ;	(a4) = floor angle
0001558E                            ; ---------------------------------------------------------------------------
0001558E                            

0001558E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001558E                            

0001558E                            

0001558E                            ObjFloorDist:
0001558E 3628 0008                  		move.w	obX(a0),d3
00015592                            

00015592                            

00015592                            ObjFloorDist2:
00015592 3428 000C                  		move.w	obY(a0),d2
00015596 7000                       		moveq	#0,d0
00015598 1028 0016                  		move.b	obHeight(a0),d0
0001559C 4880                       		ext.w	d0
0001559E D440                       		add.w	d0,d2
000155A0 49F8 F768                  		lea	(v_anglebuffer).w,a4
000155A4 18BC 0000                  		move.b	#0,(a4)
000155A8 367C 0010                  		movea.w	#$10,a3		; height of a 16x16 tile
000155AC 3C3C 0000                  		move.w	#0,d6
000155B0 7A0D                       		moveq	#$D,d5		; bit to test for solidness
000155B2 6100 FB90                  		bsr.w	FindFloor
000155B6 1638 F768                  		move.b	(v_anglebuffer).w,d3
000155BA 0803 0000                  		btst	#0,d3
000155BE 6700                       		beq.s	locret_14E4E
000155C0 163C 0000                  		move.b	#0,d3
000155C4                            

000155C4                            	locret_14E4E:
000155C4 4E75                       		rts	
000155C6                            

000155C6                            ; End of function ObjFloorDist2
000155C6                            ; End of function ObjFloorDist2
000155C6                            

000155C6                            

000155C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155C6                            

000155C6                            

000155C6                            sub_14E50:
000155C6 3428 000C                  		move.w	obY(a0),d2
000155CA 3628 0008                  		move.w	obX(a0),d3
000155CE 7000                       		moveq	#0,d0
000155D0 1028 0017                  		move.b	obWidth(a0),d0
000155D4 4880                       		ext.w	d0
000155D6 9440                       		sub.w	d0,d2
000155D8 1028 0016                  		move.b	obHeight(a0),d0
000155DC 4880                       		ext.w	d0
000155DE D640                       		add.w	d0,d3
000155E0 49F8 F768                  		lea	(v_anglebuffer).w,a4
000155E4 367C 0010                  		movea.w	#$10,a3
000155E8 3C3C 0000                  		move.w	#0,d6
000155EC 7A0E                       		moveq	#$E,d5
000155EE 6100 FC92                  		bsr.w	FindWall
000155F2 3F01                       		move.w	d1,-(sp)
000155F4 3428 000C                  		move.w	obY(a0),d2
000155F8 3628 0008                  		move.w	obX(a0),d3
000155FC 7000                       		moveq	#0,d0
000155FE 1028 0017                  		move.b	obWidth(a0),d0
00015602 4880                       		ext.w	d0
00015604 D440                       		add.w	d0,d2
00015606 1028 0016                  		move.b	obHeight(a0),d0
0001560A 4880                       		ext.w	d0
0001560C D640                       		add.w	d0,d3
0001560E 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015612 367C 0010                  		movea.w	#$10,a3
00015616 3C3C 0000                  		move.w	#0,d6
0001561A 7A0E                       		moveq	#$E,d5
0001561C 6100 FC64                  		bsr.w	FindWall
00015620 301F                       		move.w	(sp)+,d0
00015622 143C 00C0                  		move.b	#-$40,d2
00015626 6000 FF1E                  		bra.w	loc_14DD0
0001562A                            

0001562A                            ; End of function sub_14E50
0001562A                            

0001562A                            

0001562A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001562A                            

0001562A                            

0001562A                            sub_14EB4:
0001562A 3428 000C                  		move.w	obY(a0),d2
0001562E 3628 0008                  		move.w	obX(a0),d3
00015632                            

00015632                            loc_14EBC:
00015632 0643 000A                  		addi.w	#$A,d3
00015636 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001563A 367C 0010                  		movea.w	#$10,a3
0001563E 3C3C 0000                  		move.w	#0,d6
00015642 7A0E                       		moveq	#$E,d5
00015644 6100 FC3C                  		bsr.w	FindWall
00015648 143C 00C0                  		move.b	#-$40,d2
0001564C 6000 FF32                  		bra.w	loc_14E0A
00015650                            

00015650                            ; End of function sub_14EB4
00015650                            

00015650                            ; ---------------------------------------------------------------------------
00015650                            ; Subroutine to	detect when an object hits a wall to its right
00015650                            ; ---------------------------------------------------------------------------
00015650                            

00015650                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015650                            

00015650                            

00015650                            ObjHitWallRight:
00015650 D668 0008                  		add.w	obX(a0),d3
00015654 3428 000C                  		move.w	obY(a0),d2
00015658 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001565C 18BC 0000                  		move.b	#0,(a4)
00015660 367C 0010                  		movea.w	#$10,a3
00015664 3C3C 0000                  		move.w	#0,d6
00015668 7A0E                       		moveq	#$E,d5
0001566A 6100 FC16                  		bsr.w	FindWall
0001566E 1638 F768                  		move.b	(v_anglebuffer).w,d3
00015672 0803 0000                  		btst	#0,d3
00015676 6700                       		beq.s	locret_14F06
00015678 163C 00C0                  		move.b	#-$40,d3
0001567C                            

0001567C                            locret_14F06:
0001567C 4E75                       		rts	
0001567E                            

0001567E                            ; End of function ObjHitWallRight
0001567E                            

0001567E                            ; ---------------------------------------------------------------------------
0001567E                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001567E                            ; touches them
0001567E                            ; ---------------------------------------------------------------------------
0001567E                            

0001567E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001567E                            

0001567E                            

0001567E                            Sonic_DontRunOnWalls:
0001567E 3428 000C                  		move.w	obY(a0),d2
00015682 3628 0008                  		move.w	obX(a0),d3
00015686 7000                       		moveq	#0,d0
00015688 1028 0016                  		move.b	obHeight(a0),d0
0001568C 4880                       		ext.w	d0
0001568E 9440                       		sub.w	d0,d2
00015690 0A42 000F                  		eori.w	#$F,d2
00015694 1028 0017                  		move.b	obWidth(a0),d0
00015698 4880                       		ext.w	d0
0001569A D640                       		add.w	d0,d3
0001569C 49F8 F768                  		lea	(v_anglebuffer).w,a4
000156A0 367C FFF0                  		movea.w	#-$10,a3
000156A4 3C3C 1000                  		move.w	#$1000,d6
000156A8 7A0E                       		moveq	#$E,d5
000156AA 6100 FA98                  		bsr.w	FindFloor
000156AE 3F01                       		move.w	d1,-(sp)
000156B0 3428 000C                  		move.w	obY(a0),d2
000156B4 3628 0008                  		move.w	obX(a0),d3
000156B8 7000                       		moveq	#0,d0
000156BA 1028 0016                  		move.b	obHeight(a0),d0
000156BE 4880                       		ext.w	d0
000156C0 9440                       		sub.w	d0,d2
000156C2 0A42 000F                  		eori.w	#$F,d2
000156C6 1028 0017                  		move.b	obWidth(a0),d0
000156CA 4880                       		ext.w	d0
000156CC 9640                       		sub.w	d0,d3
000156CE 49F8 F76A                  		lea	($FFFFF76A).w,a4
000156D2 367C FFF0                  		movea.w	#-$10,a3
000156D6 3C3C 1000                  		move.w	#$1000,d6
000156DA 7A0E                       		moveq	#$E,d5
000156DC 6100 FA66                  		bsr.w	FindFloor
000156E0 301F                       		move.w	(sp)+,d0
000156E2 143C 0080                  		move.b	#-$80,d2
000156E6 6000 FE5E                  		bra.w	loc_14DD0
000156EA                            ; End of function Sonic_DontRunOnWalls
000156EA                            

000156EA                            ; ===========================================================================
000156EA 3428 000C                  		move.w	obY(a0),d2
000156EE 3628 0008                  		move.w	obX(a0),d3
000156F2                            

000156F2                            loc_14F7C:
000156F2 0442 000A                  		subi.w	#$A,d2
000156F6 0A42 000F                  		eori.w	#$F,d2
000156FA 49F8 F768                  		lea	(v_anglebuffer).w,a4
000156FE 367C FFF0                  		movea.w	#-$10,a3
00015702 3C3C 1000                  		move.w	#$1000,d6
00015706 7A0E                       		moveq	#$E,d5
00015708 6100 FA3A                  		bsr.w	FindFloor
0001570C 143C 0080                  		move.b	#-$80,d2
00015710 6000 FE6E                  		bra.w	loc_14E0A
00015714                            

00015714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015714                            

00015714                            

00015714                            ObjHitCeiling:
00015714 3428 000C                  		move.w	obY(a0),d2
00015718 3628 0008                  		move.w	obX(a0),d3
0001571C 7000                       		moveq	#0,d0
0001571E 1028 0016                  		move.b	obHeight(a0),d0
00015722 4880                       		ext.w	d0
00015724 9440                       		sub.w	d0,d2
00015726 0A42 000F                  		eori.w	#$F,d2
0001572A 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001572E 367C FFF0                  		movea.w	#-$10,a3
00015732 3C3C 1000                  		move.w	#$1000,d6
00015736 7A0E                       		moveq	#$E,d5
00015738 6100 FA0A                  		bsr.w	FindFloor
0001573C 1638 F768                  		move.b	(v_anglebuffer).w,d3
00015740 0803 0000                  		btst	#0,d3
00015744 6700                       		beq.s	locret_14FD4
00015746 163C 0080                  		move.b	#-$80,d3
0001574A                            

0001574A                            locret_14FD4:
0001574A 4E75                       		rts	
0001574C                            ; End of function ObjHitCeiling
0001574C                            

0001574C                            ; ===========================================================================
0001574C                            

0001574C                            loc_14FD6:
0001574C 3428 000C                  		move.w	obY(a0),d2
00015750 3628 0008                  		move.w	obX(a0),d3
00015754 7000                       		moveq	#0,d0
00015756 1028 0017                  		move.b	obWidth(a0),d0
0001575A 4880                       		ext.w	d0
0001575C 9440                       		sub.w	d0,d2
0001575E 1028 0016                  		move.b	obHeight(a0),d0
00015762 4880                       		ext.w	d0
00015764 9640                       		sub.w	d0,d3
00015766 0A43 000F                  		eori.w	#$F,d3
0001576A 49F8 F768                  		lea	(v_anglebuffer).w,a4
0001576E 367C FFF0                  		movea.w	#-$10,a3
00015772 3C3C 0800                  		move.w	#$800,d6
00015776 7A0E                       		moveq	#$E,d5
00015778 6100 FB08                  		bsr.w	FindWall
0001577C 3F01                       		move.w	d1,-(sp)
0001577E 3428 000C                  		move.w	obY(a0),d2
00015782 3628 0008                  		move.w	obX(a0),d3
00015786 7000                       		moveq	#0,d0
00015788 1028 0017                  		move.b	obWidth(a0),d0
0001578C 4880                       		ext.w	d0
0001578E D440                       		add.w	d0,d2
00015790 1028 0016                  		move.b	obHeight(a0),d0
00015794 4880                       		ext.w	d0
00015796 9640                       		sub.w	d0,d3
00015798 0A43 000F                  		eori.w	#$F,d3
0001579C 49F8 F76A                  		lea	($FFFFF76A).w,a4
000157A0 367C FFF0                  		movea.w	#-$10,a3
000157A4 3C3C 0800                  		move.w	#$800,d6
000157A8 7A0E                       		moveq	#$E,d5
000157AA 6100 FAD6                  		bsr.w	FindWall
000157AE 301F                       		move.w	(sp)+,d0
000157B0 143C 0040                  		move.b	#$40,d2
000157B4 6000 FD90                  		bra.w	loc_14DD0
000157B8                            

000157B8                            ; ---------------------------------------------------------------------------
000157B8                            ; Subroutine to	stop Sonic when	he jumps at a wall
000157B8                            ; ---------------------------------------------------------------------------
000157B8                            

000157B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157B8                            

000157B8                            

000157B8                            Sonic_HitWall:
000157B8 3428 000C                  		move.w	obY(a0),d2
000157BC 3628 0008                  		move.w	obX(a0),d3
000157C0                            

000157C0                            loc_1504A:
000157C0 0443 000A                  		subi.w	#$A,d3
000157C4 0A43 000F                  		eori.w	#$F,d3
000157C8 49F8 F768                  		lea	(v_anglebuffer).w,a4
000157CC 367C FFF0                  		movea.w	#-$10,a3
000157D0 3C3C 0800                  		move.w	#$800,d6
000157D4 7A0E                       		moveq	#$E,d5
000157D6 6100 FAAA                  		bsr.w	FindWall
000157DA 143C 0040                  		move.b	#$40,d2
000157DE 6000 FDA0                  		bra.w	loc_14E0A
000157E2                            ; End of function Sonic_HitWall
000157E2                            

000157E2                            ; ---------------------------------------------------------------------------
000157E2                            ; Subroutine to	detect when an object hits a wall to its left
000157E2                            ; ---------------------------------------------------------------------------
000157E2                            

000157E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157E2                            

000157E2                            

000157E2                            ObjHitWallLeft:
000157E2 D668 0008                  		add.w	obX(a0),d3
000157E6 3428 000C                  		move.w	obY(a0),d2
000157EA                            		; Engine bug: colliding with left walls is erratic with this function.
000157EA                            		; The cause is this: a missing instruction to flip collision on the found
000157EA                            		; 16x16 block; this one:
000157EA                            		;eori.w	#$F,d3
000157EA 49F8 F768                  		lea	(v_anglebuffer).w,a4
000157EE 18BC 0000                  		move.b	#0,(a4)
000157F2 367C FFF0                  		movea.w	#-$10,a3
000157F6 3C3C 0800                  		move.w	#$800,d6
000157FA 7A0E                       		moveq	#$E,d5
000157FC 6100 FA84                  		bsr.w	FindWall
00015800 1638 F768                  		move.b	(v_anglebuffer).w,d3
00015804 0803 0000                  		btst	#0,d3
00015808 6700                       		beq.s	locret_15098
0001580A 163C 0040                  		move.b	#$40,d3
0001580E                            

0001580E                            locret_15098:
0001580E 4E75                       		rts	
00015810                            ; End of function ObjHitWallLeft
00015810                            

00015810                            ; ===========================================================================
00015810                            

00015810                            		include	"_incObj\66 Rotating Junction.asm"
00015810                            ; ---------------------------------------------------------------------------
00015810                            ; Object 66 - rotating disc junction that grabs Sonic (SBZ)
00015810                            ; ---------------------------------------------------------------------------
00015810                            

00015810                            Junction:
00015810 7000                       		moveq	#0,d0
00015812 1028 0024                  		move.b	obRoutine(a0),d0
00015816 323B 0000                  		move.w	Jun_Index(pc,d0.w),d1
0001581A 4EFB 1000                  		jmp	Jun_Index(pc,d1.w)
0001581E                            ; ===========================================================================
0001581E 0000                       Jun_Index:	dc.w Jun_Main-Jun_Index
00015820 0000                       		dc.w Jun_Action-Jun_Index
00015822 0000                       		dc.w Jun_Display-Jun_Index
00015824 0000                       		dc.w Jun_Release-Jun_Index
00015826                            

00015826 =00000034                  jun_frame:	equ $34		; current frame
00015826 =00000036                  jun_reverse:	equ $36		; flag set when switch is pressed
00015826 =00000038                  jun_switch:	equ $38		; which switch will reverse the disc
00015826                            ; ===========================================================================
00015826                            

00015826                            Jun_Main:	; Routine 0
00015826 5428 0024                  		addq.b	#2,obRoutine(a0)
0001582A 323C 0001                  		move.w	#1,d1
0001582E 2248                       		movea.l	a0,a1
00015830 6000                       		bra.s	@makeitem
00015832                            ; ===========================================================================
00015832                            

00015832                            	@repeat:
00015832 6100 88F4                  		bsr.w	FindFreeObj
00015836 6600                       		bne.s	@fail
00015838 137C 0066 0000             		move.b	#id_Junction,0(a1)
0001583E 5829 0024                  		addq.b	#4,obRoutine(a1) ; goto Jun_Display next
00015842 3368 0008 0008             		move.w	obX(a0),obX(a1)
00015848 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001584E 137C 0003 0018             		move.b	#3,obPriority(a1)
00015854 137C 0010 001A             		move.b	#$10,obFrame(a1) ; use large circular sprite
0001585A                            

0001585A                            @makeitem:
0001585A 237C 0000 0000 0004        		move.l	#Map_Jun,obMap(a1)
00015862 337C 4348 0002             		move.w	#$4348,obGfx(a1)
00015868 0029 0004 0001             		ori.b	#4,obRender(a1)
0001586E 137C 0038 0019             		move.b	#$38,obActWid(a1)
00015874                            

00015874                            	@fail:
00015874 51C9 FFBC                  		dbf	d1,@repeat
00015878                            

00015878 117C 0030 0019             		move.b	#$30,obActWid(a0)
0001587E 117C 0004 0018             		move.b	#4,obPriority(a0)
00015884 317C 003C 0030             		move.w	#$3C,$30(a0)
0001588A 117C 0001 0034             		move.b	#1,jun_frame(a0)
00015890 1168 0028 0038             		move.b	obSubtype(a0),jun_switch(a0)
00015896                            

00015896                            Jun_Action:	; Routine 2
00015896 6100 0000                  		bsr.w	Jun_ChkSwitch
0001589A 4A28 0001                  		tst.b	obRender(a0)
0001589E 6A00 0000                  		bpl.w	Jun_Display
000158A2 323C 0030                  		move.w	#$30,d1
000158A6 3401                       		move.w	d1,d2
000158A8 3602                       		move.w	d2,d3
000158AA 5243                       		addq.w	#1,d3
000158AC 3828 0008                  		move.w	obX(a0),d4
000158B0 6100 A7BE                  		bsr.w	SolidObject
000158B4 0828 0005 0022             		btst	#5,obStatus(a0)	; is Sonic pushing the disc?
000158BA 6700 0000                  		beq.w	Jun_Display	; if not, branch
000158BE                            

000158BE 43F8 D000                  		lea	(v_player).w,a1
000158C2 720E                       		moveq	#$E,d1
000158C4 3029 0008                  		move.w	obX(a1),d0
000158C8 B068 0008                  		cmp.w	obX(a0),d0	; is Sonic to the left of the disc?
000158CC 6500                       		bcs.s	@isleft		; if yes, branch
000158CE 7207                       		moveq	#7,d1		
000158D0                            

000158D0                            	@isleft:
000158D0 B228 001A                  		cmp.b	obFrame(a0),d1	; is the gap next to Sonic?
000158D4 6600                       		bne.s	Jun_Display	; if not, branch
000158D6                            

000158D6 1141 0032                  		move.b	d1,$32(a0)
000158DA 5828 0024                  		addq.b	#4,obRoutine(a0) ; goto Jun_Release next
000158DE 11FC 0001 F7C8             		move.b	#1,(f_playerctrl).w ; lock controls
000158E4 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; make Sonic use "rolling" animation
000158EA 337C 0800 0014             		move.w	#$800,obInertia(a1)
000158F0 337C 0000 0010             		move.w	#0,obVelX(a1)
000158F6 337C 0000 0012             		move.w	#0,obVelY(a1)
000158FC 08A8 0005 0022             		bclr	#5,obStatus(a0)
00015902 08A9 0005 0022             		bclr	#5,obStatus(a1)
00015908 08E9 0001 0022             		bset	#1,obStatus(a1)
0001590E 3429 0008                  		move.w	obX(a1),d2
00015912 3629 000C                  		move.w	obY(a1),d3
00015916 6100 0000                  		bsr.w	Jun_ChgPos
0001591A D569 0008                  		add.w	d2,obX(a1)
0001591E D769 000C                  		add.w	d3,obY(a1)
00015922 E0E9 0008                  		asr	obX(a1)
00015926 E0E9 000C                  		asr	obY(a1)
0001592A                            

0001592A                            Jun_Display:	; Routine 4
0001592A 6000 A41A                  		bra.w	RememberState
0001592E                            ; ===========================================================================
0001592E                            

0001592E                            Jun_Release:	; Routine 6
0001592E 1028 001A                  		move.b	obFrame(a0),d0
00015932 0C00 0004                  		cmpi.b	#4,d0		; is gap pointing down?
00015936 6700                       		beq.s	@release	; if yes, branch
00015938 0C00 0007                  		cmpi.b	#7,d0		; is gap pointing right?
0001593C 6600                       		bne.s	@dontrelease	; if not, branch
0001593E                            

0001593E                            	@release:
0001593E B028 0032                  		cmp.b	$32(a0),d0
00015942 6700                       		beq.s	@dontrelease
00015944 43F8 D000                  		lea	(v_player).w,a1
00015948 337C 0000 0010             		move.w	#0,obVelX(a1)
0001594E 337C 0800 0012             		move.w	#$800,obVelY(a1)
00015954 0C00 0004                  		cmpi.b	#4,d0
00015958 6700                       		beq.s	@isdown
0001595A 337C 0800 0010             		move.w	#$800,obVelX(a1)
00015960 337C 0800 0012             		move.w	#$800,obVelY(a1)
00015966                            

00015966                            	@isdown:
00015966 4238 F7C8                  		clr.b	(f_playerctrl).w	; unlock controls
0001596A 5928 0024                  		subq.b	#4,obRoutine(a0)
0001596E                            

0001596E                            	@dontrelease:
0001596E 6100                       		bsr.s	Jun_ChkSwitch
00015970 6100                       		bsr.s	Jun_ChgPos
00015972 6000 A3D2                  		bra.w	RememberState
00015976                            

00015976                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015976                            

00015976                            

00015976                            Jun_ChkSwitch:
00015976 45F8 F7E0                  		lea	(f_switch).w,a2
0001597A 7000                       		moveq	#0,d0
0001597C 1028 0038                  		move.b	jun_switch(a0),d0
00015980 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015986 6700                       		beq.s	@unpressed	; if not, branch
00015988                            

00015988 4A28 0036                  		tst.b	jun_reverse(a0)	; has switch previously	been pressed?
0001598C 6600                       		bne.s	@animate	; if yes, branch
0001598E 4428 0034                  		neg.b	jun_frame(a0)
00015992 117C 0001 0036             		move.b	#1,jun_reverse(a0) ; set to "previously pressed"
00015998 6000                       		bra.s	@animate
0001599A                            ; ===========================================================================
0001599A                            

0001599A                            @unpressed:
0001599A 4228 0036                  		clr.b	jun_reverse(a0)	; set to "not yet pressed"
0001599E                            

0001599E                            @animate:
0001599E 5328 001E                  		subq.b	#1,obTimeFrame(a0) ; decrement frame timer
000159A2 6A00                       		bpl.s	@nochange	; if time remains, branch
000159A4 117C 0007 001E             		move.b	#7,obTimeFrame(a0)
000159AA 1228 0034                  		move.b	jun_frame(a0),d1
000159AE 1028 001A                  		move.b	obFrame(a0),d0
000159B2 D001                       		add.b	d1,d0
000159B4 0200 000F                  		andi.b	#$F,d0
000159B8 1140 001A                  		move.b	d0,obFrame(a0)	; update frame
000159BC                            

000159BC                            	@nochange:
000159BC 4E75                       		rts	
000159BE                            ; End of function Jun_ChkSwitch
000159BE                            

000159BE                            

000159BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159BE                            

000159BE                            

000159BE                            Jun_ChgPos:
000159BE 43F8 D000                  		lea	(v_player).w,a1
000159C2 7000                       		moveq	#0,d0
000159C4 1028 001A                  		move.b	obFrame(a0),d0
000159C8 D040                       		add.w	d0,d0
000159CA 45FB 0000                  		lea	@data(pc,d0.w),a2
000159CE 101A                       		move.b	(a2)+,d0
000159D0 4880                       		ext.w	d0
000159D2 D068 0008                  		add.w	obX(a0),d0
000159D6 3340 0008                  		move.w	d0,obX(a1)
000159DA 101A                       		move.b	(a2)+,d0
000159DC 4880                       		ext.w	d0
000159DE D068 000C                  		add.w	obY(a0),d0
000159E2 3340 000C                  		move.w	d0,obY(a1)
000159E6 4E75                       		rts	
000159E8                            

000159E8                            

000159E8 E000 E20E                  @data:		dc.b -$20,    0, -$1E,   $E ; disc x-pos, Sonic x-pos, disc y-pos, Sonic y-pos
000159EC E818 F21E                  		dc.b -$18,  $18,  -$E,  $1E
000159F0 0020 0E1E                  		dc.b    0,  $20,   $E,  $1E
000159F4 1818 1E0E                  		dc.b  $18,  $18,  $1E,   $E
000159F8 2000 1EF2                  		dc.b  $20,    0,  $1E,  -$E
000159FC 18E8 0EE2                  		dc.b  $18, -$18,   $E, -$1E
00015A00 00E0 F2E2                  		dc.b    0, -$20,  -$E, -$1E
00015A04 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00015A04 E8E8 E2F2                  		dc.b -$18, -$18, -$1E,  -$E
00015A08                            Map_Jun:	include	"_maps\Rotating Junction.asm"
00015A08                            ; ---------------------------------------------------------------------------
00015A08                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015A08                            ; ---------------------------------------------------------------------------
00015A08                            Map_Jun_internal:
00015A08 0000                       		dc.w @gap0-Map_Jun_internal
00015A0A 0000                       		dc.w @gap1-Map_Jun_internal
00015A0C 0000                       		dc.w @gap2-Map_Jun_internal
00015A0E 0000                       		dc.w @gap3-Map_Jun_internal
00015A10 0000                       		dc.w @gap4-Map_Jun_internal
00015A12 0000                       		dc.w @gap5-Map_Jun_internal
00015A14 0000                       		dc.w @gap6-Map_Jun_internal
00015A16 0000                       		dc.w @gap7-Map_Jun_internal
00015A18 0000                       		dc.w @gap8-Map_Jun_internal
00015A1A 0000                       		dc.w @gap9-Map_Jun_internal
00015A1C 0000                       		dc.w @gapA-Map_Jun_internal
00015A1E 0000                       		dc.w @gapB-Map_Jun_internal
00015A20 0000                       		dc.w @gapC-Map_Jun_internal
00015A22 0000                       		dc.w @gapD-Map_Jun_internal
00015A24 0000                       		dc.w @gapE-Map_Jun_internal
00015A26 0000                       		dc.w @gapF-Map_Jun_internal
00015A28 0000                       		dc.w @circle-Map_Jun_internal
00015A2A 06                         @gap0:		dc.b 6
00015A2B E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015A30 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015A35 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015A3A E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015A3F 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015A44 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015A49 06                         @gap1:		dc.b 6
00015A4A F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015A4F 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015A54 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015A59 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015A5E 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015A63 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015A68 06                         @gap2:		dc.b 6
00015A69 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015A6E 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015A73 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015A78 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015A7D 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015A82 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015A87 06                         @gap3:		dc.b 6
00015A88 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015A8D 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015A92 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015A97 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015A9C 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015AA1 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015AA6 06                         @gap4:		dc.b 6
00015AA7 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015AAC 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015AB1 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015AB6 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015ABB 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015AC0 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015AC5 06                         @gap5:		dc.b 6
00015AC6 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015ACB 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015AD0 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015AD5 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015ADA 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015ADF 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015AE4 06                         @gap6:		dc.b 6
00015AE5 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015AEA 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015AEF 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015AF4 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015AF9 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015AFE 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015B03 06                         @gap7:		dc.b 6
00015B04 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015B09 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015B0E F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015B13 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015B18 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015B1D 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015B22 06                         @gap8:		dc.b 6
00015B23 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015B28 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015B2D E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015B32 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015B37 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015B3C 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015B41 06                         @gap9:		dc.b 6
00015B42 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015B47 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015B4C DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015B51 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015B56 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015B5B F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015B60 06                         @gapA:		dc.b 6
00015B61 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015B66 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015B6B D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015B70 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015B75 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015B7A E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015B7F 06                         @gapB:		dc.b 6
00015B80 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015B85 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015B8A CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015B8F CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015B94 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015B99 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015B9E 06                         @gapC:		dc.b 6
00015B9F D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015BA4 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015BA9 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015BAE C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015BB3 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015BB8 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015BBD 06                         @gapD:		dc.b 6
00015BBE D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015BC3 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015BC8 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015BCD CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015BD2 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015BD7 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015BDC 06                         @gapE:		dc.b 6
00015BDD E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015BE2 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015BE7 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015BEC D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015BF1 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015BF6 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015BFB 06                         @gapF:		dc.b 6
00015BFC E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015C01 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015C06 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015C0B DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015C10 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015C15 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015C1A 0C                         @circle:	dc.b $C
00015C1B C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015C20 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015C25 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015C2A C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015C2F D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015C34 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015C39 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015C3E 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015C43 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015C48 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015C4D 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015C52 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015C58 00                         		even
00015C58 00                         		even
00015C58                            		include	"_incObj\67 Running Disc.asm"
00015C58                            ; ---------------------------------------------------------------------------
00015C58                            ; Object 67 - disc that	you run	around (SBZ)
00015C58                            ; ---------------------------------------------------------------------------
00015C58                            

00015C58                            RunningDisc:
00015C58 7000                       		moveq	#0,d0
00015C5A 1028 0024                  		move.b	obRoutine(a0),d0
00015C5E 323B 0000                  		move.w	Disc_Index(pc,d0.w),d1
00015C62 4EFB 1000                  		jmp	Disc_Index(pc,d1.w)
00015C66                            ; ===========================================================================
00015C66 0000                       Disc_Index:	dc.w Disc_Main-Disc_Index
00015C68 0000                       		dc.w Disc_Action-Disc_Index
00015C6A                            

00015C6A =00000032                  disc_origX:	equ $32		; original x-axis position
00015C6A =00000030                  disc_origY:	equ $30		; original y-axis position
00015C6A                            ; ===========================================================================
00015C6A                            

00015C6A                            Disc_Main:	; Routine 0
00015C6A 5428 0024                  		addq.b	#2,obRoutine(a0)
00015C6E 217C 0000 0000 0004        		move.l	#Map_Disc,obMap(a0)
00015C76 317C C344 0002             		move.w	#$C344,obGfx(a0)
00015C7C 117C 0004 0001             		move.b	#4,obRender(a0)
00015C82 117C 0004 0018             		move.b	#4,obPriority(a0)
00015C88 117C 0008 0019             		move.b	#8,obActWid(a0)
00015C8E 3168 0008 0032             		move.w	obX(a0),disc_origX(a0)
00015C94 3168 000C 0030             		move.w	obY(a0),disc_origY(a0)
00015C9A 117C 0018 0034             		move.b	#$18,$34(a0)
00015CA0 117C 0048 0038             		move.b	#$48,$38(a0)
00015CA6 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00015CAA 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015CAE 6700                       		beq.s	@typeis0	; branch if 0
00015CB0 117C 0010 0034             		move.b	#$10,$34(a0)
00015CB6 117C 0038 0038             		move.b	#$38,$38(a0)
00015CBC                            

00015CBC                            	@typeis0:
00015CBC 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00015CC0 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015CC4 4881                       		ext.w	d1
00015CC6 E741                       		asl.w	#3,d1
00015CC8 3141 0036                  		move.w	d1,$36(a0)
00015CCC 1028 0022                  		move.b	obStatus(a0),d0
00015CD0 E418                       		ror.b	#2,d0
00015CD2 0200 00C0                  		andi.b	#$C0,d0
00015CD6 1140 0026                  		move.b	d0,obAngle(a0)
00015CDA                            

00015CDA                            Disc_Action:	; Routine 2
00015CDA 6100 0000                  		bsr.w	Disc_MoveSonic
00015CDE 6100 0000                  		bsr.w	Disc_MoveSpot
00015CE2 6000 0000                  		bra.w	Disc_ChkDel
00015CE6                            ; ===========================================================================
00015CE6                            

00015CE6                            Disc_MoveSonic:
00015CE6 7400                       		moveq	#0,d2
00015CE8 1428 0038                  		move.b	$38(a0),d2
00015CEC 3602                       		move.w	d2,d3
00015CEE D643                       		add.w	d3,d3
00015CF0 43F8 D000                  		lea	(v_player).w,a1
00015CF4 3029 0008                  		move.w	obX(a1),d0
00015CF8 9068 0032                  		sub.w	disc_origX(a0),d0
00015CFC D042                       		add.w	d2,d0
00015CFE B043                       		cmp.w	d3,d0
00015D00 6400                       		bcc.s	loc_155A8
00015D02 3229 000C                  		move.w	obY(a1),d1
00015D06 9268 0030                  		sub.w	disc_origY(a0),d1
00015D0A D242                       		add.w	d2,d1
00015D0C B243                       		cmp.w	d3,d1
00015D0E 6400                       		bcc.s	loc_155A8
00015D10 0829 0001 0022             		btst	#1,obStatus(a1)
00015D16 6700                       		beq.s	loc_155B8
00015D18 4228 003A                  		clr.b	$3A(a0)
00015D1C 4E75                       		rts	
00015D1E                            ; ===========================================================================
00015D1E                            

00015D1E                            loc_155A8:
00015D1E 4A28 003A                  		tst.b	$3A(a0)
00015D22 6700                       		beq.s	locret_155B6
00015D24 4229 0038                  		clr.b	$38(a1)
00015D28 4228 003A                  		clr.b	$3A(a0)
00015D2C                            

00015D2C                            locret_155B6:
00015D2C 4E75                       		rts	
00015D2E                            ; ===========================================================================
00015D2E                            

00015D2E                            loc_155B8:
00015D2E 4A28 003A                  		tst.b	$3A(a0)
00015D32 6600                       		bne.s	loc_155E2
00015D34 117C 0001 003A             		move.b	#1,$3A(a0)
00015D3A 0829 0002 0022             		btst	#2,obStatus(a1)
00015D40 6600                       		bne.s	loc_155D0
00015D42 4229 001C                  		clr.b	obAnim(a1)
00015D46                            

00015D46                            loc_155D0:
00015D46 08A9 0005 0022             		bclr	#5,obStatus(a1)
00015D4C 137C 0001 001D             		move.b	#1,obNextAni(a1)
00015D52 137C 0001 0038             		move.b	#1,$38(a1)
00015D58                            

00015D58                            loc_155E2:
00015D58 3029 0014                  		move.w	obInertia(a1),d0
00015D5C 4A68 0036                  		tst.w	$36(a0)
00015D60 6A00                       		bpl.s	loc_15608
00015D62 0C40 FC00                  		cmpi.w	#-$400,d0
00015D66 6F00                       		ble.s	loc_155FA
00015D68 337C FC00 0014             		move.w	#-$400,obInertia(a1)
00015D6E 4E75                       		rts	
00015D70                            ; ===========================================================================
00015D70                            

00015D70                            loc_155FA:
00015D70 0C40 F100                  		cmpi.w	#-$F00,d0
00015D74 6C00                       		bge.s	locret_15606
00015D76 337C F100 0014             		move.w	#-$F00,obInertia(a1)
00015D7C                            

00015D7C                            locret_15606:
00015D7C 4E75                       		rts	
00015D7E                            ; ===========================================================================
00015D7E                            

00015D7E                            loc_15608:
00015D7E 0C40 0400                  		cmpi.w	#$400,d0
00015D82 6C00                       		bge.s	loc_15616
00015D84 337C 0400 0014             		move.w	#$400,obInertia(a1)
00015D8A 4E75                       		rts	
00015D8C                            ; ===========================================================================
00015D8C                            

00015D8C                            loc_15616:
00015D8C 0C40 0F00                  		cmpi.w	#$F00,d0
00015D90 6F00                       		ble.s	locret_15622
00015D92 337C 0F00 0014             		move.w	#$F00,obInertia(a1)
00015D98                            

00015D98                            locret_15622:
00015D98 4E75                       		rts	
00015D9A                            ; ===========================================================================
00015D9A                            

00015D9A                            Disc_MoveSpot:
00015D9A 3028 0036                  		move.w	$36(a0),d0
00015D9E D168 0026                  		add.w	d0,obAngle(a0)
00015DA2 1028 0026                  		move.b	obAngle(a0),d0
00015DA6 4EB9 0000 29E0             		jsr	(CalcSine).l
00015DAC 3428 0030                  		move.w	disc_origY(a0),d2
00015DB0 3628 0032                  		move.w	disc_origX(a0),d3
00015DB4 7800                       		moveq	#0,d4
00015DB6 1828 0034                  		move.b	$34(a0),d4
00015DBA E14C                       		lsl.w	#8,d4
00015DBC 2A04                       		move.l	d4,d5
00015DBE C9C0                       		muls.w	d0,d4
00015DC0 4844                       		swap	d4
00015DC2 CBC1                       		muls.w	d1,d5
00015DC4 4845                       		swap	d5
00015DC6 D842                       		add.w	d2,d4
00015DC8 DA43                       		add.w	d3,d5
00015DCA 3144 000C                  		move.w	d4,obY(a0)
00015DCE 3145 0008                  		move.w	d5,obX(a0)
00015DD2 4E75                       		rts	
00015DD4                            ; ===========================================================================
00015DD4                            

00015DD4                            Disc_ChkDel:
00015DF0 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00015DF6                            

00015DF6                            	@delete:
00015DF6 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00015DF6 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00015DFC                            Map_Disc:	include	"_maps\Running Disc.asm"
00015DFC                            ; ---------------------------------------------------------------------------
00015DFC                            ; Sprite mappings - disc that you run around (SBZ)
00015DFC                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015DFC                            ; part of the level tiles.)
00015DFC                            ; ---------------------------------------------------------------------------
00015DFC                            Map_Disc_internal:
00015DFC 0000                       		dc.w @spot-Map_Disc_internal
00015DFE 01                         @spot:		dc.b 1
00015DFF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015E04                            		even
00015E04                            		even
00015E04                            		include	"_incObj\68 Conveyor Belt.asm"
00015E04                            ; ---------------------------------------------------------------------------
00015E04                            ; Object 68 - conveyor belts (SBZ)
00015E04                            ; ---------------------------------------------------------------------------
00015E04                            

00015E04                            Conveyor:
00015E04 7000                       		moveq	#0,d0
00015E06 1028 0024                  		move.b	obRoutine(a0),d0
00015E0A 323B 0000                  		move.w	Conv_Index(pc,d0.w),d1
00015E0E 4EFB 1000                  		jmp	Conv_Index(pc,d1.w)
00015E12                            ; ===========================================================================
00015E12 0000                       Conv_Index:	dc.w Conv_Main-Conv_Index
00015E14 0000                       		dc.w Conv_Action-Conv_Index
00015E16                            

00015E16 =00000036                  conv_speed:	equ $36
00015E16 =00000038                  conv_width:	equ $38
00015E16                            ; ===========================================================================
00015E16                            

00015E16                            Conv_Main:	; Routine 0
00015E16 5428 0024                  		addq.b	#2,obRoutine(a0)
00015E1A 117C 0080 0038             		move.b	#128,conv_width(a0) ; set width to 128 pixels
00015E20 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00015E24 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015E28 6700                       		beq.s	@typeis0	; if zero, branch
00015E2A 117C 0038 0038             		move.b	#56,conv_width(a0) ; set width to 56 pixels
00015E30                            

00015E30                            	@typeis0:
00015E30 1228 0028                  		move.b	obSubtype(a0),d1 ; get object type
00015E34 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015E38 4881                       		ext.w	d1
00015E3A E841                       		asr.w	#4,d1
00015E3C 3141 0036                  		move.w	d1,conv_speed(a0) ; set belt speed
00015E40                            

00015E40                            Conv_Action:	; Routine 2
00015E40 6100                       		bsr.s	@movesonic
00015E5E 4E75                       		rts	
00015E60                            

00015E60                            	@delete:
00015E60 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00015E66                            ; ===========================================================================
00015E66                            

00015E66                            @movesonic:
00015E66 7400                       		moveq	#0,d2
00015E68 1428 0038                  		move.b	conv_width(a0),d2
00015E6C 3602                       		move.w	d2,d3
00015E6E D643                       		add.w	d3,d3
00015E70 43F8 D000                  		lea	(v_player).w,a1
00015E74 3029 0008                  		move.w	obX(a1),d0
00015E78 9068 0008                  		sub.w	obX(a0),d0
00015E7C D042                       		add.w	d2,d0
00015E7E B043                       		cmp.w	d3,d0
00015E80 6400                       		bcc.s	@notonconveyor
00015E82 3229 000C                  		move.w	obY(a1),d1
00015E86 9268 000C                  		sub.w	obY(a0),d1
00015E8A 0641 0030                  		addi.w	#$30,d1
00015E8E 0C41 0030                  		cmpi.w	#$30,d1
00015E92 6400                       		bcc.s	@notonconveyor
00015E94 0829 0001 0022             		btst	#1,obStatus(a1)
00015E9A 6600                       		bne.s	@notonconveyor
00015E9C 3028 0036                  		move.w	conv_speed(a0),d0
00015EA0 D169 0008                  		add.w	d0,obX(a1)
00015EA4                            

00015EA4                            	@notonconveyor:
00015EA4 4E75                       		rts	
00015EA4 4E75                       		rts	
00015EA6                            		include	"_incObj\69 SBZ Spinning Platforms.asm"
00015EA6                            ; ---------------------------------------------------------------------------
00015EA6                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00015EA6                            ; ---------------------------------------------------------------------------
00015EA6                            

00015EA6                            SpinPlatform:
00015EA6 7000                       		moveq	#0,d0
00015EA8 1028 0024                  		move.b	obRoutine(a0),d0
00015EAC 323B 0000                  		move.w	Spin_Index(pc,d0.w),d1
00015EB0 4EFB 1000                  		jmp	Spin_Index(pc,d1.w)
00015EB4                            ; ===========================================================================
00015EB4 0000                       Spin_Index:	dc.w Spin_Main-Spin_Index
00015EB6 0000                       		dc.w Spin_Trapdoor-Spin_Index
00015EB8 0000                       		dc.w Spin_Spinner-Spin_Index
00015EBA                            

00015EBA =00000030                  spin_timer:	equ $30		; time counter until change
00015EBA =00000032                  spin_timelen:	equ $32		; time between changes (general)
00015EBA                            ; ===========================================================================
00015EBA                            

00015EBA                            Spin_Main:	; Routine 0
00015EBA 5428 0024                  		addq.b	#2,obRoutine(a0)
00015EBE 217C 0000 0000 0004        		move.l	#Map_Trap,obMap(a0)
00015EC6 317C 4492 0002             		move.w	#$4492,obGfx(a0)
00015ECC 0028 0004 0001             		ori.b	#4,obRender(a0)
00015ED2 117C 0080 0019             		move.b	#$80,obActWid(a0)
00015ED8 7000                       		moveq	#0,d0
00015EDA 1028 0028                  		move.b	obSubtype(a0),d0
00015EDE 0240 000F                  		andi.w	#$F,d0
00015EE2 C0FC 003C                  		mulu.w	#$3C,d0
00015EE6 3140 0032                  		move.w	d0,spin_timelen(a0)
00015EEA 4A28 0028                  		tst.b	obSubtype(a0)	; is subtype $8x?
00015EEE 6A00                       		bpl.s	Spin_Trapdoor	; if not, branch
00015EF0                            

00015EF0 5428 0024                  		addq.b	#2,obRoutine(a0) ; goto Spin_Spinner next
00015EF4 217C 0000 0000 0004        		move.l	#Map_Spin,obMap(a0)
00015EFC 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00015F02 117C 0010 0019             		move.b	#$10,obActWid(a0)
00015F08 117C 0002 001C             		move.b	#2,obAnim(a0)
00015F0E 7000                       		moveq	#0,d0
00015F10 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
00015F14 3200                       		move.w	d0,d1
00015F16 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015F1A C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015F1E 3140 0030                  		move.w	d0,spin_timer(a0)
00015F22 3140 0032                  		move.w	d0,spin_timelen(a0) ; set time delay
00015F26 0241 0070                  		andi.w	#$70,d1
00015F2A 0641 0010                  		addi.w	#$10,d1
00015F2E E549                       		lsl.w	#2,d1
00015F30 5341                       		subq.w	#1,d1
00015F32 3141 0036                  		move.w	d1,$36(a0)
00015F36 6000                       		bra.s	Spin_Spinner
00015F38                            ; ===========================================================================
00015F38                            

00015F38                            Spin_Trapdoor:	; Routine 2
00015F38 5368 0030                  		subq.w	#1,spin_timer(a0) ; decrement timer
00015F3C 6A00                       		bpl.s	@animate	; if time remains, branch
00015F3E                            

00015F3E 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00015F44 0868 0000 001C             		bchg	#0,obAnim(a0)
00015F4A 4A28 0001                  		tst.b	obRender(a0)
00015F4E 6A00                       		bpl.s	@animate
00015F50 303C 0000                  		move.w	#sfx_Door,d0
00015F54 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play door sound
00015F5A                            

00015F5A                            	@animate:
00015F5A 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00015F60 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00015F66 4A28 001A                  		tst.b	obFrame(a0)	; is frame number 0 displayed?
00015F6A 6600                       		bne.s	@notsolid	; if not, branch
00015F6C 323C 004B                  		move.w	#$4B,d1
00015F70 343C 000C                  		move.w	#$C,d2
00015F74 3602                       		move.w	d2,d3
00015F76 5243                       		addq.w	#1,d3
00015F78 3828 0008                  		move.w	obX(a0),d4
00015F7C 6100 A0F2                  		bsr.w	SolidObject
00015F80 6000 9DC4                  		bra.w	RememberState
00015F84                            ; ===========================================================================
00015F84                            

00015F84                            @notsolid:
00015F84 0828 0003 0022             		btst	#3,obStatus(a0) ; is Sonic standing on the trapdoor?
00015F8A 6700                       		beq.s	@display	; if not, branch
00015F8C 43F8 D000                  		lea	(v_player).w,a1
00015F90 08A9 0003 0022             		bclr	#3,obStatus(a1)
00015F96 08A8 0003 0022             		bclr	#3,obStatus(a0)
00015F9C 4228 0025                  		clr.b	obSolid(a0)
00015FA0                            

00015FA0                            	@display:
00015FA0 6000 9DA4                  		bra.w	RememberState
00015FA4                            ; ===========================================================================
00015FA4                            

00015FA4                            Spin_Spinner:	; Routine 4
00015FA4 3038 FE04                  		move.w	(v_framecount).w,d0
00015FA8 C068 0036                  		and.w	$36(a0),d0
00015FAC 6600                       		bne.s	@delay
00015FAE 117C 0001 0034             		move.b	#1,$34(a0)
00015FB4                            

00015FB4                            	@delay:
00015FB4 4A28 0034                  		tst.b	$34(a0)
00015FB8 6700                       		beq.s	@animate
00015FBA 5368 0030                  		subq.w	#1,spin_timer(a0)
00015FBE 6A00                       		bpl.s	@animate
00015FC0 3168 0032 0030             		move.w	spin_timelen(a0),spin_timer(a0)
00015FC6 4228 0034                  		clr.b	$34(a0)
00015FCA 0868 0000 001C             		bchg	#0,obAnim(a0)
00015FD0                            

00015FD0                            	@animate:
00015FD0 43F9 0000 0000             		lea	(Ani_Spin).l,a1
00015FD6 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00015FDC 4A28 001A                  		tst.b	obFrame(a0)	; check	if frame number	0 is displayed
00015FE0 6600                       		bne.s	@notsolid2	; if not, branch
00015FE2 323C 001B                  		move.w	#$1B,d1
00015FE6 343C 0007                  		move.w	#7,d2
00015FEA 3602                       		move.w	d2,d3
00015FEC 5243                       		addq.w	#1,d3
00015FEE 3828 0008                  		move.w	obX(a0),d4
00015FF2 6100 A07C                  		bsr.w	SolidObject
00015FF6 6000 9D4E                  		bra.w	RememberState
00015FFA                            ; ===========================================================================
00015FFA                            

00015FFA                            @notsolid2:
00015FFA 0828 0003 0022             		btst	#3,obStatus(a0)
00016000 6700                       		beq.s	@display
00016002 43F8 D000                  		lea	(v_player).w,a1
00016006 08A9 0003 0022             		bclr	#3,obStatus(a1)
0001600C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00016012 4228 0025                  		clr.b	obSolid(a0)
00016016                            

00016016                            	@display:
00016016 6000 9D2E                  		bra.w	RememberState
00016016 6000 9D2E                  		bra.w	RememberState
0001601A                            		include	"_anim\SBZ Spinning Platforms.asm"
0001601A                            ; ---------------------------------------------------------------------------
0001601A                            ; Animation script - trapdoor (SBZ)
0001601A                            ; ---------------------------------------------------------------------------
0001601A 0000                       Ani_Spin:	dc.w @trapopen-Ani_Spin
0001601C 0000                       		dc.w @trapclose-Ani_Spin
0001601E 0000                       		dc.w @spin1-Ani_Spin
00016020 0000                       		dc.w @spin2-Ani_Spin
00016022 0300 0102 FE01             @trapopen:	dc.b 3,	0, 1, 2, afBack, 1
00016028 0302 0100 FE01             @trapclose:	dc.b 3,	2, 1, 0, afBack, 1
0001602E 0100 0102 0304 4342 4140+  @spin1:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00016042 0100 0102 0304 4342 4140+  @spin2:		dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63, $64, $23, $22, $21, 0, afBack, 1
00016056                            		even
00016056                            		even
00016056                            Map_Trap:	include	"_maps\Trapdoor.asm"
00016056                            ; ---------------------------------------------------------------------------
00016056                            ; Sprite mappings - trapdoor (SBZ)
00016056                            ; ---------------------------------------------------------------------------
00016056                            Map_Trap_internal:
00016056 0000                       		dc.w @closed-Map_Trap_internal
00016058 0000                       		dc.w @half-Map_Trap_internal
0001605A 0000                       		dc.w @open-Map_Trap_internal
0001605C 04                         @closed:	dc.b 4
0001605D F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016062 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016067 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
0001606C F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016071 08                         @half:		dc.b 8
00016072 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016077 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
0001607C 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016081 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016086 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
0001608B 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016090 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016095 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
0001609A 04                         @open:		dc.b 4
0001609B 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
000160A0 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
000160A5 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
000160AA 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
000160B0 00                         		even
000160B0 00                         		even
000160B0                            Map_Spin:	include	"_maps\SBZ Spinning Platforms.asm"
000160B0                            ; ---------------------------------------------------------------------------
000160B0                            ; Sprite mappings - spinning platforms (SBZ)
000160B0                            ; ---------------------------------------------------------------------------
000160B0                            Map_Spin_internal:
000160B0 0000                       		dc.w @flat-Map_Spin_internal
000160B2 0000                       		dc.w @spin1-Map_Spin_internal
000160B4 0000                       		dc.w @spin2-Map_Spin_internal
000160B6 0000                       		dc.w @spin3-Map_Spin_internal
000160B8 0000                       		dc.w @spin4-Map_Spin_internal
000160BA 02                         @flat:		dc.b 2
000160BB F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000160C0 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
000160C5 02                         @spin1:		dc.b 2
000160C6 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000160CB 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000160D0 02                         @spin2:		dc.b 2
000160D1 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000160D6 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000160DB 02                         @spin3:		dc.b 2
000160DC F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000160E1 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000160E6 02                         @spin4:		dc.b 2
000160E7 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000160EC 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000160F2 00                         		even
000160F2 00                         		even
000160F2                            		include	"_incObj\6A Saws and Pizza Cutters.asm"
000160F2                            ; ---------------------------------------------------------------------------
000160F2                            ; Object 6A - ground saws and pizza cutters (SBZ)
000160F2                            ; ---------------------------------------------------------------------------
000160F2                            

000160F2                            Saws:
000160F2 7000                       		moveq	#0,d0
000160F4 1028 0024                  		move.b	obRoutine(a0),d0
000160F8 323B 0000                  		move.w	Saw_Index(pc,d0.w),d1
000160FC 4EFB 1000                  		jmp	Saw_Index(pc,d1.w)
00016100                            ; ===========================================================================
00016100 0000                       Saw_Index:	dc.w Saw_Main-Saw_Index
00016102 0000                       		dc.w Saw_Action-Saw_Index
00016104                            

00016104 =0000003A                  saw_origX:	equ $3A		; original x-axis position
00016104 =00000038                  saw_origY:	equ $38		; original y-axis position
00016104 =0000003D                  saw_here:	equ $3D		; flag set when the ground saw appears
00016104                            ; ===========================================================================
00016104                            

00016104                            Saw_Main:	; Routine 0
00016104 5428 0024                  		addq.b	#2,obRoutine(a0)
00016108 217C 0000 0000 0004        		move.l	#Map_Saw,obMap(a0)
00016110 317C 43B5 0002             		move.w	#$43B5,obGfx(a0)
00016116 117C 0004 0001             		move.b	#4,obRender(a0)
0001611C 117C 0004 0018             		move.b	#4,obPriority(a0)
00016122 117C 0020 0019             		move.b	#$20,obActWid(a0)
00016128 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
0001612E 3168 000C 0038             		move.w	obY(a0),saw_origY(a0)
00016134 0C28 0003 0028             		cmpi.b	#3,obSubtype(a0) ; is object a ground saw?
0001613A 6400                       		bcc.s	Saw_Action	; if yes, branch
0001613C 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00016142                            

00016142                            Saw_Action:	; Routine 2
00016142 7000                       		moveq	#0,d0
00016144 1028 0028                  		move.b	obSubtype(a0),d0
00016148 0240 0007                  		andi.w	#7,d0
0001614C D040                       		add.w	d0,d0
0001614E 323B 0000                  		move.w	@index(pc,d0.w),d1
00016152 4EBB 1000                  		jsr	@index(pc,d1.w)
00016172 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00016178                            

00016178                            	@delete:
00016178 4EF9 0000 DCDC             		jmp	(DeleteObject).l
0001617E                            ; ===========================================================================
0001617E 0000 0000 0000             @index:		dc.w @type00-@index, @type01-@index, @type02-@index ; pizza cutters
00016184 0000 0000                  		dc.w @type03-@index, @type04-@index ; ground saws
00016188                            ; ===========================================================================
00016188                            

00016188                            @type00:
00016188 4E75                       		rts			; doesn't move
0001618A                            ; ===========================================================================
0001618A                            

0001618A                            @type01:
0001618A 323C 0060                  		move.w	#$60,d1
0001618E 7000                       		moveq	#0,d0
00016190 1038 FE6C                  		move.b	(v_oscillate+$E).w,d0
00016194 0828 0000 0022             		btst	#0,obStatus(a0)
0001619A 6700                       		beq.s	@noflip01
0001619C 4440                       		neg.w	d0
0001619E D041                       		add.w	d1,d0
000161A0                            

000161A0                            	@noflip01:
000161A0 3228 003A                  		move.w	saw_origX(a0),d1
000161A4 9240                       		sub.w	d0,d1
000161A6 3141 0008                  		move.w	d1,obX(a0)	; move saw sideways
000161AA                            

000161AA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000161AE 6A00                       		bpl.s	@sameframe01
000161B0 117C 0002 001E             		move.b	#2,obTimeFrame(a0) ; time between frame changes
000161B6 0868 0000 001A             		bchg	#0,obFrame(a0)	; change frame
000161BC                            

000161BC                            	@sameframe01:
000161BC 4A28 0001                  		tst.b	obRender(a0)
000161C0 6A00                       		bpl.s	@nosound01
000161C2 3038 FE04                  		move.w	(v_framecount).w,d0
000161C6 0240 000F                  		andi.w	#$F,d0
000161CA 6600                       		bne.s	@nosound01
000161CC 303C 0000                  		move.w	#sfx_Saw,d0
000161D0 4EB9 0000 13A2             		jsr	(PlaySound_Special).l		; play saw sound
000161D6                            

000161D6                            	@nosound01:
000161D6 4E75                       		rts	
000161D8                            ; ===========================================================================
000161D8                            

000161D8                            @type02:
000161D8 323C 0030                  		move.w	#$30,d1
000161DC 7000                       		moveq	#0,d0
000161DE 1038 FE64                  		move.b	(v_oscillate+6).w,d0
000161E2 0828 0000 0022             		btst	#0,obStatus(a0)
000161E8 6700                       		beq.s	@noflip02
000161EA 4440                       		neg.w	d0
000161EC 0640 0080                  		addi.w	#$80,d0
000161F0                            

000161F0                            	@noflip02:
000161F0 3228 0038                  		move.w	saw_origY(a0),d1
000161F4 9240                       		sub.w	d0,d1
000161F6 3141 000C                  		move.w	d1,obY(a0)	; move saw vertically
000161FA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000161FE 6A00                       		bpl.s	@sameframe02
00016200 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00016206 0868 0000 001A             		bchg	#0,obFrame(a0)
0001620C                            

0001620C                            	@sameframe02:
0001620C 4A28 0001                  		tst.b	obRender(a0)
00016210 6A00                       		bpl.s	@nosound02
00016212 1038 FE64                  		move.b	(v_oscillate+6).w,d0
00016216 0C00 0018                  		cmpi.b	#$18,d0
0001621A 6600                       		bne.s	@nosound02
0001621C 303C 0000                  		move.w	#sfx_Saw,d0
00016220 4EB9 0000 13A2             		jsr	(PlaySound_Special).l		; play saw sound
00016226                            

00016226                            	@nosound02:
00016226 4E75                       		rts	
00016228                            ; ===========================================================================
00016228                            

00016228                            @type03:
00016228 4A28 003D                  		tst.b	saw_here(a0)	; has the saw appeared already?
0001622C 6600                       		bne.s	@here03		; if yes, branch
0001622E                            

0001622E 3038 D008                  		move.w	(v_player+obX).w,d0
00016232 0440 00C0                  		subi.w	#$C0,d0
00016236 6500                       		bcs.s	@nosaw03x
00016238 9068 0008                  		sub.w	obX(a0),d0
0001623C 6500                       		bcs.s	@nosaw03x
0001623E 3038 D00C                  		move.w	(v_player+obY).w,d0
00016242 0440 0080                  		subi.w	#$80,d0
00016246 B068 000C                  		cmp.w	obY(a0),d0
0001624A 6400                       		bcc.s	@nosaw03y
0001624C 0640 0100                  		addi.w	#$100,d0
00016250 B068 000C                  		cmp.w	obY(a0),d0
00016254 6500                       		bcs.s	@nosaw03y
00016256 117C 0001 003D             		move.b	#1,saw_here(a0)
0001625C 317C 0600 0010             		move.w	#$600,obVelX(a0) ; move object to the right
00016262 117C 00A2 0020             		move.b	#$A2,obColType(a0)
00016268 117C 0002 001A             		move.b	#2,obFrame(a0)
0001626E 303C 0000                  		move.w	#sfx_Saw,d0
00016272 4EB9 0000 13A2             		jsr	(PlaySound_Special).l		; play saw sound
00016278                            

00016278                            	@nosaw03x:
00016278 588F                       		addq.l	#4,sp
0001627A                            

0001627A                            	@nosaw03y:
0001627A 4E75                       		rts	
0001627C                            ; ===========================================================================
0001627C                            

0001627C                            @here03:
0001627C 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
00016282 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
00016288 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001628C 6A00                       		bpl.s	@sameframe03
0001628E 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00016294 0868 0000 001A             		bchg	#0,obFrame(a0)
0001629A                            

0001629A                            	@sameframe03:
0001629A 4E75                       		rts	
0001629C                            ; ===========================================================================
0001629C                            

0001629C                            @type04:
0001629C 4A28 003D                  		tst.b	saw_here(a0)
000162A0 6600                       		bne.s	@here04
000162A2 3038 D008                  		move.w	(v_player+obX).w,d0
000162A6 0640 00E0                  		addi.w	#$E0,d0
000162AA 9068 0008                  		sub.w	obX(a0),d0
000162AE 6400                       		bcc.s	@nosaw04x
000162B0 3038 D00C                  		move.w	(v_player+obY).w,d0
000162B4 0440 0080                  		subi.w	#$80,d0
000162B8 B068 000C                  		cmp.w	obY(a0),d0
000162BC 6400                       		bcc.s	@nosaw04y
000162BE 0640 0100                  		addi.w	#$100,d0
000162C2 B068 000C                  		cmp.w	obY(a0),d0
000162C6 6500                       		bcs.s	@nosaw04y
000162C8 117C 0001 003D             		move.b	#1,saw_here(a0)
000162CE 317C FA00 0010             		move.w	#-$600,obVelX(a0) ; move object to the left
000162D4 117C 00A2 0020             		move.b	#$A2,obColType(a0)
000162DA 117C 0002 001A             		move.b	#2,obFrame(a0)
000162E0 303C 0000                  		move.w	#sfx_Saw,d0
000162E4 4EB9 0000 13A2             		jsr	(PlaySound_Special).l		; play saw sound
000162EA                            

000162EA                            	@nosaw04x:
000162EA 588F                       		addq.l	#4,sp
000162EC                            

000162EC                            	@nosaw04y:
000162EC 4E75                       		rts	
000162EE                            ; ===========================================================================
000162EE                            

000162EE                            @here04:
000162EE 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
000162F4 3168 0008 003A             		move.w	obX(a0),saw_origX(a0)
000162FA 5328 001E                  		subq.b	#1,obTimeFrame(a0)
000162FE 6A00                       		bpl.s	@sameframe04
00016300 117C 0002 001E             		move.b	#2,obTimeFrame(a0)
00016306 0868 0000 001A             		bchg	#0,obFrame(a0)
0001630C                            

0001630C                            	@sameframe04:
0001630C 4E75                       		rts	
0001630C 4E75                       		rts	
0001630E                            Map_Saw:	include	"_maps\Saws and Pizza Cutters.asm"
0001630E                            ; ---------------------------------------------------------------------------
0001630E                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
0001630E                            ; ---------------------------------------------------------------------------
0001630E                            Map_Saw_internal:
0001630E 0000                       		dc.w @pizzacutter1-Map_Saw_internal
00016310 0000                       		dc.w @pizzacutter2-Map_Saw_internal
00016312 0000                       		dc.w @groundsaw1-Map_Saw_internal
00016314 0000                       		dc.w @groundsaw2-Map_Saw_internal
00016316 07                         @pizzacutter1:	dc.b 7
00016317 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001631C D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016321 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016326 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001632B E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016330 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016335 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001633A 07                         @pizzacutter2:	dc.b 7
0001633B C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016340 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016345 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
0001634A E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
0001634F E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016354 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016359 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
0001635E 04                         @groundsaw1:	dc.b 4
0001635F E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016364 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016369 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001636E 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016373 04                         @groundsaw2:	dc.b 4
00016374 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016379 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001637E 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016383 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016388                            		even
00016388                            		even
00016388                            		include	"_incObj\6B SBZ Stomper and Door.asm"
00016388                            ; ---------------------------------------------------------------------------
00016388                            ; Object 6B - stomper and sliding door (SBZ)
00016388                            ; ---------------------------------------------------------------------------
00016388                            

00016388                            ScrapStomp:
00016388 7000                       		moveq	#0,d0
0001638A 1028 0024                  		move.b	obRoutine(a0),d0
0001638E 323B 0000                  		move.w	Sto_Index(pc,d0.w),d1
00016392 4EFB 1000                  		jmp	Sto_Index(pc,d1.w)
00016396                            ; ===========================================================================
00016396 0000                       Sto_Index:	dc.w Sto_Main-Sto_Index
00016398 0000                       		dc.w Sto_Action-Sto_Index
0001639A                            

0001639A =00000016                  sto_height:	equ $16
0001639A =00000034                  sto_origX:	equ $34		; original x-axis position
0001639A =00000030                  sto_origY:	equ $30		; original y-axis position
0001639A =00000038                  sto_active:	equ $38		; flag set when a switch is pressed
0001639A                            

0001639A 400C 8001                  Sto_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
0001639E 1C20 3803                  		dc.b  $1C, $20,	$38,   3
000163A2 1C20 4004                  		dc.b  $1C, $20,	$40,   4
000163A6 1C20 6004                  		dc.b  $1C, $20,	$60,   4
000163AA 8040 0005                  		dc.b  $80, $40,	  0,   5
000163AE                            ; ===========================================================================
000163AE                            

000163AE                            Sto_Main:	; Routine 0
000163AE 5428 0024                  		addq.b	#2,obRoutine(a0)
000163B2 7000                       		moveq	#0,d0
000163B4 1028 0028                  		move.b	obSubtype(a0),d0
000163B8 E448                       		lsr.w	#2,d0
000163BA 0240 001C                  		andi.w	#$1C,d0
000163BE 47FB 00DA                  		lea	Sto_Var(pc,d0.w),a3
000163C2 115B 0019                  		move.b	(a3)+,obActWid(a0)
000163C6 115B 0016                  		move.b	(a3)+,sto_height(a0)
000163CA E448                       		lsr.w	#2,d0
000163CC 1140 001A                  		move.b	d0,obFrame(a0)
000163D0 217C 0000 0000 0004        		move.l	#Map_Stomp,obMap(a0)
000163D8 317C 22C0 0002             		move.w	#$22C0,obGfx(a0)
000163DE 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w ; check if level is LZ/SBZ3
000163E4 6600                       		bne.s	@isSBZ12	; if not, branch
000163E6 08F8 0000 F7CB             		bset	#0,(v_obj6B).w
000163EC 6700                       		beq.s	@isSBZ3
000163EE                            

000163EE                            @chkdel:
000163EE 45F8 FC00                  		lea	(v_objstate).w,a2
000163F2 7000                       		moveq	#0,d0
000163F4 1028 0023                  		move.b	obRespawnNo(a0),d0
000163F8 6700                       		beq.s	@delete
000163FA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016400                            

00016400                            	@delete:
00016400 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00016406                            ; ===========================================================================
00016406                            

00016406                            @isSBZ3:
00016406 317C 41F0 0002             		move.w	#$41F0,obGfx(a0)
0001640C 0C68 0A80 0008             		cmpi.w	#$A80,obX(a0)
00016412 6600                       		bne.s	@isSBZ12
00016414 45F8 FC00                  		lea	(v_objstate).w,a2
00016418 7000                       		moveq	#0,d0
0001641A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001641E 6700                       		beq.s	@isSBZ12
00016420 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016426 6700                       		beq.s	@isSBZ12
00016428 4238 F7CB                  		clr.b	(v_obj6B).w
0001642C 60C0                       		bra.s	@chkdel
0001642E                            ; ===========================================================================
0001642E                            

0001642E                            @isSBZ12:
0001642E 0028 0004 0001             		ori.b	#4,obRender(a0)
00016434 117C 0004 0018             		move.b	#4,obPriority(a0)
0001643A 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
00016440 3168 000C 0030             		move.w	obY(a0),sto_origY(a0)
00016446 7000                       		moveq	#0,d0
00016448 101B                       		move.b	(a3)+,d0
0001644A 3140 003C                  		move.w	d0,$3C(a0)
0001644E 7000                       		moveq	#0,d0
00016450 1028 0028                  		move.b	obSubtype(a0),d0
00016454 6A00                       		bpl.s	Sto_Action
00016456 0200 000F                  		andi.b	#$F,d0
0001645A 1140 003E                  		move.b	d0,$3E(a0)
0001645E 1153 0028                  		move.b	(a3),obSubtype(a0)
00016462 0C13 0005                  		cmpi.b	#5,(a3)
00016466 6600                       		bne.s	@chkgone
00016468 08E8 0004 0001             		bset	#4,obRender(a0)
0001646E                            

0001646E                            	@chkgone:
0001646E 45F8 FC00                  		lea	(v_objstate).w,a2
00016472 7000                       		moveq	#0,d0
00016474 1028 0023                  		move.b	obRespawnNo(a0),d0
00016478 6700                       		beq.s	Sto_Action
0001647A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016480                            

00016480                            Sto_Action:	; Routine 2
00016480 3F28 0008                  		move.w	obX(a0),-(sp)
00016484 7000                       		moveq	#0,d0
00016486 1028 0028                  		move.b	obSubtype(a0),d0
0001648A 0240 000F                  		andi.w	#$F,d0
0001648E D040                       		add.w	d0,d0
00016490 323B 0000                  		move.w	@index(pc,d0.w),d1
00016494 4EBB 1000                  		jsr	@index(pc,d1.w)
00016498 381F                       		move.w	(sp)+,d4
0001649A 4A28 0001                  		tst.b	obRender(a0)
0001649E 6A00                       		bpl.s	@chkdel
000164A0 7200                       		moveq	#0,d1
000164A2 1228 0019                  		move.b	obActWid(a0),d1
000164A6 0641 000B                  		addi.w	#$B,d1
000164AA 7400                       		moveq	#0,d2
000164AC 1428 0016                  		move.b	sto_height(a0),d2
000164B0 3602                       		move.w	d2,d3
000164B2 5243                       		addq.w	#1,d3
000164B4 6100 9BBA                  		bsr.w	SolidObject
000164B8                            

000164B8                            	@chkdel:
000164D4 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
000164DA                            

000164DA                            	@chkgone:
000164DA 0C38 0001 FE10             		cmpi.b	#id_LZ,(v_zone).w
000164E0 6600                       		bne.s	@delete
000164E2 4238 F7CB                  		clr.b	(v_obj6B).w
000164E6 45F8 FC00                  		lea	(v_objstate).w,a2
000164EA 7000                       		moveq	#0,d0
000164EC 1028 0023                  		move.b	obRespawnNo(a0),d0
000164F0 6700                       		beq.s	@delete
000164F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000164F8                            

000164F8                            	@delete:
000164F8 4EF9 0000 DCDC             		jmp	(DeleteObject).l
000164FE                            ; ===========================================================================
000164FE 0000 0000                  @index:		dc.w @type00-@index, @type01-@index
00016502 0000 0000                  		dc.w @type02-@index, @type03-@index
00016506 0000 0000                  		dc.w @type04-@index, @type05-@index
0001650A                            ; ===========================================================================
0001650A                            

0001650A                            @type00:
0001650A 4E75                       		rts
0001650C                            ; ===========================================================================
0001650C                            

0001650C                            @type01:
0001650C 4A28 0038                  		tst.b	sto_active(a0)
00016510 6600                       		bne.s	@isactive01
00016512 45F8 F7E0                  		lea	(f_switch).w,a2
00016516 7000                       		moveq	#0,d0
00016518 1028 003E                  		move.b	$3E(a0),d0
0001651C 0832 0000 0000             		btst	#0,(a2,d0.w)
00016522 6700                       		beq.s	@loc_15DC2
00016524 117C 0001 0038             		move.b	#1,sto_active(a0)
0001652A                            

0001652A                            	@isactive01:
0001652A 3028 003C                  		move.w	$3C(a0),d0
0001652E B068 003A                  		cmp.w	$3A(a0),d0
00016532 6700                       		beq.s	@loc_15DE0
00016534 5468 003A                  		addq.w	#2,$3A(a0)
00016538                            

00016538                            	@loc_15DC2:
00016538 3028 003A                  		move.w	$3A(a0),d0
0001653C 0828 0000 0022             		btst	#0,obStatus(a0)
00016542 6700                       		beq.s	@noflip01
00016544 4440                       		neg.w	d0
00016546 0640 0080                  		addi.w	#$80,d0
0001654A                            

0001654A                            	@noflip01:
0001654A 3228 0034                  		move.w	sto_origX(a0),d1
0001654E 9240                       		sub.w	d0,d1
00016550 3141 0008                  		move.w	d1,obX(a0)
00016554 4E75                       		rts	
00016556                            ; ===========================================================================
00016556                            

00016556                            @loc_15DE0:
00016556 5228 0028                  		addq.b	#1,obSubtype(a0)
0001655A 317C 00B4 0036             		move.w	#$B4,$36(a0)
00016560 4228 0038                  		clr.b	sto_active(a0)
00016564 45F8 FC00                  		lea	(v_objstate).w,a2
00016568 7000                       		moveq	#0,d0
0001656A 1028 0023                  		move.b	obRespawnNo(a0),d0
0001656E 67C8                       		beq.s	@loc_15DC2
00016570 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016576 60C0                       		bra.s	@loc_15DC2
00016578                            ; ===========================================================================
00016578                            

00016578                            @type02:
00016578 4A28 0038                  		tst.b	sto_active(a0)
0001657C 6600                       		bne.s	@isactive02
0001657E 5368 0036                  		subq.w	#1,$36(a0)
00016582 6600                       		bne.s	@loc_15E1E
00016584 117C 0001 0038             		move.b	#1,sto_active(a0)
0001658A                            

0001658A                            	@isactive02:
0001658A 4A68 003A                  		tst.w	$3A(a0)
0001658E 6700                       		beq.s	@loc_15E3C
00016590 5568 003A                  		subq.w	#2,$3A(a0)
00016594                            

00016594                            	@loc_15E1E:
00016594 3028 003A                  		move.w	$3A(a0),d0
00016598 0828 0000 0022             		btst	#0,obStatus(a0)
0001659E 6700                       		beq.s	@noflip02
000165A0 4440                       		neg.w	d0
000165A2 0640 0080                  		addi.w	#$80,d0
000165A6                            

000165A6                            	@noflip02:
000165A6 3228 0034                  		move.w	sto_origX(a0),d1
000165AA 9240                       		sub.w	d0,d1
000165AC 3141 0008                  		move.w	d1,obX(a0)
000165B0 4E75                       		rts	
000165B2                            ; ===========================================================================
000165B2                            

000165B2                            @loc_15E3C:
000165B2 5328 0028                  		subq.b	#1,obSubtype(a0)
000165B6 4228 0038                  		clr.b	sto_active(a0)
000165BA 45F8 FC00                  		lea	(v_objstate).w,a2
000165BE 7000                       		moveq	#0,d0
000165C0 1028 0023                  		move.b	obRespawnNo(a0),d0
000165C4 67CE                       		beq.s	@loc_15E1E
000165C6 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000165CC 60C6                       		bra.s	@loc_15E1E
000165CE                            ; ===========================================================================
000165CE                            

000165CE                            @type03:
000165CE 4A28 0038                  		tst.b	sto_active(a0)
000165D2 6600                       		bne.s	@isactive03
000165D4 4A68 003A                  		tst.w	$3A(a0)
000165D8 6700                       		beq.s	@loc_15E6A
000165DA 5368 003A                  		subq.w	#1,$3A(a0)
000165DE 6000                       		bra.s	@loc_15E8E
000165E0                            ; ===========================================================================
000165E0                            

000165E0                            @loc_15E6A:
000165E0 5368 0036                  		subq.w	#1,$36(a0)
000165E4 6A00                       		bpl.s	@loc_15E8E
000165E6 317C 003C 0036             		move.w	#$3C,$36(a0)
000165EC 117C 0001 0038             		move.b	#1,sto_active(a0)
000165F2                            

000165F2                            @isactive03:
000165F2 5068 003A                  		addq.w	#8,$3A(a0)
000165F6 3028 003A                  		move.w	$3A(a0),d0
000165FA B068 003C                  		cmp.w	$3C(a0),d0
000165FE 6600                       		bne.s	@loc_15E8E
00016600 4228 0038                  		clr.b	sto_active(a0)
00016604                            

00016604                            @loc_15E8E:
00016604 3028 003A                  		move.w	$3A(a0),d0
00016608 0828 0000 0022             		btst	#0,obStatus(a0)
0001660E 6700                       		beq.s	@noflip03
00016610 4440                       		neg.w	d0
00016612 0640 0038                  		addi.w	#$38,d0
00016616                            

00016616                            	@noflip03:
00016616 3228 0030                  		move.w	sto_origY(a0),d1
0001661A D240                       		add.w	d0,d1
0001661C 3141 000C                  		move.w	d1,obY(a0)
00016620 4E75                       		rts	
00016622                            ; ===========================================================================
00016622                            

00016622                            @type04:
00016622 4A28 0038                  		tst.b	sto_active(a0)
00016626 6600                       		bne.s	@isactive04
00016628 4A68 003A                  		tst.w	$3A(a0)
0001662C 6700                       		beq.s	@loc_15EBE
0001662E 5168 003A                  		subq.w	#8,$3A(a0)
00016632 6000                       		bra.s	@loc_15EF0
00016634                            ; ===========================================================================
00016634                            

00016634                            @loc_15EBE:
00016634 5368 0036                  		subq.w	#1,$36(a0)
00016638 6A00                       		bpl.s	@loc_15EF0
0001663A 317C 003C 0036             		move.w	#$3C,$36(a0)
00016640 117C 0001 0038             		move.b	#1,sto_active(a0)
00016646                            

00016646                            @isactive04:
00016646 3028 003A                  		move.w	$3A(a0),d0
0001664A B068 003C                  		cmp.w	$3C(a0),d0
0001664E 6700                       		beq.s	@loc_15EE0
00016650 5068 003A                  		addq.w	#8,$3A(a0)
00016654 6000                       		bra.s	@loc_15EF0
00016656                            ; ===========================================================================
00016656                            

00016656                            @loc_15EE0:
00016656 5368 0036                  		subq.w	#1,$36(a0)
0001665A 6A00                       		bpl.s	@loc_15EF0
0001665C 317C 003C 0036             		move.w	#$3C,$36(a0)
00016662 4228 0038                  		clr.b	sto_active(a0)
00016666                            

00016666                            @loc_15EF0:
00016666 3028 003A                  		move.w	$3A(a0),d0
0001666A 0828 0000 0022             		btst	#0,obStatus(a0)
00016670 6700                       		beq.s	@noflip04
00016672 4440                       		neg.w	d0
00016674 0640 0038                  		addi.w	#$38,d0
00016678                            

00016678                            	@noflip04:
00016678 3228 0030                  		move.w	sto_origY(a0),d1
0001667C D240                       		add.w	d0,d1
0001667E 3141 000C                  		move.w	d1,obY(a0)
00016682 4E75                       		rts	
00016684                            ; ===========================================================================
00016684                            

00016684                            @type05:
00016684 4A28 0038                  		tst.b	sto_active(a0)
00016688 6600                       		bne.s	@loc_15F3E
0001668A 45F8 F7E0                  		lea	(f_switch).w,a2
0001668E 7000                       		moveq	#0,d0
00016690 1028 003E                  		move.b	$3E(a0),d0
00016694 0832 0000 0000             		btst	#0,(a2,d0.w)
0001669A 6700                       		beq.s	@locret_15F5C
0001669C 117C 0001 0038             		move.b	#1,sto_active(a0)
000166A2 45F8 FC00                  		lea	(v_objstate).w,a2
000166A6 7000                       		moveq	#0,d0
000166A8 1028 0023                  		move.b	obRespawnNo(a0),d0
000166AC 6700                       		beq.s	@loc_15F3E
000166AE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000166B4                            

000166B4                            @loc_15F3E:
000166B4 04A8 0001 0000 0008        		subi.l	#$10000,obX(a0)
000166BC 06A8 0000 8000 000C        		addi.l	#$8000,obY(a0)
000166C4 3168 0008 0034             		move.w	obX(a0),sto_origX(a0)
000166CA 0C68 0980 0008             		cmpi.w	#$980,obX(a0)
000166D0 6700                       		beq.s	@loc_15F5E
000166D2                            

000166D2                            @locret_15F5C:
000166D2 4E75                       		rts	
000166D4                            ; ===========================================================================
000166D4                            

000166D4                            @loc_15F5E:
000166D4 4228 0028                  		clr.b	obSubtype(a0)
000166D8 4228 0038                  		clr.b	sto_active(a0)
000166DC 4E75                       		rts	
000166DC 4E75                       		rts	
000166DE                            Map_Stomp:	include	"_maps\SBZ Stomper and Door.asm"
000166DE                            ; ---------------------------------------------------------------------------
000166DE                            ; Sprite mappings - stomper and	platforms (SBZ)
000166DE                            ; ---------------------------------------------------------------------------
000166DE                            Map_Stomp_internal:
000166DE 0000                       		dc.w @door-Map_Stomp_internal
000166E0 0000                       		dc.w @stomper-Map_Stomp_internal
000166E2 0000                       		dc.w @stomper-Map_Stomp_internal
000166E4 0000                       		dc.w @stomper-Map_Stomp_internal
000166E6 0000                       		dc.w @bigdoor-Map_Stomp_internal
000166E8 04                         @door:		dc.b 4
000166E9 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0 ; horizontal sliding door
000166EE F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000166F3 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000166F8 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000166FD 08                         @stomper:	dc.b 8
000166FE E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4 ; stomper block with yellow/black stripes
00016703 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00016708 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
0001670D E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00016712 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00016717 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
0001671C 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016721 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016726 0E                         @bigdoor:	dc.b $E
00016727 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80	; huge diagonal sliding door from SBZ3
0001672C C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016731 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016736 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
0001673B C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016740 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00016745 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001674A C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
0001674F E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00016754 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016759 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
0001675E 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00016763 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016768 200F 0058 80               		dc.b $20, $F, 0, $58, $80
0001676E 00                         		even
0001676E 00                         		even
0001676E                            		include	"_incObj\6C SBZ Vanishing Platforms.asm"
0001676E                            ; ---------------------------------------------------------------------------
0001676E                            ; Object 6C - vanishing	platforms (SBZ)
0001676E                            ; ---------------------------------------------------------------------------
0001676E                            

0001676E                            VanishPlatform:
0001676E 7000                       		moveq	#0,d0
00016770 1028 0024                  		move.b	obRoutine(a0),d0
00016774 323B 0000                  		move.w	VanP_Index(pc,d0.w),d1
00016778 4EFB 1000                  		jmp	VanP_Index(pc,d1.w)
0001677C                            ; ===========================================================================
0001677C 0000                       VanP_Index:	dc.w VanP_Main-VanP_Index
0001677E 0000                       		dc.w VanP_Vanish-VanP_Index
00016780 0000                       		dc.w VanP_Appear-VanP_Index
00016782 0000                       		dc.w loc_16068-VanP_Index
00016784                            

00016784 =00000030                  vanp_timer:	equ $30		; counter for time until event
00016784 =00000032                  vanp_timelen:	equ $32		; time between events (general)
00016784                            ; ===========================================================================
00016784                            

00016784                            VanP_Main:	; Routine 0
00016784 5C28 0024                  		addq.b	#6,obRoutine(a0)
00016788 217C 0000 0000 0004        		move.l	#Map_VanP,obMap(a0)
00016790 317C 44C3 0002             		move.w	#$44C3,obGfx(a0)
00016796 0028 0004 0001             		ori.b	#4,obRender(a0)
0001679C 117C 0010 0019             		move.b	#$10,obActWid(a0)
000167A2 117C 0004 0018             		move.b	#4,obPriority(a0)
000167A8 7000                       		moveq	#0,d0
000167AA 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000167AE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000167B2 5240                       		addq.w	#1,d0		; add 1
000167B4 EF48                       		lsl.w	#7,d0		; multiply by $80
000167B6 3200                       		move.w	d0,d1
000167B8 5340                       		subq.w	#1,d0
000167BA 3140 0030                  		move.w	d0,vanp_timer(a0)
000167BE 3140 0032                  		move.w	d0,vanp_timelen(a0)
000167C2 7000                       		moveq	#0,d0
000167C4 1028 0028                  		move.b	obSubtype(a0),d0 ; get object type
000167C8 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000167CC 0641 0080                  		addi.w	#$80,d1
000167D0 C0C1                       		mulu.w	d1,d0
000167D2 E088                       		lsr.l	#8,d0
000167D4 3140 0036                  		move.w	d0,$36(a0)
000167D8 5341                       		subq.w	#1,d1
000167DA 3141 0038                  		move.w	d1,$38(a0)
000167DE                            

000167DE                            loc_16068:	; Routine 6
000167DE 3038 FE04                  		move.w	(v_framecount).w,d0
000167E2 9068 0036                  		sub.w	$36(a0),d0
000167E6 C068 0038                  		and.w	$38(a0),d0
000167EA 6600                       		bne.s	@animate
000167EC 5928 0024                  		subq.b	#4,obRoutine(a0) ; goto VanP_Vanish next
000167F0 6000                       		bra.s	VanP_Vanish
000167F2                            ; ===========================================================================
000167F2                            

000167F2                            @animate:
000167F2 43F9 0000 0000             		lea	(Ani_Van).l,a1
000167F8 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
000167FE 6000 9546                  		bra.w	RememberState
00016802                            ; ===========================================================================
00016802                            

00016802                            VanP_Vanish:	; Routine 2
00016802                            VanP_Appear:	; Routine 4
00016802 5368 0030                  		subq.w	#1,vanp_timer(a0)
00016806 6A00                       		bpl.s	@wait
00016808 317C 007F 0030             		move.w	#127,vanp_timer(a0)
0001680E 4A28 001C                  		tst.b	obAnim(a0)	; is platform vanishing?
00016812 6700                       		beq.s	@isvanishing	; if yes, branch
00016814 3168 0032 0030             		move.w	vanp_timelen(a0),vanp_timer(a0)
0001681A                            

0001681A                            	@isvanishing:
0001681A 0868 0000 001C             		bchg	#0,obAnim(a0)
00016820                            

00016820                            	@wait:
00016820 43F9 0000 0000             		lea	(Ani_Van).l,a1
00016826 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
0001682C 0828 0001 001A             		btst	#1,obFrame(a0)	; has platform vanished?
00016832 6600                       		bne.s	@notsolid	; if yes, branch
00016834 0C28 0002 0024             		cmpi.b	#2,obRoutine(a0)
0001683A 6600                       		bne.s	@loc_160D6
0001683C 7200                       		moveq	#0,d1
0001683E 1228 0019                  		move.b	obActWid(a0),d1
00016842 4EB9 0000 7AD8             		jsr	(PlatformObject).l
00016848 6000 94FC                  		bra.w	RememberState
0001684C                            ; ===========================================================================
0001684C                            

0001684C                            @loc_160D6:
0001684C 7200                       		moveq	#0,d1
0001684E 1228 0019                  		move.b	obActWid(a0),d1
00016852 4EB9 0000 7C4C             		jsr	(ExitPlatform).l
00016858 3428 0008                  		move.w	obX(a0),d2
0001685C 4EB9 0000 81BA             		jsr	(MvSonicOnPtfm2).l
00016862 6000 94E2                  		bra.w	RememberState
00016866                            ; ===========================================================================
00016866                            

00016866                            @notsolid:
00016866 0828 0003 0022             		btst	#3,obStatus(a0)
0001686C 6700                       		beq.s	@display
0001686E 43F8 D000                  		lea	(v_player).w,a1
00016872 08A9 0003 0022             		bclr	#3,obStatus(a1)
00016878 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001687E 117C 0002 0024             		move.b	#2,obRoutine(a0)
00016884 4228 0025                  		clr.b	obSolid(a0)
00016888                            

00016888                            	@display:
00016888 6000 94BC                  		bra.w	RememberState
00016888 6000 94BC                  		bra.w	RememberState
0001688C                            		include	"_anim\SBZ Vanishing Platforms.asm"
0001688C                            ; ---------------------------------------------------------------------------
0001688C                            ; Animation script - vanishing platforms (SBZ)
0001688C                            ; ---------------------------------------------------------------------------
0001688C 0000                       Ani_Van:	dc.w @vanish-Ani_Van
0001688E 0000                       		dc.w @appear-Ani_Van
00016890 0700 0102 03FE 01          @vanish:	dc.b 7,	0, 1, 2, 3, afBack, 1
00016898 00                         		even
00016898 0703 0201 00FE 01          @appear:	dc.b 7,	3, 2, 1, 0, afBack, 1
000168A0 00                         		even
000168A0 00                         		even
000168A0                            Map_VanP:	include	"_maps\SBZ Vanishing Platforms.asm"
000168A0                            ; ---------------------------------------------------------------------------
000168A0                            ; Sprite mappings - vanishing platforms	(SBZ)
000168A0                            ; ---------------------------------------------------------------------------
000168A0                            Map_VanP_internal:
000168A0 0000                       		dc.w @whole-Map_VanP_internal
000168A2 0000                       		dc.w @half-Map_VanP_internal
000168A4 0000                       		dc.w @quarter-Map_VanP_internal
000168A6 0000                       		dc.w @gone-Map_VanP_internal
000168A8 01                         @whole:		dc.b 1
000168A9 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
000168AE 01                         @half:		dc.b 1
000168AF F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
000168B4 01                         @quarter:	dc.b 1
000168B5 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000168BA 00                         @gone:		dc.b 0
000168BC 00                         		even
000168BC 00                         		even
000168BC                            		include	"_incObj\6E Electrocuter.asm"
000168BC                            ; ---------------------------------------------------------------------------
000168BC                            ; Object 6E - electrocution orbs (SBZ)
000168BC                            ; ---------------------------------------------------------------------------
000168BC                            

000168BC                            Electro:
000168BC 7000                       		moveq	#0,d0
000168BE 1028 0024                  		move.b	obRoutine(a0),d0
000168C2 323B 0000                  		move.w	Elec_Index(pc,d0.w),d1
000168C6 4EFB 1000                  		jmp	Elec_Index(pc,d1.w)
000168CA                            ; ===========================================================================
000168CA 0000                       Elec_Index:	dc.w Elec_Main-Elec_Index
000168CC 0000                       		dc.w Elec_Shock-Elec_Index
000168CE                            

000168CE =00000034                  elec_freq:	equ $34		; frequency
000168CE                            ; ===========================================================================
000168CE                            

000168CE                            Elec_Main:	; Routine 0
000168CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000168D2 217C 0000 0000 0004        		move.l	#Map_Elec,obMap(a0)
000168DA 317C 047E 0002             		move.w	#$47E,obGfx(a0)
000168E0 0028 0004 0001             		ori.b	#4,obRender(a0)
000168E6 117C 0028 0019             		move.b	#$28,obActWid(a0)
000168EC 7000                       		moveq	#0,d0
000168EE 1028 0028                  		move.b	obSubtype(a0),d0 ; read object type
000168F2 E948                       		lsl.w	#4,d0		; multiply by $10
000168F4 5340                       		subq.w	#1,d0
000168F6 3140 0034                  		move.w	d0,elec_freq(a0)
000168FA                            

000168FA                            Elec_Shock:	; Routine 2
000168FA 3038 FE04                  		move.w	(v_framecount).w,d0
000168FE C068 0034                  		and.w	elec_freq(a0),d0 ; is it time to zap?
00016902 6600                       		bne.s	@animate	; if not, branch
00016904                            

00016904 117C 0001 001C             		move.b	#1,obAnim(a0)	; run "zap" animation
0001690A 4A28 0001                  		tst.b	obRender(a0)
0001690E 6A00                       		bpl.s	@animate
00016910 303C 0000                  		move.w	#sfx_Electric,d0
00016914 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play electricity sound
0001691A                            

0001691A                            	@animate:
0001691A 43F9 0000 0000             		lea	(Ani_Elec).l,a1
00016920 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00016926 117C 0000 0020             		move.b	#0,obColType(a0)
0001692C 0C28 0004 001A             		cmpi.b	#4,obFrame(a0)	; is 4th frame displayed?
00016932 6600                       		bne.s	@display	; if not, branch
00016934 117C 00A4 0020             		move.b	#$A4,obColType(a0) ; if yes, make object hurt Sonic
0001693A                            

0001693A                            	@display:
0001693A 6000 940A                  		bra.w	RememberState
0001693A 6000 940A                  		bra.w	RememberState
0001693E                            		include	"_anim\Electrocuter.asm"
0001693E                            ; ---------------------------------------------------------------------------
0001693E                            ; Animation script - electrocution orbs (SBZ)
0001693E                            ; ---------------------------------------------------------------------------
0001693E 0000                       Ani_Elec:	dc.w byte_161CC-Ani_Elec
00016940 0000                       		dc.w byte_161D0-Ani_Elec
00016942 0700 FF                    byte_161CC:	dc.b 7,	0, afEnd
00016946 00                         		even
00016946 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, afChange, 0
00016956                            		even
00016956                            		even
00016956                            Map_Elec:	include	"_maps\Electrocuter.asm"
00016956                            ; ---------------------------------------------------------------------------
00016956                            ; Sprite mappings - electrocution orbs (SBZ)
00016956                            ; ---------------------------------------------------------------------------
00016956                            Map_Elec_internal:
00016956 0000                       		dc.w @normal-Map_Elec_internal
00016958 0000                       		dc.w @zap1-Map_Elec_internal
0001695A 0000                       		dc.w @zap2-Map_Elec_internal
0001695C 0000                       		dc.w @zap3-Map_Elec_internal
0001695E 0000                       		dc.w @zap4-Map_Elec_internal
00016960 0000                       		dc.w @zap5-Map_Elec_internal
00016962 02                         @normal:	dc.b 2
00016963 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016968 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001696D 03                         @zap1:		dc.b 3
0001696E F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016973 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016978 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001697D 05                         @zap2:		dc.b 5
0001697E F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00016983 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016988 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001698D F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
00016992 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016997 04                         @zap3:		dc.b 4
00016998 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001699D 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000169A2 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
000169A7 F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
000169AC 06                         @zap4:		dc.b 6
000169AD F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000169B2 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000169B7 F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000169BC F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000169C1 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000169C6 F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
000169CB 04                         @zap5:		dc.b 4
000169CC F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000169D1 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000169D6 F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
000169DB F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
000169E0                            		even
000169E0                            		even
000169E0                            		include	"_incObj\6F SBZ Spin Platform Conveyor.asm"
000169E0                            ; ---------------------------------------------------------------------------
000169E0                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000169E0                            ; ---------------------------------------------------------------------------
000169E0                            

000169E0                            SpinConvey:
000169E0 7000                       		moveq	#0,d0
000169E2 1028 0024                  		move.b	obRoutine(a0),d0
000169E6 323B 0000                  		move.w	SpinC_Index(pc,d0.w),d1
000169EA 4EBB 1000                  		jsr	SpinC_Index(pc,d1.w)
00016A0A                            

00016A0A                            SpinC_Display:
00016A0A 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00016A10                            ; ===========================================================================
00016A10                            

00016A10                            loc_1629A:
00016A10 0C38 0002 FE11             		cmpi.b	#2,(v_act).w	; check if act is 3
00016A16 6600                       		bne.s	SpinC_Act1or2	; if not, branch
00016A18 0C40 FF80                  		cmpi.w	#-$80,d0
00016A1C 64EC                       		bcc.s	SpinC_Display
00016A1E                            

00016A1E                            SpinC_Act1or2:
00016A1E 1028 002F                  		move.b	$2F(a0),d0
00016A22 6A00                       		bpl.s	SpinC_Delete
00016A24 0240 007F                  		andi.w	#$7F,d0
00016A28 45F8 F7C1                  		lea	(v_obj63).w,a2
00016A2C 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016A32                            

00016A32                            SpinC_Delete:
00016A32 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00016A38                            ; ===========================================================================
00016A38 0000                       SpinC_Index:	dc.w SpinC_Main-SpinC_Index
00016A3A 0000                       		dc.w loc_163D8-SpinC_Index
00016A3C                            ; ===========================================================================
00016A3C                            

00016A3C                            SpinC_Main:	; Routine 0
00016A3C 1028 0028                  		move.b	obSubtype(a0),d0
00016A40 6B00 0000                  		bmi.w	loc_16380
00016A44 5428 0024                  		addq.b	#2,obRoutine(a0)
00016A48 217C 0001 60B0 0004        		move.l	#Map_Spin,obMap(a0)
00016A50 317C 04DF 0002             		move.w	#$4DF,obGfx(a0)
00016A56 117C 0010 0019             		move.b	#$10,obActWid(a0)
00016A5C 0028 0004 0001             		ori.b	#4,obRender(a0)
00016A62 117C 0004 0018             		move.b	#4,obPriority(a0)
00016A68 7000                       		moveq	#0,d0
00016A6A 1028 0028                  		move.b	obSubtype(a0),d0
00016A6E 3200                       		move.w	d0,d1
00016A70 E648                       		lsr.w	#3,d0
00016A72 0240 001E                  		andi.w	#$1E,d0
00016A76 45FA 0000                  		lea	off_164A6(pc),a2
00016A7A D4F2 0000                  		adda.w	(a2,d0.w),a2
00016A7E 315A 0038                  		move.w	(a2)+,$38(a0)
00016A82 315A 0030                  		move.w	(a2)+,$30(a0)
00016A86 214A 003C                  		move.l	a2,$3C(a0)
00016A8A 0241 000F                  		andi.w	#$F,d1
00016A8E E549                       		lsl.w	#2,d1
00016A90 1141 0038                  		move.b	d1,$38(a0)
00016A94 117C 0004 003A             		move.b	#4,$3A(a0)
00016A9A 4A38 F7C0                  		tst.b	(f_conveyrev).w
00016A9E 6700                       		beq.s	loc_16356
00016AA0 117C 0001 003B             		move.b	#1,$3B(a0)
00016AA6 4428 003A                  		neg.b	$3A(a0)
00016AAA 7200                       		moveq	#0,d1
00016AAC 1228 0038                  		move.b	$38(a0),d1
00016AB0 D228 003A                  		add.b	$3A(a0),d1
00016AB4 B228 0039                  		cmp.b	$39(a0),d1
00016AB8 6500                       		bcs.s	loc_16352
00016ABA 1001                       		move.b	d1,d0
00016ABC 7200                       		moveq	#0,d1
00016ABE 4A00                       		tst.b	d0
00016AC0 6A00                       		bpl.s	loc_16352
00016AC2 1228 0039                  		move.b	$39(a0),d1
00016AC6 5901                       		subq.b	#4,d1
00016AC8                            

00016AC8                            loc_16352:
00016AC8 1141 0038                  		move.b	d1,$38(a0)
00016ACC                            

00016ACC                            loc_16356:
00016ACC 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016AD2 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016AD8 4A41                       		tst.w	d1
00016ADA 6600                       		bne.s	loc_1636C
00016ADC 117C 0001 001C             		move.b	#1,obAnim(a0)
00016AE2                            

00016AE2                            loc_1636C:
00016AE2 0C41 0008                  		cmpi.w	#8,d1
00016AE6 6600                       		bne.s	loc_16378
00016AE8 117C 0000 001C             		move.b	#0,obAnim(a0)
00016AEE                            

00016AEE                            loc_16378:
00016AEE 6100 C162                  		bsr.w	LCon_ChangeDir
00016AF2 6000 0000                  		bra.w	loc_163D8
00016AF6                            ; ===========================================================================
00016AF6                            

00016AF6                            loc_16380:
00016AF6 1140 002F                  		move.b	d0,$2F(a0)
00016AFA 0240 007F                  		andi.w	#$7F,d0
00016AFE 45F8 F7C1                  		lea	(v_obj63).w,a2
00016B02 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016B08 6700                       		beq.s	loc_1639A
00016B0A 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00016B10                            ; ===========================================================================
00016B10                            

00016B10                            loc_1639A:
00016B10 D040                       		add.w	d0,d0
00016B12 0240 001E                  		andi.w	#$1E,d0
00016B16 0640 0000                  		addi.w	#ObjPosSBZPlatform_Index-ObjPos_Index,d0
00016B1A 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016B20 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016B24 321A                       		move.w	(a2)+,d1
00016B26 2248                       		movea.l	a0,a1
00016B28 6000                       		bra.s	SpinC_LoadPform
00016B2A                            ; ===========================================================================
00016B2A                            

00016B2A                            SpinC_Loop:
00016B2A 4EB9 0000 E128             		jsr	(FindFreeObj).l
00016B30 6600                       		bne.s	loc_163D0
00016B32                            

00016B32                            SpinC_LoadPform:
00016B32 137C 006F 0000             		move.b	#id_SpinConvey,0(a1)
00016B38 335A 0008                  		move.w	(a2)+,obX(a1)
00016B3C 335A 000C                  		move.w	(a2)+,obY(a1)
00016B40 301A                       		move.w	(a2)+,d0
00016B42 1340 0028                  		move.b	d0,obSubtype(a1)
00016B46                            

00016B46                            loc_163D0:
00016B46 51C9 FFE2                  		dbf	d1,SpinC_Loop
00016B4A                            

00016B4A 588F                       		addq.l	#4,sp
00016B4C 4E75                       		rts	
00016B4E                            ; ===========================================================================
00016B4E                            

00016B4E                            loc_163D8:	; Routine 2
00016B4E 43F9 0000 0000             		lea	(Ani_SpinConvey).l,a1
00016B54 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00016B5A 4A28 001A                  		tst.b	obFrame(a0)
00016B5E 6600                       		bne.s	loc_16404
00016B60 3F28 0008                  		move.w	obX(a0),-(sp)
00016B64 6100 0000                  		bsr.w	loc_16424
00016B68 323C 001B                  		move.w	#$1B,d1
00016B6C 343C 0007                  		move.w	#7,d2
00016B70 3602                       		move.w	d2,d3
00016B72 5243                       		addq.w	#1,d3
00016B74 381F                       		move.w	(sp)+,d4
00016B76 6000 94F8                  		bra.w	SolidObject
00016B7A                            ; ===========================================================================
00016B7A                            

00016B7A                            loc_16404:
00016B7A 0828 0003 0022             		btst	#3,obStatus(a0)
00016B80 6700                       		beq.s	loc_16420
00016B82 43F8 D000                  		lea	(v_player).w,a1
00016B86 08A9 0003 0022             		bclr	#3,obStatus(a1)
00016B8C 08A8 0003 0022             		bclr	#3,obStatus(a0)
00016B92 4228 0025                  		clr.b	obSolid(a0)
00016B96                            

00016B96                            loc_16420:
00016B96 6000 0000                  		bra.w	loc_16424
00016B9A                            

00016B9A                            loc_16424:
00016B9A 3028 0008                  		move.w	obX(a0),d0
00016B9E B068 0034                  		cmp.w	$34(a0),d0
00016BA2 6600                       		bne.s	loc_16484
00016BA4 3028 000C                  		move.w	obY(a0),d0
00016BA8 B068 0036                  		cmp.w	$36(a0),d0
00016BAC 6600                       		bne.s	loc_16484
00016BAE 7200                       		moveq	#0,d1
00016BB0 1228 0038                  		move.b	$38(a0),d1
00016BB4 D228 003A                  		add.b	$3A(a0),d1
00016BB8 B228 0039                  		cmp.b	$39(a0),d1
00016BBC 6500                       		bcs.s	loc_16456
00016BBE 1001                       		move.b	d1,d0
00016BC0 7200                       		moveq	#0,d1
00016BC2 4A00                       		tst.b	d0
00016BC4 6A00                       		bpl.s	loc_16456
00016BC6 1228 0039                  		move.b	$39(a0),d1
00016BCA 5901                       		subq.b	#4,d1
00016BCC                            

00016BCC                            loc_16456:
00016BCC 1141 0038                  		move.b	d1,$38(a0)
00016BD0 2268 003C                  		movea.l	$3C(a0),a1
00016BD4 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016BDA 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016BE0 4A41                       		tst.w	d1
00016BE2 6600                       		bne.s	loc_16474
00016BE4 117C 0001 001C             		move.b	#1,obAnim(a0)
00016BEA                            

00016BEA                            loc_16474:
00016BEA 0C41 0008                  		cmpi.w	#8,d1
00016BEE 6600                       		bne.s	loc_16480
00016BF0 117C 0000 001C             		move.b	#0,obAnim(a0)
00016BF6                            

00016BF6                            loc_16480:
00016BF6 6100 C05A                  		bsr.w	LCon_ChangeDir
00016BFA                            

00016BFA                            loc_16484:
00016BFA 4EF9 0000 DC7A             		jmp	(SpeedToPos).l
00016BFA 4EF9 0000 DC7A             		jmp	(SpeedToPos).l
00016C00                            		include	"_anim\SBZ Spin Platform Conveyor.asm"
00016C00                            ; ---------------------------------------------------------------------------
00016C00                            ; Animation script - platform on conveyor belt (SBZ)
00016C00                            ; ---------------------------------------------------------------------------
00016C00 0000                       Ani_SpinConvey:	dc.w @spin-Ani_SpinConvey
00016C02 0000                       		dc.w @still-Ani_SpinConvey
00016C04 0000 0102 0304 4342 4140+  @spin:		dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016C11 6423 2221 00FF             		dc.b $64, $23, $22, $21, 0, afEnd
00016C18 00                         		even
00016C18 0F00 FF                    @still:		dc.b $F, 0, afEnd
00016C1C 00                         		even
00016C1C 00                         		even
00016C1C                            

00016C1C 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016C22 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016C28 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016C3C 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016C50 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016C64 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016C78 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016C8C 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016CA0                            ; ===========================================================================
00016CA0                            

00016CA0                            		include	"_incObj\70 Girder Block.asm"
00016CA0                            ; ---------------------------------------------------------------------------
00016CA0                            ; Object 70 - large girder block (SBZ)
00016CA0                            ; ---------------------------------------------------------------------------
00016CA0                            

00016CA0                            Girder:
00016CA0 7000                       		moveq	#0,d0
00016CA2 1028 0024                  		move.b	obRoutine(a0),d0
00016CA6 323B 0000                  		move.w	Gird_Index(pc,d0.w),d1
00016CAA 4EFB 1000                  		jmp	Gird_Index(pc,d1.w)
00016CAE                            ; ===========================================================================
00016CAE 0000                       Gird_Index:	dc.w Gird_Main-Gird_Index
00016CB0 0000                       		dc.w Gird_Action-Gird_Index
00016CB2                            

00016CB2 =00000016                  gird_height:	equ $16
00016CB2 =00000032                  gird_origX:	equ $32		; original x-axis position
00016CB2 =00000030                  gird_origY:	equ $30		; original y-axis position
00016CB2 =00000034                  gird_time:	equ $34		; duration for movement in a direction
00016CB2 =00000038                  gird_set:	equ $38		; which movement settings to use (0/8/16/24)
00016CB2 =0000003A                  gird_delay:	equ $3A		; delay for movement
00016CB2                            ; ===========================================================================
00016CB2                            

00016CB2                            Gird_Main:	; Routine 0
00016CB2 5428 0024                  		addq.b	#2,obRoutine(a0)
00016CB6 217C 0000 0000 0004        		move.l	#Map_Gird,obMap(a0)
00016CBE 317C 42F0 0002             		move.w	#$42F0,obGfx(a0)
00016CC4 0028 0004 0001             		ori.b	#4,obRender(a0)
00016CCA 117C 0004 0018             		move.b	#4,obPriority(a0)
00016CD0 117C 0060 0019             		move.b	#$60,obActWid(a0)
00016CD6 117C 0018 0016             		move.b	#$18,gird_height(a0)
00016CDC 3168 0008 0032             		move.w	obX(a0),gird_origX(a0)
00016CE2 3168 000C 0030             		move.w	obY(a0),gird_origY(a0)
00016CE8 6100 0000                  		bsr.w	Gird_ChgMove
00016CEC                            

00016CEC                            Gird_Action:	; Routine 2
00016CEC 3F28 0008                  		move.w	obX(a0),-(sp)
00016CF0 4A68 003A                  		tst.w	gird_delay(a0)
00016CF4 6700                       		beq.s	@beginmove
00016CF6 5368 003A                  		subq.w	#1,gird_delay(a0)
00016CFA 6600                       		bne.s	@solid
00016CFC                            

00016CFC                            	@beginmove:
00016CFC 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
00016D02 5368 0034                  		subq.w	#1,gird_time(a0) ; decrement movement duration
00016D06 6600                       		bne.s	@solid		; if time remains, branch
00016D08 6100 0000                  		bsr.w	Gird_ChgMove	; if time is zero, branch
00016D0C                            

00016D0C                            	@solid:
00016D0C 381F                       		move.w	(sp)+,d4
00016D0E 4A28 0001                  		tst.b	obRender(a0)
00016D12 6A00                       		bpl.s	@chkdel
00016D14 7200                       		moveq	#0,d1
00016D16 1228 0019                  		move.b	obActWid(a0),d1
00016D1A 0641 000B                  		addi.w	#$B,d1
00016D1E 7400                       		moveq	#0,d2
00016D20 1428 0016                  		move.b	gird_height(a0),d2
00016D24 3602                       		move.w	d2,d3
00016D26 5243                       		addq.w	#1,d3
00016D28 6100 9346                  		bsr.w	SolidObject
00016D2C                            

00016D2C                            	@chkdel:
00016D48 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00016D4E                            

00016D4E                            	@delete:
00016D4E 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00016D54                            ; ===========================================================================
00016D54                            

00016D54                            Gird_ChgMove:
00016D54 1028 0038                  		move.b	gird_set(a0),d0
00016D58 0240 0018                  		andi.w	#$18,d0
00016D5C 43F9 0000 0000             		lea	(@settings).l,a1
00016D62 43F1 0000                  		lea	(a1,d0.w),a1
00016D66 3159 0010                  		move.w	(a1)+,obVelX(a0)
00016D6A 3159 0012                  		move.w	(a1)+,obVelY(a0)
00016D6E 3159 0034                  		move.w	(a1)+,gird_time(a0)
00016D72 5028 0038                  		addq.b	#8,gird_set(a0)	; use next settings
00016D76 317C 0007 003A             		move.w	#7,gird_delay(a0)
00016D7C 4E75                       		rts	
00016D7E                            ; ===========================================================================
00016D7E                            @settings:	;   x-speed, y-speed, duration
00016D7E 0100 0000 0060 0000        		dc.w   $100,	 0,   $60,     0 ; right
00016D86 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0 ; down
00016D8E FF00 FFC0 0060 0000        		dc.w  -$100,  -$40,   $60,     0 ; up/left
00016D96 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00016D96 0000 FF00 0018 0000        		dc.w	  0, -$100,   $18,     0 ; up
00016D9E                            Map_Gird:	include	"_maps\Girder Block.asm"
00016D9E                            ; ---------------------------------------------------------------------------
00016D9E                            ; Sprite mappings - large girder block (SBZ)
00016D9E                            ; ---------------------------------------------------------------------------
00016D9E                            Map_Gird_internal:
00016D9E 0000                       		dc.w @girder-Map_Gird_internal
00016DA0 0C                         @girder:	dc.b $C
00016DA1 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016DA6 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016DAB E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016DB0 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016DB5 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016DBA 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016DBF E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016DC4 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016DC9 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016DCE 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016DD3 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016DD8 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016DDE 00                         		even
00016DDE 00                         		even
00016DDE                            		include	"_incObj\72 Teleporter.asm"
00016DDE                            ; ---------------------------------------------------------------------------
00016DDE                            ; Object 72 - teleporter (SBZ)
00016DDE                            ; ---------------------------------------------------------------------------
00016DDE                            

00016DDE                            Teleport:
00016DDE 7000                       		moveq	#0,d0
00016DE0 1028 0024                  		move.b	obRoutine(a0),d0
00016DE4 323B 0000                  		move.w	Tele_Index(pc,d0.w),d1
00016DE8 4EBB 1000                  		jsr	Tele_Index(pc,d1.w)
00016E08 4E75                       		rts	
00016E0A                            

00016E0A                            	@delete:
00016E0A 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00016E10                            ; ===========================================================================
00016E10 0000                       Tele_Index:	dc.w Tele_Main-Tele_Index
00016E12 0000                       		dc.w loc_166C8-Tele_Index
00016E14 0000                       		dc.w loc_1675E-Tele_Index
00016E16 0000                       		dc.w loc_16798-Tele_Index
00016E18                            ; ===========================================================================
00016E18                            

00016E18                            Tele_Main:	; Routine 0
00016E18 5428 0024                  		addq.b	#2,obRoutine(a0)
00016E1C 1028 0028                  		move.b	obSubtype(a0),d0
00016E20 D040                       		add.w	d0,d0
00016E22 0240 001E                  		andi.w	#$1E,d0
00016E26 45FA 0000                  		lea	Tele_Data(pc),a2
00016E2A D4F2 0000                  		adda.w	(a2,d0.w),a2
00016E2E 315A 003A                  		move.w	(a2)+,$3A(a0)
00016E32 214A 003C                  		move.l	a2,$3C(a0)
00016E36 315A 0036                  		move.w	(a2)+,$36(a0)
00016E3A 315A 0038                  		move.w	(a2)+,$38(a0)
00016E3E                            

00016E3E                            loc_166C8:	; Routine 2
00016E3E 43F8 D000                  		lea	(v_player).w,a1
00016E42 3029 0008                  		move.w	obX(a1),d0
00016E46 9068 0008                  		sub.w	obX(a0),d0
00016E4A 0828 0000 0022             		btst	#0,obStatus(a0)
00016E50 6700                       		beq.s	loc_166E0
00016E52 0640 000F                  		addi.w	#$F,d0
00016E56                            

00016E56                            loc_166E0:
00016E56 0C40 0010                  		cmpi.w	#$10,d0
00016E5A 6400                       		bcc.s	locret_1675C
00016E5C 3229 000C                  		move.w	obY(a1),d1
00016E60 9268 000C                  		sub.w	obY(a0),d1
00016E64 0641 0020                  		addi.w	#$20,d1
00016E68 0C41 0040                  		cmpi.w	#$40,d1
00016E6C 6400                       		bcc.s	locret_1675C
00016E6E 4A38 F7C8                  		tst.b	(f_playerctrl).w
00016E72 6600                       		bne.s	locret_1675C
00016E74 0C28 0007 0028             		cmpi.b	#7,obSubtype(a0)
00016E7A 6600                       		bne.s	loc_1670E
00016E7C 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w
00016E82 6500                       		bcs.s	locret_1675C
00016E84                            

00016E84                            loc_1670E:
00016E84 5428 0024                  		addq.b	#2,obRoutine(a0)
00016E88 11FC 0081 F7C8             		move.b	#$81,(f_playerctrl).w ; lock controls and disable object interaction
00016E8E 137C 0002 001C             		move.b	#id_Roll,obAnim(a1) ; use Sonic's rolling animation
00016E94 337C 0800 0014             		move.w	#$800,obInertia(a1)
00016E9A 337C 0000 0010             		move.w	#0,obVelX(a1)
00016EA0 337C 0000 0012             		move.w	#0,obVelY(a1)
00016EA6 08A8 0005 0022             		bclr	#5,obStatus(a0)
00016EAC 08A9 0005 0022             		bclr	#5,obStatus(a1)
00016EB2 08E9 0001 0022             		bset	#1,obStatus(a1)
00016EB8 3368 0008 0008             		move.w	obX(a0),obX(a1)
00016EBE 3368 000C 000C             		move.w	obY(a0),obY(a1)
00016EC4 4228 0032                  		clr.b	$32(a0)
00016EC8 303C 0000                  		move.w	#sfx_Roll,d0
00016ECC 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play Sonic rolling sound
00016ED2                            

00016ED2                            locret_1675C:
00016ED2 4E75                       		rts	
00016ED4                            ; ===========================================================================
00016ED4                            

00016ED4                            loc_1675E:	; Routine 4
00016ED4 43F8 D000                  		lea	(v_player).w,a1
00016ED8 1028 0032                  		move.b	$32(a0),d0
00016EDC 5428 0032                  		addq.b	#2,$32(a0)
00016EE0 4EB9 0000 29E0             		jsr	(CalcSine).l
00016EE6 EA40                       		asr.w	#5,d0
00016EE8 3428 000C                  		move.w	obY(a0),d2
00016EEC 9440                       		sub.w	d0,d2
00016EEE 3342 000C                  		move.w	d2,obY(a1)
00016EF2 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
00016EF8 6600                       		bne.s	locret_16796
00016EFA 6100 0000                  		bsr.w	sub_1681C
00016EFE 5428 0024                  		addq.b	#2,obRoutine(a0)
00016F02 303C 0000                  		move.w	#sfx_Teleport,d0
00016F06 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play teleport sound
00016F0C                            

00016F0C                            locret_16796:
00016F0C 4E75                       		rts	
00016F0E                            ; ===========================================================================
00016F0E                            

00016F0E                            loc_16798:	; Routine 6
00016F0E 588F                       		addq.l	#4,sp
00016F10 43F8 D000                  		lea	(v_player).w,a1
00016F14 5328 002E                  		subq.b	#1,$2E(a0)
00016F18 6A00                       		bpl.s	loc_167DA
00016F1A 3368 0036 0008             		move.w	$36(a0),obX(a1)
00016F20 3368 0038 000C             		move.w	$38(a0),obY(a1)
00016F26 7200                       		moveq	#0,d1
00016F28 1228 003A                  		move.b	$3A(a0),d1
00016F2C 5801                       		addq.b	#4,d1
00016F2E B228 003B                  		cmp.b	$3B(a0),d1
00016F32 6500                       		bcs.s	loc_167C2
00016F34 7200                       		moveq	#0,d1
00016F36 6000                       		bra.s	loc_16800
00016F38                            ; ===========================================================================
00016F38                            

00016F38                            loc_167C2:
00016F38 1141 003A                  		move.b	d1,$3A(a0)
00016F3C 2468 003C                  		movea.l	$3C(a0),a2
00016F40 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00016F46 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016F4C 6000 0000                  		bra.w	sub_1681C
00016F50                            ; ===========================================================================
00016F50                            

00016F50                            loc_167DA:
00016F50 2429 0008                  		move.l	obX(a1),d2
00016F54 2629 000C                  		move.l	obY(a1),d3
00016F58 3029 0010                  		move.w	obVelX(a1),d0
00016F5C 48C0                       		ext.l	d0
00016F5E E180                       		asl.l	#8,d0
00016F60 D480                       		add.l	d0,d2
00016F62 3029 0012                  		move.w	obVelY(a1),d0
00016F66 48C0                       		ext.l	d0
00016F68 E180                       		asl.l	#8,d0
00016F6A D680                       		add.l	d0,d3
00016F6C 2342 0008                  		move.l	d2,obX(a1)
00016F70 2343 000C                  		move.l	d3,obY(a1)
00016F74 4E75                       		rts	
00016F76                            ; ===========================================================================
00016F76                            

00016F76                            loc_16800:
00016F76 0269 07FF 000C             		andi.w	#$7FF,obY(a1)
00016F7C 4228 0024                  		clr.b	obRoutine(a0)
00016F80 4238 F7C8                  		clr.b	(f_playerctrl).w
00016F84 337C 0000 0010             		move.w	#0,obVelX(a1)
00016F8A 337C 0200 0012             		move.w	#$200,obVelY(a1)
00016F90 4E75                       		rts	
00016F92                            

00016F92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F92                            

00016F92                            

00016F92                            sub_1681C:
00016F92 7000                       		moveq	#0,d0
00016F94 343C 1000                  		move.w	#$1000,d2
00016F98 3028 0036                  		move.w	$36(a0),d0
00016F9C 9069 0008                  		sub.w	obX(a1),d0
00016FA0 6C00                       		bge.s	loc_16830
00016FA2 4440                       		neg.w	d0
00016FA4 4442                       		neg.w	d2
00016FA6                            

00016FA6                            loc_16830:
00016FA6 7200                       		moveq	#0,d1
00016FA8 363C 1000                  		move.w	#$1000,d3
00016FAC 3228 0038                  		move.w	$38(a0),d1
00016FB0 9269 000C                  		sub.w	obY(a1),d1
00016FB4 6C00                       		bge.s	loc_16844
00016FB6 4441                       		neg.w	d1
00016FB8 4443                       		neg.w	d3
00016FBA                            

00016FBA                            loc_16844:
00016FBA B240                       		cmp.w	d0,d1
00016FBC 6500                       		bcs.s	loc_1687A
00016FBE 7200                       		moveq	#0,d1
00016FC0 3228 0038                  		move.w	$38(a0),d1
00016FC4 9269 000C                  		sub.w	obY(a1),d1
00016FC8 4841                       		swap	d1
00016FCA 83C3                       		divs.w	d3,d1
00016FCC 7000                       		moveq	#0,d0
00016FCE 3028 0036                  		move.w	$36(a0),d0
00016FD2 9069 0008                  		sub.w	obX(a1),d0
00016FD6 6700                       		beq.s	loc_16866
00016FD8 4840                       		swap	d0
00016FDA 81C1                       		divs.w	d1,d0
00016FDC                            

00016FDC                            loc_16866:
00016FDC 3340 0010                  		move.w	d0,obVelX(a1)
00016FE0 3343 0012                  		move.w	d3,obVelY(a1)
00016FE4 4A41                       		tst.w	d1
00016FE6 6A00                       		bpl.s	loc_16874
00016FE8 4441                       		neg.w	d1
00016FEA                            

00016FEA                            loc_16874:
00016FEA 3141 002E                  		move.w	d1,$2E(a0)
00016FEE 4E75                       		rts	
00016FF0                            ; ===========================================================================
00016FF0                            

00016FF0                            loc_1687A:
00016FF0 7000                       		moveq	#0,d0
00016FF2 3028 0036                  		move.w	$36(a0),d0
00016FF6 9069 0008                  		sub.w	obX(a1),d0
00016FFA 4840                       		swap	d0
00016FFC 81C2                       		divs.w	d2,d0
00016FFE 7200                       		moveq	#0,d1
00017000 3228 0038                  		move.w	$38(a0),d1
00017004 9269 000C                  		sub.w	obY(a1),d1
00017008 6700                       		beq.s	loc_16898
0001700A 4841                       		swap	d1
0001700C 83C0                       		divs.w	d0,d1
0001700E                            

0001700E                            loc_16898:
0001700E 3341 0012                  		move.w	d1,obVelY(a1)
00017012 3342 0010                  		move.w	d2,obVelX(a1)
00017016 4A40                       		tst.w	d0
00017018 6A00                       		bpl.s	loc_168A6
0001701A 4440                       		neg.w	d0
0001701C                            

0001701C                            loc_168A6:
0001701C 3140 002E                  		move.w	d0,$2E(a0)
00017020 4E75                       		rts	
00017022                            ; End of function sub_1681C
00017022                            

00017022                            ; ===========================================================================
00017022 0000 0000 0000             Tele_Data:	dc.w @type00-Tele_Data, @type01-Tele_Data, @type02-Tele_Data
00017028 0000 0000 0000             		dc.w @type03-Tele_Data, @type04-Tele_Data, @type05-Tele_Data
0001702E 0000 0000                  		dc.w @type06-Tele_Data, @type07-Tele_Data
00017032 0004 0794 098C             @type00:	dc.w 4,	$794, $98C
00017038 0004 0094 038C             @type01:	dc.w 4,	$94, $38C
0001703E 001C 0794 02E8             @type02:	dc.w $1C, $794,	$2E8
00017044 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
0001704A 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017050 0884 0298 0894             		dc.w $884, $298, $894
00017056 0270 0894 0190             		dc.w $270, $894, $190
0001705C 0004 0894 0690             @type03:	dc.w 4,	$894, $690
00017062 001C 1194 0470             @type04:	dc.w $1C, $1194, $470
00017068 1184 0498 1158             		dc.w $1184, $498, $1158
0001706E 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017074 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
0001707A 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017080 0004 1294 0490             @type05:	dc.w 4,	$1294, $490
00017086 001C 1594 FFE8             @type06:	dc.w $1C, $1594, $FFE8
0001708C 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017092 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017098 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
0001709E FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
000170A4 0004 0894 0090             @type07:	dc.w 4,	$894, $90
000170A4 0004 0894 0090             @type07:	dc.w 4,	$894, $90
000170AA                            

000170AA                            		include	"_incObj\78 Caterkiller.asm"
000170AA                            ; ---------------------------------------------------------------------------
000170AA                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
000170AA                            ; ---------------------------------------------------------------------------
000170AA                            

000170AA                            Caterkiller:
000170AA 7000                       		moveq	#0,d0
000170AC 1028 0024                  		move.b	obRoutine(a0),d0
000170B0 323B 0000                  		move.w	Cat_Index(pc,d0.w),d1
000170B4 4EFB 1000                  		jmp	Cat_Index(pc,d1.w)
000170B8                            ; ===========================================================================
000170B8 0000                       Cat_Index:	dc.w Cat_Main-Cat_Index
000170BA 0000                       		dc.w Cat_Head-Cat_Index
000170BC 0000                       		dc.w Cat_BodySeg1-Cat_Index
000170BE 0000                       		dc.w Cat_BodySeg2-Cat_Index
000170C0 0000                       		dc.w Cat_BodySeg1-Cat_Index
000170C2 0000                       		dc.w Cat_Delete-Cat_Index
000170C4 0000                       		dc.w loc_16CC0-Cat_Index
000170C6                            

000170C6 =0000003C                  cat_parent:	equ $3C		; address of parent object
000170C6                            ; ===========================================================================
000170C6                            

000170C6                            locret_16950:
000170C6 4E75                       		rts	
000170C8                            ; ===========================================================================
000170C8                            

000170C8                            Cat_Main:	; Routine 0
000170C8 117C 0007 0016             		move.b	#7,obHeight(a0)
000170CE 117C 0008 0017             		move.b	#8,obWidth(a0)
000170D4 4EB9 0000 DC4E             		jsr	(ObjectFall).l
000170DA 4EB9 0001 558E             		jsr	(ObjFloorDist).l
000170E0 4A41                       		tst.w	d1
000170E2 6AE2                       		bpl.s	locret_16950
000170E4 D368 000C                  		add.w	d1,obY(a0)
000170E8 4268 0012                  		clr.w	obVelY(a0)
000170EC 5428 0024                  		addq.b	#2,obRoutine(a0)
000170F0 217C 0000 0000 0004        		move.l	#Map_Cat,obMap(a0)
000170F8 317C 22B0 0002             		move.w	#$22B0,obGfx(a0)
000170FE 0C38 0005 FE10             		cmpi.b	#id_SBZ,(v_zone).w ; if level is SBZ, branch
00017104 6700                       		beq.s	@isscrapbrain
00017106 317C 24FF 0002             		move.w	#$24FF,obGfx(a0) ; MZ specific code
0001710C                            

0001710C                            	@isscrapbrain:
0001710C 0228 0003 0001             		andi.b	#3,obRender(a0)
00017112 0028 0004 0001             		ori.b	#4,obRender(a0)
00017118 1168 0001 0022             		move.b	obRender(a0),obStatus(a0)
0001711E 117C 0004 0018             		move.b	#4,obPriority(a0)
00017124 117C 0008 0019             		move.b	#8,obActWid(a0)
0001712A 117C 000B 0020             		move.b	#$B,obColType(a0)
00017130 3428 0008                  		move.w	obX(a0),d2
00017134 7A0C                       		moveq	#$C,d5
00017136 0828 0000 0022             		btst	#0,obStatus(a0)
0001713C 6700                       		beq.s	@noflip
0001713E 4445                       		neg.w	d5
00017140                            

00017140                            	@noflip:
00017140 1C3C 0004                  		move.b	#4,d6
00017144 7600                       		moveq	#0,d3
00017146 7804                       		moveq	#4,d4
00017148 2448                       		movea.l	a0,a2
0001714A 7202                       		moveq	#2,d1
0001714C                            

0001714C                            Cat_Loop:
0001714C 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
00017152 6600 0000                  			bne.w	Cat_ChkGone
00017156 137C 0078 0000             		move.b	#id_Caterkiller,0(a1) ; load body segment object
0001715C 1346 0024                  		move.b	d6,obRoutine(a1) ; goto Cat_BodySeg1 or Cat_BodySeg2 next
00017160 5406                       		addq.b	#2,d6		; alternate between the two
00017162 2368 0004 0004             		move.l	obMap(a0),obMap(a1)
00017168 3368 0002 0002             		move.w	obGfx(a0),obGfx(a1)
0001716E 137C 0005 0018             		move.b	#5,obPriority(a1)
00017174 137C 0008 0019             		move.b	#8,obActWid(a1)
0001717A 137C 00CB 0020             		move.b	#$CB,obColType(a1)
00017180 D445                       		add.w	d5,d2
00017182 3342 0008                  		move.w	d2,obX(a1)
00017186 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001718C 1368 0022 0022             		move.b	obStatus(a0),obStatus(a1)
00017192 1368 0022 0001             		move.b	obStatus(a0),obRender(a1)
00017198 137C 0008 001A             		move.b	#8,obFrame(a1)
0001719E 234A 003C                  		move.l	a2,cat_parent(a1)
000171A2 1344 003C                  		move.b	d4,cat_parent(a1)
000171A6 5804                       		addq.b	#4,d4
000171A8 2449                       		movea.l	a1,a2
000171AA                            

000171AA                            	@fail:
000171AA 51C9 FFA0                  		dbf	d1,Cat_Loop	; repeat sequence 2 more times
000171AE                            

000171AE 117C 0007 002A             		move.b	#7,$2A(a0)
000171B4 4228 003C                  		clr.b	cat_parent(a0)
000171B8                            

000171B8                            Cat_Head:	; Routine 2
000171B8 4A28 0022                  		tst.b	obStatus(a0)
000171BC 6B00 0000                  		bmi.w	loc_16C96
000171C0 7000                       		moveq	#0,d0
000171C2 1028 0025                  		move.b	ob2ndRout(a0),d0
000171C6 323B 0000                  		move.w	Cat_Index2(pc,d0.w),d1
000171CA 4EBB 1000                  		jsr	Cat_Index2(pc,d1.w)
000171CE 1228 002B                  		move.b	$2B(a0),d1
000171D2 6A00                       		bpl.s	@display
000171D4 43F9 0000 0000             		lea	(Ani_Cat).l,a1
000171DA 1028 0026                  		move.b	obAngle(a0),d0
000171DE 0240 007F                  		andi.w	#$7F,d0
000171E2 5828 0026                  		addq.b	#4,obAngle(a0)
000171E6 1031 0000                  		move.b	(a1,d0.w),d0
000171EA 6A00                       		bpl.s	@animate
000171EC 08A8 0007 002B             		bclr	#7,$2B(a0)
000171F2 6000                       		bra.s	@display
000171F4                            

000171F4                            	@animate:
000171F4 0201 0010                  		andi.b	#$10,d1
000171F8 D001                       		add.b	d1,d0
000171FA 1140 001A                  		move.b	d0,obFrame(a0)
000171FE                            

000171FE                            	@display:
0001721C 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00017222                            

00017222                            	Cat_ChkGone:
00017222 45F8 FC00                  		lea	(v_objstate).w,a2
00017226 7000                       		moveq	#0,d0
00017228 1028 0023                  		move.b	obRespawnNo(a0),d0
0001722C 6700                       		beq.s	@delete
0001722E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017234                            

00017234                            	@delete:
00017234 117C 000A 0024             		move.b	#$A,obRoutine(a0)	; goto Cat_Delete next
0001723A 4E75                       		rts	
0001723C                            ; ===========================================================================
0001723C                            

0001723C                            Cat_Delete:	; Routine $A
0001723C 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00017242                            ; ===========================================================================
00017242 0000                       Cat_Index2:	dc.w @wait-Cat_Index2
00017244 0000                       		dc.w loc_16B02-Cat_Index2
00017246                            ; ===========================================================================
00017246                            

00017246                            @wait:
00017246 5328 002A                  		subq.b	#1,$2A(a0)
0001724A 6B00                       		bmi.s	@move
0001724C 4E75                       		rts	
0001724E                            ; ===========================================================================
0001724E                            

0001724E                            @move:
0001724E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00017252 117C 0010 002A             		move.b	#$10,$2A(a0)
00017258 317C FF40 0010             		move.w	#-$C0,obVelX(a0)
0001725E 317C 0040 0014             		move.w	#$40,obInertia(a0)
00017264 0868 0004 002B             		bchg	#4,$2B(a0)
0001726A 6600                       		bne.s	loc_16AFC
0001726C 4268 0010                  		clr.w	obVelX(a0)
00017270 4468 0014                  		neg.w	obInertia(a0)
00017274                            

00017274                            loc_16AFC:
00017274 08E8 0007 002B             		bset	#7,$2B(a0)
0001727A                            

0001727A                            loc_16B02:
0001727A 5328 002A                  		subq.b	#1,$2A(a0)
0001727E 6B00                       		bmi.s	@loc_16B5E
00017280 4A68 0010                  			tst.w	obVelX(a0)
00017284 6700                       			beq.s	@notmoving
00017286 2428 0008                  			move.l	obX(a0),d2
0001728A 2602                       			move.l	d2,d3
0001728C 3028 0010                  		move.w	obVelX(a0),d0
00017290 0828 0000 0022             		btst	#0,obStatus(a0)
00017296 6700                       		beq.s	@noflip
00017298 4440                       		neg.w	d0
0001729A                            

0001729A                            	@noflip:
0001729A 48C0                       		ext.l	d0
0001729C E180                       		asl.l	#8,d0
0001729E D480                       		add.l	d0,d2
000172A0 2142 0008                  		move.l	d2,obX(a0)
000172A4 4843                       			swap	d3
000172A6 B668 0008                  			cmp.w	obX(a0),d3
000172AA 6700                       			beq.s	@notmoving
000172AC 4EB9 0001 558E             			jsr	(ObjFloorDist).l
000172B2 0C41 FFF8                  			cmpi.w	#-8,d1
000172B6 6D00                       			blt.s	@loc_16B70
000172B8 0C41 000C                  			cmpi.w	#$C,d1
000172BC 6C00                       			bge.s	@loc_16B70
000172BE D368 000C                  			add.w	d1,obY(a0)
000172C2 7000                       		moveq	#0,d0
000172C4 1028 003C                  		move.b	cat_parent(a0),d0
000172C8 5228 003C                  		addq.b	#1,cat_parent(a0)
000172CC 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
000172D2 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000172D6                            

000172D6                            	@notmoving:
000172D6 4E75                       		rts	
000172D8                            ; ===========================================================================
000172D8                            

000172D8                            @loc_16B5E:
000172D8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
000172DC 117C 0007 002A             		move.b	#7,$2A(a0)
000172E2 4268 0010                  			clr.w	obVelX(a0)
000172E6 4268 0014                  			clr.w	obInertia(a0)
000172EA 4E75                       		rts	
000172EC                            ; ===========================================================================
000172EC                            

000172EC                            @loc_16B70:
000172EC 7000                       			moveq	#0,d0
000172EE 1028 003C                  			move.b	cat_parent(a0),d0
000172F2 11BC 0080 002C             			move.b	#$80,$2C(a0,d0.w)
000172F8 4468 000A                  			neg.w	obX+2(a0)
000172FC 6700                       			beq.s	@loc_1730A
000172FE 0828 0000 0022             			btst	#0,obStatus(a0)
00017304 6700                       			beq.s	@loc_1730A
00017306 5368 0008                  			subq.w	#1,obX(a0)
0001730A 5228 003C                  			addq.b	#1,cat_parent(a0)
0001730E 7000                       			moveq	#0,d0
00017310 1028 003C                  			move.b	cat_parent(a0),d0
00017314 4230 002C                  			clr.b	$2C(a0,d0.w)
00017318                            	@loc_1730A:
00017318 0868 0000 0022             			bchg	#0,obStatus(a0)
0001731E 1168 0022 0001             			move.b	obStatus(a0),obRender(a0)
00017324 5228 003C                  		addq.b	#1,cat_parent(a0)
00017328 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001732E 4E75                       		rts	
00017330                            ; ===========================================================================
00017330                            

00017330                            Cat_BodySeg2:	; Routine 6
00017330 2268 003C                  		movea.l	cat_parent(a0),a1
00017334 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
0001733A 6A00                       		bpl.s	Cat_BodySeg1
0001733C 43F9 0000 0000             		lea	(Ani_Cat).l,a1
00017342 1028 0026                  		move.b	obAngle(a0),d0
00017346 0240 007F                  		andi.w	#$7F,d0
0001734A 5828 0026                  		addq.b	#4,obAngle(a0)
0001734E 4A31 0004                  		tst.b	4(a1,d0.w)
00017352 6A00                       		bpl.s	Cat_AniBody
00017354 5828 0026                  		addq.b	#4,obAngle(a0)
00017358                            

00017358                            Cat_AniBody:
00017358 1031 0000                  		move.b	(a1,d0.w),d0
0001735C 5000                       		addq.b	#8,d0
0001735E 1140 001A                  		move.b	d0,obFrame(a0)
00017362                            

00017362                            Cat_BodySeg1:	; Routine 4, 8
00017362 2268 003C                  		movea.l	cat_parent(a0),a1
00017366 4A28 0022                  		tst.b	obStatus(a0)
0001736A 6B00 0000                  		bmi.w	loc_16C90
0001736E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017374 1169 0025 0025             		move.b	ob2ndRout(a1),ob2ndRout(a0)
0001737A 6700 0000                  		beq.w	loc_16C64
0001737E 3169 0014 0014             		move.w	obInertia(a1),obInertia(a0)
00017384 3029 0010                  		move.w	obVelX(a1),d0
00017388 D068 0014                  			add.w	obInertia(a0),d0
0001738C 3140 0010                  		move.w	d0,obVelX(a0)
00017390 2428 0008                  		move.l	obX(a0),d2
00017394 2602                       		move.l	d2,d3
00017396 3028 0010                  		move.w	obVelX(a0),d0
0001739A 0828 0000 0022             		btst	#0,obStatus(a0)
000173A0 6700                       		beq.s	loc_16C0C
000173A2 4440                       		neg.w	d0
000173A4                            

000173A4                            loc_16C0C:
000173A4 48C0                       		ext.l	d0
000173A6 E180                       		asl.l	#8,d0
000173A8 D480                       		add.l	d0,d2
000173AA 2142 0008                  		move.l	d2,obX(a0)
000173AE 4843                       		swap	d3
000173B0 B668 0008                  		cmp.w	obX(a0),d3
000173B4 6700                       		beq.s	loc_16C64
000173B6 7000                       		moveq	#0,d0
000173B8 1028 003C                  		move.b	cat_parent(a0),d0
000173BC 1231 002C                  		move.b	$2C(a1,d0.w),d1
000173C0 0C01 0080                  		cmpi.b	#$80,d1
000173C4 6600                       		bne.s	loc_16C50
000173C6 1181 002C                  			move.b	d1,$2C(a0,d0.w)
000173CA 4468 000A                  			neg.w	obX+2(a0)
000173CE 6700                       			beq.s	locj_173E4
000173D0 0828 0000 0022             			btst	#0,obStatus(a0)
000173D6 6700                       			beq.s	locj_173E4
000173D8 0C68 FF40 0010             			cmpi.w	#-$C0,obVelX(a0)
000173DE 6600                       			bne.s	locj_173E4
000173E0 5368 0008                  			subq.w	#1,obX(a0)
000173E4 5228 003C                  			addq.b	#1,cat_parent(a0)
000173E8 7000                       			moveq	#0,d0
000173EA 1028 003C                  			move.b	cat_parent(a0),d0
000173EE 4230 002C                  			clr.b	$2C(a0,d0.w)
000173F2                            	locj_173E4:
000173F2 0868 0000 0022             		bchg	#0,obStatus(a0)
000173F8 1168 0022 0001             		move.b	obStatus(a0),1(a0)
000173FE 5228 003C                  		addq.b	#1,cat_parent(a0)
00017402 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
00017408 6000                       		bra.s	loc_16C64
0001740A                            ; ===========================================================================
0001740A                            

0001740A                            loc_16C50:
0001740A 4881                       		ext.w	d1
0001740C D368 000C                  		add.w	d1,obY(a0)
00017410 5228 003C                  		addq.b	#1,cat_parent(a0)
00017414 0228 000F 003C             		andi.b	#$F,cat_parent(a0)
0001741A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
0001741E                            

0001741E                            loc_16C64:
0001741E 0C29 000C 0024             		cmpi.b	#$C,obRoutine(a1)
00017424 6700                       		beq.s	loc_16C90
00017426 0C29 0027 0000             		cmpi.b	#id_ExplosionItem,0(a1)
0001742C 6700                       		beq.s	loc_16C7C
0001742E 0C29 000A 0024             		cmpi.b	#$A,obRoutine(a1)
00017434 6600                       		bne.s	loc_16C82
00017436                            

00017436                            loc_16C7C:
00017436 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001743C                            

0001743C                            loc_16C82:
0001743C 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00017442                            

00017442                            ; ===========================================================================
00017442 FE00 FE80 0180 0200        Cat_FragSpeed:	dc.w -$200, -$180, $180, $200
0001744A                            ; ===========================================================================
0001744A                            

0001744A                            loc_16C90:
0001744A 08E9 0007 0022             		bset	#7,obStatus(a1)
00017450                            

00017450                            loc_16C96:
00017450 7000                       		moveq	#0,d0
00017452 1028 0024                  		move.b	obRoutine(a0),d0
00017456 303B 00E8                  		move.w	Cat_FragSpeed-2(pc,d0.w),d0
0001745A 0828 0000 0022             		btst	#0,obStatus(a0)
00017460 6700                       		beq.s	loc_16CAA
00017462 4440                       		neg.w	d0
00017464                            

00017464                            loc_16CAA:
00017464 3140 0010                  		move.w	d0,obVelX(a0)
00017468 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001746E 117C 000C 0024             		move.b	#$C,obRoutine(a0)
00017474 0228 00F8 001A             		andi.b	#$F8,obFrame(a0)
0001747A                            

0001747A                            loc_16CC0:	; Routine $C
0001747A 4EB9 0000 DC4E             		jsr	(ObjectFall).l
00017480 4A68 0012                  		tst.w	obVelY(a0)
00017484 6B00                       		bmi.s	loc_16CE0
00017486 4EB9 0001 558E             		jsr	(ObjFloorDist).l
0001748C 4A41                       		tst.w	d1
0001748E 6A00                       		bpl.s	loc_16CE0
00017490 D368 000C                  		add.w	d1,obY(a0)
00017494 317C FC00 0012             		move.w	#-$400,obVelY(a0)
0001749A                            

0001749A                            loc_16CE0:
0001749A 4A28 0001                  		tst.b	obRender(a0)
0001749E 6A00 FD82                  		bpl.w	Cat_ChkGone
000174A2 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
000174A2 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
000174A8                            		include	"_anim\Caterkiller.asm"
000174A8                            ; ---------------------------------------------------------------------------
000174A8                            ; Animation script - Caterkiller enemy (uses non-standard format)
000174A8                            ; ---------------------------------------------------------------------------
000174A8 0000 0000 0000 0000 0000+  Ani_Cat:	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
000174B8 0101 0101 0101 0202 0202+  		dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
000174C8 0404 0404 0404 0505 0505+  		dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
000174D8 0606 0707 0707 0707 0707+  		dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
000174E8 0707 0707 0707 0707 0707+  		dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
000174F8 0606 0606 0606 0505 0505+  		dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017508 0403 0303 0303 0202 0202+  		dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017518 0101 0000 0000 0000 0000+  		dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017528                            		even
00017528                            		even
00017528                            Map_Cat:	include	"_maps\Caterkiller.asm"
00017528                            ; ---------------------------------------------------------------------------
00017528                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017528                            ; ---------------------------------------------------------------------------
00017528                            Map_Cat_internal:
00017528 0000                       		dc.w byte_16D9E-Map_Cat_internal
0001752A 0000                       		dc.w byte_16DA4-Map_Cat_internal
0001752C 0000                       		dc.w byte_16DAA-Map_Cat_internal
0001752E 0000                       		dc.w byte_16DB0-Map_Cat_internal
00017530 0000                       		dc.w byte_16DB6-Map_Cat_internal
00017532 0000                       		dc.w byte_16DBC-Map_Cat_internal
00017534 0000                       		dc.w byte_16DC2-Map_Cat_internal
00017536 0000                       		dc.w byte_16DC8-Map_Cat_internal
00017538 0000                       		dc.w byte_16DCE-Map_Cat_internal
0001753A 0000                       		dc.w byte_16DD4-Map_Cat_internal
0001753C 0000                       		dc.w byte_16DDA-Map_Cat_internal
0001753E 0000                       		dc.w byte_16DE0-Map_Cat_internal
00017540 0000                       		dc.w byte_16DE6-Map_Cat_internal
00017542 0000                       		dc.w byte_16DEC-Map_Cat_internal
00017544 0000                       		dc.w byte_16DF2-Map_Cat_internal
00017546 0000                       		dc.w byte_16DF8-Map_Cat_internal
00017548 0000                       		dc.w byte_16DFE-Map_Cat_internal
0001754A 0000                       		dc.w byte_16E04-Map_Cat_internal
0001754C 0000                       		dc.w byte_16E0A-Map_Cat_internal
0001754E 0000                       		dc.w byte_16E10-Map_Cat_internal
00017550 0000                       		dc.w byte_16E16-Map_Cat_internal
00017552 0000                       		dc.w byte_16E1C-Map_Cat_internal
00017554 0000                       		dc.w byte_16E22-Map_Cat_internal
00017556 0000                       		dc.w byte_16E28-Map_Cat_internal
00017558 01                         byte_16D9E:	dc.b 1
00017559 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
0001755E 01                         byte_16DA4:	dc.b 1
0001755F F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017564 01                         byte_16DAA:	dc.b 1
00017565 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
0001756A 01                         byte_16DB0:	dc.b 1
0001756B EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017570 01                         byte_16DB6:	dc.b 1
00017571 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017576 01                         byte_16DBC:	dc.b 1
00017577 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
0001757C 01                         byte_16DC2:	dc.b 1
0001757D EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00017582 01                         byte_16DC8:	dc.b 1
00017583 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017588 01                         byte_16DCE:	dc.b 1
00017589 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001758E 01                         byte_16DD4:	dc.b 1
0001758F F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00017594 01                         byte_16DDA:	dc.b 1
00017595 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001759A 01                         byte_16DE0:	dc.b 1
0001759B F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
000175A0 01                         byte_16DE6:	dc.b 1
000175A1 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
000175A6 01                         byte_16DEC:	dc.b 1
000175A7 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
000175AC 01                         byte_16DF2:	dc.b 1
000175AD F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
000175B2 01                         byte_16DF8:	dc.b 1
000175B3 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
000175B8 01                         byte_16DFE:	dc.b 1
000175B9 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
000175BE 01                         byte_16E04:	dc.b 1
000175BF F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
000175C4 01                         byte_16E0A:	dc.b 1
000175C5 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
000175CA 01                         byte_16E10:	dc.b 1
000175CB EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
000175D0 01                         byte_16E16:	dc.b 1
000175D1 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
000175D6 01                         byte_16E1C:	dc.b 1
000175D7 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
000175DC 01                         byte_16E22:	dc.b 1
000175DD EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
000175E2 01                         byte_16E28:	dc.b 1
000175E3 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
000175E8                            		even
000175E8                            		even
000175E8                            

000175E8                            		include	"_incObj\79 Lamppost.asm"
000175E8                            ; ---------------------------------------------------------------------------
000175E8                            ; Object 79 - lamppost
000175E8                            ; ---------------------------------------------------------------------------
000175E8                            

000175E8                            Lamppost:
000175E8 7000                       		moveq	#0,d0
000175EA 1028 0024                  		move.b	obRoutine(a0),d0
000175EE 323B 0000                  		move.w	Lamp_Index(pc,d0.w),d1
000175F2 4EBB 1000                  		jsr	Lamp_Index(pc,d1.w)
000175F6 4EF9 0000 FD46             		jmp	(RememberState).l
000175FC                            ; ===========================================================================
000175FC 0000                       Lamp_Index:	dc.w Lamp_Main-Lamp_Index
000175FE 0000                       		dc.w Lamp_Blue-Lamp_Index
00017600 0000                       		dc.w Lamp_Finish-Lamp_Index
00017602 0000                       		dc.w Lamp_Twirl-Lamp_Index
00017604                            

00017604 =00000030                  lamp_origX:	equ $30		; original x-axis position
00017604 =00000032                  lamp_origY:	equ $32		; original y-axis position
00017604 =00000036                  lamp_time:	equ $36		; length of time to twirl the lamp
00017604                            ; ===========================================================================
00017604                            

00017604                            Lamp_Main:	; Routine 0
00017604 5428 0024                  		addq.b	#2,obRoutine(a0)
00017608 217C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a0)
00017610 317C 07A0 0002             		move.w	#$7A0,obGfx(a0)
00017616 117C 0004 0001             		move.b	#4,obRender(a0)
0001761C 117C 0008 0019             		move.b	#8,obActWid(a0)
00017622 117C 0005 0018             		move.b	#5,obPriority(a0)
00017628 45F8 FC00                  		lea	(v_objstate).w,a2
0001762C 7000                       		moveq	#0,d0
0001762E 1028 0023                  		move.b	obRespawnNo(a0),d0
00017632 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017638 0832 0000 0002             		btst	#0,2(a2,d0.w)
0001763E 6600                       		bne.s	@red
00017640 1238 FE30                  		move.b	(v_lastlamp).w,d1
00017644 0201 007F                  		andi.b	#$7F,d1
00017648 1428 0028                  		move.b	obSubtype(a0),d2 ; get lamppost number
0001764C 0202 007F                  		andi.b	#$7F,d2
00017650 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
00017652 6500                       		bcs.s	Lamp_Blue	; if yes, branch
00017654                            

00017654                            @red:
00017654 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001765A 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
00017660 117C 0003 001A             		move.b	#3,obFrame(a0)	; use red lamppost frame
00017666 4E75                       		rts	
00017668                            ; ===========================================================================
00017668                            

00017668                            Lamp_Blue:	; Routine 2
00017668 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001766C 6600 0000                  		bne.w	@donothing	; if yes, branch
00017670 4A38 F7C8                  		tst.b	(f_playerctrl).w
00017674 6B00 0000                  		bmi.w	@donothing
00017678 1238 FE30                  		move.b	(v_lastlamp).w,d1
0001767C 0201 007F                  		andi.b	#$7F,d1
00017680 1428 0028                  		move.b	obSubtype(a0),d2
00017684 0202 007F                  		andi.b	#$7F,d2
00017688 B202                       		cmp.b	d2,d1		; is this a "new" lamppost?
0001768A 6500                       		bcs.s	@chkhit		; if yes, branch
0001768C 45F8 FC00                  		lea	(v_objstate).w,a2
00017690 7000                       		moveq	#0,d0
00017692 1028 0023                  		move.b	obRespawnNo(a0),d0
00017696 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001769C 117C 0004 0024             		move.b	#4,obRoutine(a0)
000176A2 117C 0003 001A             		move.b	#3,obFrame(a0)
000176A8 6000 0000                  		bra.w	@donothing
000176AC                            ; ===========================================================================
000176AC                            

000176AC                            @chkhit:
000176AC 3038 D008                  		move.w	(v_player+obX).w,d0
000176B0 9068 0008                  		sub.w	obX(a0),d0
000176B4 5040                       		addq.w	#8,d0
000176B6 0C40 0010                  		cmpi.w	#$10,d0
000176BA 6400 0000                  		bcc.w	@donothing
000176BE 3038 D00C                  		move.w	(v_player+obY).w,d0
000176C2 9068 000C                  		sub.w	obY(a0),d0
000176C6 0640 0040                  		addi.w	#$40,d0
000176CA 0C40 0068                  		cmpi.w	#$68,d0
000176CE 6400                       		bcc.s	@donothing
000176D0                            

000176D0 303C 0000                  		move.w	#sfx_Lamppost,d0
000176D4 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play lamppost sound
000176DA 5428 0024                  		addq.b	#2,obRoutine(a0)
000176DE 4EB9 0000 E128             		jsr	(FindFreeObj).l
000176E4 6600                       		bne.s	@fail
000176E6 137C 0079 0000             		move.b	#id_Lamppost,0(a1)	; load twirling	lamp object
000176EC 137C 0006 0024             		move.b	#6,obRoutine(a1) ; goto Lamp_Twirl next
000176F2 3368 0008 0030             		move.w	obX(a0),lamp_origX(a1)
000176F8 3368 000C 0032             		move.w	obY(a0),lamp_origY(a1)
000176FE 0469 0018 0032             		subi.w	#$18,lamp_origY(a1)
00017704 237C 0000 0000 0004        		move.l	#Map_Lamp,obMap(a1)
0001770C 337C 07A0 0002             		move.w	#$7A0,obGfx(a1)
00017712 137C 0004 0001             		move.b	#4,obRender(a1)
00017718 137C 0008 0019             		move.b	#8,obActWid(a1)
0001771E 137C 0004 0018             		move.b	#4,obPriority(a1)
00017724 137C 0002 001A             		move.b	#2,obFrame(a1)	; use "ball only" frame
0001772A 337C 0020 0036             		move.w	#$20,lamp_time(a1)
00017730                            

00017730                            	@fail:
00017730 117C 0001 001A             		move.b	#1,obFrame(a0)	; use "post only" frame
00017736 6100 0000                  		bsr.w	Lamp_StoreInfo
0001773A 45F8 FC00                  		lea	(v_objstate).w,a2
0001773E 7000                       		moveq	#0,d0
00017740 1028 0023                  		move.b	obRespawnNo(a0),d0
00017744 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001774A                            

0001774A                            	@donothing:
0001774A 4E75                       		rts	
0001774C                            ; ===========================================================================
0001774C                            

0001774C                            Lamp_Finish:	; Routine 4
0001774C 4E75                       		rts	
0001774E                            ; ===========================================================================
0001774E                            

0001774E                            Lamp_Twirl:	; Routine 6
0001774E 5368 0036                  		subq.w	#1,lamp_time(a0) ; decrement timer
00017752 6A00                       		bpl.s	@continue	; if time remains, keep twirling
00017754 117C 0004 0024             		move.b	#4,obRoutine(a0) ; goto Lamp_Finish next
0001775A                            

0001775A                            	@continue:
0001775A 1028 0026                  		move.b	obAngle(a0),d0
0001775E 0428 0010 0026             		subi.b	#$10,obAngle(a0)
00017764 0400 0040                  		subi.b	#$40,d0
00017768 4EB9 0000 29E0             		jsr	(CalcSine).l
0001776E C3FC 0C00                  		muls.w	#$C00,d1
00017772 4841                       		swap	d1
00017774 D268 0030                  		add.w	lamp_origX(a0),d1
00017778 3141 0008                  		move.w	d1,obX(a0)
0001777C C1FC 0C00                  		muls.w	#$C00,d0
00017780 4840                       		swap	d0
00017782 D068 0032                  		add.w	lamp_origY(a0),d0
00017786 3140 000C                  		move.w	d0,obY(a0)
0001778A 4E75                       		rts	
0001778C                            ; ===========================================================================
0001778C                            ; ---------------------------------------------------------------------------
0001778C                            ; Subroutine to	store information when you hit a lamppost
0001778C                            ; ---------------------------------------------------------------------------
0001778C                            

0001778C                            Lamp_StoreInfo:
0001778C 11E8 0028 FE30             		move.b	obSubtype(a0),(v_lastlamp).w 	; lamppost number
00017792 11F8 FE30 FE31             		move.b	(v_lastlamp).w,($FFFFFE31).w
00017798 31E8 0008 FE32             		move.w	obX(a0),($FFFFFE32).w		; x-position
0001779E 31E8 000C FE34             		move.w	obY(a0),($FFFFFE34).w		; y-position
000177A4 31F8 FE20 FE36             		move.w	(v_rings).w,($FFFFFE36).w 	; rings
000177AA 11F8 FE1B FE54             		move.b	(v_lifecount).w,($FFFFFE54).w 	; lives
000177B0 21F8 FE22 FE38             		move.l	(v_time).w,($FFFFFE38).w 	; time
000177B6 11F8 F742 FE3C             		move.b	(v_dle_routine).w,($FFFFFE3C).w ; routine counter for dynamic level mod
000177BC 31F8 F72E FE3E             		move.w	(v_limitbtm2).w,($FFFFFE3E).w 	; lower y-boundary of level
000177C2 31F8 F700 FE40             		move.w	(v_screenposx).w,($FFFFFE40).w 	; screen x-position
000177C8 31F8 F704 FE42             		move.w	(v_screenposy).w,($FFFFFE42).w 	; screen y-position
000177CE 31F8 F708 FE44             		move.w	(v_bgscreenposx).w,($FFFFFE44).w ; bg position
000177D4 31F8 F70C FE46             		move.w	(v_bgscreenposy).w,($FFFFFE46).w 	; bg position
000177DA 31F8 F710 FE48             		move.w	(v_bg2screenposx).w,($FFFFFE48).w 	; bg position
000177E0 31F8 F714 FE4A             		move.w	(v_bg2screenposy).w,($FFFFFE4A).w 	; bg position
000177E6 31F8 F718 FE4C             		move.w	(v_bg3screenposx).w,($FFFFFE4C).w 	; bg position
000177EC 31F8 F71C FE4E             		move.w	(v_bg3screenposy).w,($FFFFFE4E).w 	; bg position
000177F2 31F8 F648 FE50             		move.w	(v_waterpos2).w,($FFFFFE50).w 	; water height
000177F8 11F8 F64D FE52             		move.b	(v_wtr_routine).w,($FFFFFE52).w ; rountine counter for water
000177FE 11F8 F64E FE53             		move.b	(f_wtr_state).w,($FFFFFE53).w 	; water direction
00017804 4E75                       		rts	
00017806                            

00017806                            ; ---------------------------------------------------------------------------
00017806                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00017806                            ; ---------------------------------------------------------------------------
00017806                            

00017806                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017806                            

00017806                            

00017806                            Lamp_LoadInfo:
00017806 11F8 FE31 FE30             		move.b	($FFFFFE31).w,(v_lastlamp).w
0001780C 31F8 FE32 D008             		move.w	($FFFFFE32).w,(v_player+obX).w
00017812 31F8 FE34 D00C             		move.w	($FFFFFE34).w,(v_player+obY).w
00017818 31F8 FE36 FE20             		move.w	($FFFFFE36).w,(v_rings).w
0001781E 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,(v_lifecount).w
00017824 4278 FE20                  		clr.w	(v_rings).w
00017828 4238 FE1B                  		clr.b	(v_lifecount).w
0001782C 21F8 FE38 FE22             		move.l	($FFFFFE38).w,(v_time).w
00017832 11FC 003B FE25             		move.b	#59,(v_timecent).w
00017838 5338 FE24                  		subq.b	#1,(v_timesec).w
0001783C 11F8 FE3C F742             		move.b	($FFFFFE3C).w,(v_dle_routine).w
00017842 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
00017848 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,(v_limitbtm2).w
0001784E 31F8 FE3E F726             		move.w	($FFFFFE3E).w,(v_limitbtm1).w
00017854 31F8 FE40 F700             		move.w	($FFFFFE40).w,(v_screenposx).w
0001785A 31F8 FE42 F704             		move.w	($FFFFFE42).w,(v_screenposy).w
00017860 31F8 FE44 F708             		move.w	($FFFFFE44).w,(v_bgscreenposx).w
00017866 31F8 FE46 F70C             		move.w	($FFFFFE46).w,(v_bgscreenposy).w
0001786C 31F8 FE48 F710             		move.w	($FFFFFE48).w,(v_bg2screenposx).w
00017872 31F8 FE4A F714             		move.w	($FFFFFE4A).w,(v_bg2screenposy).w
00017878 31F8 FE4C F718             		move.w	($FFFFFE4C).w,(v_bg3screenposx).w
0001787E 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,(v_bg3screenposy).w
00017884 0C38 0001 FE10             		cmpi.b	#1,(v_zone).w	; is this Labyrinth Zone?
0001788A 6600                       		bne.s	@notlabyrinth	; if not, branch
0001788C                            

0001788C 31F8 FE50 F648             		move.w	($FFFFFE50).w,(v_waterpos2).w
00017892 11F8 FE52 F64D             		move.b	($FFFFFE52).w,(v_wtr_routine).w
00017898 11F8 FE53 F64E             		move.b	($FFFFFE53).w,(f_wtr_state).w
0001789E                            

0001789E                            	@notlabyrinth:
0001789E 4A38 FE30                  		tst.b	(v_lastlamp).w
000178A2 6A00                       		bpl.s	locret_170F6
000178A4 3038 FE32                  		move.w	($FFFFFE32).w,d0
000178A8 0440 00A0                  		subi.w	#$A0,d0
000178AC 31C0 F728                  		move.w	d0,(v_limitleft2).w
000178B0                            

000178B0                            locret_170F6:
000178B0 4E75                       		rts	
000178B0 4E75                       		rts	
000178B2                            Map_Lamp:	include	"_maps\Lamppost.asm"
000178B2                            ; ---------------------------------------------------------------------------
000178B2                            ; Sprite mappings - lamppost
000178B2                            ; ---------------------------------------------------------------------------
000178B2                            Map_Lamp_internal:
000178B2 0000                       		dc.w @blue-Map_Lamp_internal
000178B4 0000                       		dc.w @poleonly-Map_Lamp_internal
000178B6 0000                       		dc.w @redballonly-Map_Lamp_internal
000178B8 0000                       		dc.w @red-Map_Lamp_internal
000178BA 06                         @blue:		dc.b 6
000178BB E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000178C0 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000178C5 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000178CA F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000178CF D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
000178D4 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
000178D9 04                         @poleonly:	dc.b 4
000178DA E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000178DF E401 0800 00               		dc.b $E4, 1, 8,	0, 0
000178E4 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
000178E9 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000178EE 02                         @redballonly:	dc.b 2
000178EF F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
000178F4 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
000178F9 06                         @red:		dc.b 6
000178FA E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
000178FF E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017904 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017909 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001790E D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017913 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017918                            		even
00017918                            		even
00017918                            		include	"_incObj\7D Hidden Bonuses.asm"
00017918                            ; ---------------------------------------------------------------------------
00017918                            ; Object 7D - hidden points at the end of a level
00017918                            ; ---------------------------------------------------------------------------
00017918                            

00017918                            HiddenBonus:
00017918 7000                       		moveq	#0,d0
0001791A 1028 0024                  		move.b	obRoutine(a0),d0
0001791E 323B 0000                  		move.w	Bonus_Index(pc,d0.w),d1
00017922 4EFB 1000                  		jmp	Bonus_Index(pc,d1.w)
00017926                            ; ===========================================================================
00017926 0000                       Bonus_Index:	dc.w Bonus_Main-Bonus_Index
00017928 0000                       		dc.w Bonus_Display-Bonus_Index
0001792A                            

0001792A =00000030                  bonus_timelen:	equ $30		; length of time to display bonus sprites
0001792A                            ; ===========================================================================
0001792A                            

0001792A                            Bonus_Main:	; Routine 0
0001792A 7410                       		moveq	#$10,d2
0001792C 3602                       		move.w	d2,d3
0001792E D643                       		add.w	d3,d3
00017930 43F8 D000                  		lea	(v_player).w,a1
00017934 3029 0008                  		move.w	obX(a1),d0
00017938 9068 0008                  		sub.w	obX(a0),d0
0001793C D042                       		add.w	d2,d0
0001793E B043                       		cmp.w	d3,d0
00017940 6400                       		bcc.s	@chkdel
00017942 3229 000C                  		move.w	obY(a1),d1
00017946 9268 000C                  		sub.w	obY(a0),d1
0001794A D242                       		add.w	d2,d1
0001794C B243                       		cmp.w	d3,d1
0001794E 6400                       		bcc.s	@chkdel
00017950 4A78 FE08                  		tst.w	(v_debuguse).w
00017954 6600                       		bne.s	@chkdel
00017956 4A38 F7CD                  		tst.b	(f_bigring).w
0001795A 6600                       		bne.s	@chkdel
0001795C 5428 0024                  		addq.b	#2,obRoutine(a0)
00017960 217C 0000 0000 0004        		move.l	#Map_Bonus,obMap(a0)
00017968 317C 84B6 0002             		move.w	#$84B6,obGfx(a0)
0001796E 0028 0004 0001             		ori.b	#4,obRender(a0)
00017974 117C 0000 0018             		move.b	#0,obPriority(a0)
0001797A 117C 0010 0019             		move.b	#$10,obActWid(a0)
00017980 1168 0028 001A             		move.b	obSubtype(a0),obFrame(a0)
00017986 317C 0077 0030             		move.w	#119,bonus_timelen(a0) ; set display time to 2 seconds
0001798C 303C 0000                  		move.w	#sfx_Bonus,d0
00017990 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play bonus sound
00017996 7000                       		moveq	#0,d0
00017998 1028 0028                  		move.b	obSubtype(a0),d0
0001799C D040                       		add.w	d0,d0
0001799E 303B 0000                  		move.w	@points(pc,d0.w),d0 ; load bonus points array
000179A2 4EB9 0000 0000             		jsr	(AddPoints).l
000179A8                            

000179A8                            	@chkdel:
000179C4 4E75                       		rts	
000179C6                            

000179C6                            	@delete:
000179C6 4EF9 0000 DCDC             		jmp	(DeleteObject).l
000179CC                            

000179CC                            ; ===========================================================================
000179CC 0000                       @points:	dc.w 0			; Bonus	points array
000179CE 03E8                       		dc.w 1000
000179D0 0064                       		dc.w 100
000179D2 0001                       		dc.w 1
000179D4                            ; ===========================================================================
000179D4                            

000179D4                            Bonus_Display:	; Routine 2
000179D4 5368 0030                  		subq.w	#1,bonus_timelen(a0) ; decrement display time
000179D8 6B00                       		bmi.s	Bonus_Display_Delete		; if time is zero, branch
000179F6 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
000179FC                            

000179FC                            Bonus_Display_Delete:	
000179FC 4EF9 0000 DCDC             		jmp	(DeleteObject).l
000179FC 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00017A02                            Map_Bonus:	include	"_maps\Hidden Bonuses.asm"
00017A02                            ; ---------------------------------------------------------------------------
00017A02                            ; Sprite mappings - hidden points at the end of	a level
00017A02                            ; ---------------------------------------------------------------------------
00017A02                            Map_Bonus_internal:
00017A02 0000                       		dc.w @blank-Map_Bonus_internal
00017A04 0000                       		dc.w @10000-Map_Bonus_internal
00017A06 0000                       		dc.w @1000-Map_Bonus_internal
00017A08 0000                       		dc.w @100-Map_Bonus_internal
00017A0A 00                         @blank:		dc.b 0
00017A0B 01                         @10000:		dc.b 1
00017A0C F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017A11 01                         @1000:		dc.b 1
00017A12 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017A17 01                         @100:		dc.b 1
00017A18 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017A1E 00                         		even
00017A1E 00                         		even
00017A1E                            

00017A1E                            		include	"_incObj\8A Credits.asm"
00017A1E                            ; ---------------------------------------------------------------------------
00017A1E                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017A1E                            ; ---------------------------------------------------------------------------
00017A1E                            

00017A1E                            CreditsText:
00017A1E 7000                       		moveq	#0,d0
00017A20 1028 0024                  		move.b	obRoutine(a0),d0
00017A24 323B 0000                  		move.w	Cred_Index(pc,d0.w),d1
00017A28 4EFB 1000                  		jmp	Cred_Index(pc,d1.w)
00017A2C                            ; ===========================================================================
00017A2C 0000                       Cred_Index:	dc.w Cred_Main-Cred_Index
00017A2E 0000                       		dc.w Cred_Display-Cred_Index
00017A30                            ; ===========================================================================
00017A30                            

00017A30                            Cred_Main:	; Routine 0
00017A30 5428 0024                  		addq.b	#2,obRoutine(a0)
00017A34 317C 0120 0008             		move.w	#$120,obX(a0)
00017A3A 317C 00F0 000A             		move.w	#$F0,obScreenY(a0)
00017A40 217C 0000 0000 0004        		move.l	#Map_Cred,obMap(a0)
00017A48 317C 05A0 0002             		move.w	#$5A0,obGfx(a0)
00017A4E 3038 FFF4                  		move.w	(v_creditsnum).w,d0 ; load credits index number
00017A52 1140 001A                  		move.b	d0,obFrame(a0)	; display appropriate sprite
00017A56 117C 0000 0001             		move.b	#0,obRender(a0)
00017A5C 117C 0000 0018             		move.b	#0,obPriority(a0)
00017A62                            

00017A62 0C38 0000 F600             		cmpi.b	#id_Title,(v_gamemode).w ; is the mode #4 (title screen)?
00017A68 6600                       		bne.s	Cred_Display	; if not, branch
00017A6A                            

00017A6A 317C 00A6 0002             		move.w	#$A6,obGfx(a0)
00017A70 117C 000A 001A             		move.b	#$A,obFrame(a0)	; display "SONIC TEAM PRESENTS"
00017A76 4A38 FFE3                  		tst.b	(f_creditscheat).w ; is hidden credits cheat on?
00017A7A 6700                       		beq.s	Cred_Display	; if not, branch
00017A7C 0C38 0072 F604             		cmpi.b	#btnABC+btnDn,(v_jpadhold1).w ; is A+B+C+Down being pressed? ($72)
00017A82 6600                       		bne.s	Cred_Display	; if not, branch
00017A84 31FC 0EEE FBC0             		move.w	#cWhite,(v_pal_dry_dup+$40).w ; 3rd palette, 1st entry = white
00017A8A 31FC 0880 FBC2             		move.w	#$880,(v_pal_dry_dup+$42).w ; 3rd palette, 2nd entry = cyan
00017A90 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00017A96                            ; ===========================================================================
00017A96                            

00017A96                            Cred_Display:	; Routine 2
00017A96 4EF9 0000 DCA0             		jmp	DisplaySprite
00017A96 4EF9 0000 DCA0             		jmp	DisplaySprite
00017A9C                            Map_Cred:	include	"_maps\Credits.asm"
00017A9C                            ; ---------------------------------------------------------------------------
00017A9C                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017A9C                            ; ---------------------------------------------------------------------------
00017A9C                            Map_Cred_internal:
00017A9C 0000                       		dc.w @staff-Map_Cred_internal
00017A9E 0000                       		dc.w @gameplan-Map_Cred_internal
00017AA0 0000                       		dc.w @program-Map_Cred_internal
00017AA2 0000                       		dc.w @character-Map_Cred_internal
00017AA4 0000                       		dc.w @design-Map_Cred_internal
00017AA6 0000                       		dc.w @soundproduce-Map_Cred_internal
00017AA8 0000                       		dc.w @soundprogram-Map_Cred_internal
00017AAA 0000                       		dc.w @thanks-Map_Cred_internal
00017AAC 0000                       		dc.w @presentedby-Map_Cred_internal
00017AAE 0000                       		dc.w @tryagain-Map_Cred_internal
00017AB0 0000                       		dc.w @sonicteam-Map_Cred_internal
00017AB2 0E                         @staff:		dc.b $E			 ; SONIC TEAM STAFF
00017AB3 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
00017AB8 F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00017ABD F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00017AC2 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
00017AC7 F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00017ACC F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00017AD1 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
00017AD6 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00017ADB F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00017AE0 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00017AE5 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
00017AEA F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00017AEF F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00017AF4 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
00017AF9 10                         @gameplan:	dc.b $10		; GAME PLAN CAROL YAS
00017AFA D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00017AFF D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00017B04 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
00017B09 D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00017B0E D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00017B13 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
00017B18 D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00017B1D D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00017B22 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
00017B27 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00017B2C 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00017B31 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
00017B36 0805 0016 08               		dc.b 8,	5, 0, $16, 8
00017B3B 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
00017B40 0805 0004 30               		dc.b 8,	5, 0, 4, $30
00017B45 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
00017B4A 0A                         @program:	dc.b $A			 ; PROGRAM YU 2
00017B4B D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
00017B50 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
00017B55 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
00017B5A D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
00017B5F D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
00017B64 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
00017B69 D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
00017B6E 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
00017B73 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
00017B78 0805 0036 08               		dc.b 8,	5, 0, $36, 8
00017B7D 18                         @character:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
00017B7E D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
00017B83 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
00017B88 D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
00017B8D D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
00017B92 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00017B97 D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00017B9C D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00017BA1 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
00017BA6 D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00017BAB D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00017BB0 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00017BB5 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
00017BBA D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00017BBF D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00017BC4 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
00017BC9 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00017BCE 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00017BD3 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
00017BD8 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00017BDD 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00017BE2 0805 0016 00               		dc.b 8,	5, 0, $16, 0
00017BE7 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00017BEC 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00017BF1 0805 0042 30               		dc.b 8,	5, 0, $42, $30
00017BF6 14                         @design:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
00017BF7 D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00017BFC D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00017C01 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
00017C06 D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
00017C0B D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00017C10 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00017C15 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
00017C1A 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00017C1F 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00017C24 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
00017C29 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00017C2E 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00017C33 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
00017C38 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
00017C3D 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
00017C42 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
00017C47 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
00017C4C 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
00017C51 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
00017C56 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
00017C5B 1A                         @soundproduce:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
00017C5C D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
00017C61 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
00017C66 D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
00017C6B D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
00017C70 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
00017C75 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
00017C7A D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
00017C7F D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
00017C84 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
00017C89 D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
00017C8E D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
00017C93 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
00017C98 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00017C9D 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00017CA2 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
00017CA7 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00017CAC 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00017CB1 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
00017CB6 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
00017CBB 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00017CC0 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00017CC5 0805 0004 28               		dc.b 8,	5, 0, 4, $28
00017CCA 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00017CCF 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00017CD4 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
00017CD9 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00017CDE 17                         @soundprogram:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00017CDF D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00017CE4 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
00017CE9 D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00017CEE D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00017CF3 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
00017CF8 D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00017CFD D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00017D02 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
00017D07 D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00017D0C D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00017D11 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
00017D16 D009 0008 58               		dc.b $D0, 9, 0,	8, $58
00017D1B 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00017D20 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00017D25 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
00017D2A 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00017D2F 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00017D34 0005 0004 14               		dc.b 0,	5, 0, 4, $14
00017D39 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
00017D3E 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
00017D43 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
00017D48 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
00017D4D 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
00017D52 1F                         @thanks:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
00017D53 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
00017D58 D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
00017D5D D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
00017D62 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
00017D67 D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
00017D6C D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
00017D71 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
00017D76 D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
00017D7B D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
00017D80 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
00017D85 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
00017D8A D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
00017D8F D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
00017D94 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
00017D99 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00017D9E 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00017DA3 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00017DA8 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00017DAD 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00017DB2 0001 0046 14               		dc.b 0,	1, 0, $46, $14
00017DB7 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00017DBC 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00017DC1 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
00017DC6 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
00017DCB 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00017DD0 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00017DD5 0001 0046 74               		dc.b 0,	1, 0, $46, $74
00017DDA 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00017DDF 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00017DE4 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
00017DE9 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00017DEE 0F                         @presentedby:	dc.b $F			 ; PRESENTED BY	SEGA
00017DEF F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00017DF4 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
00017DF9 F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00017DFE F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00017E03 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
00017E08 F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00017E0D F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00017E12 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
00017E17 F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00017E1C F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00017E21 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
00017E26 F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
00017E2B F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00017E30 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00017E35 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
00017E3A 08                         @tryagain:	dc.b 8			 ; TRY AGAIN
00017E3B 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
00017E40 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
00017E45 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
00017E4A 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
00017E4F 3005 0000 08               		dc.b $30, 5, 0,	0, 8
00017E54 3005 0004 18               		dc.b $30, 5, 0,	4, $18
00017E59 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
00017E5E 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
00017E63 11                         @sonicteam:	dc.b $11		 ; SONIC TEAM PRESENTS
00017E64 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
00017E69 E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
00017E6E E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
00017E73 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
00017E78 E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
00017E7D E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
00017E82 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
00017E87 E805 0004 24               		dc.b $E8, 5, 0,	4, $24
00017E8C E809 0008 34               		dc.b $E8, 9, 0,	8, $34
00017E91 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
00017E96 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
00017E9B 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
00017EA0 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00017EA5 0005 000E 00               		dc.b 0,	5, 0, $E, 0
00017EAA 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
00017EAF 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00017EB4 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
00017EBA 00                         		even
00017EBA 00                         		even
00017EBA                            

00017EBA                            		include	"_incObj\3D Boss - Green Hill (part 1).asm"
00017EBA                            ; ---------------------------------------------------------------------------
00017EBA                            ; Object 3D - Eggman (GHZ)
00017EBA                            ; ---------------------------------------------------------------------------
00017EBA                            

00017EBA                            BossGreenHill:
00017EBA 7000                       		moveq	#0,d0
00017EBC 1028 0024                  		move.b	obRoutine(a0),d0
00017EC0 323B 0000                  		move.w	BGHZ_Index(pc,d0.w),d1
00017EC4 4EFB 1000                  		jmp	BGHZ_Index(pc,d1.w)
00017EC8                            ; ===========================================================================
00017EC8 0000                       BGHZ_Index:	dc.w BGHZ_Main-BGHZ_Index
00017ECA 0000                       		dc.w BGHZ_ShipMain-BGHZ_Index
00017ECC 0000                       		dc.w BGHZ_FaceMain-BGHZ_Index
00017ECE 0000                       		dc.w BGHZ_FlameMain-BGHZ_Index
00017ED0                            

00017ED0 0200                       BGHZ_ObjData:	dc.b 2,	0		; routine counter, animation
00017ED2 0401                       		dc.b 4,	1
00017ED4 0607                       		dc.b 6,	7
00017ED6                            ; ===========================================================================
00017ED6                            

00017ED6                            BGHZ_Main:	; Routine 0
00017ED6 45F9 0001 7ED0             		lea	(BGHZ_ObjData).l,a2
00017EDC 2248                       		movea.l	a0,a1
00017EDE 7202                       		moveq	#2,d1
00017EE0 6000                       		bra.s	BGHZ_LoadBoss
00017EE2                            ; ===========================================================================
00017EE2                            

00017EE2                            BGHZ_Loop:
00017EE2 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
00017EE8 6600                       		bne.s	loc_17772
00017EEA                            

00017EEA                            BGHZ_LoadBoss:
00017EEA 135A 0024                  		move.b	(a2)+,obRoutine(a1)
00017EEE 137C 003D 0000             		move.b	#id_BossGreenHill,0(a1)
00017EF4 3368 0008 0008             		move.w	obX(a0),obX(a1)
00017EFA 3368 000C 000C             		move.w	obY(a0),obY(a1)
00017F00 237C 0000 0000 0004        		move.l	#Map_Eggman,obMap(a1)
00017F08 337C 0400 0002             		move.w	#$400,obGfx(a1)
00017F0E 137C 0004 0001             		move.b	#4,obRender(a1)
00017F14 137C 0020 0019             		move.b	#$20,obActWid(a1)
00017F1A 137C 0003 0018             		move.b	#3,obPriority(a1)
00017F20 135A 001C                  		move.b	(a2)+,obAnim(a1)
00017F24 2348 0034                  		move.l	a0,$34(a1)
00017F28 51C9 FFB8                  		dbf	d1,BGHZ_Loop	; repeat sequence 2 more times
00017F2C                            

00017F2C                            loc_17772:
00017F2C 3168 0008 0030             		move.w	obX(a0),$30(a0)
00017F32 3168 000C 0038             		move.w	obY(a0),$38(a0)
00017F38 117C 000F 0020             		move.b	#$F,obColType(a0)
00017F3E 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
00017F44                            

00017F44                            BGHZ_ShipMain:	; Routine 2
00017F44 7000                       		moveq	#0,d0
00017F46 1028 0025                  		move.b	ob2ndRout(a0),d0
00017F4A 323B 0000                  		move.w	BGHZ_ShipIndex(pc,d0.w),d1
00017F4E 4EBB 1000                  		jsr	BGHZ_ShipIndex(pc,d1.w)
00017F52 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017F58 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00017F5E 1028 0022                  		move.b	obStatus(a0),d0
00017F62 0200 0003                  		andi.b	#3,d0
00017F66 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00017F6C 8128 0001                  		or.b	d0,obRender(a0)
00017F70 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00017F76                            ; ===========================================================================
00017F76 0000                       BGHZ_ShipIndex:	dc.w BGHZ_ShipStart-BGHZ_ShipIndex
00017F78 0000                       		dc.w BGHZ_MakeBall-BGHZ_ShipIndex
00017F7A 0000                       		dc.w BGHZ_ShipMove-BGHZ_ShipIndex
00017F7C 0000                       		dc.w loc_17954-BGHZ_ShipIndex
00017F7E 0000                       		dc.w loc_1797A-BGHZ_ShipIndex
00017F80 0000                       		dc.w loc_179AC-BGHZ_ShipIndex
00017F82 0000                       		dc.w loc_179F6-BGHZ_ShipIndex
00017F84                            ; ===========================================================================
00017F84                            

00017F84                            BGHZ_ShipStart:
00017F84 317C 0100 0012             		move.w	#$100,obVelY(a0) ; move ship down
00017F8A 6100 0000                  		bsr.w	BossMove
00017F8E 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017F94 6600                       		bne.s	loc_177E6
00017F96 317C 0000 0012             		move.w	#0,obVelY(a0)	; stop ship
00017F9C 5428 0025                  		addq.b	#2,ob2ndRout(a0) ; goto next routine
00017FA0                            

00017FA0                            loc_177E6:
00017FA0 1028 003F                  		move.b	$3F(a0),d0
00017FA4 4EB9 0000 29E0             		jsr	(CalcSine).l
00017FAA EC40                       		asr.w	#6,d0
00017FAC D068 0038                  		add.w	$38(a0),d0
00017FB0 3140 000C                  		move.w	d0,obY(a0)
00017FB4 3168 0030 0008             		move.w	$30(a0),obX(a0)
00017FBA 5428 003F                  		addq.b	#2,$3F(a0)
00017FBE 0C28 0008 0025             		cmpi.b	#8,ob2ndRout(a0)
00017FC4 6400                       		bcc.s	locret_1784A
00017FC6 4A28 0022                  		tst.b	obStatus(a0)
00017FCA 6B00                       		bmi.s	loc_1784C
00017FCC 4A28 0020                  		tst.b	obColType(a0)
00017FD0 6600                       		bne.s	locret_1784A
00017FD2 4A28 003E                  		tst.b	$3E(a0)
00017FD6 6600                       		bne.s	BGHZ_ShipFlash
00017FD8 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017FDE 303C 0000                  		move.w	#sfx_HitBoss,d0
00017FE2 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play boss damage sound
00017FE8                            

00017FE8                            BGHZ_ShipFlash:
00017FE8 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1 ; load 2nd pallet, 2nd entry
00017FEC 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017FEE 4A51                       		tst.w	(a1)
00017FF0 6600                       		bne.s	loc_1783C
00017FF2 303C 0EEE                  		move.w	#cWhite,d0	; move 0EEE (white) to d0
00017FF6                            

00017FF6                            loc_1783C:
00017FF6 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00017FF8 5328 003E                  		subq.b	#1,$3E(a0)
00017FFC 6600                       		bne.s	locret_1784A
00017FFE 117C 000F 0020             		move.b	#$F,obColType(a0)
00018004                            

00018004                            locret_1784A:
00018004 4E75                       		rts	
00018006                            ; ===========================================================================
00018006                            

00018006                            loc_1784C:
00018006 7064                       		moveq	#100,d0
00018008 6100 0000                  		bsr.w	AddPoints
0001800C 117C 0008 0025             		move.b	#8,ob2ndRout(a0)
00018012 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018018 4E75                       		rts	
00018018 4E75                       		rts	
0001801A                            

0001801A                            ; ---------------------------------------------------------------------------
0001801A                            ; Defeated boss	subroutine
0001801A                            ; ---------------------------------------------------------------------------
0001801A                            

0001801A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001801A                            

0001801A                            

0001801A                            BossDefeated:
0001801A 1038 FE0F                  		move.b	(v_vbla_byte).w,d0
0001801E 0200 0007                  		andi.b	#7,d0
00018022 6600                       		bne.s	locret_178A2
00018024 4EB9 0000 E128             		jsr	(FindFreeObj).l
0001802A 6600                       		bne.s	locret_178A2
0001802C 137C 003F 0000             		move.b	#id_ExplosionBomb,0(a1)	; load explosion object
00018032 3368 0008 0008             		move.w	obX(a0),obX(a1)
00018038 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001803E 4EB9 0000 29BA             		jsr	(RandomNumber).l
00018044 3200                       		move.w	d0,d1
00018046 7200                       		moveq	#0,d1
00018048 1200                       		move.b	d0,d1
0001804A E409                       		lsr.b	#2,d1
0001804C 0441 0020                  		subi.w	#$20,d1
00018050 D369 0008                  		add.w	d1,obX(a1)
00018054 E048                       		lsr.w	#8,d0
00018056 E608                       		lsr.b	#3,d0
00018058 D169 000C                  		add.w	d0,obY(a1)
0001805C                            

0001805C                            locret_178A2:
0001805C 4E75                       		rts	
0001805E                            ; End of function BossDefeated
0001805E                            

0001805E                            ; ---------------------------------------------------------------------------
0001805E                            ; Subroutine to	move a boss
0001805E                            ; ---------------------------------------------------------------------------
0001805E                            

0001805E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001805E                            

0001805E                            

0001805E                            BossMove:
0001805E 2428 0030                  		move.l	$30(a0),d2
00018062 2628 0038                  		move.l	$38(a0),d3
00018066 3028 0010                  		move.w	obVelX(a0),d0
0001806A 48C0                       		ext.l	d0
0001806C E180                       		asl.l	#8,d0
0001806E D480                       		add.l	d0,d2
00018070 3028 0012                  		move.w	obVelY(a0),d0
00018074 48C0                       		ext.l	d0
00018076 E180                       		asl.l	#8,d0
00018078 D680                       		add.l	d0,d3
0001807A 2142 0030                  		move.l	d2,$30(a0)
0001807E 2143 0038                  		move.l	d3,$38(a0)
00018082 4E75                       		rts	
00018084                            ; End of function BossMove
00018084                            

00018084                            ; ===========================================================================
00018084                            

00018084                            		include	"_incObj\3D Boss - Green Hill (part 2).asm"
00018084                            

00018084                            BGHZ_MakeBall:
00018084 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001808A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
00018090 6100 FFCC                  		bsr.w	BossMove
00018094 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001809A 6600                       		bne.s	loc_17916
0001809C 317C 0000 0010             		move.w	#0,obVelX(a0)
000180A2 317C 0000 0012             		move.w	#0,obVelY(a0)
000180A8 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000180AC 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
000180B2 6600                       		bne.s	loc_17910
000180B4 137C 0048 0000             		move.b	#id_BossBall,0(a1) ; load swinging ball object
000180BA 3368 0030 0008             		move.w	$30(a0),obX(a1)
000180C0 3368 0038 000C             		move.w	$38(a0),obY(a1)
000180C6 2348 0034                  		move.l	a0,$34(a1)
000180CA                            

000180CA                            loc_17910:
000180CA 317C 0077 003C             		move.w	#$77,$3C(a0)
000180D0                            

000180D0                            loc_17916:
000180D0 6000 FECE                  		bra.w	loc_177E6
000180D4                            ; ===========================================================================
000180D4                            

000180D4                            BGHZ_ShipMove:
000180D4 5368 003C                  		subq.w	#1,$3C(a0)
000180D8 6A00                       		bpl.s	BGHZ_Reverse
000180DA 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000180DE 317C 003F 003C             		move.w	#$3F,$3C(a0)
000180E4 317C 0100 0010             		move.w	#$100,obVelX(a0) ; move the ship sideways
000180EA 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000180F0 6600                       		bne.s	BGHZ_Reverse
000180F2 317C 007F 003C             		move.w	#$7F,$3C(a0)
000180F8 317C 0040 0010             		move.w	#$40,obVelX(a0)
000180FE                            

000180FE                            BGHZ_Reverse:
000180FE 0828 0000 0022             		btst	#0,obStatus(a0)
00018104 6600                       		bne.s	loc_17950
00018106 4468 0010                  		neg.w	obVelX(a0)	; reverse direction of the ship
0001810A                            

0001810A                            loc_17950:
0001810A 6000 FE94                  		bra.w	loc_177E6
0001810E                            ; ===========================================================================
0001810E                            

0001810E                            loc_17954:
0001810E 5368 003C                  		subq.w	#1,$3C(a0)
00018112 6B00                       		bmi.s	loc_17960
00018114 6100 FF48                  		bsr.w	BossMove
00018118 6000                       		bra.s	loc_17976
0001811A                            ; ===========================================================================
0001811A                            

0001811A                            loc_17960:
0001811A 0868 0000 0022             		bchg	#0,obStatus(a0)
00018120 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018126 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001812A 317C 0000 0010             		move.w	#0,obVelX(a0)
00018130                            

00018130                            loc_17976:
00018130 6000 FE6E                  		bra.w	loc_177E6
00018134                            ; ===========================================================================
00018134                            

00018134                            loc_1797A:
00018134 5368 003C                  		subq.w	#1,$3C(a0)
00018138 6B00                       		bmi.s	loc_17984
0001813A 6000 FEDE                  		bra.w	BossDefeated
0001813E                            ; ===========================================================================
0001813E                            

0001813E                            loc_17984:
0001813E 08E8 0000 0022             		bset	#0,obStatus(a0)
00018144 08A8 0007 0022             		bclr	#7,obStatus(a0)
0001814A 4268 0010                  		clr.w	obVelX(a0)
0001814E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00018152 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018158 4A38 F7A7                  		tst.b	(v_bossstatus).w
0001815C 6600                       		bne.s	locret_179AA
0001815E 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
00018164                            

00018164                            locret_179AA:
00018164 4E75                       		rts	
00018166                            ; ===========================================================================
00018166                            

00018166                            loc_179AC:
00018166 5268 003C                  		addq.w	#1,$3C(a0)
0001816A 6700                       		beq.s	loc_179BC
0001816C 6A00                       		bpl.s	loc_179C2
0001816E 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00018174 6000                       		bra.s	loc_179EE
00018176                            ; ===========================================================================
00018176                            

00018176                            loc_179BC:
00018176 4268 0012                  		clr.w	obVelY(a0)
0001817A 6000                       		bra.s	loc_179EE
0001817C                            ; ===========================================================================
0001817C                            

0001817C                            loc_179C2:
0001817C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018182 6500                       		bcs.s	loc_179DA
00018184 6700                       		beq.s	loc_179E0
00018186 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001818C 6500                       		bcs.s	loc_179EE
0001818E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00018192 6000                       		bra.s	loc_179EE
00018194                            ; ===========================================================================
00018194                            

00018194                            loc_179DA:
00018194 5168 0012                  		subq.w	#8,obVelY(a0)
00018198 6000                       		bra.s	loc_179EE
0001819A                            ; ===========================================================================
0001819A                            

0001819A                            loc_179E0:
0001819A 4268 0012                  		clr.w	obVelY(a0)
0001819E 303C 0000                  		move.w	#bgm_GHZ,d0
000181A2 4EB9 0000 139C             		jsr	(PlaySound).l		; play GHZ music
000181A8                            

000181A8                            loc_179EE:
000181A8 6100 FEB4                  		bsr.w	BossMove
000181AC 6000 FDF2                  		bra.w	loc_177E6
000181B0                            ; ===========================================================================
000181B0                            

000181B0                            loc_179F6:
000181B0 317C 0400 0010             		move.w	#$400,obVelX(a0)
000181B6 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
000181BC 0C78 2AC0 F72A             		cmpi.w	#$2AC0,(v_limitright2).w
000181C2 6700                       		beq.s	loc_17A10
000181C4 5478 F72A                  		addq.w	#2,(v_limitright2).w
000181C8 6000                       		bra.s	loc_17A16
000181CA                            ; ===========================================================================
000181CA                            

000181CA                            loc_17A10:
000181CA 4A28 0001                  		tst.b	obRender(a0)
000181CE 6A00                       		bpl.s	BGHZ_ShipDel
000181D0                            

000181D0                            loc_17A16:
000181D0 6100 FE8C                  		bsr.w	BossMove
000181D4 6000 FDCA                  		bra.w	loc_177E6
000181D8                            ; ===========================================================================
000181D8                            

000181D8                            BGHZ_ShipDel:
000181D8 4EF9 0000 DCDC             		jmp	(DeleteObject).l
000181DE                            ; ===========================================================================
000181DE                            

000181DE                            BGHZ_FaceMain:	; Routine 4
000181DE 7000                       		moveq	#0,d0
000181E0 7201                       		moveq	#1,d1
000181E2 2268 0034                  		movea.l	$34(a0),a1
000181E6 1029 0025                  		move.b	ob2ndRout(a1),d0
000181EA 5900                       		subq.b	#4,d0
000181EC 6600                       		bne.s	loc_17A3E
000181EE 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000181F4 6600                       		bne.s	loc_17A46
000181F6 7204                       		moveq	#4,d1
000181F8                            

000181F8                            loc_17A3E:
000181F8 5D00                       		subq.b	#6,d0
000181FA 6B00                       		bmi.s	loc_17A46
000181FC 720A                       		moveq	#$A,d1
000181FE 6000                       		bra.s	loc_17A5A
00018200                            ; ===========================================================================
00018200                            

00018200                            loc_17A46:
00018200 4A29 0020                  		tst.b	obColType(a1)
00018204 6600                       		bne.s	loc_17A50
00018206 7205                       		moveq	#5,d1
00018208 6000                       		bra.s	loc_17A5A
0001820A                            ; ===========================================================================
0001820A                            

0001820A                            loc_17A50:
0001820A 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
00018210 6500                       		bcs.s	loc_17A5A
00018212 7204                       		moveq	#4,d1
00018214                            

00018214                            loc_17A5A:
00018214 1141 001C                  		move.b	d1,obAnim(a0)
00018218 5500                       		subq.b	#2,d0
0001821A 6600                       		bne.s	BGHZ_FaceDisp
0001821C 117C 0006 001C             		move.b	#6,obAnim(a0)
00018222 4A28 0001                  		tst.b	obRender(a0)
00018226 6A00                       		bpl.s	BGHZ_FaceDel
00018228                            

00018228                            BGHZ_FaceDisp:
00018228 6000                       		bra.s	BGHZ_Display
0001822A                            ; ===========================================================================
0001822A                            

0001822A                            BGHZ_FaceDel:
0001822A 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00018230                            ; ===========================================================================
00018230                            

00018230                            BGHZ_FlameMain:	; Routine 6
00018230 117C 0007 001C             		move.b	#7,obAnim(a0)
00018236 2268 0034                  		movea.l	$34(a0),a1
0001823A 0C29 000C 0025             		cmpi.b	#$C,ob2ndRout(a1)
00018240 6600                       		bne.s	loc_17A96
00018242 117C 000B 001C             		move.b	#$B,obAnim(a0)
00018248 4A28 0001                  		tst.b	obRender(a0)
0001824C 6A00                       		bpl.s	BGHZ_FlameDel
0001824E 6000                       		bra.s	BGHZ_FlameDisp
00018250                            ; ===========================================================================
00018250                            

00018250                            loc_17A96:
00018250 3029 0010                  		move.w	obVelX(a1),d0
00018254 6700                       		beq.s	BGHZ_FlameDisp
00018256 117C 0008 001C             		move.b	#8,obAnim(a0)
0001825C                            

0001825C                            BGHZ_FlameDisp:
0001825C 6000                       		bra.s	BGHZ_Display
0001825E                            ; ===========================================================================
0001825E                            

0001825E                            BGHZ_FlameDel:
0001825E 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00018264                            ; ===========================================================================
00018264                            

00018264                            BGHZ_Display:
00018264 2268 0034                  		movea.l	$34(a0),a1
00018268 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001826E 3169 000C 000C             		move.w	obY(a1),obY(a0)
00018274 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001827A 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018280 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00018286 1028 0022                  		move.b	obStatus(a0),d0
0001828A 0200 0003                  		andi.b	#3,d0
0001828E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00018294 8128 0001                  		or.b	d0,obRender(a0)
00018298 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00018298 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001829E                            		include	"_incObj\48 Eggman's Swinging Ball.asm"
0001829E                            ; ---------------------------------------------------------------------------
0001829E                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001829E                            ; ---------------------------------------------------------------------------
0001829E                            

0001829E                            BossBall:
0001829E 7000                       		moveq	#0,d0
000182A0 1028 0024                  		move.b	obRoutine(a0),d0
000182A4 323B 0000                  		move.w	GBall_Index(pc,d0.w),d1
000182A8 4EFB 1000                  		jmp	GBall_Index(pc,d1.w)
000182AC                            ; ===========================================================================
000182AC 0000                       GBall_Index:	dc.w GBall_Main-GBall_Index
000182AE 0000                       		dc.w GBall_Base-GBall_Index
000182B0 0000                       		dc.w GBall_Display2-GBall_Index
000182B2 0000                       		dc.w loc_17C68-GBall_Index
000182B4 0000                       		dc.w GBall_ChkVanish-GBall_Index
000182B6                            ; ===========================================================================
000182B6                            

000182B6                            GBall_Main:	; Routine 0
000182B6 5428 0024                  		addq.b	#2,obRoutine(a0)
000182BA 317C 4080 0026             		move.w	#$4080,obAngle(a0)
000182C0 317C FE00 003E             		move.w	#-$200,$3E(a0)
000182C6 217C 0000 0000 0004        		move.l	#Map_BossItems,obMap(a0)
000182CE 317C 046C 0002             		move.w	#$46C,obGfx(a0)
000182D4 45E8 0028                  		lea	obSubtype(a0),a2
000182D8 14FC 0000                  		move.b	#0,(a2)+
000182DC 7205                       		moveq	#5,d1
000182DE 2248                       		movea.l	a0,a1
000182E0 6000                       		bra.s	loc_17B60
000182E2                            ; ===========================================================================
000182E2                            

000182E2                            GBall_MakeLinks:
000182E2 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
000182E8 6600                       		bne.s	GBall_MakeBall
000182EA 3368 0008 0008             		move.w	obX(a0),obX(a1)
000182F0 3368 000C 000C             		move.w	obY(a0),obY(a1)
000182F6 137C 0048 0000             		move.b	#id_BossBall,0(a1) ; load chain link object
000182FC 137C 0006 0024             		move.b	#6,obRoutine(a1)
00018302 237C 0000 82D4 0004        		move.l	#Map_Swing_GHZ,obMap(a1)
0001830A 337C 0380 0002             		move.w	#$380,obGfx(a1)
00018310 137C 0001 001A             		move.b	#1,obFrame(a1)
00018316 5228 0028                  		addq.b	#1,obSubtype(a0)
0001831A                            

0001831A                            loc_17B60:
0001831A 3A09                       		move.w	a1,d5
0001831C 0445 D000                  		subi.w	#v_objspace&$FFFF,d5
00018320 EC4D                       		lsr.w	#6,d5
00018322 0245 007F                  		andi.w	#$7F,d5
00018326 14C5                       		move.b	d5,(a2)+
00018328 137C 0004 0001             		move.b	#4,obRender(a1)
0001832E 137C 0008 0019             		move.b	#8,obActWid(a1)
00018334 137C 0006 0018             		move.b	#6,obPriority(a1)
0001833A 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018340 51C9 FFA0                  		dbf	d1,GBall_MakeLinks ; repeat sequence 5 more times
00018344                            

00018344                            GBall_MakeBall:
00018344 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001834A 237C 0000 8836 0004        		move.l	#Map_GBall,obMap(a1) ; load different mappings for final link
00018352 337C 43AA 0002             		move.w	#$43AA,obGfx(a1) ; use different graphics
00018358 137C 0001 001A             		move.b	#1,obFrame(a1)
0001835E 137C 0005 0018             		move.b	#5,obPriority(a1)
00018364 137C 0081 0020             		move.b	#$81,obColType(a1) ; make object hurt Sonic
0001836A 4E75                       		rts	
0001836C                            ; ===========================================================================
0001836C                            

0001836C 0010 2030 4060             GBall_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018372                            

00018372                            ; ===========================================================================
00018372                            

00018372                            GBall_Base:	; Routine 2
00018372 47F9 0001 836C             		lea	(GBall_PosData).l,a3
00018378 45E8 0028                  		lea	obSubtype(a0),a2
0001837C 7C00                       		moveq	#0,d6
0001837E 1C1A                       		move.b	(a2)+,d6
00018380                            

00018380                            loc_17BC6:
00018380 7800                       		moveq	#0,d4
00018382 181A                       		move.b	(a2)+,d4
00018384 ED4C                       		lsl.w	#6,d4
00018386 0684 00FF D000             		addi.l	#v_objspace&$FFFFFF,d4
0001838C 2244                       		movea.l	d4,a1
0001838E 101B                       		move.b	(a3)+,d0
00018390 B029 003C                  		cmp.b	$3C(a1),d0
00018394 6700                       		beq.s	loc_17BE0
00018396 5229 003C                  		addq.b	#1,$3C(a1)
0001839A                            

0001839A                            loc_17BE0:
0001839A 51CE FFE4                  		dbf	d6,loc_17BC6
0001839E                            

0001839E B029 003C                  		cmp.b	$3C(a1),d0
000183A2 6600                       		bne.s	loc_17BFA
000183A4 2268 0034                  		movea.l	$34(a0),a1
000183A8 0C29 0006 0025             		cmpi.b	#6,ob2ndRout(a1)
000183AE 6600                       		bne.s	loc_17BFA
000183B0 5428 0024                  		addq.b	#2,obRoutine(a0)
000183B4                            

000183B4                            loc_17BFA:
000183B4 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000183BA 6700                       		beq.s	GBall_Display
000183BC 5268 0032                  		addq.w	#1,$32(a0)
000183C0                            

000183C0                            GBall_Display:
000183C0 6100 0000                  		bsr.w	sub_17C2A
000183C4 1028 0026                  		move.b	obAngle(a0),d0
000183C8 4EB9 0000 8246             		jsr	(Swing_Move2).l
000183CE 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
000183D4                            ; ===========================================================================
000183D4                            

000183D4                            GBall_Display2:	; Routine 4
000183D4 6100 0000                  		bsr.w	sub_17C2A
000183D8 4EB9 0000 8206             		jsr	(Obj48_Move).l
000183DE 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
000183E4                            

000183E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000183E4                            

000183E4                            

000183E4                            sub_17C2A:
000183E4 2268 0034                  		movea.l	$34(a0),a1
000183E8 0628 0020 001B             		addi.b	#$20,obAniFrame(a0)
000183EE 6400                       		bcc.s	loc_17C3C
000183F0 0868 0000 001A             		bchg	#0,obFrame(a0)
000183F6                            

000183F6                            loc_17C3C:
000183F6 3169 0008 003A             		move.w	obX(a1),$3A(a0)
000183FC 3029 000C                  		move.w	obY(a1),d0
00018400 D068 0032                  		add.w	$32(a0),d0
00018404 3140 0038                  		move.w	d0,$38(a0)
00018408 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001840E 4A29 0022                  		tst.b	obStatus(a1)
00018412 6A00                       		bpl.s	locret_17C66
00018414 117C 003F 0000             		move.b	#id_ExplosionBomb,0(a0)
0001841A 117C 0000 0024             		move.b	#0,obRoutine(a0)
00018420                            

00018420                            locret_17C66:
00018420 4E75                       		rts	
00018422                            ; End of function sub_17C2A
00018422                            

00018422                            ; ===========================================================================
00018422                            

00018422                            loc_17C68:	; Routine 6
00018422 2268 0034                  		movea.l	$34(a0),a1
00018426 4A29 0022                  		tst.b	obStatus(a1)
0001842A 6A00                       		bpl.s	GBall_Display3
0001842C 117C 003F 0000             		move.b	#id_ExplosionBomb,0(a0)
00018432 117C 0000 0024             		move.b	#0,obRoutine(a0)
00018438                            

00018438                            GBall_Display3:
00018438 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001843E                            ; ===========================================================================
0001843E                            

0001843E                            GBall_ChkVanish:; Routine 8
0001843E 7000                       		moveq	#0,d0
00018440 4A28 001A                  		tst.b	obFrame(a0)
00018444 6600                       		bne.s	GBall_Vanish
00018446 5200                       		addq.b	#1,d0
00018448                            

00018448                            GBall_Vanish:
00018448 1140 001A                  		move.b	d0,obFrame(a0)
0001844C 2268 0034                  		movea.l	$34(a0),a1
00018450 4A29 0022                  		tst.b	obStatus(a1)
00018454 6A00                       		bpl.s	GBall_Display4
00018456 117C 0000 0020             		move.b	#0,obColType(a0)
0001845C 6100 FBBC                  		bsr.w	BossDefeated
00018460 5328 003C                  		subq.b	#1,$3C(a0)
00018464 6A00                       		bpl.s	GBall_Display4
00018466 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001846A 117C 0000 0024             		move.b	#0,obRoutine(a0)
00018470                            

00018470                            GBall_Display4:
00018470 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00018470 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00018476                            		include	"_anim\Eggman.asm"
00018476                            ; ---------------------------------------------------------------------------
00018476                            ; Animation script - Eggman (bosses)
00018476                            ; ---------------------------------------------------------------------------
00018476 0000                       Ani_Eggman:	dc.w @ship-Ani_Eggman
00018478 0000                       		dc.w @facenormal1-Ani_Eggman
0001847A 0000                       		dc.w @facenormal2-Ani_Eggman
0001847C 0000                       		dc.w @facenormal3-Ani_Eggman
0001847E 0000                       		dc.w @facelaugh-Ani_Eggman
00018480 0000                       		dc.w @facehit-Ani_Eggman
00018482 0000                       		dc.w @facepanic-Ani_Eggman
00018484 0000                       		dc.w @blank-Ani_Eggman
00018486 0000                       		dc.w @flame1-Ani_Eggman
00018488 0000                       		dc.w @flame2-Ani_Eggman
0001848A 0000                       		dc.w @facedefeat-Ani_Eggman
0001848C 0000                       		dc.w @escapeflame-Ani_Eggman
0001848E 0F00 FF                    @ship:		dc.b $F, 0, afEnd
00018492 00                         		even
00018492 0501 02FF                  @facenormal1:	dc.b 5,	1, 2, afEnd
00018496                            		even
00018496 0301 02FF                  @facenormal2:	dc.b 3,	1, 2, afEnd
0001849A                            		even
0001849A 0101 02FF                  @facenormal3:	dc.b 1,	1, 2, afEnd
0001849E                            		even
0001849E 0403 04FF                  @facelaugh:	dc.b 4,	3, 4, afEnd
000184A2                            		even
000184A2 1F05 01FF                  @facehit:	dc.b $1F, 5, 1,	afEnd
000184A6                            		even
000184A6 0306 01FF                  @facepanic:	dc.b 3,	6, 1, afEnd
000184AA                            		even
000184AA 0F0A FF                    @blank:		dc.b $F, $A, afEnd
000184AE 00                         		even
000184AE 0308 09FF                  @flame1:	dc.b 3,	8, 9, afEnd
000184B2                            		even
000184B2 0108 09FF                  @flame2:	dc.b 1,	8, 9, afEnd
000184B6                            		even
000184B6 0F07 FF                    @facedefeat:	dc.b $F, 7, afEnd
000184BA 00                         		even
000184BA 0209 080B 0C0B 0C09 08FE+  @escapeflame:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, afBack, 2
000184C6 00                         		even
000184C6 00                         		even
000184C6                            Map_Eggman:	include	"_maps\Eggman.asm"
000184C6                            ; ---------------------------------------------------------------------------
000184C6                            ; Sprite mappings - Eggman (boss levels)
000184C6                            ; ---------------------------------------------------------------------------
000184C6                            Map_Eggman_internal:
000184C6 0000                       		dc.w @ship-Map_Eggman_internal
000184C8 0000                       		dc.w @facenormal1-Map_Eggman_internal
000184CA 0000                       		dc.w @facenormal2-Map_Eggman_internal
000184CC 0000                       		dc.w @facelaugh1-Map_Eggman_internal
000184CE 0000                       		dc.w @facelaugh2-Map_Eggman_internal
000184D0 0000                       		dc.w @facehit-Map_Eggman_internal
000184D2 0000                       		dc.w @facepanic-Map_Eggman_internal
000184D4 0000                       		dc.w @facedefeat-Map_Eggman_internal
000184D6 0000                       		dc.w @flame1-Map_Eggman_internal
000184D8 0000                       		dc.w @flame2-Map_Eggman_internal
000184DA 0000                       		dc.w @blank-Map_Eggman_internal
000184DC 0000                       		dc.w @escapeflame1-Map_Eggman_internal
000184DE 0000                       		dc.w @escapeflame2-Map_Eggman_internal
000184E0 06                         @ship:		dc.b 6
000184E1 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
000184E6 EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
000184EB FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
000184F0 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
000184F5 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
000184FA 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
000184FF 02                         @facenormal1:	dc.b 2
00018500 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00018505 EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
0001850A 02                         @facenormal2:	dc.b 2
0001850B E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00018510 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00018515 03                         @facelaugh1:	dc.b 3
00018516 E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
0001851B EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00018520 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00018525 03                         @facelaugh2:	dc.b 3
00018526 E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
0001852B EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00018530 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00018535 03                         @facehit:	dc.b 3
00018536 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
0001853B EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00018540 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00018545 03                         @facepanic:	dc.b 3
00018546 E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
0001854B E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00018550 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00018555 04                         @facedefeat:	dc.b 4
00018556 E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
0001855B E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00018560 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00018565 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
0001856A 01                         @flame1:	dc.b 1
0001856B 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00018570 01                         @flame2:	dc.b 1
00018571 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00018576 00                         @blank:		dc.b 0
00018577 02                         @escapeflame1:	dc.b 2
00018578 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
0001857D 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00018582 02                         @escapeflame2:	dc.b 2
00018583 F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00018588 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
0001858E 00                         		even
0001858E 00                         		even
0001858E                            Map_BossItems:	include	"_maps\Boss Items.asm"
0001858E                            ; ---------------------------------------------------------------------------
0001858E                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001858E                            ; ---------------------------------------------------------------------------
0001858E                            Map_BossItems_internal:
0001858E 0000                       		dc.w @chainanchor1-Map_BossItems_internal
00018590 0000                       		dc.w @chainanchor2-Map_BossItems_internal
00018592 0000                       		dc.w @cross-Map_BossItems_internal
00018594 0000                       		dc.w @widepipe-Map_BossItems_internal
00018596 0000                       		dc.w @pipe-Map_BossItems_internal
00018598 0000                       		dc.w @spike-Map_BossItems_internal
0001859A 0000                       		dc.w @legmask-Map_BossItems_internal
0001859C 0000                       		dc.w @legs-Map_BossItems_internal
0001859E 01                         @chainanchor1:	dc.b 1
0001859F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8	; GHZ boss
000185A4 02                         @chainanchor2:	dc.b 2
000185A5 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; GHZ boss
000185AA F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000185B0 00                         		even
000185B0 01                         @cross:		dc.b 1
000185B1 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; unknown
000185B6 01                         @widepipe:	dc.b 1
000185B7 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4	; SLZ boss
000185BC 01                         @pipe:		dc.b 1
000185BD 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8	; MZ boss
000185C2 04                         @spike:		dc.b 4
000185C3 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8 ; SYZ boss
000185C8 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000185CD F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000185D2 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000185D8 00                         		even
000185D8 02                         @legmask:	dc.b 2
000185D9 0005 0017 00               		dc.b 0,	5, 0, $17, 0	; FZ post-boss: sprite covering part of legs
000185DE 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000185E4 00                         		even
000185E4 02                         @legs:		dc.b 2
000185E5 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0	; FZ post-boss
000185EA 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000185F0 00                         		even
000185F0 00                         		even
000185F0                            		include	"_incObj\77 Boss - Labyrinth.asm"
000185F0                            ; ---------------------------------------------------------------------------
000185F0                            ; Object 77 - Eggman (LZ)
000185F0                            ; ---------------------------------------------------------------------------
000185F0                            

000185F0                            BossLabyrinth:
000185F0 7000                       		moveq	#0,d0
000185F2 1028 0024                  		move.b	obRoutine(a0),d0
000185F6 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
000185FA 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
000185FE                            ; ===========================================================================
000185FE 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00018600 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00018602 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00018604 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00018606                            

00018606 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00018608 0401                       		dc.b 4,	1
0001860A 0607                       		dc.b 6,	7
0001860C                            ; ===========================================================================
0001860C                            

0001860C                            Obj77_Main:	; Routine 0
0001860C 317C 1E10 0008             		move.w	#$1E10,obX(a0)
00018612 317C 05C0 000C             		move.w	#$5C0,obY(a0)
00018618 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001861E 3168 000C 0038             		move.w	obY(a0),$38(a0)
00018624 117C 000F 0020             		move.b	#$F,obColType(a0)
0001862A 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
00018630 117C 0004 0018             		move.b	#4,obPriority(a0)
00018636 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
0001863A 2248                       		movea.l	a0,a1
0001863C 7202                       		moveq	#2,d1
0001863E 6000                       		bra.s	Obj77_LoadBoss
00018640                            ; ===========================================================================
00018640                            

00018640                            Obj77_Loop:
00018640 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
00018646 6600                       		bne.s	Obj77_ShipMain
00018648 137C 0077 0000             		move.b	#id_BossLabyrinth,0(a1)
0001864E 3368 0008 0008             		move.w	obX(a0),obX(a1)
00018654 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001865A                            

0001865A                            Obj77_LoadBoss:
0001865A 08A8 0000 0022             		bclr	#0,obStatus(a0)
00018660 4229 0025                  		clr.b	ob2ndRout(a1)
00018664 135A 0024                  		move.b	(a2)+,obRoutine(a1)
00018668 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001866C 1368 0018 0018             		move.b	obPriority(a0),obPriority(a1)
00018672 237C 0001 84C6 0004        		move.l	#Map_Eggman,obMap(a1)
0001867A 337C 0400 0002             		move.w	#$400,obGfx(a1)
00018680 137C 0004 0001             		move.b	#4,obRender(a1)
00018686 137C 0020 0019             		move.b	#$20,obActWid(a1)
0001868C 2348 0034                  		move.l	a0,$34(a1)
00018690 51C9 FFAE                  		dbf	d1,Obj77_Loop
00018694                            

00018694                            Obj77_ShipMain:	; Routine 2
00018694 43F8 D000                  		lea	(v_player).w,a1
00018698 7000                       		moveq	#0,d0
0001869A 1028 0025                  		move.b	ob2ndRout(a0),d0
0001869E 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
000186A2 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
000186A6 43F9 0001 8476             		lea	(Ani_Eggman).l,a1
000186AC 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
000186B2 7003                       		moveq	#3,d0
000186B4 C028 0022                  		and.b	obStatus(a0),d0
000186B8 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000186BE 8128 0001                  		or.b	d0,obRender(a0)
000186C2 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
000186C8                            ; ===========================================================================
000186C8 0000 0000                  Obj77_ShipIndex: dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
000186CC 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
000186D0 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
000186D4 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
000186D8                            ; ===========================================================================
000186D8                            

000186D8                            loc_17F1E:
000186D8 3029 0008                  		move.w	obX(a1),d0
000186DC 0C40 1DA0                  		cmpi.w	#$1DA0,d0
000186E0 6500                       		bcs.s	loc_17F38
000186E2 317C FE80 0012             		move.w	#-$180,obVelY(a0)
000186E8 317C 0060 0010             		move.w	#$60,obVelX(a0)
000186EE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000186F2                            

000186F2                            loc_17F38:
000186F2 6100 F96A                  		bsr.w	BossMove
000186F6 3168 0038 000C             		move.w	$38(a0),obY(a0)
000186FC 3168 0030 0008             		move.w	$30(a0),obX(a0)
00018702                            

00018702                            loc_17F48:
00018702 4A28 003D                  		tst.b	standonobject(a0)
00018706 6600                       		bne.s	loc_17F8E
00018708 4A28 0022                  		tst.b	obStatus(a0)
0001870C 6B00                       		bmi.s	loc_17F92
0001870E 4A28 0020                  		tst.b	obColType(a0)
00018712 6600                       		bne.s	locret_17F8C
00018714 4A28 003E                  		tst.b	$3E(a0)
00018718 6600                       		bne.s	loc_17F70
0001871A 117C 0020 003E             		move.b	#$20,$3E(a0)
00018720 303C 0000                  		move.w	#sfx_HitBoss,d0
00018724 4EB9 0000 13A2             		jsr	(PlaySound_Special).l
0001872A                            

0001872A                            loc_17F70:
0001872A 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
0001872E 7000                       		moveq	#0,d0
00018730 4A51                       		tst.w	(a1)
00018732 6600                       		bne.s	loc_17F7E
00018734 303C 0EEE                  		move.w	#cWhite,d0
00018738                            

00018738                            loc_17F7E:
00018738 3280                       		move.w	d0,(a1)
0001873A 5328 003E                  		subq.b	#1,$3E(a0)
0001873E 6600                       		bne.s	locret_17F8C
00018740 117C 000F 0020             		move.b	#$F,obColType(a0)
00018746                            

00018746                            locret_17F8C:
00018746 4E75                       		rts	
00018748                            ; ===========================================================================
00018748                            

00018748                            loc_17F8E:
00018748 6000 F8D0                  		bra.w	BossDefeated
0001874C                            ; ===========================================================================
0001874C                            

0001874C                            loc_17F92:
0001874C 7064                       		moveq	#100,d0
0001874E 6100 0000                  		bsr.w	AddPoints
00018752 117C 00FF 003D             		move.b	#-1,standonobject(a0)
00018758 4E75                       		rts	
0001875A                            ; ===========================================================================
0001875A                            

0001875A                            loc_17FA0:
0001875A 70FE                       		moveq	#-2,d0
0001875C 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00018762 6500                       		bcs.s	loc_17FB6
00018764 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001876A 4268 0010                  		clr.w	obVelX(a0)
0001876E 5240                       		addq.w	#1,d0
00018770                            

00018770                            loc_17FB6:
00018770 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00018776 6E00                       		bgt.s	loc_17FCA
00018778 317C 0500 0038             		move.w	#$500,$38(a0)
0001877E 4268 0012                  		clr.w	obVelY(a0)
00018782 5240                       		addq.w	#1,d0
00018784                            

00018784                            loc_17FCA:
00018784 6600                       		bne.s	loc_17FDC
00018786 317C 0140 0010             		move.w	#$140,obVelX(a0)
0001878C 317C FE00 0012             		move.w	#-$200,obVelY(a0)
00018792 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00018796                            

00018796                            loc_17FDC:
00018796 6000 FF5A                  		bra.w	loc_17F38
0001879A                            ; ===========================================================================
0001879A                            

0001879A                            loc_17FE0:
0001879A 70FE                       		moveq	#-2,d0
0001879C 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
000187A2 6500                       		bcs.s	loc_17FF6
000187A4 317C 1E70 0030             		move.w	#$1E70,$30(a0)
000187AA 4268 0010                  		clr.w	obVelX(a0)
000187AE 5240                       		addq.w	#1,d0
000187B0                            

000187B0                            loc_17FF6:
000187B0 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
000187B6 6E00                       		bgt.s	loc_1800A
000187B8 317C 04C0 0038             		move.w	#$4C0,$38(a0)
000187BE 4268 0012                  		clr.w	obVelY(a0)
000187C2 5240                       		addq.w	#1,d0
000187C4                            

000187C4                            loc_1800A:
000187C4 6600                       		bne.s	loc_1801A
000187C6 317C FE80 0012             		move.w	#-$180,obVelY(a0)
000187CC 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000187D0 4228 003F                  		clr.b	$3F(a0)
000187D4                            

000187D4                            loc_1801A:
000187D4 6000 FF1C                  		bra.w	loc_17F38
000187D8                            ; ===========================================================================
000187D8                            

000187D8                            loc_1801E:
000187D8 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
000187DE 6E00                       		bgt.s	loc_1804E
000187E0 317C 0100 0038             		move.w	#$100,$38(a0)
000187E6 317C 0140 0010             		move.w	#$140,obVelX(a0)
000187EC 317C FF80 0012             		move.w	#-$80,obVelY(a0)
000187F2 4A28 003D                  		tst.b	standonobject(a0)
000187F6 6700                       		beq.s	loc_18046
000187F8 E1E8 0010                  		asl	obVelX(a0)
000187FC E1E8 0012                  		asl	obVelY(a0)
00018800                            

00018800                            loc_18046:
00018800 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00018804 6000 FEEC                  		bra.w	loc_17F38
00018808                            ; ===========================================================================
00018808                            

00018808                            loc_1804E:
00018808 08E8 0000 0022             		bset	#0,obStatus(a0)
0001880E 5428 003F                  		addq.b	#2,$3F(a0)
00018812 1028 003F                  		move.b	$3F(a0),d0
00018816 4EB9 0000 29E0             		jsr	(CalcSine).l
0001881C 4A41                       		tst.w	d1
0001881E 6A00                       		bpl.s	loc_1806C
00018820 08A8 0000 0022             		bclr	#0,obStatus(a0)
00018826                            

00018826                            loc_1806C:
00018826 E840                       		asr.w	#4,d0
00018828 4840                       		swap	d0
0001882A 4240                       		clr.w	d0
0001882C D0A8 0030                  		add.l	$30(a0),d0
00018830 4840                       		swap	d0
00018832 3140 0008                  		move.w	d0,obX(a0)
00018836 3028 0012                  		move.w	obVelY(a0),d0
0001883A 3238 D00C                  		move.w	(v_player+obY).w,d1
0001883E 9268 000C                  		sub.w	obY(a0),d1
00018842 6500                       		bcs.s	loc_180A2
00018844 0441 0048                  		subi.w	#$48,d1
00018848 6500                       		bcs.s	loc_180A2
0001884A E240                       		asr.w	#1,d0
0001884C 0441 0028                  		subi.w	#$28,d1
00018850 6500                       		bcs.s	loc_180A2
00018852 E240                       		asr.w	#1,d0
00018854 0441 0028                  		subi.w	#$28,d1
00018858 6500                       		bcs.s	loc_180A2
0001885A 7000                       		moveq	#0,d0
0001885C                            

0001885C                            loc_180A2:
0001885C 48C0                       		ext.l	d0
0001885E E180                       		asl.l	#8,d0
00018860 4A28 003D                  		tst.b	standonobject(a0)
00018864 6700                       		beq.s	loc_180AE
00018866 D080                       		add.l	d0,d0
00018868                            

00018868                            loc_180AE:
00018868 D1A8 0038                  		add.l	d0,$38(a0)
0001886C 3168 0038 000C             		move.w	$38(a0),obY(a0)
00018872 6000 FE8E                  		bra.w	loc_17F48
00018876                            ; ===========================================================================
00018876                            

00018876                            loc_180BC:
00018876 70FE                       		moveq	#-2,d0
00018878 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
0001887E 6500                       		bcs.s	loc_180D2
00018880 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00018886 4268 0010                  		clr.w	obVelX(a0)
0001888A 5240                       		addq.w	#1,d0
0001888C                            

0001888C                            loc_180D2:
0001888C 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00018892 6E00                       		bgt.s	loc_180E6
00018894 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001889A 4268 0012                  		clr.w	obVelY(a0)
0001889E 5240                       		addq.w	#1,d0
000188A0                            

000188A0                            loc_180E6:
000188A0 6600                       		bne.s	loc_180F2
000188A2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000188A6 08A8 0000 0022             		bclr	#0,obStatus(a0)
000188AC                            

000188AC                            loc_180F2:
000188AC 6000 FE44                  		bra.w	loc_17F38
000188B0                            ; ===========================================================================
000188B0                            

000188B0                            loc_180F6:
000188B0 4A28 003D                  		tst.b	standonobject(a0)
000188B4 6600                       		bne.s	loc_18112
000188B6 0C69 1EC8 0008             		cmpi.w	#$1EC8,obX(a1)
000188BC 6D00                       		blt.s	loc_18126
000188BE 0C69 00F0 000C             		cmpi.w	#$F0,obY(a1)
000188C4 6E00                       		bgt.s	loc_18126
000188C6 117C 0032 003C             		move.b	#$32,$3C(a0)
000188CC                            

000188CC                            loc_18112:
000188CC 303C 0000                  		move.w	#bgm_LZ,d0
000188D0 4EB9 0000 139C             		jsr	(PlaySound).l		; play LZ music
000188D6 4238 F7AA                  			clr.b	(f_lockscreen).w
000188DA 08E8 0000 0022             		bset	#0,obStatus(a0)
000188E0 5428 0025                  		addq.b	#2,ob2ndRout(a0)
000188E4                            

000188E4                            loc_18126:
000188E4 6000 FE0C                  		bra.w	loc_17F38
000188E8                            ; ===========================================================================
000188E8                            

000188E8                            loc_1812A:
000188E8 4A28 003D                  		tst.b	standonobject(a0)
000188EC 6600                       		bne.s	loc_18136
000188EE 5328 003C                  		subq.b	#1,$3C(a0)
000188F2 6600                       		bne.s	loc_1814E
000188F4                            

000188F4                            loc_18136:
000188F4 4228 003C                  		clr.b	$3C(a0)
000188F8 317C 0400 0010             		move.w	#$400,obVelX(a0)
000188FE 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
00018904 4228 003D                  		clr.b	standonobject(a0)
00018908 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001890C                            

0001890C                            loc_1814E:
0001890C 6000 FDE4                  		bra.w	loc_17F38
00018910                            ; ===========================================================================
00018910                            

00018910                            loc_18152:
00018910 0C78 2030 F72A             		cmpi.w	#$2030,(v_limitright2).w
00018916 6400                       		bcc.s	loc_18160
00018918 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001891C 6000                       		bra.s	loc_18166
0001891E                            ; ===========================================================================
0001891E                            

0001891E                            loc_18160:
0001891E 4A28 0001                  		tst.b	obRender(a0)
00018922 6A00                       		bpl.s	Obj77_ShipDel
00018924                            

00018924                            loc_18166:
00018924 6000 FDCC                  		bra.w	loc_17F38
00018928                            ; ===========================================================================
00018928                            

00018928                            Obj77_ShipDel:
00018928 4EF9 0000 DCDC             		jmp	(DeleteObject).l
0001892E                            ; ===========================================================================
0001892E                            

0001892E                            Obj77_FaceMain:	; Routine 4
0001892E 2268 0034                  		movea.l	$34(a0),a1
00018932 1011                       		move.b	(a1),d0
00018934 B010                       		cmp.b	(a0),d0
00018936 6600                       		bne.s	Obj77_FaceDel
00018938 7000                       		moveq	#0,d0
0001893A 1029 0025                  		move.b	ob2ndRout(a1),d0
0001893E 7201                       		moveq	#1,d1
00018940 4A28 003D                  		tst.b	standonobject(a0)
00018944 6700                       		beq.s	loc_1818C
00018946 720A                       		moveq	#$A,d1
00018948 6000                       		bra.s	loc_181A0
0001894A                            ; ===========================================================================
0001894A                            

0001894A                            loc_1818C:
0001894A 4A29 0020                  		tst.b	obColType(a1)
0001894E 6600                       		bne.s	loc_18196
00018950 7205                       		moveq	#5,d1
00018952 6000                       		bra.s	loc_181A0
00018954                            ; ===========================================================================
00018954                            

00018954                            loc_18196:
00018954 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
0001895A 6500                       		bcs.s	loc_181A0
0001895C 7204                       		moveq	#4,d1
0001895E                            

0001895E                            loc_181A0:
0001895E 1141 001C                  		move.b	d1,obAnim(a0)
00018962 0C00 000E                  		cmpi.b	#$E,d0
00018966 6600                       		bne.s	loc_181B6
00018968 117C 0006 001C             		move.b	#6,obAnim(a0)
0001896E 4A28 0001                  		tst.b	obRender(a0)
00018972 6A00                       		bpl.s	Obj77_FaceDel
00018974                            

00018974                            loc_181B6:
00018974 6000                       		bra.s	Obj77_Display
00018976                            ; ===========================================================================
00018976                            

00018976                            Obj77_FaceDel:
00018976 4EF9 0000 DCDC             		jmp	(DeleteObject).l
0001897C                            ; ===========================================================================
0001897C                            

0001897C                            Obj77_FlameMain:; Routine 6
0001897C 117C 0007 001C             		move.b	#7,obAnim(a0)
00018982 2268 0034                  		movea.l	$34(a0),a1
00018986 1011                       		move.b	(a1),d0
00018988 B010                       		cmp.b	(a0),d0
0001898A 6600                       		bne.s	Obj77_FlameDel
0001898C 0C29 000E 0025             		cmpi.b	#$E,ob2ndRout(a1)
00018992 6600                       		bne.s	loc_181F0
00018994 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001899A 4A28 0001                  		tst.b	1(a0)
0001899E 6A00                       		bpl.s	Obj77_FlameDel
000189A0 6000                       		bra.s	loc_181F0
000189A2                            ; ===========================================================================
000189A2 4A69 0010                  		tst.w	obVelX(a1)
000189A6 6700                       		beq.s	loc_181F0
000189A8 117C 0008 001C             		move.b	#8,obAnim(a0)
000189AE                            

000189AE                            loc_181F0:
000189AE 6000                       		bra.s	Obj77_Display
000189B0                            ; ===========================================================================
000189B0                            

000189B0                            Obj77_FlameDel:
000189B0 4EF9 0000 DCDC             		jmp	(DeleteObject).l
000189B6                            ; ===========================================================================
000189B6                            

000189B6                            Obj77_Display:
000189B6 43F9 0001 8476             		lea	(Ani_Eggman).l,a1
000189BC 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
000189C2 2268 0034                  		movea.l	$34(a0),a1
000189C6 3169 0008 0008             		move.w	obX(a1),obX(a0)
000189CC 3169 000C 000C             		move.w	obY(a1),obY(a0)
000189D2 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
000189D8 7003                       		moveq	#3,d0
000189DA C028 0022                  		and.b	obStatus(a0),d0
000189DE 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
000189E4 8128 0001                  		or.b	d0,obRender(a0)
000189E8 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
000189E8 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
000189EE                            		include	"_incObj\73 Boss - Marble.asm"
000189EE                            ; ---------------------------------------------------------------------------
000189EE                            ; Object 73 - Eggman (MZ)
000189EE                            ; ---------------------------------------------------------------------------
000189EE                            

000189EE                            BossMarble:
000189EE 7000                       		moveq	#0,d0
000189F0 1028 0024                  		move.b	obRoutine(a0),d0
000189F4 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
000189F8 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
000189FC                            ; ===========================================================================
000189FC 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
000189FE 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018A00 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018A02 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018A04 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018A06                            

00018A06 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018A09 0401 04                    		dc.b 4,	1, 4
00018A0C 0607 04                    		dc.b 6,	7, 4
00018A0F 0800 03                    		dc.b 8,	0, 3
00018A12                            ; ===========================================================================
00018A12                            

00018A12                            Obj73_Main:	; Routine 0
00018A12 3168 0008 0030             		move.w	obX(a0),$30(a0)
00018A18 3168 000C 0038             		move.w	obY(a0),$38(a0)
00018A1E 117C 000F 0020             		move.b	#$F,obColType(a0)
00018A24 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
00018A2A 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018A2E 2248                       		movea.l	a0,a1
00018A30 7203                       		moveq	#3,d1
00018A32 6000                       		bra.s	Obj73_LoadBoss
00018A34                            ; ===========================================================================
00018A34                            

00018A34                            Obj73_Loop:
00018A34 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
00018A3A 6600                       		bne.s	Obj73_ShipMain
00018A3C 137C 0073 0000             		move.b	#id_BossMarble,0(a1)
00018A42 3368 0008 0008             		move.w	obX(a0),obX(a1)
00018A48 3368 000C 000C             		move.w	obY(a0),obY(a1)
00018A4E                            

00018A4E                            Obj73_LoadBoss:
00018A4E 08A8 0000 0022             		bclr	#0,obStatus(a0)
00018A54 4229 0025                  		clr.b	ob2ndRout(a1)
00018A58 135A 0024                  		move.b	(a2)+,obRoutine(a1)
00018A5C 135A 001C                  		move.b	(a2)+,obAnim(a1)
00018A60 135A 0018                  		move.b	(a2)+,obPriority(a1)
00018A64 237C 0001 84C6 0004        		move.l	#Map_Eggman,obMap(a1)
00018A6C 337C 0400 0002             		move.w	#$400,obGfx(a1)
00018A72 137C 0004 0001             		move.b	#4,obRender(a1)
00018A78 137C 0020 0019             		move.b	#$20,obActWid(a1)
00018A7E 2348 0034                  		move.l	a0,$34(a1)
00018A82 51C9 FFB0                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018A86                            

00018A86                            Obj73_ShipMain:	; Routine 2
00018A86 7000                       		moveq	#0,d0
00018A88 1028 0025                  		move.b	ob2ndRout(a0),d0
00018A8C 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018A90 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018A94 43F9 0001 8476             		lea	(Ani_Eggman).l,a1
00018A9A 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00018AA0 7003                       		moveq	#3,d0
00018AA2 C028 0022                  		and.b	obStatus(a0),d0
00018AA6 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00018AAC 8128 0001                  		or.b	d0,obRender(a0)
00018AB0 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00018AB6                            ; ===========================================================================
00018AB6 0000                       Obj73_ShipIndex: dc.w loc_18302-Obj73_ShipIndex
00018AB8 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018ABA 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018ABC 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018ABE 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018AC0                            ; ===========================================================================
00018AC0                            

00018AC0                            loc_18302:
00018AC0 1028 003F                  		move.b	$3F(a0),d0
00018AC4 5428 003F                  		addq.b	#2,$3F(a0)
00018AC8 4EB9 0000 29E0             		jsr	(CalcSine).l
00018ACE E440                       		asr.w	#2,d0
00018AD0 3140 0012                  		move.w	d0,obVelY(a0)
00018AD4 317C FF00 0010             		move.w	#-$100,obVelX(a0)
00018ADA 6100 F582                  		bsr.w	BossMove
00018ADE 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018AE4 6600                       		bne.s	loc_18334
00018AE6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00018AEA 4228 0028                  		clr.b	obSubtype(a0)
00018AEE 42A8 0010                  		clr.l	obVelX(a0)
00018AF2                            

00018AF2                            loc_18334:
00018AF2 4EB9 0000 29BA             		jsr	(RandomNumber).l
00018AF8 1140 0034                  		move.b	d0,$34(a0)
00018AFC                            

00018AFC                            loc_1833E:
00018AFC 3168 0038 000C             		move.w	$38(a0),obY(a0)
00018B02 3168 0030 0008             		move.w	$30(a0),obX(a0)
00018B08 0C28 0004 0025             		cmpi.b	#4,ob2ndRout(a0)
00018B0E 6400                       		bcc.s	locret_18390
00018B10 4A28 0022                  		tst.b	obStatus(a0)
00018B14 6B00                       		bmi.s	loc_18392
00018B16 4A28 0020                  		tst.b	obColType(a0)
00018B1A 6600                       		bne.s	locret_18390
00018B1C 4A28 003E                  		tst.b	$3E(a0)
00018B20 6600                       		bne.s	loc_18374
00018B22 117C 0028 003E             		move.b	#$28,$3E(a0)
00018B28 303C 0000                  		move.w	#sfx_HitBoss,d0
00018B2C 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play boss damage sound
00018B32                            

00018B32                            loc_18374:
00018B32 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
00018B36 7000                       		moveq	#0,d0
00018B38 4A51                       		tst.w	(a1)
00018B3A 6600                       		bne.s	loc_18382
00018B3C 303C 0EEE                  		move.w	#cWhite,d0
00018B40                            

00018B40                            loc_18382:
00018B40 3280                       		move.w	d0,(a1)
00018B42 5328 003E                  		subq.b	#1,$3E(a0)
00018B46 6600                       		bne.s	locret_18390
00018B48 117C 000F 0020             		move.b	#$F,obColType(a0)
00018B4E                            

00018B4E                            locret_18390:
00018B4E 4E75                       		rts	
00018B50                            ; ===========================================================================
00018B50                            

00018B50                            loc_18392:
00018B50 7064                       		moveq	#100,d0
00018B52 6100 0000                  		bsr.w	AddPoints
00018B56 117C 0004 0025             		move.b	#4,ob2ndRout(a0)
00018B5C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018B62 4268 0010                  		clr.w	obVelX(a0)
00018B66 4E75                       		rts	
00018B68                            ; ===========================================================================
00018B68                            

00018B68                            loc_183AA:
00018B68 7000                       		moveq	#0,d0
00018B6A 1028 0028                  		move.b	obSubtype(a0),d0
00018B6E 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018B72 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018B76 0228 0006 0028             		andi.b	#6,obSubtype(a0)
00018B7C 6000 FF7E                  		bra.w	loc_1833E
00018B80                            ; ===========================================================================
00018B80 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018B82 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018B84 0000                       		dc.w loc_183CA-off_183C2
00018B86 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018B88                            ; ===========================================================================
00018B88                            

00018B88                            loc_183CA:
00018B88 4A68 0010                  		tst.w	obVelX(a0)
00018B8C 6600                       		bne.s	loc_183FE
00018B8E 7040                       		moveq	#$40,d0
00018B90 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018B96 6700                       		beq.s	loc_183E6
00018B98 6500                       		bcs.s	loc_183DE
00018B9A 4440                       		neg.w	d0
00018B9C                            

00018B9C                            loc_183DE:
00018B9C 3140 0012                  		move.w	d0,obVelY(a0)
00018BA0 6000 F4BC                  		bra.w	BossMove
00018BA4                            ; ===========================================================================
00018BA4                            

00018BA4                            loc_183E6:
00018BA4 317C 0200 0010             		move.w	#$200,obVelX(a0)
00018BAA 317C 0100 0012             		move.w	#$100,obVelY(a0)
00018BB0 0828 0000 0022             		btst	#0,obStatus(a0)
00018BB6 6600                       		bne.s	loc_183FE
00018BB8 4468 0010                  		neg.w	obVelX(a0)
00018BBC                            

00018BBC                            loc_183FE:
00018BBC 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018BC2 6400                       		bcc.s	Obj73_MakeLava
00018BC4 6100 F498                  		bsr.w	BossMove
00018BC8 5968 0012                  		subq.w	#4,obVelY(a0)
00018BCC                            

00018BCC                            Obj73_MakeLava:
00018BCC 5328 0034                  		subq.b	#1,$34(a0)
00018BD0 6400                       		bcc.s	loc_1845C
00018BD2 4EB9 0000 E128             		jsr	(FindFreeObj).l
00018BD8 6600                       		bne.s	loc_1844A
00018BDA 137C 0014 0000             		move.b	#id_LavaBall,0(a1) ; load lava ball object
00018BE0 337C 02E8 000C             		move.w	#$2E8,obY(a1)	; set Y	position
00018BE6 4EB9 0000 29BA             		jsr	(RandomNumber).l
00018BEC 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018BF2 80FC 0050                  		divu.w	#$50,d0
00018BF6 4840                       		swap	d0
00018BF8 0640 1878                  		addi.w	#$1878,d0
00018BFC 3340 0008                  		move.w	d0,obX(a1)
00018C00 EE09                       		lsr.b	#7,d1
00018C02 337C 00FF 0028             		move.w	#$FF,obSubtype(a1)
00018C08                            

00018C08                            loc_1844A:
00018C08 4EB9 0000 29BA             		jsr	(RandomNumber).l
00018C0E 0200 001F                  		andi.b	#$1F,d0
00018C12 0600 0040                  		addi.b	#$40,d0
00018C16 1140 0034                  		move.b	d0,$34(a0)
00018C1A                            

00018C1A                            loc_1845C:
00018C1A 0828 0000 0022             		btst	#0,obStatus(a0)
00018C20 6700                       		beq.s	loc_18474
00018C22 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018C28 6D00                       		blt.s	locret_1849C
00018C2A 317C 1910 0030             		move.w	#$1910,$30(a0)
00018C30 6000                       		bra.s	loc_18482
00018C32                            ; ===========================================================================
00018C32                            

00018C32                            loc_18474:
00018C32 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018C38 6E00                       		bgt.s	locret_1849C
00018C3A 317C 1830 0030             		move.w	#$1830,$30(a0)
00018C40                            

00018C40                            loc_18482:
00018C40 4268 0010                  		clr.w	obVelX(a0)
00018C44 317C FE80 0012             		move.w	#-$180,obVelY(a0)
00018C4A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018C50 6400                       		bcc.s	loc_18498
00018C52 4468 0012                  		neg.w	obVelY(a0)
00018C56                            

00018C56                            loc_18498:
00018C56 5428 0028                  		addq.b	#2,obSubtype(a0)
00018C5A                            

00018C5A                            locret_1849C:
00018C5A 4E75                       		rts	
00018C5C                            ; ===========================================================================
00018C5C                            

00018C5C                            Obj73_MakeLava2:
00018C5C 6100 F400                  		bsr.w	BossMove
00018C60 3028 0038                  		move.w	$38(a0),d0
00018C64 0440 022C                  		subi.w	#$22C,d0
00018C68 6E00                       		bgt.s	locret_184F4
00018C6A 303C 022C                  		move.w	#$22C,d0
00018C6E 4A68 0012                  		tst.w	obVelY(a0)
00018C72 6700                       		beq.s	loc_184EA
00018C74 4268 0012                  		clr.w	obVelY(a0)
00018C78 317C 0050 003C             		move.w	#$50,$3C(a0)
00018C7E 0868 0000 0022             		bchg	#0,obStatus(a0)
00018C84 4EB9 0000 E128             		jsr	(FindFreeObj).l
00018C8A 6600                       		bne.s	loc_184EA
00018C8C 3368 0030 0008             		move.w	$30(a0),obX(a1)
00018C92 3368 0038 000C             		move.w	$38(a0),obY(a1)
00018C98 0669 0018 000C             		addi.w	#$18,obY(a1)
00018C9E 12BC 0074                  		move.b	#id_BossFire,(a1)	; load lava ball object
00018CA2 137C 0001 0028             		move.b	#1,obSubtype(a1)
00018CA8                            

00018CA8                            loc_184EA:
00018CA8 5368 003C                  		subq.w	#1,$3C(a0)
00018CAC 6600                       		bne.s	locret_184F4
00018CAE 5428 0028                  		addq.b	#2,obSubtype(a0)
00018CB2                            

00018CB2                            locret_184F4:
00018CB2 4E75                       		rts	
00018CB4                            ; ===========================================================================
00018CB4                            

00018CB4                            loc_184F6:
00018CB4 5368 003C                  		subq.w	#1,$3C(a0)
00018CB8 6B00                       		bmi.s	loc_18500
00018CBA 6000 F35E                  		bra.w	BossDefeated
00018CBE                            ; ===========================================================================
00018CBE                            

00018CBE                            loc_18500:
00018CBE 08E8 0000 0022             		bset	#0,obStatus(a0)
00018CC4 08A8 0007 0022             		bclr	#7,obStatus(a0)
00018CCA 4268 0010                  		clr.w	obVelX(a0)
00018CCE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00018CD2 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018CD8 4A38 F7A7                  		tst.b	(v_bossstatus).w
00018CDC 6600                       		bne.s	locret_1852A
00018CDE 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
00018CE4 4268 0012                  		clr.w	obVelY(a0)
00018CE8                            

00018CE8                            locret_1852A:
00018CE8 4E75                       		rts	
00018CEA                            ; ===========================================================================
00018CEA                            

00018CEA                            loc_1852C:
00018CEA 5268 003C                  		addq.w	#1,$3C(a0)
00018CEE 6700                       		beq.s	loc_18544
00018CF0 6A00                       		bpl.s	loc_1854E
00018CF2 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018CF8 6400                       		bcc.s	loc_18544
00018CFA 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00018D00 6000                       		bra.s	loc_1857A
00018D02                            ; ===========================================================================
00018D02                            

00018D02                            loc_18544:
00018D02 4268 0012                  		clr.w	obVelY(a0)
00018D06 4268 003C                  		clr.w	$3C(a0)
00018D0A 6000                       		bra.s	loc_1857A
00018D0C                            ; ===========================================================================
00018D0C                            

00018D0C                            loc_1854E:
00018D0C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018D12 6500                       		bcs.s	loc_18566
00018D14 6700                       		beq.s	loc_1856C
00018D16 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018D1C 6500                       		bcs.s	loc_1857A
00018D1E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00018D22 6000                       		bra.s	loc_1857A
00018D24                            ; ===========================================================================
00018D24                            

00018D24                            loc_18566:
00018D24 5168 0012                  		subq.w	#8,obVelY(a0)
00018D28 6000                       		bra.s	loc_1857A
00018D2A                            ; ===========================================================================
00018D2A                            

00018D2A                            loc_1856C:
00018D2A 4268 0012                  		clr.w	obVelY(a0)
00018D2E 303C 0000                  		move.w	#bgm_MZ,d0
00018D32 4EB9 0000 139C             		jsr	(PlaySound).l		; play MZ music
00018D38                            

00018D38                            loc_1857A:
00018D38 6100 F324                  		bsr.w	BossMove
00018D3C 6000 FDBE                  		bra.w	loc_1833E
00018D40                            ; ===========================================================================
00018D40                            

00018D40                            loc_18582:
00018D40 317C 0500 0010             		move.w	#$500,obVelX(a0)
00018D46 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
00018D4C 0C78 1960 F72A             		cmpi.w	#$1960,(v_limitright2).w
00018D52 6400                       		bcc.s	loc_1859C
00018D54 5478 F72A                  		addq.w	#2,(v_limitright2).w
00018D58 6000                       		bra.s	loc_185A2
00018D5A                            ; ===========================================================================
00018D5A                            

00018D5A                            loc_1859C:
00018D5A 4A28 0001                  		tst.b	obRender(a0)
00018D5E 6A00                       		bpl.s	Obj73_ShipDel
00018D60                            

00018D60                            loc_185A2:
00018D60 6100 F2FC                  		bsr.w	BossMove
00018D64 6000 FD96                  		bra.w	loc_1833E
00018D68                            ; ===========================================================================
00018D68                            

00018D68                            Obj73_ShipDel:
00018D68 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00018D6E                            ; ===========================================================================
00018D6E                            

00018D6E                            Obj73_FaceMain:	; Routine 4
00018D6E 7000                       		moveq	#0,d0
00018D70 7201                       		moveq	#1,d1
00018D72 2268 0034                  		movea.l	$34(a0),a1
00018D76 1029 0025                  		move.b	ob2ndRout(a1),d0
00018D7A 5540                       		subq.w	#2,d0
00018D7C 6600                       		bne.s	loc_185D2
00018D7E 0829 0001 0028             		btst	#1,obSubtype(a1)
00018D84 6700                       		beq.s	loc_185DA
00018D86 4A69 0012                  		tst.w	obVelY(a1)
00018D8A 6600                       		bne.s	loc_185DA
00018D8C 7204                       		moveq	#4,d1
00018D8E 6000                       		bra.s	loc_185EE
00018D90                            ; ===========================================================================
00018D90                            

00018D90                            loc_185D2:
00018D90 5500                       		subq.b	#2,d0
00018D92 6B00                       		bmi.s	loc_185DA
00018D94 720A                       		moveq	#$A,d1
00018D96 6000                       		bra.s	loc_185EE
00018D98                            ; ===========================================================================
00018D98                            

00018D98                            loc_185DA:
00018D98 4A29 0020                  		tst.b	obColType(a1)
00018D9C 6600                       		bne.s	loc_185E4
00018D9E 7205                       		moveq	#5,d1
00018DA0 6000                       		bra.s	loc_185EE
00018DA2                            ; ===========================================================================
00018DA2                            

00018DA2                            loc_185E4:
00018DA2 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
00018DA8 6500                       		bcs.s	loc_185EE
00018DAA 7204                       		moveq	#4,d1
00018DAC                            

00018DAC                            loc_185EE:
00018DAC 1141 001C                  		move.b	d1,obAnim(a0)
00018DB0 5900                       		subq.b	#4,d0
00018DB2 6600                       		bne.s	loc_18602
00018DB4 117C 0006 001C             		move.b	#6,obAnim(a0)
00018DBA 4A28 0001                  		tst.b	obRender(a0)
00018DBE 6A00                       		bpl.s	Obj73_FaceDel
00018DC0                            

00018DC0                            loc_18602:
00018DC0 6000                       		bra.s	Obj73_Display
00018DC2                            ; ===========================================================================
00018DC2                            

00018DC2                            Obj73_FaceDel:
00018DC2 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00018DC8                            ; ===========================================================================
00018DC8                            

00018DC8                            Obj73_FlameMain:; Routine 6
00018DC8 117C 0007 001C             		move.b	#7,obAnim(a0)
00018DCE 2268 0034                  		movea.l	$34(a0),a1
00018DD2 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
00018DD8 6D00                       		blt.s	loc_1862A
00018DDA 117C 000B 001C             		move.b	#$B,obAnim(a0)
00018DE0 4A28 0001                  		tst.b	obRender(a0)
00018DE4 6A00                       		bpl.s	Obj73_FlameDel
00018DE6 6000                       		bra.s	loc_18636
00018DE8                            ; ===========================================================================
00018DE8                            

00018DE8                            loc_1862A:
00018DE8 4A69 0010                  		tst.w	obVelX(a1)
00018DEC 6700                       		beq.s	loc_18636
00018DEE 117C 0008 001C             		move.b	#8,obAnim(a0)
00018DF4                            

00018DF4                            loc_18636:
00018DF4 6000                       		bra.s	Obj73_Display
00018DF6                            ; ===========================================================================
00018DF6                            

00018DF6                            Obj73_FlameDel:
00018DF6 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00018DFC                            ; ===========================================================================
00018DFC                            

00018DFC                            Obj73_Display:
00018DFC 43F9 0001 8476             		lea	(Ani_Eggman).l,a1
00018E02 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00018E08                            

00018E08                            loc_1864A:
00018E08 2268 0034                  		movea.l	$34(a0),a1
00018E0C 3169 0008 0008             		move.w	obX(a1),obX(a0)
00018E12 3169 000C 000C             		move.w	obY(a1),obY(a0)
00018E18 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
00018E1E 7003                       		moveq	#3,d0
00018E20 C028 0022                  		and.b	obStatus(a0),d0
00018E24 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00018E2A 8128 0001                  		or.b	d0,obRender(a0)
00018E2E 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00018E34                            ; ===========================================================================
00018E34                            

00018E34                            Obj73_TubeMain:	; Routine 8
00018E34 2268 0034                  		movea.l	$34(a0),a1
00018E38 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
00018E3E 6600                       		bne.s	loc_18688
00018E40 4A28 0001                  		tst.b	obRender(a0)
00018E44 6A00                       		bpl.s	Obj73_TubeDel
00018E46                            

00018E46                            loc_18688:
00018E46 217C 0001 858E 0004        		move.l	#Map_BossItems,obMap(a0)
00018E4E 317C 246C 0002             		move.w	#$246C,obGfx(a0)
00018E54 117C 0004 001A             		move.b	#4,obFrame(a0)
00018E5A 60AC                       		bra.s	loc_1864A
00018E5C                            ; ===========================================================================
00018E5C                            

00018E5C                            Obj73_TubeDel:
00018E5C 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00018E5C 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00018E62                            		include	"_incObj\74 MZ Boss Fire.asm"
00018E62                            ; ---------------------------------------------------------------------------
00018E62                            ; Object 74 - lava that	Eggman drops (MZ)
00018E62                            ; ---------------------------------------------------------------------------
00018E62                            

00018E62                            BossFire:
00018E62 7000                       		moveq	#0,d0
00018E64 1028 0024                  		move.b	obRoutine(a0),d0
00018E68 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018E6C 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00018E70 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00018E76                            ; ===========================================================================
00018E76 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018E78 0000                       		dc.w Obj74_Action-Obj74_Index
00018E7A 0000                       		dc.w loc_18886-Obj74_Index
00018E7C 0000                       		dc.w Obj74_Delete3-Obj74_Index
00018E7E                            ; ===========================================================================
00018E7E                            

00018E7E                            Obj74_Main:	; Routine 0
00018E7E 117C 0008 0016             		move.b	#8,obHeight(a0)
00018E84 117C 0008 0017             		move.b	#8,obWidth(a0)
00018E8A 217C 0000 BA06 0004        		move.l	#Map_Fire,obMap(a0)
00018E92 317C 0345 0002             		move.w	#$345,obGfx(a0)
00018E98 117C 0004 0001             		move.b	#4,obRender(a0)
00018E9E 117C 0005 0018             		move.b	#5,obPriority(a0)
00018EA4 3168 000C 0038             		move.w	obY(a0),$38(a0)
00018EAA 117C 0008 0019             		move.b	#8,obActWid(a0)
00018EB0 5428 0024                  		addq.b	#2,obRoutine(a0)
00018EB4 4A28 0028                  		tst.b	obSubtype(a0)
00018EB8 6600                       		bne.s	loc_1870A
00018EBA 117C 008B 0020             		move.b	#$8B,obColType(a0)
00018EC0 5428 0024                  		addq.b	#2,obRoutine(a0)
00018EC4 6000 0000                  		bra.w	loc_18886
00018EC8                            ; ===========================================================================
00018EC8                            

00018EC8                            loc_1870A:
00018EC8 117C 001E 0029             		move.b	#$1E,$29(a0)
00018ECE 303C 0000                  		move.w	#sfx_Fireball,d0
00018ED2 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play lava sound
00018ED8                            

00018ED8                            Obj74_Action:	; Routine 2
00018ED8 7000                       		moveq	#0,d0
00018EDA 1028 0025                  		move.b	ob2ndRout(a0),d0
00018EDE 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018EE2 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018EE6 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
00018EEC 43F9 0000 EB60             		lea	(Ani_Fire).l,a1
00018EF2 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00018EF8 0C68 02E8 000C             		cmpi.w	#$2E8,obY(a0)
00018EFE 6200                       		bhi.s	Obj74_Delete
00018F00 4E75                       		rts	
00018F02                            ; ===========================================================================
00018F02                            

00018F02                            Obj74_Delete:
00018F02 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00018F08                            ; ===========================================================================
00018F08 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018F0A 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00018F0C 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00018F0E 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00018F10                            ; ===========================================================================
00018F10                            

00018F10                            Obj74_Drop:
00018F10 08E8 0001 0022             		bset	#1,obStatus(a0)
00018F16 5328 0029                  		subq.b	#1,$29(a0)
00018F1A 6A00                       		bpl.s	locret_18780
00018F1C 117C 008B 0020             		move.b	#$8B,obColType(a0)
00018F22 4228 0028                  		clr.b	obSubtype(a0)
00018F26 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00018F2C 08A8 0001 0022             		bclr	#1,obStatus(a0)
00018F32 6100 C65A                  		bsr.w	ObjFloorDist
00018F36 4A41                       		tst.w	d1
00018F38 6A00                       		bpl.s	locret_18780
00018F3A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00018F3E                            

00018F3E                            locret_18780:
00018F3E 4E75                       		rts	
00018F40                            ; ===========================================================================
00018F40                            

00018F40                            Obj74_MakeFlame:
00018F40 5568 000C                  		subq.w	#2,obY(a0)
00018F44 08E8 0007 0002             		bset	#7,obGfx(a0)
00018F4A 317C 00A0 0010             		move.w	#$A0,obVelX(a0)
00018F50 4268 0012                  		clr.w	obVelY(a0)
00018F54 3168 0008 0030             		move.w	obX(a0),$30(a0)
00018F5A 3168 000C 0038             		move.w	obY(a0),$38(a0)
00018F60 117C 0003 0029             		move.b	#3,$29(a0)
00018F66 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
00018F6C 6600                       		bne.s	loc_187CA
00018F6E 47D1                       		lea	(a1),a3
00018F70 45D0                       		lea	(a0),a2
00018F72 7003                       		moveq	#3,d0
00018F74                            

00018F74                            Obj74_Loop:
00018F74 26DA                       		move.l	(a2)+,(a3)+
00018F76 26DA                       		move.l	(a2)+,(a3)+
00018F78 26DA                       		move.l	(a2)+,(a3)+
00018F7A 26DA                       		move.l	(a2)+,(a3)+
00018F7C 51C8 FFF6                  		dbf	d0,Obj74_Loop
00018F80                            

00018F80 4469 0010                  		neg.w	obVelX(a1)
00018F84 5429 0025                  		addq.b	#2,ob2ndRout(a1)
00018F88                            

00018F88                            loc_187CA:
00018F88 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00018F8C 4E75                       		rts	
00018F8E                            

00018F8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018F8E                            

00018F8E                            

00018F8E                            Obj74_Duplicate2:
00018F8E 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
00018F94 6600                       		bne.s	locret_187EE
00018F96 3368 0008 0008             		move.w	obX(a0),obX(a1)
00018F9C 3368 000C 000C             		move.w	obY(a0),obY(a1)
00018FA2 12BC 0074                  		move.b	#id_BossFire,(a1)
00018FA6 337C 0067 0028             		move.w	#$67,obSubtype(a1)
00018FAC                            

00018FAC                            locret_187EE:
00018FAC 4E75                       		rts	
00018FAE                            ; End of function Obj74_Duplicate2
00018FAE                            

00018FAE                            ; ===========================================================================
00018FAE                            

00018FAE                            Obj74_Duplicate:
00018FAE 6100 C5DE                  		bsr.w	ObjFloorDist
00018FB2 4A41                       		tst.w	d1
00018FB4 6A00                       		bpl.s	loc_18826
00018FB6 3028 0008                  		move.w	obX(a0),d0
00018FBA 0C40 1940                  		cmpi.w	#$1940,d0
00018FBE 6E00                       		bgt.s	loc_1882C
00018FC0 3228 0030                  		move.w	$30(a0),d1
00018FC4 B240                       		cmp.w	d0,d1
00018FC6 6700                       		beq.s	loc_1881E
00018FC8 0240 0010                  		andi.w	#$10,d0
00018FCC 0241 0010                  		andi.w	#$10,d1
00018FD0 B240                       		cmp.w	d0,d1
00018FD2 6700                       		beq.s	loc_1881E
00018FD4 61B8                       		bsr.s	Obj74_Duplicate2
00018FD6 3168 0008 0032             		move.w	obX(a0),$32(a0)
00018FDC                            

00018FDC                            loc_1881E:
00018FDC 3168 0008 0030             		move.w	obX(a0),$30(a0)
00018FE2 4E75                       		rts	
00018FE4                            ; ===========================================================================
00018FE4                            

00018FE4                            loc_18826:
00018FE4 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00018FE8 4E75                       		rts	
00018FEA                            ; ===========================================================================
00018FEA                            

00018FEA                            loc_1882C:
00018FEA 5428 0024                  		addq.b	#2,obRoutine(a0)
00018FEE 4E75                       		rts	
00018FF0                            ; ===========================================================================
00018FF0                            

00018FF0                            Obj74_FallEdge:
00018FF0 08A8 0001 0022             		bclr	#1,obStatus(a0)
00018FF6 0668 0024 0012             		addi.w	#$24,obVelY(a0)	; make flame fall
00018FFC 3028 0008                  		move.w	obX(a0),d0
00019000 9068 0032                  		sub.w	$32(a0),d0
00019004 6A00                       		bpl.s	loc_1884A
00019006 4440                       		neg.w	d0
00019008                            

00019008                            loc_1884A:
00019008 0C40 0012                  		cmpi.w	#$12,d0
0001900C 6600                       		bne.s	loc_18856
0001900E 08A8 0007 0002             		bclr	#7,obGfx(a0)
00019014                            

00019014                            loc_18856:
00019014 6100 C578                  		bsr.w	ObjFloorDist
00019018 4A41                       		tst.w	d1
0001901A 6A00                       		bpl.s	locret_1887E
0001901C 5328 0029                  		subq.b	#1,$29(a0)
00019020 6700                       		beq.s	Obj74_Delete2
00019022 4268 0012                  		clr.w	obVelY(a0)
00019026 3168 0032 0008             		move.w	$32(a0),obX(a0)
0001902C 3168 0038 000C             		move.w	$38(a0),obY(a0)
00019032 08E8 0007 0002             		bset	#7,obGfx(a0)
00019038 5528 0025                  		subq.b	#2,ob2ndRout(a0)
0001903C                            

0001903C                            locret_1887E:
0001903C 4E75                       		rts	
0001903E                            ; ===========================================================================
0001903E                            

0001903E                            Obj74_Delete2:
0001903E 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00019044                            ; ===========================================================================
00019044                            

00019044                            loc_18886:	; Routine 4
00019044 08E8 0007 0002             		bset	#7,obGfx(a0)
0001904A 5328 0029                  		subq.b	#1,$29(a0)
0001904E 6600                       		bne.s	Obj74_Animate
00019050 117C 0001 001C             		move.b	#1,obAnim(a0)
00019056 5968 000C                  		subq.w	#4,obY(a0)
0001905A 4228 0020                  		clr.b	obColType(a0)
0001905E                            

0001905E                            Obj74_Animate:
0001905E 43F9 0000 EB60             		lea	(Ani_Fire).l,a1
00019064 4EF9 0000 ADB0             		jmp	(AnimateSprite).l
0001906A                            ; ===========================================================================
0001906A                            

0001906A                            Obj74_Delete3:	; Routine 6
0001906A 4EF9 0000 DCDC             		jmp	(DeleteObject).l
0001906A 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00019070                            

00019070                            	Obj7A_Delete:
00019070 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00019076                            

00019076                            		include	"_incObj\7A Boss - Star Light.asm"
00019076                            ; ---------------------------------------------------------------------------
00019076                            ; Object 7A - Eggman (SLZ)
00019076                            ; ---------------------------------------------------------------------------
00019076                            

00019076                            BossStarLight:
00019076 7000                       		moveq	#0,d0
00019078 1028 0024                  		move.b	obRoutine(a0),d0
0001907C 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019080 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019084                            ; ===========================================================================
00019084 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019086 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00019088 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001908A 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001908C 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
0001908E                            

0001908E 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019091 0401 04                    		dc.b 4,	1, 4
00019094 0607 04                    		dc.b 6,	7, 4
00019097 0800 03                    		dc.b 8,	0, 3
0001909A                            ; ===========================================================================
0001909A                            

0001909A                            Obj7A_Main:
0001909A 317C 2188 0008             		move.w	#$2188,obX(a0)
000190A0 317C 0228 000C             		move.w	#$228,obY(a0)
000190A6 3168 0008 0030             		move.w	obX(a0),$30(a0)
000190AC 3168 000C 0038             		move.w	obY(a0),$38(a0)
000190B2 117C 000F 0020             		move.b	#$F,obColType(a0)
000190B8 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
000190BE 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
000190C2 2248                       		movea.l	a0,a1
000190C4 7203                       		moveq	#3,d1
000190C6 6000                       		bra.s	Obj7A_LoadBoss
000190C8                            ; ===========================================================================
000190C8                            

000190C8                            Obj7A_Loop:
000190C8 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
000190CE 6600                       		bne.s	loc_1895C
000190D0 137C 007A 0000             		move.b	#id_BossStarLight,0(a1)
000190D6 3368 0008 0008             		move.w	obX(a0),obX(a1)
000190DC 3368 000C 000C             		move.w	obY(a0),obY(a1)
000190E2                            

000190E2                            Obj7A_LoadBoss:
000190E2 08A8 0000 0022             		bclr	#0,obStatus(a0)
000190E8 4229 0025                  		clr.b	ob2ndRout(a1)
000190EC 135A 0024                  		move.b	(a2)+,obRoutine(a1)
000190F0 135A 001C                  		move.b	(a2)+,obAnim(a1)
000190F4 135A 0018                  		move.b	(a2)+,obPriority(a1)
000190F8 237C 0001 84C6 0004        		move.l	#Map_Eggman,obMap(a1)
00019100 337C 0400 0002             		move.w	#$400,obGfx(a1)
00019106 137C 0004 0001             		move.b	#4,obRender(a1)
0001910C 137C 0020 0019             		move.b	#$20,obActWid(a1)
00019112 2348 0034                  		move.l	a0,$34(a1)
00019116 51C9 FFB0                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
0001911A                            

0001911A                            loc_1895C:
0001911A 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001911E 45E8 002A                  		lea	$2A(a0),a2
00019122 705E                       		moveq	#$5E,d0
00019124 723E                       		moveq	#$3E,d1
00019126                            

00019126                            loc_18968:
00019126 B011                       		cmp.b	(a1),d0
00019128 6600                       		bne.s	loc_18974
0001912A 4A29 0028                  		tst.b	obSubtype(a1)
0001912E 6700                       		beq.s	loc_18974
00019130 34C9                       		move.w	a1,(a2)+
00019132                            

00019132                            loc_18974:
00019132 D2FC 0040                  		adda.w	#$40,a1
00019136 51C9 FFEE                  		dbf	d1,loc_18968
0001913A                            

0001913A                            Obj7A_ShipMain:	; Routine 2
0001913A 7000                       		moveq	#0,d0
0001913C 1028 0025                  		move.b	ob2ndRout(a0),d0
00019140 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019144 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019148 43F9 0001 8476             		lea	(Ani_Eggman).l,a1
0001914E 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00019154 7003                       		moveq	#3,d0
00019156 C028 0022                  		and.b	obStatus(a0),d0
0001915A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00019160 8128 0001                  		or.b	d0,obRender(a0)
00019164 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001916A                            ; ===========================================================================
0001916A 0000                       Obj7A_ShipIndex: dc.w loc_189B8-Obj7A_ShipIndex
0001916C 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
0001916E 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019170 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019172 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019174 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019176                            ; ===========================================================================
00019176                            

00019176                            loc_189B8:
00019176 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001917C 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019182 6400                       		bcc.s	loc_189CA
00019184 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019188                            

00019188                            loc_189CA:
00019188 6100 EED4                  		bsr.w	BossMove
0001918C 1028 003F                  		move.b	$3F(a0),d0
00019190 5428 003F                  		addq.b	#2,$3F(a0)
00019194 4EB9 0000 29E0             		jsr	(CalcSine).l
0001919A EC40                       		asr.w	#6,d0
0001919C D068 0038                  		add.w	$38(a0),d0
000191A0 3140 000C                  		move.w	d0,obY(a0)
000191A4 3168 0030 0008             		move.w	$30(a0),obX(a0)
000191AA 6000                       		bra.s	loc_189FE
000191AC                            ; ===========================================================================
000191AC                            

000191AC                            loc_189EE:
000191AC 6100 EEB0                  		bsr.w	BossMove
000191B0 3168 0038 000C             		move.w	$38(a0),obY(a0)
000191B6 3168 0030 0008             		move.w	$30(a0),obX(a0)
000191BC                            

000191BC                            loc_189FE:
000191BC 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
000191C2 6400                       		bcc.s	locret_18A44
000191C4 4A28 0022                  		tst.b	obStatus(a0)
000191C8 6B00                       		bmi.s	loc_18A46
000191CA 4A28 0020                  		tst.b	obColType(a0)
000191CE 6600                       		bne.s	locret_18A44
000191D0 4A28 003E                  		tst.b	$3E(a0)
000191D4 6600                       		bne.s	loc_18A28
000191D6 117C 0020 003E             		move.b	#$20,$3E(a0)
000191DC 303C 0000                  		move.w	#sfx_HitBoss,d0
000191E0 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play boss damage sound
000191E6                            

000191E6                            loc_18A28:
000191E6 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
000191EA 7000                       		moveq	#0,d0
000191EC 4A51                       		tst.w	(a1)
000191EE 6600                       		bne.s	loc_18A36
000191F0 303C 0EEE                  		move.w	#cWhite,d0
000191F4                            

000191F4                            loc_18A36:
000191F4 3280                       		move.w	d0,(a1)
000191F6 5328 003E                  		subq.b	#1,$3E(a0)
000191FA 6600                       		bne.s	locret_18A44
000191FC 117C 000F 0020             		move.b	#$F,obColType(a0)
00019202                            

00019202                            locret_18A44:
00019202 4E75                       		rts	
00019204                            ; ===========================================================================
00019204                            

00019204                            loc_18A46:
00019204 7064                       		moveq	#100,d0
00019206 6100 0000                  		bsr.w	AddPoints
0001920A 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
00019210 117C 0078 003C             		move.b	#$78,$3C(a0)
00019216 4268 0010                  		clr.w	obVelX(a0)
0001921A 4E75                       		rts	
0001921C                            ; ===========================================================================
0001921C                            

0001921C                            loc_18A5E:
0001921C 3028 0030                  		move.w	$30(a0),d0
00019220 317C 0200 0010             		move.w	#$200,obVelX(a0)
00019226 0828 0000 0022             		btst	#0,obStatus(a0)
0001922C 6600                       		bne.s	loc_18A7C
0001922E 4468 0010                  		neg.w	obVelX(a0)
00019232 0C40 2008                  		cmpi.w	#$2008,d0
00019236 6E00                       		bgt.s	loc_18A88
00019238 6000                       		bra.s	loc_18A82
0001923A                            ; ===========================================================================
0001923A                            

0001923A                            loc_18A7C:
0001923A 0C40 2138                  		cmpi.w	#$2138,d0
0001923E 6D00                       		blt.s	loc_18A88
00019240                            

00019240                            loc_18A82:
00019240 0868 0000 0022             		bchg	#0,obStatus(a0)
00019246                            

00019246                            loc_18A88:
00019246 3028 0008                  		move.w	8(a0),d0
0001924A 72FF                       		moveq	#-1,d1
0001924C 7402                       		moveq	#2,d2
0001924E 45E8 002A                  		lea	$2A(a0),a2
00019252 7828                       		moveq	#$28,d4
00019254 4A68 0010                  		tst.w	obVelX(a0)
00019258 6A00                       		bpl.s	loc_18A9E
0001925A 4444                       		neg.w	d4
0001925C                            

0001925C                            loc_18A9E:
0001925C 321A                       		move.w	(a2)+,d1
0001925E 2641                       		movea.l	d1,a3
00019260 082B 0003 0022             		btst	#3,obStatus(a3)
00019266 6600                       		bne.s	loc_18AB4
00019268 362B 0008                  		move.w	8(a3),d3
0001926C D644                       		add.w	d4,d3
0001926E 9640                       		sub.w	d0,d3
00019270 6700                       		beq.s	loc_18AC0
00019272                            

00019272                            loc_18AB4:
00019272 51CA FFE8                  		dbf	d2,loc_18A9E
00019276                            

00019276 1142 0028                  		move.b	d2,obSubtype(a0)
0001927A 6000 FF0C                  		bra.w	loc_189CA
0001927E                            ; ===========================================================================
0001927E                            

0001927E                            loc_18AC0:
0001927E 1142 0028                  		move.b	d2,obSubtype(a0)
00019282 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019286 117C 0028 003C             		move.b	#$28,$3C(a0)
0001928C 6000 FEFA                  		bra.w	loc_189CA
00019290                            ; ===========================================================================
00019290                            

00019290                            Obj7A_MakeBall:
00019290 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019296 6600                       		bne.s	loc_18B36
00019298 70FF                       		moveq	#-1,d0
0001929A 1028 0028                  		move.b	obSubtype(a0),d0
0001929E 4880                       		ext.w	d0
000192A0 6B00                       		bmi.s	loc_18B40
000192A2 5540                       		subq.w	#2,d0
000192A4 4440                       		neg.w	d0
000192A6 D040                       		add.w	d0,d0
000192A8 43E8 002A                  		lea	$2A(a0),a1
000192AC 3031 0000                  		move.w	(a1,d0.w),d0
000192B0 2440                       		movea.l	d0,a2
000192B2 43F8 D040                  		lea	(v_objspace+$40).w,a1
000192B6 723E                       		moveq	#$3E,d1
000192B8                            

000192B8                            loc_18AFA:
000192B8 B0A9 003C                  		cmp.l	$3C(a1),d0
000192BC 6700                       		beq.s	loc_18B40
000192BE D2FC 0040                  		adda.w	#$40,a1
000192C2 51C9 FFF4                  		dbf	d1,loc_18AFA
000192C6                            

000192C6 2F08                       		move.l	a0,-(sp)
000192C8 41D2                       		lea	(a2),a0
000192CA 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
000192D0 205F                       		movea.l	(sp)+,a0
000192D2 6600                       		bne.s	loc_18B40
000192D4 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load spiked ball object
000192D8 3368 0008 0008             		move.w	obX(a0),obX(a1)
000192DE 3368 000C 000C             		move.w	obY(a0),obY(a1)
000192E4 0669 0020 000C             		addi.w	#$20,obY(a1)
000192EA 136A 0022 0022             		move.b	obStatus(a2),obStatus(a1)
000192F0 234A 003C                  		move.l	a2,$3C(a1)
000192F4                            

000192F4                            loc_18B36:
000192F4 5328 003C                  		subq.b	#1,$3C(a0)
000192F8 6700                       		beq.s	loc_18B40
000192FA 6000 FEC0                  		bra.w	loc_189FE
000192FE                            ; ===========================================================================
000192FE                            

000192FE                            loc_18B40:
000192FE 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019302 6000 FE84                  		bra.w	loc_189CA
00019306                            ; ===========================================================================
00019306                            

00019306                            loc_18B48:
00019306 5328 003C                  		subq.b	#1,$3C(a0)
0001930A 6B00                       		bmi.s	loc_18B52
0001930C 6000 ED0C                  		bra.w	BossDefeated
00019310                            ; ===========================================================================
00019310                            

00019310                            loc_18B52:
00019310 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019314 4268 0012                  		clr.w	obVelY(a0)
00019318 08E8 0000 0022             		bset	#0,obStatus(a0)
0001931E 08A8 0007 0022             		bclr	#7,obStatus(a0)
00019324 4268 0010                  		clr.w	obVelX(a0)
00019328 117C 00E8 003C             		move.b	#-$18,$3C(a0)
0001932E 4A38 F7A7                  		tst.b	(v_bossstatus).w
00019332 6600                       		bne.s	loc_18B7C
00019334 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
0001933A                            

0001933A                            loc_18B7C:
0001933A 6000 FE80                  		bra.w	loc_189FE
0001933E                            ; ===========================================================================
0001933E                            

0001933E                            loc_18B80:
0001933E 5228 003C                  		addq.b	#1,$3C(a0)
00019342 6700                       		beq.s	loc_18B90
00019344 6A00                       		bpl.s	loc_18B96
00019346 0668 0018 0012             		addi.w	#$18,obVelY(a0)
0001934C 6000                       		bra.s	loc_18BC2
0001934E                            ; ===========================================================================
0001934E                            

0001934E                            loc_18B90:
0001934E 4268 0012                  		clr.w	obVelY(a0)
00019352 6000                       		bra.s	loc_18BC2
00019354                            ; ===========================================================================
00019354                            

00019354                            loc_18B96:
00019354 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
0001935A 6500                       		bcs.s	loc_18BAE
0001935C 6700                       		beq.s	loc_18BB4
0001935E 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019364 6500                       		bcs.s	loc_18BC2
00019366 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001936A 6000                       		bra.s	loc_18BC2
0001936C                            ; ===========================================================================
0001936C                            

0001936C                            loc_18BAE:
0001936C 5168 0012                  		subq.w	#8,obVelY(a0)
00019370 6000                       		bra.s	loc_18BC2
00019372                            ; ===========================================================================
00019372                            

00019372                            loc_18BB4:
00019372 4268 0012                  		clr.w	obVelY(a0)
00019376 303C 0000                  		move.w	#bgm_SLZ,d0
0001937A 4EB9 0000 139C             		jsr	(PlaySound).l		; play SLZ music
00019380                            

00019380                            loc_18BC2:
00019380 6000 FE2A                  		bra.w	loc_189EE
00019384                            ; ===========================================================================
00019384                            

00019384                            loc_18BC6:
00019384 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001938A 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
00019390 0C78 2160 F72A             		cmpi.w	#$2160,(v_limitright2).w
00019396 6400                       		bcc.s	loc_18BE0
00019398 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001939C 6000                       		bra.s	loc_18BE8
0001939E                            ; ===========================================================================
0001939E                            

0001939E                            loc_18BE0:
0001939E 4A28 0001                  		tst.b	obRender(a0)
000193A2 6A00 FCCC                  		bpl.w	Obj7A_Delete
000193A6                            

000193A6                            loc_18BE8:
000193A6 6100 ECB6                  		bsr.w	BossMove
000193AA 6000 FDDC                  		bra.w	loc_189CA
000193AE                            ; ===========================================================================
000193AE                            

000193AE                            Obj7A_FaceMain:	; Routine 4
000193AE 7000                       		moveq	#0,d0
000193B0 7201                       		moveq	#1,d1
000193B2 2268 0034                  		movea.l	$34(a0),a1
000193B6 1029 0025                  		move.b	ob2ndRout(a1),d0
000193BA 0C00 0006                  		cmpi.b	#6,d0
000193BE 6B00                       		bmi.s	loc_18C06
000193C0 720A                       		moveq	#$A,d1
000193C2 6000                       		bra.s	loc_18C1A
000193C4                            ; ===========================================================================
000193C4                            

000193C4                            loc_18C06:
000193C4 4A29 0020                  		tst.b	obColType(a1)
000193C8 6600                       		bne.s	loc_18C10
000193CA 7205                       		moveq	#5,d1
000193CC 6000                       		bra.s	loc_18C1A
000193CE                            ; ===========================================================================
000193CE                            

000193CE                            loc_18C10:
000193CE 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
000193D4 6500                       		bcs.s	loc_18C1A
000193D6 7204                       		moveq	#4,d1
000193D8                            

000193D8                            loc_18C1A:
000193D8 1141 001C                  		move.b	d1,obAnim(a0)
000193DC 0C00 000A                  		cmpi.b	#$A,d0
000193E0 6600                       		bne.s	loc_18C32
000193E2 117C 0006 001C             		move.b	#6,obAnim(a0)
000193E8 4A28 0001                  		tst.b	obRender(a0)
000193EC 6A00 FC82                  		bpl.w	Obj7A_Delete
000193F0                            

000193F0                            loc_18C32:
000193F0 6000                       		bra.s	loc_18C6C
000193F2                            ; ===========================================================================
000193F2                            

000193F2                            Obj7A_FlameMain:; Routine 6
000193F2 117C 0008 001C             		move.b	#8,obAnim(a0)
000193F8 2268 0034                  		movea.l	$34(a0),a1
000193FC 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
00019402 6600                       		bne.s	loc_18C56
00019404 4A28 0001                  		tst.b	obRender(a0)
00019408 6A00 FC66                  		bpl.w	Obj7A_Delete
0001940C 117C 000B 001C             		move.b	#$B,obAnim(a0)
00019412 6000                       		bra.s	loc_18C6C
00019414                            ; ===========================================================================
00019414                            

00019414                            loc_18C56:
00019414 0C29 0008 0025             		cmpi.b	#8,ob2ndRout(a1)
0001941A 6E00                       		bgt.s	loc_18C6C
0001941C 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
00019422 6D00                       		blt.s	loc_18C6C
00019424 117C 0007 001C             		move.b	#7,obAnim(a0)
0001942A                            

0001942A                            loc_18C6C:
0001942A 43F9 0001 8476             		lea	(Ani_Eggman).l,a1
00019430 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00019436                            

00019436                            loc_18C78:
00019436 2268 0034                  		movea.l	$34(a0),a1
0001943A 3169 0008 0008             		move.w	obX(a1),obX(a0)
00019440 3169 000C 000C             		move.w	obY(a1),obY(a0)
00019446 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001944C 7003                       		moveq	#3,d0
0001944E C028 0022                  		and.b	obStatus(a0),d0
00019452 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00019458 8128 0001                  		or.b	d0,obRender(a0)
0001945C 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00019462                            ; ===========================================================================
00019462                            

00019462                            Obj7A_TubeMain:	; Routine 8
00019462 2268 0034                  		movea.l	$34(a0),a1
00019466 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
0001946C 6600                       		bne.s	loc_18CB8
0001946E 4A28 0001                  		tst.b	obRender(a0)
00019472 6A00 FBFC                  		bpl.w	Obj7A_Delete
00019476                            

00019476                            loc_18CB8:
00019476 217C 0001 858E 0004        		move.l	#Map_BossItems,obMap(a0)
0001947E 317C 246C 0002             		move.w	#$246C,obGfx(a0)
00019484 117C 0003 001A             		move.b	#3,obFrame(a0)
0001948A 60AA                       		bra.s	loc_18C78
0001948A 60AA                       		bra.s	loc_18C78
0001948C                            		include	"_incObj\7B SLZ Boss Spikeball.asm"
0001948C                            ; ---------------------------------------------------------------------------
0001948C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001948C                            ; ---------------------------------------------------------------------------
0001948C                            

0001948C                            BossSpikeball:
0001948C 7000                       		moveq	#0,d0
0001948E 1028 0024                  		move.b	obRoutine(a0),d0
00019492 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019496 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001949A 3028 0030                  		move.w	$30(a0),d0
0001949E 0240 FF80                  		andi.w	#$FF80,d0
000194A2 3238 F700                  		move.w	(v_screenposx).w,d1
000194A6 0441 0080                  		subi.w	#$80,d1
000194AA 0241 FF80                  		andi.w	#$FF80,d1
000194AE 9041                       		sub.w	d1,d0
000194B0 6B00 FBBE                  		bmi.w	Obj7A_Delete
000194B4 0C40 0280                  		cmpi.w	#$280,d0
000194B8 6200 FBB6                  		bhi.w	Obj7A_Delete
000194BC 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
000194C2                            ; ===========================================================================
000194C2 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
000194C4 0000                       		dc.w Obj7B_Fall-Obj7B_Index
000194C6 0000                       		dc.w loc_18DC6-Obj7B_Index
000194C8 0000                       		dc.w loc_18EAA-Obj7B_Index
000194CA 0000                       		dc.w Obj7B_Explode-Obj7B_Index
000194CC 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
000194CE                            ; ===========================================================================
000194CE                            

000194CE                            Obj7B_Main:	; Routine 0
000194CE 217C 0001 20C8 0004        		move.l	#Map_SSawBall,obMap(a0)
000194D6 317C 0518 0002             		move.w	#$518,obGfx(a0)
000194DC 117C 0001 001A             		move.b	#1,obFrame(a0)
000194E2 0028 0004 0001             		ori.b	#4,obRender(a0)
000194E8 117C 0004 0018             		move.b	#4,obPriority(a0)
000194EE 117C 008B 0020             		move.b	#$8B,obColType(a0)
000194F4 117C 000C 0019             		move.b	#$C,obActWid(a0)
000194FA 2268 003C                  		movea.l	$3C(a0),a1
000194FE 3169 0008 0030             		move.w	obX(a1),$30(a0)
00019504 3169 000C 0034             		move.w	obY(a1),$34(a0)
0001950A 08E8 0000 0022             		bset	#0,obStatus(a0)
00019510 3028 0008                  		move.w	obX(a0),d0
00019514 B069 0008                  		cmp.w	obX(a1),d0
00019518 6E00                       		bgt.s	loc_18D68
0001951A 08A8 0000 0022             		bclr	#0,obStatus(a0)
00019520 117C 0002 003A             		move.b	#2,$3A(a0)
00019526                            

00019526                            loc_18D68:
00019526 5428 0024                  		addq.b	#2,obRoutine(a0)
0001952A                            

0001952A                            Obj7B_Fall:	; Routine 2
0001952A 4EB9 0000 DC4E             		jsr	(ObjectFall).l
00019530 2268 003C                  		movea.l	$3C(a0),a1
00019534 45F9 0000 0000             		lea	(word_19018).l,a2
0001953A 7000                       		moveq	#0,d0
0001953C 1029 001A                  		move.b	obFrame(a1),d0
00019540 3228 0008                  		move.w	8(a0),d1
00019544 9268 0030                  		sub.w	$30(a0),d1
00019548 6400                       		bcc.s	loc_18D8E
0001954A 5440                       		addq.w	#2,d0
0001954C                            

0001954C                            loc_18D8E:
0001954C D040                       		add.w	d0,d0
0001954E 3228 0034                  		move.w	$34(a0),d1
00019552 D272 0000                  		add.w	(a2,d0.w),d1
00019556 B268 000C                  		cmp.w	obY(a0),d1
0001955A 6E00                       		bgt.s	locret_18DC4
0001955C 2268 003C                  		movea.l	$3C(a0),a1
00019560 7202                       		moveq	#2,d1
00019562 0828 0000 0022             		btst	#0,obStatus(a0)
00019568 6700                       		beq.s	loc_18DAE
0001956A 7200                       		moveq	#0,d1
0001956C                            

0001956C                            loc_18DAE:
0001956C 317C 00F0 0028             		move.w	#$F0,obSubtype(a0)
00019572 117C 000A 001F             		move.b	#10,obDelayAni(a0)	; set frame duration to	10 frames
00019578 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
0001957E 6000 0000                  		bra.w	loc_18FA2
00019582                            ; ===========================================================================
00019582                            

00019582                            locret_18DC4:
00019582 4E75                       		rts	
00019584                            ; ===========================================================================
00019584                            

00019584                            loc_18DC6:	; Routine 4
00019584 2268 003C                  		movea.l	$3C(a0),a1
00019588 7000                       		moveq	#0,d0
0001958A 1028 003A                  		move.b	$3A(a0),d0
0001958E 9029 003A                  		sub.b	$3A(a1),d0
00019592 6700                       		beq.s	loc_18E2A
00019594 6400                       		bcc.s	loc_18DDA
00019596 4400                       		neg.b	d0
00019598                            

00019598                            loc_18DDA:
00019598 323C F7E8                  		move.w	#-$818,d1
0001959C 343C FEEC                  		move.w	#-$114,d2
000195A0 0C00 0001                  		cmpi.b	#1,d0
000195A4 6700                       		beq.s	loc_18E00
000195A6 323C F6A0                  		move.w	#-$960,d1
000195AA 343C FF0C                  		move.w	#-$F4,d2
000195AE 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
000195B4 6D00                       		blt.s	loc_18E00
000195B6 323C F5E0                  		move.w	#-$A20,d1
000195BA 343C FF80                  		move.w	#-$80,d2
000195BE                            

000195BE                            loc_18E00:
000195BE 3141 0012                  		move.w	d1,obVelY(a0)
000195C2 3142 0010                  		move.w	d2,obVelX(a0)
000195C6 3028 0008                  		move.w	obX(a0),d0
000195CA 9068 0030                  		sub.w	$30(a0),d0
000195CE 6400                       		bcc.s	loc_18E16
000195D0 4468 0010                  		neg.w	obVelX(a0)
000195D4                            

000195D4                            loc_18E16:
000195D4 117C 0001 001A             		move.b	#1,obFrame(a0)
000195DA 317C 0020 0028             		move.w	#$20,obSubtype(a0)
000195E0 5428 0024                  		addq.b	#2,obRoutine(a0)
000195E4 6000 0000                  		bra.w	loc_18EAA
000195E8                            ; ===========================================================================
000195E8                            

000195E8                            loc_18E2A:
000195E8 45F9 0000 0000             		lea	(word_19018).l,a2
000195EE 7000                       		moveq	#0,d0
000195F0 1029 001A                  		move.b	obFrame(a1),d0
000195F4 343C 0028                  		move.w	#$28,d2
000195F8 3228 0008                  		move.w	obX(a0),d1
000195FC 9268 0030                  		sub.w	$30(a0),d1
00019600 6400                       		bcc.s	loc_18E48
00019602 4442                       		neg.w	d2
00019604 5440                       		addq.w	#2,d0
00019606                            

00019606                            loc_18E48:
00019606 D040                       		add.w	d0,d0
00019608 3228 0034                  		move.w	$34(a0),d1
0001960C D272 0000                  		add.w	(a2,d0.w),d1
00019610 3141 000C                  		move.w	d1,obY(a0)
00019614 D468 0030                  		add.w	$30(a0),d2
00019618 3142 0008                  		move.w	d2,obX(a0)
0001961C 4268 000E                  		clr.w	obY+2(a0)
00019620 4268 000A                  		clr.w	obX+2(a0)
00019624 5368 0028                  		subq.w	#1,obSubtype(a0)
00019628 6600                       		bne.s	loc_18E7A
0001962A 317C 0020 0028             		move.w	#$20,obSubtype(a0)
00019630 117C 0008 0024             		move.b	#8,obRoutine(a0)
00019636 4E75                       		rts	
00019638                            ; ===========================================================================
00019638                            

00019638                            loc_18E7A:
00019638 0C68 0078 0028             		cmpi.w	#$78,obSubtype(a0)
0001963E 6600                       		bne.s	loc_18E88
00019640 117C 0005 001F             		move.b	#5,obDelayAni(a0)
00019646                            

00019646                            loc_18E88:
00019646 0C68 003C 0028             		cmpi.w	#$3C,obSubtype(a0)
0001964C 6600                       		bne.s	loc_18E96
0001964E 117C 0002 001F             		move.b	#2,obDelayAni(a0)
00019654                            

00019654                            loc_18E96:
00019654 5328 001E                  		subq.b	#1,obTimeFrame(a0)
00019658 6E00                       		bgt.s	locret_18EA8
0001965A 0868 0000 001A             		bchg	#0,obFrame(a0)
00019660 1168 001F 001E             		move.b	obDelayAni(a0),obTimeFrame(a0)
00019666                            

00019666                            locret_18EA8:
00019666 4E75                       		rts	
00019668                            ; ===========================================================================
00019668                            

00019668                            loc_18EAA:	; Routine 6
00019668 43F8 D040                  		lea	(v_objspace+$40).w,a1
0001966C 707A                       		moveq	#id_BossStarLight,d0
0001966E 7240                       		moveq	#$40,d1
00019670 743E                       		moveq	#$3E,d2
00019672                            

00019672                            loc_18EB4:
00019672 B011                       		cmp.b	(a1),d0
00019674 6700                       		beq.s	loc_18EC0
00019676 D2C1                       		adda.w	d1,a1
00019678 51CA FFF8                  		dbf	d2,loc_18EB4
0001967C                            

0001967C 6000                       		bra.s	loc_18F38
0001967E                            ; ===========================================================================
0001967E                            

0001967E                            loc_18EC0:
0001967E 3029 0008                  		move.w	obX(a1),d0
00019682 3229 000C                  		move.w	obY(a1),d1
00019686 3428 0008                  		move.w	obX(a0),d2
0001968A 3628 000C                  		move.w	obY(a0),d3
0001968E 45FA 0000                  		lea	byte_19022(pc),a2
00019692 47FA 0000                  		lea	byte_19026(pc),a3
00019696 181A                       		move.b	(a2)+,d4
00019698 4884                       		ext.w	d4
0001969A D044                       		add.w	d4,d0
0001969C 181B                       		move.b	(a3)+,d4
0001969E 4884                       		ext.w	d4
000196A0 D444                       		add.w	d4,d2
000196A2 B440                       		cmp.w	d0,d2
000196A4 6500                       		bcs.s	loc_18F38
000196A6 181A                       		move.b	(a2)+,d4
000196A8 4884                       		ext.w	d4
000196AA D044                       		add.w	d4,d0
000196AC 181B                       		move.b	(a3)+,d4
000196AE 4884                       		ext.w	d4
000196B0 D444                       		add.w	d4,d2
000196B2 B042                       		cmp.w	d2,d0
000196B4 6500                       		bcs.s	loc_18F38
000196B6 181A                       		move.b	(a2)+,d4
000196B8 4884                       		ext.w	d4
000196BA D244                       		add.w	d4,d1
000196BC 181B                       		move.b	(a3)+,d4
000196BE 4884                       		ext.w	d4
000196C0 D644                       		add.w	d4,d3
000196C2 B641                       		cmp.w	d1,d3
000196C4 6500                       		bcs.s	loc_18F38
000196C6 181A                       		move.b	(a2)+,d4
000196C8 4884                       		ext.w	d4
000196CA D244                       		add.w	d4,d1
000196CC 181B                       		move.b	(a3)+,d4
000196CE 4884                       		ext.w	d4
000196D0 D644                       		add.w	d4,d3
000196D2 B243                       		cmp.w	d3,d1
000196D4 6500                       		bcs.s	loc_18F38
000196D6 5428 0024                  		addq.b	#2,obRoutine(a0)
000196DA 4268 0028                  		clr.w	obSubtype(a0)
000196DE 4229 0020                  		clr.b	obColType(a1)
000196E2 5329 0021                  		subq.b	#1,obColProp(a1)
000196E6 6600                       		bne.s	loc_18F38
000196E8 08E9 0007 0022             		bset	#7,obStatus(a1)
000196EE 4268 0010                  		clr.w	obVelX(a0)
000196F2 4268 0012                  		clr.w	obVelY(a0)
000196F6                            

000196F6                            loc_18F38:
000196F6 4A68 0012                  		tst.w	obVelY(a0)
000196FA 6A00                       		bpl.s	loc_18F5C
000196FC 4EB9 0000 DC4E             		jsr	(ObjectFall).l
00019702 3028 0034                  		move.w	$34(a0),d0
00019706 0440 002F                  		subi.w	#$2F,d0
0001970A B068 000C                  		cmp.w	obY(a0),d0
0001970E 6E00                       		bgt.s	loc_18F58
00019710 4EB9 0000 DC4E             		jsr	(ObjectFall).l
00019716                            

00019716                            loc_18F58:
00019716 6000 FF20                  		bra.w	loc_18E7A
0001971A                            ; ===========================================================================
0001971A                            

0001971A                            loc_18F5C:
0001971A 4EB9 0000 DC4E             		jsr	(ObjectFall).l
00019720 2268 003C                  		movea.l	$3C(a0),a1
00019724 45F9 0000 0000             		lea	(word_19018).l,a2
0001972A 7000                       		moveq	#0,d0
0001972C 1029 001A                  		move.b	obFrame(a1),d0
00019730 3228 0008                  		move.w	obX(a0),d1
00019734 9268 0030                  		sub.w	$30(a0),d1
00019738 6400                       		bcc.s	loc_18F7E
0001973A 5440                       		addq.w	#2,d0
0001973C                            

0001973C                            loc_18F7E:
0001973C D040                       		add.w	d0,d0
0001973E 3228 0034                  		move.w	$34(a0),d1
00019742 D272 0000                  		add.w	(a2,d0.w),d1
00019746 B268 000C                  		cmp.w	obY(a0),d1
0001974A 6ECA                       		bgt.s	loc_18F58
0001974C 2268 003C                  		movea.l	$3C(a0),a1
00019750 7202                       		moveq	#2,d1
00019752 4A68 0010                  		tst.w	obVelX(a0)
00019756 6B00                       		bmi.s	loc_18F9C
00019758 7200                       		moveq	#0,d1
0001975A                            

0001975A                            loc_18F9C:
0001975A 317C 0000 0028             		move.w	#0,obSubtype(a0)
00019760                            

00019760                            loc_18FA2:
00019760 1341 003A                  		move.b	d1,$3A(a1)
00019764 1141 003A                  		move.b	d1,$3A(a0)
00019768 B229 001A                  		cmp.b	obFrame(a1),d1
0001976C 6700                       		beq.s	loc_19008
0001976E 08A9 0003 0022             		bclr	#3,obStatus(a1)
00019774 6700                       		beq.s	loc_19008
00019776 4229 0025                  		clr.b	ob2ndRout(a1)
0001977A 137C 0002 0024             		move.b	#2,obRoutine(a1)
00019780 45F8 D000                  		lea	(v_player).w,a2
00019784 3568 0012 0012             		move.w	obVelY(a0),obVelY(a2)
0001978A 446A 0012                  		neg.w	obVelY(a2)
0001978E 0C29 0001 001A             		cmpi.b	#1,obFrame(a1)
00019794 6600                       		bne.s	loc_18FDC
00019796 E0EA 0012                  		asr	obVelY(a2)
0001979A                            

0001979A                            loc_18FDC:
0001979A 08EA 0001 0022             		bset	#1,obStatus(a2)
000197A0 08AA 0003 0022             		bclr	#3,obStatus(a2)
000197A6 422A 003C                  		clr.b	$3C(a2)
000197AA 2F08                       		move.l	a0,-(sp)
000197AC 41D2                       		lea	(a2),a0
000197AE 4EB9 0001 3A8E             		jsr	(Sonic_ChkRoll).l
000197B4 205F                       		movea.l	(sp)+,a0
000197B6 157C 0002 0024             		move.b	#2,obRoutine(a2)
000197BC 303C 0000                  		move.w	#sfx_Spring,d0
000197C0 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play "spring" sound
000197C6                            

000197C6                            loc_19008:
000197C6 4268 0010                  		clr.w	obVelX(a0)
000197CA 4268 0012                  		clr.w	obVelY(a0)
000197CE 5428 0024                  		addq.b	#2,obRoutine(a0)
000197D2 6000 FE64                  		bra.w	loc_18E7A
000197D6                            ; ===========================================================================
000197D6 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w -8, -$1C, -$2F, -$1C, -8
000197E0                            		even
000197E0 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
000197E4                            		even
000197E4 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
000197E8                            		even
000197E8                            ; ===========================================================================
000197E8                            

000197E8                            Obj7B_Explode:	; Routine 8
000197E8 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
000197EC 4228 0024                  		clr.b	obRoutine(a0)
000197F0 0C68 0020 0028             		cmpi.w	#$20,obSubtype(a0)
000197F6 6700                       		beq.s	Obj7B_MakeFrag
000197F8 4E75                       		rts	
000197FA                            ; ===========================================================================
000197FA                            

000197FA                            Obj7B_MakeFrag:
000197FA 3168 0034 000C             		move.w	$34(a0),obY(a0)
00019800 7203                       		moveq	#3,d1
00019802 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019806                            

00019806                            Obj7B_Loop:
00019806 4EB9 0000 E128             		jsr	(FindFreeObj).l
0001980C 6600                       		bne.s	loc_1909A
0001980E 12BC 007B                  		move.b	#id_BossSpikeball,(a1) ; load shrapnel object
00019812 137C 000A 0024             		move.b	#$A,obRoutine(a1)
00019818 237C 0000 0000 0004        		move.l	#Map_BSBall,obMap(a1)
00019820 137C 0003 0018             		move.b	#3,obPriority(a1)
00019826 337C 0518 0002             		move.w	#$518,obGfx(a1)
0001982C 3368 0008 0008             		move.w	obX(a0),obX(a1)
00019832 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019838 335A 0010                  		move.w	(a2)+,obVelX(a1)
0001983C 335A 0012                  		move.w	(a2)+,obVelY(a1)
00019840 137C 0098 0020             		move.b	#$98,obColType(a1)
00019846 0029 0004 0001             		ori.b	#4,obRender(a1)
0001984C 08E9 0007 0001             		bset	#7,obRender(a1)
00019852 137C 000C 0019             		move.b	#$C,obActWid(a1)
00019858                            

00019858                            loc_1909A:
00019858 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001985C                            

0001985C 4E75                       		rts	
0001985E                            ; ===========================================================================
0001985E FF00 FCC0                  Obj7B_FragSpeed: dc.w -$100, -$340	; horizontal, vertical
00019862 FF60 FDC0                  		dc.w -$A0, -$240
00019866 0100 FCC0                  		dc.w $100, -$340
0001986A 00A0 FDC0                  		dc.w $A0, -$240
0001986E                            ; ===========================================================================
0001986E                            

0001986E                            Obj7B_MoveFrag:	; Routine $A
0001986E 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
00019874 3168 0008 0030             		move.w	obX(a0),$30(a0)
0001987A 3168 000C 0034             		move.w	obY(a0),$34(a0)
00019880 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00019886 7004                       		moveq	#4,d0
00019888 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001988C E448                       		lsr.w	#2,d0
0001988E 1140 001A                  		move.b	d0,obFrame(a0)
00019892 4A28 0001                  		tst.b	1(a0)
00019896 6A00 F7D8                  		bpl.w	Obj7A_Delete
0001989A 4E75                       		rts	
0001989A 4E75                       		rts	
0001989C                            Map_BSBall:	include	"_maps\SLZ Boss Spikeball.asm"
0001989C                            ; ---------------------------------------------------------------------------
0001989C                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001989C                            ; ---------------------------------------------------------------------------
0001989C                            Map_BSBall_internal:
0001989C 0000                       		dc.w @fireball1-Map_BSBall_internal
0001989E 0000                       		dc.w @fireball2-Map_BSBall_internal
000198A0 01                         @fireball1:	dc.b 1
000198A1 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
000198A6 01                         @fireball2:	dc.b 1
000198A7 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
000198AC                            		even
000198AC                            		even
000198AC                            		include	"_incObj\75 Boss - Spring Yard.asm"
000198AC                            ; ---------------------------------------------------------------------------
000198AC                            ; Object 75 - Eggman (SYZ)
000198AC                            ; ---------------------------------------------------------------------------
000198AC                            

000198AC                            BossSpringYard:
000198AC 7000                       		moveq	#0,d0
000198AE 1028 0024                  		move.b	obRoutine(a0),d0
000198B2 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
000198B6 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
000198BA                            ; ===========================================================================
000198BA 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
000198BC 0000                       		dc.w Obj75_ShipMain-Obj75_Index
000198BE 0000                       		dc.w Obj75_FaceMain-Obj75_Index
000198C0 0000                       		dc.w Obj75_FlameMain-Obj75_Index
000198C2 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
000198C4                            

000198C4 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
000198C7 0401 05                    		dc.b 4,	1, 5
000198CA 0607 05                    		dc.b 6,	7, 5
000198CD 0800 05                    		dc.b 8,	0, 5
000198D0                            ; ===========================================================================
000198D0                            

000198D0                            Obj75_Main:	; Routine 0
000198D0 317C 2DB0 0008             		move.w	#$2DB0,obX(a0)
000198D6 317C 04DA 000C             		move.w	#$4DA,obY(a0)
000198DC 3168 0008 0030             		move.w	obX(a0),$30(a0)
000198E2 3168 000C 0038             		move.w	obY(a0),$38(a0)
000198E8 117C 000F 0020             		move.b	#$F,obColType(a0)
000198EE 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
000198F4 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
000198F8 2248                       		movea.l	a0,a1
000198FA 7203                       		moveq	#3,d1
000198FC 6000                       		bra.s	Obj75_LoadBoss
000198FE                            ; ===========================================================================
000198FE                            

000198FE                            Obj75_Loop:
000198FE 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
00019904 6600                       		bne.s	Obj75_ShipMain
00019906 12BC 0075                  		move.b	#id_BossSpringYard,(a1)
0001990A 3368 0008 0008             		move.w	obX(a0),obX(a1)
00019910 3368 000C 000C             		move.w	obY(a0),obY(a1)
00019916                            

00019916                            Obj75_LoadBoss:
00019916 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001991C 4229 0025                  		clr.b	ob2ndRout(a1)
00019920 135A 0024                  		move.b	(a2)+,obRoutine(a1)
00019924 135A 001C                  		move.b	(a2)+,obAnim(a1)
00019928 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001992C 237C 0001 84C6 0004        		move.l	#Map_Eggman,obMap(a1)
00019934 337C 0400 0002             		move.w	#$400,obGfx(a1)
0001993A 137C 0004 0001             		move.b	#4,obRender(a1)
00019940 137C 0020 0019             		move.b	#$20,obActWid(a1)
00019946 2348 0034                  		move.l	a0,$34(a1)
0001994A 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001994E                            

0001994E                            Obj75_ShipMain:	; Routine 2
0001994E 7000                       		moveq	#0,d0
00019950 1028 0025                  		move.b	ob2ndRout(a0),d0
00019954 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019958 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001995C 43F9 0001 8476             		lea	(Ani_Eggman).l,a1
00019962 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00019968 7003                       		moveq	#3,d0
0001996A C028 0022                  		and.b	obStatus(a0),d0
0001996E 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00019974 8128 0001                  		or.b	d0,obRender(a0)
00019978 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001997E                            ; ===========================================================================
0001997E 0000 0000                  Obj75_ShipIndex: dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019982 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019986 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001998A                            ; ===========================================================================
0001998A                            

0001998A                            loc_191CC:
0001998A 317C FF00 0010             		move.w	#-$100,obVelX(a0)
00019990 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019996 6400                       		bcc.s	loc_191DE
00019998 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001999C                            

0001999C                            loc_191DE:
0001999C 1028 003F                  		move.b	$3F(a0),d0
000199A0 5428 003F                  		addq.b	#2,$3F(a0)
000199A4 4EB9 0000 29E0             		jsr	(CalcSine).l
000199AA E440                       		asr.w	#2,d0
000199AC 3140 0012                  		move.w	d0,obVelY(a0)
000199B0                            

000199B0                            loc_191F2:
000199B0 6100 E6AC                  		bsr.w	BossMove
000199B4 3168 0038 000C             		move.w	$38(a0),obY(a0)
000199BA 3168 0030 0008             		move.w	$30(a0),obX(a0)
000199C0                            

000199C0                            loc_19202:
000199C0 3028 0008                  		move.w	8(a0),d0
000199C4 0440 2C00                  		subi.w	#$2C00,d0
000199C8 EA48                       		lsr.w	#5,d0
000199CA 1140 0034                  		move.b	d0,$34(a0)
000199CE 0C28 0006 0025             		cmpi.b	#6,ob2ndRout(a0)
000199D4 6400                       		bcc.s	locret_19256
000199D6 4A28 0022                  		tst.b	obStatus(a0)
000199DA 6B00                       		bmi.s	loc_19258
000199DC 4A28 0020                  		tst.b	obColType(a0)
000199E0 6600                       		bne.s	locret_19256
000199E2 4A28 003E                  		tst.b	$3E(a0)
000199E6 6600                       		bne.s	loc_1923A
000199E8 117C 0020 003E             		move.b	#$20,$3E(a0)
000199EE 303C 0000                  		move.w	#sfx_HitBoss,d0
000199F2 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play boss damage sound
000199F8                            

000199F8                            loc_1923A:
000199F8 43F8 FB22                  		lea	(v_pal_dry+$22).w,a1
000199FC 7000                       		moveq	#0,d0
000199FE 4A51                       		tst.w	(a1)
00019A00 6600                       		bne.s	loc_19248
00019A02 303C 0EEE                  		move.w	#cWhite,d0
00019A06                            

00019A06                            loc_19248:
00019A06 3280                       		move.w	d0,(a1)
00019A08 5328 003E                  		subq.b	#1,$3E(a0)
00019A0C 6600                       		bne.s	locret_19256
00019A0E 117C 000F 0020             		move.b	#$F,obColType(a0)
00019A14                            

00019A14                            locret_19256:
00019A14 4E75                       		rts	
00019A16                            ; ===========================================================================
00019A16                            

00019A16                            loc_19258:
00019A16 7064                       		moveq	#100,d0
00019A18 6100 0000                  		bsr.w	AddPoints
00019A1C 117C 0006 0025             		move.b	#6,ob2ndRout(a0)
00019A22 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019A28 4268 0010                  		clr.w	obVelX(a0)
00019A2C 4E75                       		rts	
00019A2E                            ; ===========================================================================
00019A2E                            

00019A2E                            loc_19270:
00019A2E 3028 0030                  		move.w	$30(a0),d0
00019A32 317C 0140 0010             		move.w	#$140,obVelX(a0)
00019A38 0828 0000 0022             		btst	#0,obStatus(a0)
00019A3E 6600                       		bne.s	loc_1928E
00019A40 4468 0010                  		neg.w	obVelX(a0)
00019A44 0C40 2C08                  		cmpi.w	#$2C08,d0
00019A48 6E00                       		bgt.s	loc_1929E
00019A4A 6000                       		bra.s	loc_19294
00019A4C                            ; ===========================================================================
00019A4C                            

00019A4C                            loc_1928E:
00019A4C 0C40 2D38                  		cmpi.w	#$2D38,d0
00019A50 6D00                       		blt.s	loc_1929E
00019A52                            

00019A52                            loc_19294:
00019A52 0868 0000 0022             		bchg	#0,obStatus(a0)
00019A58 4228 003D                  		clr.b	standonobject(a0)
00019A5C                            

00019A5C                            loc_1929E:
00019A5C 0440 2C10                  		subi.w	#$2C10,d0
00019A60 0240 001F                  		andi.w	#$1F,d0
00019A64 0440 001F                  		subi.w	#$1F,d0
00019A68 6A00                       		bpl.s	loc_192AE
00019A6A 4440                       		neg.w	d0
00019A6C                            

00019A6C                            loc_192AE:
00019A6C 5340                       		subq.w	#1,d0
00019A6E 6E00                       		bgt.s	loc_192E8
00019A70 4A28 003D                  		tst.b	standonobject(a0)
00019A74 6600                       		bne.s	loc_192E8
00019A76 3238 D008                  		move.w	(v_player+obX).w,d1
00019A7A 0441 2C00                  		subi.w	#$2C00,d1
00019A7E EA41                       		asr.w	#5,d1
00019A80 B228 0034                  		cmp.b	$34(a0),d1
00019A84 6600                       		bne.s	loc_192E8
00019A86 7000                       		moveq	#0,d0
00019A88 1028 0034                  		move.b	$34(a0),d0
00019A8C EB40                       		asl.w	#5,d0
00019A8E 0640 2C10                  		addi.w	#$2C10,d0
00019A92 3140 0030                  		move.w	d0,$30(a0)
00019A96 6100 0000                  		bsr.w	Obj75_FindBlocks
00019A9A 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019A9E 4268 0028                  		clr.w	obSubtype(a0)
00019AA2 4268 0010                  		clr.w	obVelX(a0)
00019AA6                            

00019AA6                            loc_192E8:
00019AA6 6000 FEF4                  		bra.w	loc_191DE
00019AAA                            ; ===========================================================================
00019AAA                            

00019AAA                            loc_192EC:
00019AAA 7000                       		moveq	#0,d0
00019AAC 1028 0028                  		move.b	obSubtype(a0),d0
00019AB0 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019AB4 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019AB8                            ; ===========================================================================
00019AB8 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019ABA 0000                       		dc.w loc_19348-off_192FA
00019ABC 0000                       		dc.w loc_1938E-off_192FA
00019ABE 0000                       		dc.w loc_193D0-off_192FA
00019AC0                            ; ===========================================================================
00019AC0                            

00019AC0                            loc_19302:
00019AC0 317C 0180 0012             		move.w	#$180,obVelY(a0)
00019AC6 3028 0038                  		move.w	$38(a0),d0
00019ACA 0C40 0556                  		cmpi.w	#$556,d0
00019ACE 6500                       		bcs.s	loc_19344
00019AD0 317C 0556 0038             		move.w	#$556,$38(a0)
00019AD6 4268 003C                  		clr.w	$3C(a0)
00019ADA 70FF                       		moveq	#-1,d0
00019ADC 3028 0036                  		move.w	$36(a0),d0
00019AE0 6700                       		beq.s	loc_1933C
00019AE2 2240                       		movea.l	d0,a1
00019AE4 137C 00FF 0029             		move.b	#-1,$29(a1)
00019AEA 117C 00FF 0029             		move.b	#-1,$29(a0)
00019AF0 2348 0034                  		move.l	a0,$34(a1)
00019AF4 317C 0032 003C             		move.w	#$32,$3C(a0)
00019AFA                            

00019AFA                            loc_1933C:
00019AFA 4268 0012                  		clr.w	obVelY(a0)
00019AFE 5428 0028                  		addq.b	#2,obSubtype(a0)
00019B02                            

00019B02                            loc_19344:
00019B02 6000 FEAC                  		bra.w	loc_191F2
00019B06                            ; ===========================================================================
00019B06                            

00019B06                            loc_19348:
00019B06 5368 003C                  		subq.w	#1,$3C(a0)
00019B0A 6A00                       		bpl.s	loc_19366
00019B0C 5428 0028                  		addq.b	#2,obSubtype(a0)
00019B10 317C F800 0012             		move.w	#-$800,obVelY(a0)
00019B16 4A68 0036                  		tst.w	$36(a0)
00019B1A 6600                       		bne.s	loc_19362
00019B1C E0E8 0012                  		asr	obVelY(a0)
00019B20                            

00019B20                            loc_19362:
00019B20 7000                       		moveq	#0,d0
00019B22 6000                       		bra.s	loc_1937C
00019B24                            ; ===========================================================================
00019B24                            

00019B24                            loc_19366:
00019B24 7000                       		moveq	#0,d0
00019B26 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019B2C 6E00                       		bgt.s	loc_1937C
00019B2E 7002                       		moveq	#2,d0
00019B30 0828 0001 003D             		btst	#1,standonobject(a0)
00019B36 6700                       		beq.s	loc_1937C
00019B38 4440                       		neg.w	d0
00019B3A                            

00019B3A                            loc_1937C:
00019B3A D068 0038                  		add.w	$38(a0),d0
00019B3E 3140 000C                  		move.w	d0,obY(a0)
00019B42 3168 0030 0008             		move.w	$30(a0),obX(a0)
00019B48 6000 FE76                  		bra.w	loc_19202
00019B4C                            ; ===========================================================================
00019B4C                            

00019B4C                            loc_1938E:
00019B4C 303C 04DA                  		move.w	#$4DA,d0
00019B50 4A68 0036                  		tst.w	$36(a0)
00019B54 6700                       		beq.s	loc_1939C
00019B56 0440 0018                  		subi.w	#$18,d0
00019B5A                            

00019B5A                            loc_1939C:
00019B5A B068 0038                  		cmp.w	$38(a0),d0
00019B5E 6D00                       		blt.s	loc_193BE
00019B60 317C 0008 003C             		move.w	#8,$3C(a0)
00019B66 4A68 0036                  		tst.w	$36(a0)
00019B6A 6700                       		beq.s	loc_193B4
00019B6C 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019B72                            

00019B72                            loc_193B4:
00019B72 5428 0028                  		addq.b	#2,obSubtype(a0)
00019B76 4268 0012                  		clr.w	obVelY(a0)
00019B7A 6000                       		bra.s	loc_193CC
00019B7C                            ; ===========================================================================
00019B7C                            

00019B7C                            loc_193BE:
00019B7C 0C68 FFC0 0012             		cmpi.w	#-$40,obVelY(a0)
00019B82 6C00                       		bge.s	loc_193CC
00019B84 0668 000C 0012             		addi.w	#$C,obVelY(a0)
00019B8A                            

00019B8A                            loc_193CC:
00019B8A 6000 FE24                  		bra.w	loc_191F2
00019B8E                            ; ===========================================================================
00019B8E                            

00019B8E                            loc_193D0:
00019B8E 5368 003C                  		subq.w	#1,$3C(a0)
00019B92 6E00                       		bgt.s	loc_19406
00019B94 6B00                       		bmi.s	loc_193EE
00019B96 70FF                       		moveq	#-1,d0
00019B98 3028 0036                  		move.w	$36(a0),d0
00019B9C 6700                       		beq.s	loc_193E8
00019B9E 2240                       		movea.l	d0,a1
00019BA0 137C 000A 0029             		move.b	#$A,$29(a1)
00019BA6                            

00019BA6                            loc_193E8:
00019BA6 4268 0036                  		clr.w	$36(a0)
00019BAA 6000                       		bra.s	loc_19406
00019BAC                            ; ===========================================================================
00019BAC                            

00019BAC                            loc_193EE:
00019BAC 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019BB2 6600                       		bne.s	loc_19406
00019BB4 4228 0029                  		clr.b	$29(a0)
00019BB8 5528 0025                  		subq.b	#2,ob2ndRout(a0)
00019BBC 117C 00FF 003D             		move.b	#-1,standonobject(a0)
00019BC2 6000                       		bra.s	loc_19446
00019BC4                            ; ===========================================================================
00019BC4                            

00019BC4                            loc_19406:
00019BC4 7001                       		moveq	#1,d0
00019BC6 4A68 0036                  		tst.w	$36(a0)
00019BCA 6700                       		beq.s	loc_19410
00019BCC 7002                       		moveq	#2,d0
00019BCE                            

00019BCE                            loc_19410:
00019BCE 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019BD4 6700                       		beq.s	loc_19424
00019BD6 6D00                       		blt.s	loc_1941C
00019BD8 4440                       		neg.w	d0
00019BDA                            

00019BDA                            loc_1941C:
00019BDA 4A68 0036                  		tst.w	$36(a0)
00019BDE D168 0038                  		add.w	d0,$38(a0)
00019BE2                            

00019BE2                            loc_19424:
00019BE2 7000                       		moveq	#0,d0
00019BE4 4A68 0036                  		tst.w	$36(a0)
00019BE8 6700                       		beq.s	loc_19438
00019BEA 7002                       		moveq	#2,d0
00019BEC 0828 0000 003D             		btst	#0,standonobject(a0)
00019BF2 6700                       		beq.s	loc_19438
00019BF4 4440                       		neg.w	d0
00019BF6                            

00019BF6                            loc_19438:
00019BF6 D068 0038                  		add.w	$38(a0),d0
00019BFA 3140 000C                  		move.w	d0,obY(a0)
00019BFE 3168 0030 0008             		move.w	$30(a0),8(a0)
00019C04                            

00019C04                            loc_19446:
00019C04 6000 FDBA                  		bra.w	loc_19202
00019C08                            

00019C08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019C08                            

00019C08                            

00019C08                            Obj75_FindBlocks:
00019C08 4268 0036                  		clr.w	$36(a0)
00019C0C 43F8 D040                  		lea	(v_objspace+$40).w,a1
00019C10 703E                       		moveq	#$3E,d0
00019C12 7276                       		moveq	#$76,d1
00019C14 1428 0034                  		move.b	$34(a0),d2
00019C18                            

00019C18                            Obj75_FindLoop:
00019C18 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019C1A 6600                       		bne.s	loc_1946A	; if not, branch
00019C1C B429 0028                  		cmp.b	obSubtype(a1),d2
00019C20 6600                       		bne.s	loc_1946A
00019C22 3149 0036                  		move.w	a1,$36(a0)
00019C26 6000                       		bra.s	locret_19472
00019C28                            ; ===========================================================================
00019C28                            

00019C28                            loc_1946A:
00019C28 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019C2C 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019C30                            

00019C30                            locret_19472:
00019C30 4E75                       		rts	
00019C32                            ; End of function Obj75_FindBlocks
00019C32                            

00019C32                            ; ===========================================================================
00019C32                            

00019C32                            loc_19474:
00019C32 5368 003C                  		subq.w	#1,$3C(a0)
00019C36 6B00                       		bmi.s	loc_1947E
00019C38 6000 E3E0                  		bra.w	BossDefeated
00019C3C                            ; ===========================================================================
00019C3C                            

00019C3C                            loc_1947E:
00019C3C 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019C40 4268 0012                  		clr.w	obVelY(a0)
00019C44 08E8 0000 0022             		bset	#0,obStatus(a0)
00019C4A 08A8 0007 0022             		bclr	#7,obStatus(a0)
00019C50 4268 0010                  		clr.w	obVelX(a0)
00019C54 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019C5A 4A38 F7A7                  		tst.b	(v_bossstatus).w
00019C5E 6600                       		bne.s	loc_194A8
00019C60 11FC 0001 F7A7             		move.b	#1,(v_bossstatus).w
00019C66                            

00019C66                            loc_194A8:
00019C66 6000 FD58                  		bra.w	loc_19202
00019C6A                            ; ===========================================================================
00019C6A                            

00019C6A                            loc_194AC:
00019C6A 5268 003C                  		addq.w	#1,$3C(a0)
00019C6E 6700                       		beq.s	loc_194BC
00019C70 6A00                       		bpl.s	loc_194C2
00019C72 0668 0018 0012             		addi.w	#$18,obVelY(a0)
00019C78 6000                       		bra.s	loc_194EE
00019C7A                            ; ===========================================================================
00019C7A                            

00019C7A                            loc_194BC:
00019C7A 4268 0012                  		clr.w	obVelY(a0)
00019C7E 6000                       		bra.s	loc_194EE
00019C80                            ; ===========================================================================
00019C80                            

00019C80                            loc_194C2:
00019C80 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019C86 6500                       		bcs.s	loc_194DA
00019C88 6700                       		beq.s	loc_194E0
00019C8A 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019C90 6500                       		bcs.s	loc_194EE
00019C92 5428 0025                  		addq.b	#2,ob2ndRout(a0)
00019C96 6000                       		bra.s	loc_194EE
00019C98                            ; ===========================================================================
00019C98                            

00019C98                            loc_194DA:
00019C98 5168 0012                  		subq.w	#8,obVelY(a0)
00019C9C 6000                       		bra.s	loc_194EE
00019C9E                            ; ===========================================================================
00019C9E                            

00019C9E                            loc_194E0:
00019C9E 4268 0012                  		clr.w	obVelY(a0)
00019CA2 303C 0000                  		move.w	#bgm_SYZ,d0
00019CA6 4EB9 0000 139C             		jsr	(PlaySound).l		; play SYZ music
00019CAC                            

00019CAC                            loc_194EE:
00019CAC 6000 FD02                  		bra.w	loc_191F2
00019CB0                            ; ===========================================================================
00019CB0                            

00019CB0                            loc_194F2:
00019CB0 317C 0400 0010             		move.w	#$400,obVelX(a0)
00019CB6 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
00019CBC 0C78 2D40 F72A             		cmpi.w	#$2D40,(v_limitright2).w
00019CC2 6400                       		bcc.s	loc_1950C
00019CC4 5478 F72A                  		addq.w	#2,(v_limitright2).w
00019CC8 6000                       		bra.s	loc_19512
00019CCA                            ; ===========================================================================
00019CCA                            

00019CCA                            loc_1950C:
00019CCA 4A28 0001                  		tst.b	obRender(a0)
00019CCE 6A00                       		bpl.s	Obj75_ShipDelete
00019CD0                            

00019CD0                            loc_19512:
00019CD0 6100 E38C                  		bsr.w	BossMove
00019CD4 6000 FCC6                  		bra.w	loc_191DE
00019CD8                            ; ===========================================================================
00019CD8                            

00019CD8                            Obj75_ShipDelete:
00019CD8 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00019CDE                            ; ===========================================================================
00019CDE                            

00019CDE                            Obj75_FaceMain:	; Routine 4
00019CDE 7201                       		moveq	#1,d1
00019CE0 2268 0034                  		movea.l	$34(a0),a1
00019CE4 7000                       		moveq	#0,d0
00019CE6 1029 0025                  		move.b	ob2ndRout(a1),d0
00019CEA 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019CEE 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019CF2 1141 001C                  		move.b	d1,obAnim(a0)
00019CF6 1010                       		move.b	(a0),d0
00019CF8 B011                       		cmp.b	(a1),d0
00019CFA 6600                       		bne.s	Obj75_FaceDelete
00019CFC 6000                       		bra.s	loc_195BE
00019CFE                            ; ===========================================================================
00019CFE                            

00019CFE                            Obj75_FaceDelete:
00019CFE 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00019D04                            ; ===========================================================================
00019D04 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019D08 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019D0C 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019D10                            ; ===========================================================================
00019D10                            

00019D10                            loc_19552:
00019D10 720A                       		moveq	#$A,d1
00019D12 4E75                       		rts	
00019D14                            ; ===========================================================================
00019D14                            

00019D14                            loc_19556:
00019D14 7206                       		moveq	#6,d1
00019D16 4E75                       		rts	
00019D18                            ; ===========================================================================
00019D18                            

00019D18                            loc_1955A:
00019D18 7000                       		moveq	#0,d0
00019D1A 1029 0028                  		move.b	obSubtype(a1),d0
00019D1E 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019D22 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019D26                            ; ===========================================================================
00019D26 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019D2A 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019D2E                            ; ===========================================================================
00019D2E                            

00019D2E                            loc_19570:
00019D2E 6000                       		bra.s	loc_19574
00019D30                            ; ===========================================================================
00019D30                            

00019D30                            loc_19572:
00019D30 7206                       		moveq	#6,d1
00019D32                            

00019D32                            loc_19574:
00019D32 4A29 0020                  		tst.b	obColType(a1)
00019D36 6600                       		bne.s	loc_1957E
00019D38 7205                       		moveq	#5,d1
00019D3A 4E75                       		rts	
00019D3C                            ; ===========================================================================
00019D3C                            

00019D3C                            loc_1957E:
00019D3C 0C38 0004 D024             		cmpi.b	#4,(v_player+obRoutine).w
00019D42 6500                       		bcs.s	locret_19588
00019D44 7204                       		moveq	#4,d1
00019D46                            

00019D46                            locret_19588:
00019D46 4E75                       		rts	
00019D48                            ; ===========================================================================
00019D48                            

00019D48                            Obj75_FlameMain:; Routine 6
00019D48 117C 0007 001C             		move.b	#7,obAnim(a0)
00019D4E 2268 0034                  		movea.l	$34(a0),a1
00019D52 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
00019D58 6600                       		bne.s	loc_195AA
00019D5A 117C 000B 001C             		move.b	#$B,obAnim(a0)
00019D60 4A28 0001                  		tst.b	1(a0)
00019D64 6A00                       		bpl.s	Obj75_FlameDelete
00019D66 6000                       		bra.s	loc_195B6
00019D68                            ; ===========================================================================
00019D68                            

00019D68                            loc_195AA:
00019D68 4A69 0010                  		tst.w	obVelX(a1)
00019D6C 6700                       		beq.s	loc_195B6
00019D6E 117C 0008 001C             		move.b	#8,obAnim(a0)
00019D74                            

00019D74                            loc_195B6:
00019D74 6000                       		bra.s	loc_195BE
00019D76                            ; ===========================================================================
00019D76                            

00019D76                            Obj75_FlameDelete:
00019D76 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00019D7C                            ; ===========================================================================
00019D7C                            

00019D7C                            loc_195BE:
00019D7C 43F9 0001 8476             		lea	(Ani_Eggman).l,a1
00019D82 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
00019D88 2268 0034                  		movea.l	$34(a0),a1
00019D8C 3169 0008 0008             		move.w	obX(a1),obX(a0)
00019D92 3169 000C 000C             		move.w	obY(a1),obY(a0)
00019D98                            

00019D98                            loc_195DA:
00019D98 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
00019D9E 7003                       		moveq	#3,d0
00019DA0 C028 0022                  		and.b	obStatus(a0),d0
00019DA4 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
00019DAA 8128 0001                  		or.b	d0,obRender(a0)
00019DAE 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00019DB4                            ; ===========================================================================
00019DB4                            

00019DB4                            Obj75_SpikeMain:; Routine 8
00019DB4 217C 0001 858E 0004        		move.l	#Map_BossItems,obMap(a0)
00019DBC 317C 246C 0002             		move.w	#$246C,obGfx(a0)
00019DC2 117C 0005 001A             		move.b	#5,obFrame(a0)
00019DC8 2268 0034                  		movea.l	$34(a0),a1
00019DCC 0C29 000A 0025             		cmpi.b	#$A,ob2ndRout(a1)
00019DD2 6600                       		bne.s	loc_1961C
00019DD4 4A28 0001                  		tst.b	obRender(a0)
00019DD8 6A00                       		bpl.s	Obj75_SpikeDelete
00019DDA                            

00019DDA                            loc_1961C:
00019DDA 3169 0008 0008             		move.w	obX(a1),obX(a0)
00019DE0 3169 000C 000C             		move.w	obY(a1),obY(a0)
00019DE6 3028 003C                  		move.w	$3C(a0),d0
00019DEA 0C29 0004 0025             		cmpi.b	#4,ob2ndRout(a1)
00019DF0 6600                       		bne.s	loc_19652
00019DF2 0C29 0006 0028             		cmpi.b	#6,obSubtype(a1)
00019DF8 6700                       		beq.s	loc_1964C
00019DFA 4A29 0028                  		tst.b	obSubtype(a1)
00019DFE 6600                       		bne.s	loc_19658
00019E00 0C40 0094                  		cmpi.w	#$94,d0
00019E04 6C00                       		bge.s	loc_19658
00019E06 5E40                       		addq.w	#7,d0
00019E08 6000                       		bra.s	loc_19658
00019E0A                            ; ===========================================================================
00019E0A                            

00019E0A                            loc_1964C:
00019E0A 4A69 003C                  		tst.w	$3C(a1)
00019E0E 6A00                       		bpl.s	loc_19658
00019E10                            

00019E10                            loc_19652:
00019E10 4A40                       		tst.w	d0
00019E12 6F00                       		ble.s	loc_19658
00019E14 5B40                       		subq.w	#5,d0
00019E16                            

00019E16                            loc_19658:
00019E16 3140 003C                  		move.w	d0,$3C(a0)
00019E1A E440                       		asr.w	#2,d0
00019E1C D168 000C                  		add.w	d0,obY(a0)
00019E20 117C 0008 0019             		move.b	#8,obActWid(a0)
00019E26 117C 000C 0016             		move.b	#$C,obHeight(a0)
00019E2C 4228 0020                  		clr.b	obColType(a0)
00019E30 2268 0034                  		movea.l	$34(a0),a1
00019E34 4A29 0020                  		tst.b	obColType(a1)
00019E38 6700                       		beq.s	loc_19688
00019E3A 4A29 0029                  		tst.b	$29(a1)
00019E3E 6600                       		bne.s	loc_19688
00019E40 117C 0084 0020             		move.b	#$84,obColType(a0)
00019E46                            

00019E46                            loc_19688:
00019E46 6000 FF50                  		bra.w	loc_195DA
00019E4A                            ; ===========================================================================
00019E4A                            

00019E4A                            Obj75_SpikeDelete:
00019E4A 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00019E4A 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00019E50                            		include	"_incObj\76 SYZ Boss Blocks.asm"
00019E50                            ; ---------------------------------------------------------------------------
00019E50                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019E50                            ; ---------------------------------------------------------------------------
00019E50                            

00019E50                            BossBlock:
00019E50 7000                       		moveq	#0,d0
00019E52 1028 0024                  		move.b	obRoutine(a0),d0
00019E56 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019E5A 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019E5E                            ; ===========================================================================
00019E5E 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019E60 0000                       		dc.w Obj76_Action-Obj76_Index
00019E62 0000                       		dc.w loc_19762-Obj76_Index
00019E64                            ; ===========================================================================
00019E64                            

00019E64                            Obj76_Main:	; Routine 0
00019E64 7800                       		moveq	#0,d4
00019E66 3A3C 2C10                  		move.w	#$2C10,d5
00019E6A 7C09                       		moveq	#9,d6
00019E6C 43D0                       		lea	(a0),a1
00019E6E 6000                       		bra.s	Obj76_MakeBlock
00019E70                            ; ===========================================================================
00019E70                            

00019E70                            Obj76_Loop:
00019E70 4EB9 0000 E128             		jsr	(FindFreeObj).l
00019E76 6600                       		bne.s	Obj76_ExitLoop
00019E78                            

00019E78                            Obj76_MakeBlock:
00019E78 12BC 0076                  		move.b	#id_BossBlock,(a1)
00019E7C 237C 0000 0000 0004        		move.l	#Map_BossBlock,obMap(a1)
00019E84 337C 4000 0002             		move.w	#$4000,obGfx(a1)
00019E8A 137C 0004 0001             		move.b	#4,obRender(a1)
00019E90 137C 0010 0019             		move.b	#$10,obActWid(a1)
00019E96 137C 0010 0016             		move.b	#$10,obHeight(a1)
00019E9C 137C 0003 0018             		move.b	#3,obPriority(a1)
00019EA2 3345 0008                  		move.w	d5,obX(a1)	; set x-position
00019EA6 337C 0582 000C             		move.w	#$582,obY(a1)
00019EAC 3344 0028                  		move.w	d4,obSubtype(a1)
00019EB0 0644 0101                  		addi.w	#$101,d4
00019EB4 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019EB8 5429 0024                  		addq.b	#2,obRoutine(a1)
00019EBC 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019EC0                            

00019EC0                            Obj76_ExitLoop:
00019EC0 4E75                       		rts	
00019EC2                            ; ===========================================================================
00019EC2                            

00019EC2                            Obj76_Action:	; Routine 2
00019EC2 1028 0029                  		move.b	$29(a0),d0
00019EC6 B028 0028                  		cmp.b	obSubtype(a0),d0
00019ECA 6700                       		beq.s	Obj76_Solid
00019ECC 4A00                       		tst.b	d0
00019ECE 6B00                       		bmi.s	loc_19718
00019ED0                            

00019ED0                            loc_19712:
00019ED0 6100 0000                  		bsr.w	Obj76_Break
00019ED4 6000                       		bra.s	Obj76_Display
00019ED6                            ; ===========================================================================
00019ED6                            

00019ED6                            loc_19718:
00019ED6 2268 0034                  		movea.l	$34(a0),a1
00019EDA 4A29 0021                  		tst.b	obColProp(a1)
00019EDE 67F0                       		beq.s	loc_19712
00019EE0 3169 0008 0008             		move.w	obX(a1),obX(a0)
00019EE6 3169 000C 000C             		move.w	obY(a1),obY(a0)
00019EEC 0668 002C 000C             		addi.w	#$2C,obY(a0)
00019EF2 B2C8                       		cmpa.w	a0,a1
00019EF4 6500                       		bcs.s	Obj76_Display
00019EF6 3029 0012                  		move.w	obVelY(a1),d0
00019EFA 48C0                       		ext.l	d0
00019EFC E080                       		asr.l	#8,d0
00019EFE D168 000C                  		add.w	d0,obY(a0)
00019F02 6000                       		bra.s	Obj76_Display
00019F04                            ; ===========================================================================
00019F04                            

00019F04                            Obj76_Solid:
00019F04 323C 001B                  		move.w	#$1B,d1
00019F08 343C 0010                  		move.w	#$10,d2
00019F0C 363C 0011                  		move.w	#$11,d3
00019F10 3828 0008                  		move.w	obX(a0),d4
00019F14 4EB9 0001 0070             		jsr	(SolidObject).l
00019F1A                            

00019F1A                            Obj76_Display:
00019F1A 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00019F20                            ; ===========================================================================
00019F20                            

00019F20                            loc_19762:	; Routine 4
00019F20 4A28 0001                  		tst.b	obRender(a0)
00019F24 6A00                       		bpl.s	Obj76_Delete
00019F26 4EB9 0000 DC4E             		jsr	(ObjectFall).l
00019F2C 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
00019F32                            ; ===========================================================================
00019F32                            

00019F32                            Obj76_Delete:
00019F32 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00019F38                            

00019F38                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019F38                            

00019F38                            

00019F38                            Obj76_Break:
00019F38 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019F3C 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
00019F40 7801                       		moveq	#1,d4
00019F42 7203                       		moveq	#3,d1
00019F44 7438                       		moveq	#$38,d2
00019F46 5428 0024                  		addq.b	#2,obRoutine(a0)
00019F4A 117C 0008 0019             		move.b	#8,obActWid(a0)
00019F50 117C 0008 0016             		move.b	#8,obHeight(a0)
00019F56 43D0                       		lea	(a0),a1
00019F58 6000                       		bra.s	Obj76_MakeFrag
00019F5A                            ; ===========================================================================
00019F5A                            

00019F5A                            Obj76_LoopFrag:
00019F5A 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
00019F60 6600                       		bne.s	loc_197D4
00019F62                            

00019F62                            Obj76_MakeFrag:
00019F62 45D0                       		lea	(a0),a2
00019F64 47D1                       		lea	(a1),a3
00019F66 7603                       		moveq	#3,d3
00019F68                            

00019F68                            loc_197AA:
00019F68 26DA                       		move.l	(a2)+,(a3)+
00019F6A 26DA                       		move.l	(a2)+,(a3)+
00019F6C 26DA                       		move.l	(a2)+,(a3)+
00019F6E 26DA                       		move.l	(a2)+,(a3)+
00019F70 51CB FFF6                  		dbf	d3,loc_197AA
00019F74                            

00019F74 335C 0010                  		move.w	(a4)+,obVelX(a1)
00019F78 335C 0012                  		move.w	(a4)+,obVelY(a1)
00019F7C 361D                       		move.w	(a5)+,d3
00019F7E D769 0008                  		add.w	d3,obX(a1)
00019F82 361D                       		move.w	(a5)+,d3
00019F84 D769 000C                  		add.w	d3,obY(a1)
00019F88 1344 001A                  		move.b	d4,obFrame(a1)
00019F8C 5244                       		addq.w	#1,d4
00019F8E 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
00019F92                            

00019F92                            loc_197D4:
00019F92 303C 0000                  		move.w	#sfx_WallSmash,d0
00019F96 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	; play smashing sound
00019F9C                            ; End of function Obj76_Break
00019F9C                            

00019F9C                            ; ===========================================================================
00019F9C FE80 FE00                  Obj76_FragSpeed: dc.w -$180, -$200
00019FA0 0180 FE00                  		dc.w $180, -$200
00019FA4 FF00 FF00                  		dc.w -$100, -$100
00019FA8 0100 FF00                  		dc.w $100, -$100
00019FAC FFF8 FFF8                  Obj76_FragPos:	dc.w -8, -8
00019FB0 0010 0000                  		dc.w $10, 0
00019FB4 0000 0010                  		dc.w 0,	$10
00019FB8 0010 0010                  		dc.w $10, $10
00019FB8 0010 0010                  		dc.w $10, $10
00019FBC                            Map_BossBlock:	include	"_maps\SYZ Boss Blocks.asm"
00019FBC                            ; ---------------------------------------------------------------------------
00019FBC                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019FBC                            ; ---------------------------------------------------------------------------
00019FBC                            Map_BossBlock_internal:
00019FBC 0000                       		dc.w @wholeblock-Map_BossBlock_internal
00019FBE 0000                       		dc.w @topleft-Map_BossBlock_internal
00019FC0 0000                       		dc.w @topright-Map_BossBlock_internal
00019FC2 0000                       		dc.w @bottomleft-Map_BossBlock_internal
00019FC4 0000                       		dc.w @bottomright-Map_BossBlock_internal
00019FC6 02                         @wholeblock:	dc.b 2
00019FC7 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019FCC 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019FD1 00                         		dc.b 0
00019FD2 01                         @topleft:	dc.b 1
00019FD3 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019FD8 01                         @topright:	dc.b 1
00019FD9 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019FDE 01                         @bottomleft:	dc.b 1
00019FDF F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
00019FE4 01                         @bottomright:	dc.b 1
00019FE5 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019FEA                            		even
00019FEA                            		even
00019FEA                            

00019FEA                            loc_1982C:
00019FEA 4EF9 0000 DCDC             		jmp	(DeleteObject).l
00019FF0                            

00019FF0                            		include	"_incObj\82 Eggman - Scrap Brain 2.asm"
00019FF0                            ; ---------------------------------------------------------------------------
00019FF0                            ; Object 82 - Eggman (SBZ2)
00019FF0                            ; ---------------------------------------------------------------------------
00019FF0                            

00019FF0                            ScrapEggman:
00019FF0 7000                       		moveq	#0,d0
00019FF2 1028 0024                  		move.b	obRoutine(a0),d0
00019FF6 323B 0000                  		move.w	SEgg_Index(pc,d0.w),d1
00019FFA 4EFB 1000                  		jmp	SEgg_Index(pc,d1.w)
00019FFE                            ; ===========================================================================
00019FFE 0000                       SEgg_Index:	dc.w SEgg_Main-SEgg_Index
0001A000 0000                       		dc.w SEgg_Eggman-SEgg_Index
0001A002 0000                       		dc.w SEgg_Switch-SEgg_Index
0001A004                            

0001A004 0200 03                    SEgg_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A007 0400 03                    		dc.b 4,	0, 3
0001A00A                            ; ===========================================================================
0001A00A                            

0001A00A                            SEgg_Main:	; Routine 0
0001A00A 45FA FFF8                  		lea	SEgg_ObjData(pc),a2
0001A00E 317C 2160 0008             		move.w	#$2160,obX(a0)
0001A014 317C 05A4 000C             		move.w	#$5A4,obY(a0)
0001A01A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A020 117C 0010 0021             		move.b	#$10,obColProp(a0)
0001A026 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001A02C 4228 0025                  		clr.b	ob2ndRout(a0)
0001A030 115A 0024                  		move.b	(a2)+,obRoutine(a0)
0001A034 115A 001C                  		move.b	(a2)+,obAnim(a0)
0001A038 115A 0018                  		move.b	(a2)+,obPriority(a0)
0001A03C 217C 0000 0000 0004        		move.l	#Map_SEgg,obMap(a0)
0001A044 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001A04A 117C 0004 0001             		move.b	#4,obRender(a0)
0001A050 08E8 0007 0001             		bset	#7,obRender(a0)
0001A056 117C 0020 0019             		move.b	#$20,obActWid(a0)
0001A05C 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
0001A062 6600                       		bne.s	SEgg_Eggman
0001A064 2348 0034                  		move.l	a0,$34(a1)
0001A068 12BC 0082                  		move.b	#id_ScrapEggman,(a1) ; load switch object
0001A06C 337C 2130 0008             		move.w	#$2130,obX(a1)
0001A072 337C 05BC 000C             		move.w	#$5BC,obY(a1)
0001A078 4228 0025                  		clr.b	ob2ndRout(a0)
0001A07C 135A 0024                  		move.b	(a2)+,obRoutine(a1)
0001A080 135A 001C                  		move.b	(a2)+,obAnim(a1)
0001A084 135A 0018                  		move.b	(a2)+,obPriority(a1)
0001A088 237C 0000 C53C 0004        		move.l	#Map_But,obMap(a1)
0001A090 337C 04A4 0002             		move.w	#$4A4,obGfx(a1)
0001A096 137C 0004 0001             		move.b	#4,obRender(a1)
0001A09C 08E9 0007 0001             		bset	#7,obRender(a1)
0001A0A2 137C 0010 0019             		move.b	#$10,obActWid(a1)
0001A0A8 137C 0000 001A             		move.b	#0,obFrame(a1)
0001A0AE                            

0001A0AE                            SEgg_Eggman:	; Routine 2
0001A0AE 7000                       		moveq	#0,d0
0001A0B0 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A0B4 323B 0000                  		move.w	SEgg_EggIndex(pc,d0.w),d1
0001A0B8 4EBB 1000                  		jsr	SEgg_EggIndex(pc,d1.w)
0001A0BC 43FA 0000                  		lea	Ani_SEgg(pc),a1
0001A0C0 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
0001A0C6 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001A0CC                            ; ===========================================================================
0001A0CC 0000                       SEgg_EggIndex:	dc.w SEgg_ChkSonic-SEgg_EggIndex
0001A0CE 0000                       		dc.w SEgg_PreLeap-SEgg_EggIndex
0001A0D0 0000                       		dc.w SEgg_Leap-SEgg_EggIndex
0001A0D2 0000                       		dc.w loc_19934-SEgg_EggIndex
0001A0D4                            ; ===========================================================================
0001A0D4                            

0001A0D4                            SEgg_ChkSonic:
0001A0D4 3028 0008                  		move.w	obX(a0),d0
0001A0D8 9078 D008                  		sub.w	(v_player+obX).w,d0
0001A0DC 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A0E0 6400                       		bcc.s	loc_19934	; if not, branch
0001A0E2 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A0E6 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A0EC 117C 0001 001C             		move.b	#1,obAnim(a0)
0001A0F2                            

0001A0F2                            loc_19934:
0001A0F2 4EF9 0000 DC7A             		jmp	(SpeedToPos).l
0001A0F8                            ; ===========================================================================
0001A0F8                            

0001A0F8                            SEgg_PreLeap:
0001A0F8 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A0FC 6600                       		bne.s	loc_19954	; if time remains, branch
0001A0FE 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A102 117C 0002 001C             		move.b	#2,obAnim(a0)
0001A108 5868 000C                  		addq.w	#4,obY(a0)
0001A10C 317C 000F 003C             		move.w	#15,$3C(a0)
0001A112                            

0001A112                            loc_19954:
0001A112 60DE                       		bra.s	loc_19934
0001A114                            ; ===========================================================================
0001A114                            

0001A114                            SEgg_Leap:
0001A114 5368 003C                  		subq.w	#1,$3C(a0)
0001A118 6E00                       		bgt.s	loc_199D0
0001A11A 6600                       		bne.s	loc_1996A
0001A11C 317C FF04 0010             		move.w	#-$FC,obVelX(a0) ; make Eggman leap
0001A122 317C FC40 0012             		move.w	#-$3C0,obVelY(a0)
0001A128                            

0001A128                            loc_1996A:
0001A128 0C68 2132 0008             		cmpi.w	#$2132,obX(a0)
0001A12E 6E00                       		bgt.s	loc_19976
0001A130 4268 0010                  		clr.w	obVelX(a0)
0001A134                            

0001A134                            loc_19976:
0001A134 0668 0024 0012             		addi.w	#$24,obVelY(a0)
0001A13A 4A68 0012                  		tst.w	obVelY(a0)
0001A13E 6B00                       		bmi.s	SEgg_FindBlocks
0001A140 0C68 0595 000C             		cmpi.w	#$595,obY(a0)
0001A146 6500                       		bcs.s	SEgg_FindBlocks
0001A148 317C 5357 0028             		move.w	#$5357,obSubtype(a0)
0001A14E 0C68 059B 000C             		cmpi.w	#$59B,obY(a0)
0001A154 6500                       		bcs.s	SEgg_FindBlocks
0001A156 317C 059B 000C             		move.w	#$59B,obY(a0)
0001A15C 4268 0012                  		clr.w	obVelY(a0)
0001A160                            

0001A160                            SEgg_FindBlocks:
0001A160 3028 0010                  		move.w	obVelX(a0),d0
0001A164 8068 0012                  		or.w	obVelY(a0),d0
0001A168 6600                       		bne.s	loc_199D0
0001A16A 43F8 D000                  		lea	(v_objspace).w,a1 ; start at the first object RAM
0001A16E 703E                       		moveq	#$3E,d0
0001A170 7240                       		moveq	#$40,d1
0001A172                            

0001A172                            SEgg_FindLoop:	
0001A172 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A174 0C11 0083                  		cmpi.b	#id_FalseFloor,(a1) ; is object a block? (object $83)
0001A178 57C8 FFF8                  		dbeq	d0,SEgg_FindLoop ; if not, repeat (max	$3E times)
0001A17C                            

0001A17C 6600                       		bne.s	loc_199D0
0001A17E 337C 474F 0028             		move.w	#$474F,obSubtype(a1) ; set block to disintegrate
0001A184 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A188 117C 0001 001C             		move.b	#1,obAnim(a0)
0001A18E                            

0001A18E                            loc_199D0:
0001A18E 6000 FF62                  		bra.w	loc_19934
0001A192                            ; ===========================================================================
0001A192                            

0001A192                            SEgg_Switch:	; Routine 4
0001A192 7000                       		moveq	#0,d0
0001A194 1028 0025                  		move.b	ob2ndRout(a0),d0
0001A198 303B 0000                  		move.w	SEgg_SwIndex(pc,d0.w),d0
0001A19C 4EFB 0000                  		jmp	SEgg_SwIndex(pc,d0.w)
0001A1A0                            ; ===========================================================================
0001A1A0 0000                       SEgg_SwIndex:	dc.w loc_199E6-SEgg_SwIndex
0001A1A2 0000                       		dc.w SEgg_SwDisplay-SEgg_SwIndex
0001A1A4                            ; ===========================================================================
0001A1A4                            

0001A1A4                            loc_199E6:
0001A1A4 2268 0034                  		movea.l	$34(a0),a1
0001A1A8 0C69 5357 0028             		cmpi.w	#$5357,obSubtype(a1)
0001A1AE 6600                       		bne.s	SEgg_SwDisplay
0001A1B0 117C 0001 001A             		move.b	#1,obFrame(a0)
0001A1B6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001A1BA                            

0001A1BA                            SEgg_SwDisplay:
0001A1BA 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001A1BA 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001A1C0                            		include	"_anim\Eggman - Scrap Brain 2 & Final.asm"
0001A1C0                            ; ---------------------------------------------------------------------------
0001A1C0                            ; Animation script - Eggman (SBZ2)
0001A1C0                            ; ---------------------------------------------------------------------------
0001A1C0 0000                       Ani_SEgg:	dc.w @stand-Ani_SEgg
0001A1C2 0000                       		dc.w @laugh-Ani_SEgg
0001A1C4 0000                       		dc.w @jump1-Ani_SEgg
0001A1C6 0000                       		dc.w @intube-Ani_SEgg
0001A1C8 0000                       		dc.w @running-Ani_SEgg
0001A1CA 0000                       		dc.w @jump2-Ani_SEgg
0001A1CC 0000                       		dc.w @starjump-Ani_SEgg
0001A1CE 7E00 FF                    @stand:		dc.b $7E, 0, afEnd
0001A1D2 00                         		even
0001A1D2 0601 02FF                  @laugh:		dc.b 6,	1, 2, afEnd
0001A1D6 0E03 0404 0000 00FF        @jump1:		dc.b $E, 3, 4, 4, 0, 0,	0, afEnd
0001A1DE 0005 09FF                  @intube:	dc.b 0,	5, 9, afEnd
0001A1E2 0607 0408 04FF             @running:	dc.b 6,	7, 4, 8, 4, afEnd
0001A1E8 0F04 0303 FF               @jump2:		dc.b $F, 4, 3, 3, afEnd
0001A1EE 00                         		even
0001A1EE 7E06 FF                    @starjump:	dc.b $7E, 6, afEnd
0001A1F2 00                         		even
0001A1F2 00                         		even
0001A1F2                            Map_SEgg:	include	"_maps\Eggman - Scrap Brain 2.asm"
0001A1F2                            ; ---------------------------------------------------------------------------
0001A1F2                            ; Sprite mappings - Eggman (SBZ2)
0001A1F2                            ; ---------------------------------------------------------------------------
0001A1F2                            Map_SEgg_internal:
0001A1F2 0000                       		dc.w @stand-Map_SEgg_internal
0001A1F4 0000                       		dc.w @laugh1-Map_SEgg_internal
0001A1F6 0000                       		dc.w @laugh2-Map_SEgg_internal
0001A1F8 0000                       		dc.w @jump1-Map_SEgg_internal
0001A1FA 0000                       		dc.w @jump2-Map_SEgg_internal
0001A1FC 0000                       		dc.w @surprise-Map_SEgg_internal
0001A1FE 0000                       		dc.w @starjump-Map_SEgg_internal
0001A200 0000                       		dc.w @running1-Map_SEgg_internal
0001A202 0000                       		dc.w @running2-Map_SEgg_internal
0001A204 0000                       		dc.w @intube-Map_SEgg_internal
0001A206 0000                       		dc.w @cockpit-Map_SEgg_internal
0001A208 03                         @stand:		dc.b 3
0001A209 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001A20E E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001A213 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001A218 04                         @laugh1:	dc.b 4
0001A219 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
0001A21E E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001A223 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001A228 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
0001A22D 00                         		dc.b 0
0001A22E 04                         @laugh2:	dc.b 4
0001A22F E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001A234 E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
0001A239 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
0001A23E FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001A243 00                         		dc.b 0
0001A244 04                         @jump1:		dc.b 4
0001A245 F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
0001A24A F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
0001A24F 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001A254 EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
0001A259 00                         		dc.b 0
0001A25A 04                         @jump2:		dc.b 4
0001A25B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001A260 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001A265 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
0001A26A E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001A26F 00                         		dc.b 0
0001A270 04                         @surprise:	dc.b 4
0001A271 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001A276 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001A27B E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001A280 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001A285 00                         		dc.b 0
0001A286 07                         @starjump:	dc.b 7
0001A287 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
0001A28C E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001A291 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001A296 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001A29B F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001A2A0 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
0001A2A5 F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
0001A2AA 05                         @running1:	dc.b 5
0001A2AB F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
0001A2B0 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
0001A2B5 0409 0834 00               		dc.b 4,	9, 8, $34, 0
0001A2BA 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
0001A2BF E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001A2C4 06                         @running2:	dc.b 6
0001A2C5 EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
0001A2CA EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
0001A2CF 0905 0844 00               		dc.b 9,	5, 8, $44, 0
0001A2D4 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
0001A2D9 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
0001A2DE E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0001A2E3 00                         		dc.b 0
0001A2E4 08                         @intube:	dc.b 8
0001A2E5 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC ; Eggman inside tube in Final Zone
0001A2EA E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
0001A2EF E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001A2F4 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
0001A2F9 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
0001A2FE F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
0001A303 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
0001A308 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
0001A30D 03                         @cockpit:	dc.b 3
0001A30E EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4 ; empty cockpit of Eggmobile in Final Zone
0001A313 F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
0001A318 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
0001A31E 00                         		even
0001A31E 00                         		even
0001A31E                            		include	"_incObj\83 SBZ Eggman's Crumbling Floor.asm"
0001A31E                            ; ---------------------------------------------------------------------------
0001A31E                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A31E                            ; ---------------------------------------------------------------------------
0001A31E                            

0001A31E                            FalseFloor:
0001A31E 7000                       		moveq	#0,d0
0001A320 1028 0024                  		move.b	obRoutine(a0),d0
0001A324 323B 0000                  		move.w	FFloor_Index(pc,d0.w),d1
0001A328 4EFB 1000                  		jmp	FFloor_Index(pc,d1.w)
0001A32C                            ; ===========================================================================
0001A32C 0000                       FFloor_Index:	dc.w FFloor_Main-FFloor_Index
0001A32E 0000                       		dc.w FFloor_ChkBreak-FFloor_Index
0001A330 0000                       		dc.w loc_19C36-FFloor_Index
0001A332 0000                       		dc.w loc_19C62-FFloor_Index
0001A334 0000                       		dc.w loc_19C72-FFloor_Index
0001A336 0000                       		dc.w loc_19C80-FFloor_Index
0001A338                            ; ===========================================================================
0001A338                            

0001A338                            FFloor_Main:	; Routine 0
0001A338 317C 2080 0008             		move.w	#$2080,obX(a0)
0001A33E 317C 05D0 000C             		move.w	#$5D0,obY(a0)
0001A344 117C 0080 0019             		move.b	#$80,obActWid(a0)
0001A34A 117C 0010 0016             		move.b	#$10,obHeight(a0)
0001A350 117C 0004 0001             		move.b	#4,obRender(a0)
0001A356 08E8 0007 0001             		bset	#7,obRender(a0)
0001A35C 7800                       		moveq	#0,d4
0001A35E 3A3C 2010                  		move.w	#$2010,d5
0001A362 7C07                       		moveq	#7,d6
0001A364 45E8 0030                  		lea	$30(a0),a2
0001A368                            

0001A368                            FFloor_MakeBlock:
0001A368 4EB9 0000 E128             		jsr	(FindFreeObj).l
0001A36E 6600                       		bne.s	FFloor_ExitMake
0001A370 34C9                       		move.w	a1,(a2)+
0001A372 12BC 0083                  		move.b	#id_FalseFloor,(a1) ; load block object
0001A376 237C 0000 0000 0004        		move.l	#Map_FFloor,obMap(a1)
0001A37E 337C 4518 0002             		move.w	#$4518,obGfx(a1)
0001A384 137C 0004 0001             		move.b	#4,obRender(a1)
0001A38A 137C 0010 0019             		move.b	#$10,obActWid(a1)
0001A390 137C 0010 0016             		move.b	#$10,obHeight(a1)
0001A396 137C 0003 0018             		move.b	#3,obPriority(a1)
0001A39C 3345 0008                  		move.w	d5,obX(a1)	; set X	position
0001A3A0 337C 05D0 000C             		move.w	#$5D0,obY(a1)
0001A3A6 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A3AA 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001A3B0 51CE FFB6                  		dbf	d6,FFloor_MakeBlock ; repeat sequence 7 more times
0001A3B4                            

0001A3B4                            FFloor_ExitMake:
0001A3B4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A3B8 4E75                       		rts	
0001A3BA                            ; ===========================================================================
0001A3BA                            

0001A3BA                            FFloor_ChkBreak:; Routine 2
0001A3BA 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001A3C0 6600                       		bne.s	FFloor_Solid	; if not, branch
0001A3C2 4228 001A                  		clr.b	obFrame(a0)
0001A3C6 5428 0024                  		addq.b	#2,obRoutine(a0) ; next subroutine
0001A3CA                            

0001A3CA                            FFloor_Solid:
0001A3CA 7000                       		moveq	#0,d0
0001A3CC 1028 001A                  		move.b	obFrame(a0),d0
0001A3D0 4400                       		neg.b	d0
0001A3D2 4880                       		ext.w	d0
0001A3D4 5040                       		addq.w	#8,d0
0001A3D6 E940                       		asl.w	#4,d0
0001A3D8 383C 2100                  		move.w	#$2100,d4
0001A3DC 9840                       		sub.w	d0,d4
0001A3DE 1140 0019                  		move.b	d0,obActWid(a0)
0001A3E2 3144 0008                  		move.w	d4,obX(a0)
0001A3E6 720B                       		moveq	#$B,d1
0001A3E8 D240                       		add.w	d0,d1
0001A3EA 7410                       		moveq	#$10,d2
0001A3EC 7611                       		moveq	#$11,d3
0001A3EE 4EF9 0001 0070             		jmp	(SolidObject).l
0001A3F4                            ; ===========================================================================
0001A3F4                            

0001A3F4                            loc_19C36:	; Routine 4
0001A3F4 0428 000E 001E             		subi.b	#$E,obTimeFrame(a0)
0001A3FA 6400                       		bcc.s	FFloor_Solid2
0001A3FC 70FF                       		moveq	#-1,d0
0001A3FE 1028 001A                  		move.b	obFrame(a0),d0
0001A402 4880                       		ext.w	d0
0001A404 D040                       		add.w	d0,d0
0001A406 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A40A 2240                       		movea.l	d0,a1
0001A40C 337C 474F 0028             		move.w	#$474F,obSubtype(a1)
0001A412 5228 001A                  		addq.b	#1,obFrame(a0)
0001A416 0C28 0008 001A             		cmpi.b	#8,obFrame(a0)
0001A41C 6700                       		beq.s	loc_19C62
0001A41E                            

0001A41E                            FFloor_Solid2:
0001A41E 60AA                       		bra.s	FFloor_Solid
0001A420                            ; ===========================================================================
0001A420                            

0001A420                            loc_19C62:	; Routine 6
0001A420 08A8 0003 0022             		bclr	#3,obStatus(a0)
0001A426 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001A42C 6000 FBBC                  		bra.w	loc_1982C
0001A430                            ; ===========================================================================
0001A430                            

0001A430                            loc_19C72:	; Routine 8
0001A430 0C68 474F 0028             		cmpi.w	#$474F,obSubtype(a0) ; is object set to disintegrate?
0001A436 6700                       		beq.s	FFloor_Break	; if yes, branch
0001A438 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001A43E                            ; ===========================================================================
0001A43E                            

0001A43E                            loc_19C80:	; Routine $A
0001A43E 4A28 0001                  		tst.b	obRender(a0)
0001A442 6A00 FBA6                  		bpl.w	loc_1982C
0001A446 4EB9 0000 DC4E             		jsr	(ObjectFall).l
0001A44C 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001A452                            ; ===========================================================================
0001A452                            

0001A452                            FFloor_Break:
0001A452 49FA 0000                  		lea	FFloor_FragSpeed(pc),a4
0001A456 4BFA 0000                  		lea	FFloor_FragPos(pc),a5
0001A45A 7801                       		moveq	#1,d4
0001A45C 7203                       		moveq	#3,d1
0001A45E 7438                       		moveq	#$38,d2
0001A460 5428 0024                  		addq.b	#2,obRoutine(a0)
0001A464 117C 0008 0019             		move.b	#8,obActWid(a0)
0001A46A 117C 0008 0016             		move.b	#8,obHeight(a0)
0001A470 43D0                       		lea	(a0),a1
0001A472 6000                       		bra.s	FFloor_MakeFrag
0001A474                            ; ===========================================================================
0001A474                            

0001A474                            FFloor_LoopFrag:
0001A474 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
0001A47A 6600                       		bne.s	FFloor_BreakSnd
0001A47C                            

0001A47C                            FFloor_MakeFrag:
0001A47C 45D0                       		lea	(a0),a2
0001A47E 47D1                       		lea	(a1),a3
0001A480 7603                       		moveq	#3,d3
0001A482                            

0001A482                            loc_19CC4:
0001A482 26DA                       		move.l	(a2)+,(a3)+
0001A484 26DA                       		move.l	(a2)+,(a3)+
0001A486 26DA                       		move.l	(a2)+,(a3)+
0001A488 26DA                       		move.l	(a2)+,(a3)+
0001A48A 51CB FFF6                  		dbf	d3,loc_19CC4
0001A48E                            

0001A48E 335C 0012                  		move.w	(a4)+,obVelY(a1)
0001A492 361D                       		move.w	(a5)+,d3
0001A494 D769 0008                  		add.w	d3,obX(a1)
0001A498 361D                       		move.w	(a5)+,d3
0001A49A D769 000C                  		add.w	d3,obY(a1)
0001A49E 1344 001A                  		move.b	d4,obFrame(a1)
0001A4A2 5244                       		addq.w	#1,d4
0001A4A4 51C9 FFCE                  		dbf	d1,FFloor_LoopFrag ; repeat sequence 3 more times
0001A4A8                            

0001A4A8                            FFloor_BreakSnd:
0001A4A8 303C 0000                  		move.w	#sfx_WallSmash,d0
0001A4AC 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play smashing sound
0001A4B2 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001A4B8                            ; ===========================================================================
0001A4B8 0080 0000                  FFloor_FragSpeed: dc.w $80, 0
0001A4BC 0120 00C0                  		dc.w $120, $C0
0001A4C0 FFF8 FFF8                  FFloor_FragPos:	dc.w -8, -8
0001A4C4 0010 0000                  		dc.w $10, 0
0001A4C8 0000 0010                  		dc.w 0,	$10
0001A4CC 0010 0010                  		dc.w $10, $10
0001A4CC 0010 0010                  		dc.w $10, $10
0001A4D0                            Map_FFloor:	include	"_maps\SBZ Eggman's Crumbling Floor.asm"
0001A4D0                            ; ---------------------------------------------------------------------------
0001A4D0                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A4D0                            ; ---------------------------------------------------------------------------
0001A4D0                            Map_FFloor_internal:
0001A4D0 0000                       		dc.w @wholeblock-Map_FFloor_internal
0001A4D2 0000                       		dc.w @topleft-Map_FFloor_internal
0001A4D4 0000                       		dc.w @topright-Map_FFloor_internal
0001A4D6 0000                       		dc.w @bottomleft-Map_FFloor_internal
0001A4D8 0000                       		dc.w @bottomright-Map_FFloor_internal
0001A4DA 01                         @wholeblock:	dc.b 1
0001A4DB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A4E0 02                         @topleft:	dc.b 2
0001A4E1 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A4E6 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A4EB 00                         		dc.b 0
0001A4EC 02                         @topright:	dc.b 2
0001A4ED F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A4F2 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A4F7 00                         		dc.b 0
0001A4F8 02                         @bottomleft:	dc.b 2
0001A4F9 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A4FE F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A503 00                         		dc.b 0
0001A504 02                         @bottomright:	dc.b 2
0001A505 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A50A F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A510 00                         		even
0001A510 00                         		even
0001A510                            		include	"_incObj\85 Boss - Final.asm"
0001A510                            ; ---------------------------------------------------------------------------
0001A510                            ; Object 85 - Eggman (FZ)
0001A510                            ; ---------------------------------------------------------------------------
0001A510                            

0001A510                            Obj85_Delete:
0001A510 4EF9 0000 DCDC             		jmp	(DeleteObject).l
0001A516                            ; ===========================================================================
0001A516                            

0001A516                            BossFinal:
0001A516 7000                       		moveq	#0,d0
0001A518 1028 0024                  		move.b	obRoutine(a0),d0
0001A51C 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A520 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A524                            ; ===========================================================================
0001A524 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A526 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A528 0000                       		dc.w loc_1A38E-Obj85_Index
0001A52A 0000                       		dc.w loc_1A346-Obj85_Index
0001A52C 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A52E 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A530 0000                       		dc.w loc_1A264-Obj85_Index
0001A532                            

0001A532 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A538 0001 A1F2                  		dc.l Map_SEgg		; mappings pointer
0001A53C 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A542 0000 0000                  		dc.l Map_EggCyl
0001A546 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A54C 0000 0000                  		dc.l Map_FZLegs
0001A550 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A556 0001 A1F2                  		dc.l Map_SEgg
0001A55A 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A560 0001 84C6                  		dc.l Map_Eggman
0001A564 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A56A 0001 84C6                  		dc.l Map_Eggman
0001A56E                            

0001A56E 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A573 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A578 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A57D 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A582 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A587 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A58C                            ; ===========================================================================
0001A58C                            

0001A58C                            Obj85_Main:	; Routine 0
0001A58C 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A590 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A594 2248                       		movea.l	a0,a1
0001A596 7205                       		moveq	#5,d1
0001A598 6000                       		bra.s	Obj85_LoadBoss
0001A59A                            ; ===========================================================================
0001A59A                            

0001A59A                            Obj85_Loop:
0001A59A 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
0001A5A0 6600                       		bne.s	loc_19E20
0001A5A2                            

0001A5A2                            Obj85_LoadBoss:
0001A5A2 12BC 0085                  		move.b	#id_BossFinal,(a1)
0001A5A6 335A 0008                  		move.w	(a2)+,obX(a1)
0001A5AA 335A 000C                  		move.w	(a2)+,obY(a1)
0001A5AE 335A 0002                  		move.w	(a2)+,obGfx(a1)
0001A5B2 235A 0004                  		move.l	(a2)+,obMap(a1)
0001A5B6 135B 0024                  		move.b	(a3)+,obRoutine(a1)
0001A5BA 135B 001C                  		move.b	(a3)+,obAnim(a1)
0001A5BE 135B 0018                  		move.b	(a3)+,obPriority(a1)
0001A5C2 135B 0019                  			move.b	(a3)+,obActWid(a1)
0001A5C6 135B 0016                  		move.b	(a3)+,obHeight(a1)
0001A5CA 137C 0004 0001             		move.b	#4,obRender(a1)
0001A5D0 08E8 0007 0001             		bset	#7,obRender(a0)
0001A5D6 2348 0034                  		move.l	a0,$34(a1)
0001A5DA 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A5DE                            

0001A5DE                            loc_19E20:
0001A5DE 45E8 0036                  		lea	$36(a0),a2
0001A5E2 4EB9 0000 E128             		jsr	(FindFreeObj).l
0001A5E8 6600                       		bne.s	loc_19E5A
0001A5EA 12BC 0086                  		move.b	#id_BossPlasma,(a1) ; load energy ball object
0001A5EE 3489                       		move.w	a1,(a2)
0001A5F0 2348 0034                  		move.l	a0,$34(a1)
0001A5F4 45E8 0038                  		lea	$38(a0),a2
0001A5F8 7400                       		moveq	#0,d2
0001A5FA 7203                       		moveq	#3,d1
0001A5FC                            

0001A5FC                            loc_19E3E:
0001A5FC 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
0001A602 6600                       		bne.s	loc_19E5A
0001A604 34C9                       		move.w	a1,(a2)+
0001A606 12BC 0084                  		move.b	#id_EggmanCylinder,(a1) ; load crushing	cylinder object
0001A60A 2348 0034                  		move.l	a0,$34(a1)
0001A60E 1342 0028                  		move.b	d2,obSubtype(a1)
0001A612 5442                       		addq.w	#2,d2
0001A614 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A618                            

0001A618                            loc_19E5A:
0001A618 317C 0000 0034             		move.w	#0,$34(a0)
0001A61E 117C 0008 0021             		move.b	#8,obColProp(a0) ; set number of hits to 8
0001A624 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A62A                            

0001A62A                            Obj85_Eggman:	; Routine 2
0001A62A 7000                       		moveq	#0,d0
0001A62C 1028 0034                  		move.b	$34(a0),d0
0001A630 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A634 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A638 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001A63E                            ; ===========================================================================
0001A63E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A642 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A646 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A64A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A64E                            ; ===========================================================================
0001A64E                            

0001A64E                            loc_19E90:
0001A64E 4AB8 F680                  		tst.l	(v_plc_buffer).w
0001A652 6600                       		bne.s	loc_19EA2
0001A654 0C78 2450 F700             		cmpi.w	#$2450,(v_screenposx).w
0001A65A 6500                       		bcs.s	loc_19EA2
0001A65C 5428 0034                  		addq.b	#2,$34(a0)
0001A660                            

0001A660                            loc_19EA2:
0001A660 52B8 F636                  		addq.l	#1,(v_random).w
0001A664 4E75                       		rts	
0001A666                            ; ===========================================================================
0001A666                            

0001A666                            loc_19EA8:
0001A666 4A68 0030                  		tst.w	$30(a0)
0001A66A 6A00                       		bpl.s	loc_19F10
0001A66C 4268 0030                  		clr.w	$30(a0)
0001A670 4EB9 0000 29BA             		jsr	(RandomNumber).l
0001A676 0240 000C                  		andi.w	#$C,d0
0001A67A 3200                       		move.w	d0,d1
0001A67C 5441                       		addq.w	#2,d1
0001A67E 4A80                       		tst.l	d0
0001A680 6A00                       		bpl.s	loc_19EC6
0001A682 C340                       		exg	d1,d0
0001A684                            

0001A684                            loc_19EC6:
0001A684 43FA 0000                  		lea	word_19FD6(pc),a1
0001A688 3031 0000                  		move.w	(a1,d0.w),d0
0001A68C 3231 1000                  		move.w	(a1,d1.w),d1
0001A690 3140 0030                  		move.w	d0,$30(a0)
0001A694 74FF                       		moveq	#-1,d2
0001A696 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A69A 2242                       		movea.l	d2,a1
0001A69C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A6A2 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A6A8 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A6AC 2242                       		movea.l	d2,a1
0001A6AE 137C 0001 0029             		move.b	#1,$29(a1)
0001A6B4 337C 0000 0030             		move.w	#0,$30(a1)
0001A6BA 317C 0001 0032             		move.w	#1,$32(a0)
0001A6C0 4228 0035                  		clr.b	$35(a0)
0001A6C4 303C 0000                  		move.w	#sfx_Rumbling,d0
0001A6C8 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play rumbling sound
0001A6CE                            

0001A6CE                            loc_19F10:
0001A6CE 4A68 0032                  		tst.w	$32(a0)
0001A6D2 6B00 0000                  		bmi.w	loc_19FA6
0001A6D6 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001A6DC 3038 D008                  		move.w	(v_player+obX).w,d0
0001A6E0 9068 0008                  		sub.w	obX(a0),d0
0001A6E4 6500                       		bcs.s	loc_19F2E
0001A6E6 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A6EC                            

0001A6EC                            loc_19F2E:
0001A6EC 323C 002B                  		move.w	#$2B,d1
0001A6F0 343C 0014                  		move.w	#$14,d2
0001A6F4 363C 0014                  		move.w	#$14,d3
0001A6F8 3828 0008                  		move.w	obX(a0),d4
0001A6FC 4EB9 0001 0070             		jsr	(SolidObject).l
0001A702 4A44                       		tst.w	d4
0001A704 6E00                       		bgt.s	loc_19F50
0001A706                            

0001A706                            loc_19F48:
0001A706 4A28 0035                  		tst.b	$35(a0)
0001A70A 6600                       		bne.s	loc_19F88
0001A70C 6000                       		bra.s	loc_19F96
0001A70E                            ; ===========================================================================
0001A70E                            

0001A70E                            loc_19F50:
0001A70E 5E78 F636                  		addq.w	#7,(v_random).w
0001A712 0C38 0002 D01C             		cmpi.b	#id_Roll,(v_player+obAnim).w
0001A718 66EC                       		bne.s	loc_19F48
0001A71A 303C 0300                  		move.w	#$300,d0
0001A71E 0828 0000 0022             		btst	#0,obStatus(a0)
0001A724 6600                       		bne.s	loc_19F6A
0001A726 4440                       		neg.w	d0
0001A728                            

0001A728                            loc_19F6A:
0001A728 31C0 D010                  		move.w	d0,(v_player+obVelX).w
0001A72C 4A28 0035                  		tst.b	$35(a0)
0001A730 6600                       		bne.s	loc_19F88
0001A732 5328 0021                  		subq.b	#1,obColProp(a0)
0001A736 117C 0064 0035             		move.b	#$64,$35(a0)
0001A73C 303C 0000                  		move.w	#sfx_HitBoss,d0
0001A740 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play boss damage sound
0001A746                            

0001A746                            loc_19F88:
0001A746 5328 0035                  		subq.b	#1,$35(a0)
0001A74A 6700                       		beq.s	loc_19F96
0001A74C 117C 0003 001C             		move.b	#3,obAnim(a0)
0001A752 6000                       		bra.s	loc_19F9C
0001A754                            ; ===========================================================================
0001A754                            

0001A754                            loc_19F96:
0001A754 117C 0001 001C             		move.b	#1,obAnim(a0)
0001A75A                            

0001A75A                            loc_19F9C:
0001A75A 43FA FA64                  		lea	Ani_SEgg(pc),a1
0001A75E 4EF9 0000 ADB0             		jmp	(AnimateSprite).l
0001A764                            ; ===========================================================================
0001A764                            

0001A764                            loc_19FA6:
0001A764 4A28 0021                  		tst.b	obColProp(a0)
0001A768 6700                       		beq.s	loc_19FBC
0001A76A 5428 0034                  		addq.b	#2,$34(a0)
0001A76E 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A774 4268 0032                  		clr.w	$32(a0)
0001A778 4E75                       		rts	
0001A77A                            ; ===========================================================================
0001A77A                            

0001A77A                            loc_19FBC:
0001A77A 7064                       			moveq	#100,d0
0001A77C 6100 0000                  			bsr.w	AddPoints
0001A780 117C 0006 0034             		move.b	#6,$34(a0)
0001A786 317C 25C0 0008             		move.w	#$25C0,obX(a0)
0001A78C 317C 053C 000C             		move.w	#$53C,obY(a0)
0001A792 117C 0014 0016             		move.b	#$14,obHeight(a0)
0001A798 4E75                       		rts	
0001A79A                            ; ===========================================================================
0001A79A 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A7AA                            ; ===========================================================================
0001A7AA                            

0001A7AA                            loc_19FE6:
0001A7AA 70FF                       		moveq	#-1,d0
0001A7AC 3028 0036                  		move.w	$36(a0),d0
0001A7B0 2240                       		movea.l	d0,a1
0001A7B2 4A68 0030                  		tst.w	$30(a0)
0001A7B6 6A00                       		bpl.s	loc_1A000
0001A7B8 4268 0030                  		clr.w	$30(a0)
0001A7BC 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A7C2 6100                       		bsr.s	loc_1A020
0001A7C4                            

0001A7C4                            loc_1A000:
0001A7C4 700F                       		moveq	#$F,d0
0001A7C6 C078 FE0E                  		and.w	(v_vbla_word).w,d0
0001A7CA 6600                       		bne.s	loc_1A00A
0001A7CC 6100                       		bsr.s	loc_1A020
0001A7CE                            

0001A7CE                            loc_1A00A:
0001A7CE 4A68 0032                  		tst.w	$32(a0)
0001A7D2 6700                       		beq.s	locret_1A01E
0001A7D4 5528 0034                  		subq.b	#2,$34(a0)
0001A7D8 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A7DE 4268 0032                  		clr.w	$32(a0)
0001A7E2                            

0001A7E2                            locret_1A01E:
0001A7E2 4E75                       		rts	
0001A7E4                            ; ===========================================================================
0001A7E4                            

0001A7E4                            loc_1A020:
0001A7E4 303C 0000                  		move.w	#sfx_Electric,d0
0001A7E8 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	; play electricity sound
0001A7EE                            ; ===========================================================================
0001A7EE                            

0001A7EE                            loc_1A02A:
0001A7EE 117C 0030 0019             			move.b	#$30,obActWid(a0)
0001A7F4 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A7FA 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
0001A800 117C 0006 001A             		move.b	#6,obFrame(a0)
0001A806 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001A80C 0C68 059C 000C             		cmpi.w	#$59C,obY(a0)
0001A812 6500                       		bcs.s	loc_1A070
0001A814 317C 059C 000C             		move.w	#$59C,obY(a0)
0001A81A 5428 0034                  		addq.b	#2,$34(a0)
0001A81E 117C 0020 0019             			move.b	#$20,obActWid(a0)
0001A824 317C 0100 0010             		move.w	#$100,obVelX(a0)
0001A82A 317C FF00 0012             		move.w	#-$100,obVelY(a0)
0001A830 5438 F742                  		addq.b	#2,(v_dle_routine).w
0001A834                            

0001A834                            loc_1A070:
0001A834 6000 0000                  		bra.w	loc_1A166
0001A838                            ; ===========================================================================
0001A838                            

0001A838                            loc_1A074:
0001A838 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A83E 117C 0004 001C             		move.b	#4,obAnim(a0)
0001A844 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
0001A84A 0668 0010 0012             		addi.w	#$10,obVelY(a0)
0001A850 0C68 05A3 000C             		cmpi.w	#$5A3,obY(a0)
0001A856 6500                       		bcs.s	loc_1A09A
0001A858 317C FFC0 0012             		move.w	#-$40,obVelY(a0)
0001A85E                            

0001A85E                            loc_1A09A:
0001A85E 317C 0400 0010             		move.w	#$400,obVelX(a0)
0001A864 3028 0008                  		move.w	obX(a0),d0
0001A868 9078 D008                  		sub.w	(v_player+obX).w,d0
0001A86C 6A00                       		bpl.s	loc_1A0B4
0001A86E 317C 0500 0010             		move.w	#$500,obVelX(a0)
0001A874 6000 0000                  		bra.w	loc_1A0F2
0001A878                            ; ===========================================================================
0001A878                            

0001A878                            loc_1A0B4:
0001A878 0440 0070                  		subi.w	#$70,d0
0001A87C 6500                       		bcs.s	loc_1A0F2
0001A87E 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001A884 5140                       		subq.w	#8,d0
0001A886 6500                       		bcs.s	loc_1A0F2
0001A888 0468 0100 0010             		subi.w	#$100,obVelX(a0)
0001A88E 5140                       		subq.w	#8,d0
0001A890 6500                       		bcs.s	loc_1A0F2
0001A892 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001A898 5140                       		subq.w	#8,d0
0001A89A 6500                       		bcs.s	loc_1A0F2
0001A89C 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001A8A2 5140                       		subq.w	#8,d0
0001A8A4 6500                       		bcs.s	loc_1A0F2
0001A8A6 0468 0080 0010             		subi.w	#$80,obVelX(a0)
0001A8AC 0440 0038                  		subi.w	#$38,d0
0001A8B0 6500                       		bcs.s	loc_1A0F2
0001A8B2 4268 0010                  		clr.w	obVelX(a0)
0001A8B6                            

0001A8B6                            loc_1A0F2:
0001A8B6 0C68 26A0 0008             		cmpi.w	#$26A0,obX(a0)
0001A8BC 6500                       		bcs.s	loc_1A110
0001A8BE 317C 26A0 0008             		move.w	#$26A0,obX(a0)
0001A8C4 317C 0240 0010             		move.w	#$240,obVelX(a0)
0001A8CA 317C FB40 0012             		move.w	#-$4C0,obVelY(a0)
0001A8D0 5428 0034                  		addq.b	#2,$34(a0)
0001A8D4                            

0001A8D4                            loc_1A110:
0001A8D4 6000                       		bra.s	loc_1A15C
0001A8D6                            ; ===========================================================================
0001A8D6                            

0001A8D6                            loc_1A112:
0001A8D6 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
0001A8DC 0C68 26E0 0008             		cmpi.w	#$26E0,obX(a0)
0001A8E2 6500                       		bcs.s	loc_1A124
0001A8E4 4268 0010                  		clr.w	obVelX(a0)
0001A8E8                            

0001A8E8                            loc_1A124:
0001A8E8 0668 0034 0012             		addi.w	#$34,obVelY(a0)
0001A8EE 4A68 0012                  		tst.w	obVelY(a0)
0001A8F2 6B00                       		bmi.s	loc_1A142
0001A8F4 0C68 0592 000C             		cmpi.w	#$592,obY(a0)
0001A8FA 6500                       		bcs.s	loc_1A142
0001A8FC 317C 0592 000C             		move.w	#$592,obY(a0)
0001A902 4268 0012                  		clr.w	obVelY(a0)
0001A906                            

0001A906                            loc_1A142:
0001A906 3028 0010                  		move.w	obVelX(a0),d0
0001A90A 8068 0012                  		or.w	obVelY(a0),d0
0001A90E 6600                       		bne.s	loc_1A15C
0001A910 5428 0034                  		addq.b	#2,$34(a0)
0001A914 317C FE80 0012             		move.w	#-$180,obVelY(a0)
0001A91A 117C 0001 0021             		move.b	#1,obColProp(a0)
0001A920                            

0001A920                            loc_1A15C:
0001A920 43FA F89E                  		lea	Ani_SEgg(pc),a1
0001A924 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
0001A92A                            

0001A92A                            loc_1A166:
0001A92A 0C78 2700 F72A             		cmpi.w	#$2700,(v_limitright2).w
0001A930 6C00                       		bge.s	loc_1A172
0001A932 5478 F72A                  		addq.w	#2,(v_limitright2).w
0001A936                            

0001A936                            loc_1A172:
0001A936 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A93C 6C00                       		bge.s	locret_1A190
0001A93E 323C 001B                  		move.w	#$1B,d1
0001A942 343C 0070                  		move.w	#$70,d2
0001A946 363C 0071                  		move.w	#$71,d3
0001A94A 3828 0008                  		move.w	obX(a0),d4
0001A94E 4EF9 0001 0070             		jmp	(SolidObject).l
0001A954                            ; ===========================================================================
0001A954                            

0001A954                            locret_1A190:
0001A954 4E75                       		rts	
0001A956                            ; ===========================================================================
0001A956                            

0001A956                            loc_1A192:
0001A956 217C 0001 84C6 0004        		move.l	#Map_Eggman,obMap(a0)
0001A95E 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001A964 117C 0000 001C             		move.b	#0,obAnim(a0)
0001A96A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A970 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
0001A976 0C68 0544 000C             		cmpi.w	#$544,obY(a0)
0001A97C 6400                       		bcc.s	loc_1A1D0
0001A97E 317C 0180 0010             		move.w	#$180,obVelX(a0)
0001A984 317C FFE8 0012             		move.w	#-$18,obVelY(a0)
0001A98A 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A990 5428 0034                  		addq.b	#2,$34(a0)
0001A994                            

0001A994                            loc_1A1D0:
0001A994 6000 FF8A                  		bra.w	loc_1A15C
0001A998                            ; ===========================================================================
0001A998                            

0001A998                            loc_1A1D4:
0001A998 08E8 0000 0022             		bset	#0,obStatus(a0)
0001A99E 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
0001A9A4 4A68 0030                  		tst.w	$30(a0)
0001A9A8 6600                       		bne.s	loc_1A1FC
0001A9AA 4A28 0020                  		tst.b	obColType(a0)
0001A9AE 6600                       		bne.s	loc_1A216
0001A9B0 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A9B6 303C 0000                  		move.w	#sfx_HitBoss,d0
0001A9BA 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play boss damage sound
0001A9C0                            

0001A9C0                            loc_1A1FC:
0001A9C0 5368 0030                  		subq.w	#1,$30(a0)
0001A9C4 6600                       		bne.s	loc_1A216
0001A9C6 4A28 0022                  		tst.b	obStatus(a0)
0001A9CA 6A00                       		bpl.s	loc_1A210
0001A9CC 317C 0060 0012             		move.w	#$60,obVelY(a0)
0001A9D2 6000                       		bra.s	loc_1A216
0001A9D4                            ; ===========================================================================
0001A9D4                            

0001A9D4                            loc_1A210:
0001A9D4 117C 000F 0020             		move.b	#$F,obColType(a0)
0001A9DA                            

0001A9DA                            loc_1A216:
0001A9DA 0C78 2790 D008             		cmpi.w	#$2790,(v_player+obX).w
0001A9E0 6D00                       		blt.s	loc_1A23A
0001A9E2 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w
0001A9E8 31FC 0000 F602             		move.w	#0,(v_jpadhold2).w
0001A9EE 4278 D014                  		clr.w	(v_player+obInertia).w
0001A9F2 4A68 0012                  		tst.w	obVelY(a0)
0001A9F6 6A00                       		bpl.s	loc_1A248
0001A9F8 31FC 0100 F602             		move.w	#$100,(v_jpadhold2).w
0001A9FE                            

0001A9FE                            loc_1A23A:
0001A9FE 0C78 27E0 D008             		cmpi.w	#$27E0,(v_player+obX).w
0001AA04 6D00                       		blt.s	loc_1A248
0001AA06 31FC 27E0 D008             		move.w	#$27E0,(v_player+obX).w
0001AA0C                            

0001AA0C                            loc_1A248:
0001AA0C 0C68 2900 0008             		cmpi.w	#$2900,obX(a0)
0001AA12 6500                       		bcs.s	loc_1A260
0001AA14 4A28 0001                  		tst.b	obRender(a0)
0001AA18 6B00                       		bmi.s	loc_1A260
0001AA1A 11FC 0000 F600             		move.b	#id_Ending,(v_gamemode).w
0001AA20 6000 FAEE                  		bra.w	Obj85_Delete
0001AA24                            ; ===========================================================================
0001AA24                            

0001AA24                            loc_1A260:
0001AA24 6000 FEFA                  		bra.w	loc_1A15C
0001AA28                            ; ===========================================================================
0001AA28                            

0001AA28                            loc_1A264:	; Routine 4
0001AA28 2268 0034                  		movea.l	$34(a0),a1
0001AA2C 1011                       		move.b	(a1),d0
0001AA2E B010                       		cmp.b	(a0),d0
0001AA30 6600 FADE                  		bne.w	Obj85_Delete
0001AA34 117C 0007 001C             		move.b	#7,obAnim(a0)
0001AA3A 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AA40 6C00                       		bge.s	loc_1A280
0001AA42 6000                       		bra.s	loc_1A2A6
0001AA44                            ; ===========================================================================
0001AA44                            

0001AA44                            loc_1A280:
0001AA44 4A69 0010                  		tst.w	obVelX(a1)
0001AA48 6700                       		beq.s	loc_1A28C
0001AA4A 117C 000B 001C             		move.b	#$B,obAnim(a0)
0001AA50                            

0001AA50                            loc_1A28C:
0001AA50 43FA DA24                  		lea	Ani_Eggman(pc),a1
0001AA54 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
0001AA5A                            

0001AA5A                            loc_1A296:
0001AA5A 2268 0034                  		movea.l	$34(a0),a1
0001AA5E 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001AA64 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001AA6A                            

0001AA6A                            loc_1A2A6:
0001AA6A 2268 0034                  		movea.l	$34(a0),a1
0001AA6E 1169 0022 0022             		move.b	obStatus(a1),obStatus(a0)
0001AA74 7003                       		moveq	#3,d0
0001AA76 C028 0022                  		and.b	obStatus(a0),d0
0001AA7A 0228 00FC 0001             		andi.b	#$FC,obRender(a0)
0001AA80 8128 0001                  		or.b	d0,obRender(a0)
0001AA84 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001AA8A                            ; ===========================================================================
0001AA8A                            

0001AA8A                            loc_1A2C6:	; Routine 6
0001AA8A 2268 0034                  		movea.l	$34(a0),a1
0001AA8E 1011                       		move.b	(a1),d0
0001AA90 B010                       		cmp.b	(a0),d0
0001AA92 6600 FA7C                  		bne.w	Obj85_Delete
0001AA96 0CA9 0001 84C6 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001AA9E 6700                       		beq.s	loc_1A2E4
0001AAA0 117C 000A 001A             		move.b	#$A,obFrame(a0)
0001AAA6 60C2                       		bra.s	loc_1A2A6
0001AAA8                            ; ===========================================================================
0001AAA8                            

0001AAA8                            loc_1A2E4:
0001AAA8 117C 0001 001C             		move.b	#1,obAnim(a0)
0001AAAE 4A29 0021                  		tst.b	obColProp(a1)
0001AAB2 6F00                       		ble.s	loc_1A312
0001AAB4 117C 0006 001C             		move.b	#6,obAnim(a0)
0001AABA 217C 0001 84C6 0004        		move.l	#Map_Eggman,obMap(a0)
0001AAC2 317C 0400 0002             		move.w	#$400,obGfx(a0)
0001AAC8 43FA D9AC                  		lea	Ani_Eggman(pc),a1
0001AACC 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
0001AAD2 6000 FF86                  		bra.w	loc_1A296
0001AAD6                            ; ===========================================================================
0001AAD6                            

0001AAD6                            loc_1A312:
0001AAD6 4A28 0001                  		tst.b	1(a0)
0001AADA 6A00 FA34                  		bpl.w	Obj85_Delete
0001AADE 6100 D53A                  		bsr.w	BossDefeated
0001AAE2 117C 0002 0018             		move.b	#2,obPriority(a0)
0001AAE8 117C 0000 001C             		move.b	#0,obAnim(a0)
0001AAEE 217C 0000 0000 0004        		move.l	#Map_FZDamaged,obMap(a0)
0001AAF6 317C 03A0 0002             		move.w	#$3A0,obGfx(a0)
0001AAFC 43FA 0000                  		lea	Ani_FZEgg(pc),a1
0001AB00 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
0001AB06 6000 FF52                  		bra.w	loc_1A296
0001AB0A                            ; ===========================================================================
0001AB0A                            

0001AB0A                            loc_1A346:	; Routine 8
0001AB0A 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AB10 2268 0034                  		movea.l	$34(a0),a1
0001AB14 0CA9 0001 84C6 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001AB1C 6700                       		beq.s	loc_1A35E
0001AB1E 6000 FF4A                  		bra.w	loc_1A2A6
0001AB22                            ; ===========================================================================
0001AB22                            

0001AB22                            loc_1A35E:
0001AB22 3169 0008 0008             		move.w	obX(a1),obX(a0)
0001AB28 3169 000C 000C             		move.w	obY(a1),obY(a0)
0001AB2E 4A28 001E                  		tst.b	obTimeFrame(a0)
0001AB32 6600                       		bne.s	loc_1A376
0001AB34 117C 0014 001E             		move.b	#$14,obTimeFrame(a0)
0001AB3A                            

0001AB3A                            loc_1A376:
0001AB3A 5328 001E                  		subq.b	#1,obTimeFrame(a0)
0001AB3E 6E00                       		bgt.s	loc_1A38A
0001AB40 5228 001A                  		addq.b	#1,obFrame(a0)
0001AB44 0C28 0002 001A             		cmpi.b	#2,obFrame(a0)
0001AB4A 6E00 F9C4                  		bgt.w	Obj85_Delete
0001AB4E                            

0001AB4E                            loc_1A38A:
0001AB4E 6000 FF0A                  		bra.w	loc_1A296
0001AB52                            ; ===========================================================================
0001AB52                            

0001AB52                            loc_1A38E:	; Routine $A
0001AB52 117C 000B 001A             		move.b	#$B,obFrame(a0)
0001AB58 3038 D008                  		move.w	(v_player+obX).w,d0
0001AB5C 9068 0008                  		sub.w	obX(a0),d0
0001AB60 6500                       		bcs.s	loc_1A3A6
0001AB62 4A28 0001                  		tst.b	obRender(a0)
0001AB66 6A00 F9A8                  		bpl.w	Obj85_Delete
0001AB6A                            

0001AB6A                            loc_1A3A6:
0001AB6A 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001AB70                            ; ===========================================================================
0001AB70                            

0001AB70                            loc_1A3AC:	; Routine $C
0001AB70 117C 0000 001A             		move.b	#0,obFrame(a0)
0001AB76 08E8 0000 0022             		bset	#0,obStatus(a0)
0001AB7C 2268 0034                  		movea.l	$34(a0),a1
0001AB80 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001AB86 6600                       		bne.s	loc_1A3D0
0001AB88 0CA9 0001 84C6 0004        		cmpi.l	#Map_Eggman,obMap(a1)
0001AB90 6700 F97E                  		beq.w	Obj85_Delete
0001AB94                            

0001AB94                            loc_1A3D0:
0001AB94 6000 FED4                  		bra.w	loc_1A2A6
0001AB94 6000 FED4                  		bra.w	loc_1A2A6
0001AB98                            		include	"_anim\FZ Eggman in Ship.asm"
0001AB98                            ; ---------------------------------------------------------------------------
0001AB98                            ; Animation script - Eggman (FZ)
0001AB98                            ; ---------------------------------------------------------------------------
0001AB98 0000                       Ani_FZEgg:	dc.w byte_1A3D6-Ani_FZEgg
0001AB9A 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, afEnd
0001AB9E                            		even
0001AB9E                            		even
0001AB9E                            Map_FZDamaged:	include	"_maps\FZ Damaged Eggmobile.asm"
0001AB9E                            ; ---------------------------------------------------------------------------
0001AB9E                            ; Sprite mappings - Eggman in broken eggmobile (FZ)
0001AB9E                            ; ---------------------------------------------------------------------------
0001AB9E                            Map_FZDamaged_internal:
0001AB9E 0000                       		dc.w @damage1-Map_FZDamaged_internal
0001ABA0 0000                       		dc.w @damage2-Map_FZDamaged_internal
0001ABA2 06                         @damage1:	dc.b 6
0001ABA3 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001ABA8 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001ABAD EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ABB2 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ABB7 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ABBC 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ABC1 06                         @damage2:	dc.b 6
0001ABC2 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001ABC7 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001ABCC EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001ABD1 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001ABD6 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001ABDB 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001ABE0                            		even
0001ABE0                            		even
0001ABE0                            Map_FZLegs:	include	"_maps\FZ Eggmobile Legs.asm"
0001ABE0                            ; ---------------------------------------------------------------------------
0001ABE0                            ; Sprite mappings - legs on Eggman's escape ship (FZ)
0001ABE0                            ; ---------------------------------------------------------------------------
0001ABE0                            Map_FZLegs_internal:
0001ABE0 0000                       		dc.w @extended-Map_FZLegs_internal
0001ABE2 0000                       		dc.w @halfway-Map_FZLegs_internal
0001ABE4 0000                       		dc.w @retracted-Map_FZLegs_internal
0001ABE6 02                         @extended:	dc.b 2
0001ABE7 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001ABEC 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001ABF1 03                         @halfway:	dc.b 3
0001ABF2 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001ABF7 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001ABFC 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AC01 02                         @retracted:	dc.b 2
0001AC02 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AC07 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AC0C                            		even
0001AC0C                            		even
0001AC0C                            		include	"_incObj\84 FZ Eggman's Cylinders.asm"
0001AC0C                            ; ---------------------------------------------------------------------------
0001AC0C                            ; Object 84 - cylinder Eggman hides in (FZ)
0001AC0C                            ; ---------------------------------------------------------------------------
0001AC0C                            

0001AC0C                            Obj84_Delete:
0001AC0C 4EF9 0000 DCDC             		jmp	(DeleteObject).l
0001AC12                            ; ===========================================================================
0001AC12                            

0001AC12                            EggmanCylinder:
0001AC12 7000                       		moveq	#0,d0
0001AC14 1028 0024                  		move.b	obRoutine(a0),d0
0001AC18 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AC1C 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AC20                            ; ===========================================================================
0001AC20 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AC22 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AC24 0000                       		dc.w loc_1A57E-Obj84_Index
0001AC26                            

0001AC26 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AC2A 2550 0620                  		dc.w $2550, $620
0001AC2E 2490 04C0                  		dc.w $2490, $4C0
0001AC32 2510 04C0                  		dc.w $2510, $4C0
0001AC36                            ; ===========================================================================
0001AC36                            

0001AC36                            Obj84_Main:	; Routine
0001AC36 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001AC3A 7000                       		moveq	#0,d0
0001AC3C 1028 0028                  		move.b	obSubtype(a0),d0
0001AC40 D040                       		add.w	d0,d0
0001AC42 D2C0                       		adda.w	d0,a1
0001AC44 117C 0004 0001             		move.b	#4,obRender(a0)
0001AC4A 08E8 0007 0001             		bset	#7,obRender(a0)
0001AC50 08E8 0004 0001             		bset	#4,obRender(a0)
0001AC56 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001AC5C 217C 0000 0000 0004        		move.l	#Map_EggCyl,obMap(a0)
0001AC64 3159 0008                  		move.w	(a1)+,obX(a0)
0001AC68 3151 000C                  		move.w	(a1),obY(a0)
0001AC6C 3159 0038                  		move.w	(a1)+,$38(a0)
0001AC70 117C 0020 0016             		move.b	#$20,obHeight(a0)
0001AC76 117C 0060 0017             		move.b	#$60,obWidth(a0)
0001AC7C 117C 0020 0019             		move.b	#$20,obActWid(a0)
0001AC82 117C 0060 0016             		move.b	#$60,obHeight(a0)
0001AC88 117C 0003 0018             		move.b	#3,obPriority(a0)
0001AC8E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AC92                            

0001AC92                            loc_1A4CE:	; Routine 2
0001AC92 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001AC98 6F00                       		ble.s	loc_1A4DC
0001AC9A 08E8 0001 0001             		bset	#1,obRender(a0)
0001ACA0                            

0001ACA0                            loc_1A4DC:
0001ACA0 42A8 003C                  		clr.l	$3C(a0)
0001ACA4 4A28 0029                  		tst.b	$29(a0)
0001ACA8 6700                       		beq.s	loc_1A4EA
0001ACAA 5428 0024                  		addq.b	#2,obRoutine(a0)
0001ACAE                            

0001ACAE                            loc_1A4EA:
0001ACAE 2028 003C                  		move.l	$3C(a0),d0
0001ACB2 2228 0038                  		move.l	$38(a0),d1
0001ACB6 D280                       		add.l	d0,d1
0001ACB8 4841                       		swap	d1
0001ACBA 3141 000C                  		move.w	d1,obY(a0)
0001ACBE 0C28 0004 0024             		cmpi.b	#4,obRoutine(a0)
0001ACC4 6600                       		bne.s	loc_1A524
0001ACC6 4A68 0030                  		tst.w	$30(a0)
0001ACCA 6A00                       		bpl.s	loc_1A524
0001ACCC 70F6                       		moveq	#-$A,d0
0001ACCE 0C28 0002 0028             		cmpi.b	#2,obSubtype(a0)
0001ACD4 6F00                       		ble.s	loc_1A514
0001ACD6 700E                       		moveq	#$E,d0
0001ACD8                            

0001ACD8                            loc_1A514:
0001ACD8 D240                       		add.w	d0,d1
0001ACDA 2268 0034                  		movea.l	$34(a0),a1
0001ACDE 3341 000C                  		move.w	d1,obY(a1)
0001ACE2 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001ACE8                            

0001ACE8                            loc_1A524:
0001ACE8 323C 002B                  		move.w	#$2B,d1
0001ACEC 343C 0060                  		move.w	#$60,d2
0001ACF0 363C 0061                  		move.w	#$61,d3
0001ACF4 3828 0008                  		move.w	obX(a0),d4
0001ACF8 4EB9 0001 0070             		jsr	(SolidObject).l
0001ACFE 7000                       		moveq	#0,d0
0001AD00 3228 003C                  		move.w	$3C(a0),d1
0001AD04 6A00                       		bpl.s	loc_1A550
0001AD06 4441                       		neg.w	d1
0001AD08 5141                       		subq.w	#8,d1
0001AD0A 6500                       		bcs.s	loc_1A55C
0001AD0C 5200                       		addq.b	#1,d0
0001AD0E E841                       		asr.w	#4,d1
0001AD10 D041                       		add.w	d1,d0
0001AD12 6000                       		bra.s	loc_1A55C
0001AD14                            ; ===========================================================================
0001AD14                            

0001AD14                            loc_1A550:
0001AD14 0441 0027                  		subi.w	#$27,d1
0001AD18 6500                       		bcs.s	loc_1A55C
0001AD1A 5200                       		addq.b	#1,d0
0001AD1C E841                       		asr.w	#4,d1
0001AD1E D041                       		add.w	d1,d0
0001AD20                            

0001AD20                            loc_1A55C:
0001AD20 1140 001A                  		move.b	d0,obFrame(a0)
0001AD24 3038 D008                  		move.w	(v_player+obX).w,d0
0001AD28 9068 0008                  		sub.w	obX(a0),d0
0001AD2C 6B00                       		bmi.s	loc_1A578
0001AD2E 0440 0140                  		subi.w	#$140,d0
0001AD32 6B00                       		bmi.s	loc_1A578
0001AD34 4A28 0001                  		tst.b	obRender(a0)
0001AD38 6A00 FED2                  		bpl.w	Obj84_Delete
0001AD3C                            

0001AD3C                            loc_1A578:
0001AD3C 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001AD42                            ; ===========================================================================
0001AD42                            

0001AD42                            loc_1A57E:	; Routine 4
0001AD42 7000                       		moveq	#0,d0
0001AD44 1028 0028                  		move.b	obSubtype(a0),d0
0001AD48 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AD4C 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AD50 6000 FF5C                  		bra.w	loc_1A4EA
0001AD54                            ; ===========================================================================
0001AD54 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AD56 0000                       		dc.w loc_1A598-off_1A590
0001AD58 0000                       		dc.w loc_1A604-off_1A590
0001AD5A 0000                       		dc.w loc_1A604-off_1A590
0001AD5C                            ; ===========================================================================
0001AD5C                            

0001AD5C                            loc_1A598:
0001AD5C 4A28 0029                  		tst.b	$29(a0)
0001AD60 6600                       		bne.s	loc_1A5D4
0001AD62 2268 0034                  		movea.l	$34(a0),a1
0001AD66 4A29 0021                  		tst.b	obColProp(a1)
0001AD6A 6600                       		bne.s	loc_1A5B4
0001AD6C 6100 D2AC                  		bsr.w	BossDefeated
0001AD70 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AD78                            

0001AD78                            loc_1A5B4:
0001AD78 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AD80 6400                       		bcc.s	locret_1A602
0001AD82 42A8 003C                  		clr.l	$3C(a0)
0001AD86 2268 0034                  		movea.l	$34(a0),a1
0001AD8A 5369 0032                  		subq.w	#1,$32(a1)
0001AD8E 4269 0030                  		clr.w	$30(a1)
0001AD92 5528 0024                  		subq.b	#2,obRoutine(a0)
0001AD96 4E75                       		rts	
0001AD98                            ; ===========================================================================
0001AD98                            

0001AD98                            loc_1A5D4:
0001AD98 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AD9E 6C00                       		bge.s	loc_1A5E4
0001ADA0 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001ADA8                            

0001ADA8                            loc_1A5E4:
0001ADA8 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001ADB0 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001ADB6 6E00                       		bgt.s	locret_1A602
0001ADB8 4268 003E                  		clr.w	$3E(a0)
0001ADBC 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001ADC2 4228 0029                  		clr.b	$29(a0)
0001ADC6                            

0001ADC6                            locret_1A602:
0001ADC6 4E75                       		rts	
0001ADC8                            ; ===========================================================================
0001ADC8                            

0001ADC8                            loc_1A604:
0001ADC8 08E8 0001 0001             		bset	#1,obRender(a0)
0001ADCE 4A28 0029                  		tst.b	$29(a0)
0001ADD2 6600                       		bne.s	loc_1A646
0001ADD4 2268 0034                  		movea.l	$34(a0),a1
0001ADD8 4A29 0021                  		tst.b	obColProp(a1)
0001ADDC 6600                       		bne.s	loc_1A626
0001ADDE 6100 D23A                  		bsr.w	BossDefeated
0001ADE2 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001ADEA                            

0001ADEA                            loc_1A626:
0001ADEA 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001ADF2 6400                       		bcc.s	locret_1A674
0001ADF4 42A8 003C                  		clr.l	$3C(a0)
0001ADF8 2268 0034                  		movea.l	$34(a0),a1
0001ADFC 5369 0032                  		subq.w	#1,$32(a1)
0001AE00 4269 0030                  		clr.w	$30(a1)
0001AE04 5528 0024                  		subq.b	#2,obRoutine(a0)
0001AE08 4E75                       		rts	
0001AE0A                            ; ===========================================================================
0001AE0A                            

0001AE0A                            loc_1A646:
0001AE0A 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AE10 6D00                       		blt.s	loc_1A656
0001AE12 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AE1A                            

0001AE1A                            loc_1A656:
0001AE1A 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AE22 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AE28 6D00                       		blt.s	locret_1A674
0001AE2A 4268 003E                  		clr.w	$3E(a0)
0001AE2E 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AE34 4228 0029                  		clr.b	$29(a0)
0001AE38                            

0001AE38                            locret_1A674:
0001AE38 4E75                       		rts	
0001AE38 4E75                       		rts	
0001AE3A                            Map_EggCyl:	include	"_maps\FZ Eggman's Cylinders.asm"
0001AE3A                            ; ---------------------------------------------------------------------------
0001AE3A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AE3A                            ; ---------------------------------------------------------------------------
0001AE3A                            Map_EggCyl_internal:
0001AE3A 0000                       		dc.w @flat-Map_EggCyl_internal
0001AE3C 0000                       		dc.w @extending1-Map_EggCyl_internal
0001AE3E 0000                       		dc.w @extending2-Map_EggCyl_internal
0001AE40 0000                       		dc.w @extending3-Map_EggCyl_internal
0001AE42 0000                       		dc.w @extending4-Map_EggCyl_internal
0001AE44 0000                       		dc.w @extendedfully-Map_EggCyl_internal
0001AE46 0000                       		dc.w @extendedfully-Map_EggCyl_internal
0001AE48 0000                       		dc.w @extendedfully-Map_EggCyl_internal
0001AE4A 0000                       		dc.w @extendedfully-Map_EggCyl_internal
0001AE4C 0000                       		dc.w @extendedfully-Map_EggCyl_internal
0001AE4E 0000                       		dc.w @extendedfully-Map_EggCyl_internal
0001AE50 0000                       		dc.w @controlpanel-Map_EggCyl_internal
0001AE52 06                         @flat:		dc.b 6
0001AE53 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE58 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE5D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE62 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE67 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AE6C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AE71 08                         @extending1:	dc.b 8
0001AE72 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AE77 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AE7C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AE81 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AE86 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AE8B B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AE90 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AE95 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AE9A 0A                         @extending2:	dc.b $A
0001AE9B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AEA0 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AEA5 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AEAA B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AEAF B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AEB4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AEB9 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AEBE D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AEC3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AEC8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AECD 0C                         @extending3:	dc.b $C
0001AECE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AED3 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AED8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AEDD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AEE2 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AEE7 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AEEC D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AEF1 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AEF6 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AEFB F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF00 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AF05 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AF0A 0D                         @extending4:	dc.b $D
0001AF0B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF10 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF15 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF1A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF1F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF24 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF29 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF2E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF33 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF38 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF3D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AF42 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AF47 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AF4C 0E                         @extendedfully:	dc.b $E
0001AF4D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AF52 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AF57 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AF5C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AF61 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AF66 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AF6B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001AF70 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001AF75 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001AF7A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001AF7F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001AF84 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001AF89 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001AF8E 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001AF93 02                         @controlpanel:	dc.b 2
0001AF94 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001AF99 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001AF9E                            		even
0001AF9E                            		even
0001AF9E                            		include	"_incObj\86 FZ Plasma Ball Launcher.asm"
0001AF9E                            ; ---------------------------------------------------------------------------
0001AF9E                            ; Object 86 - energy balls (FZ)
0001AF9E                            ; ---------------------------------------------------------------------------
0001AF9E                            

0001AF9E                            BossPlasma:
0001AF9E 7000                       		moveq	#0,d0
0001AFA0 1028 0024                  		move.b	obRoutine(a0),d0
0001AFA4 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001AFA8 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001AFAC                            ; ===========================================================================
0001AFAC 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001AFAE 0000                       		dc.w Obj86_Generator-Obj86_Index
0001AFB0 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001AFB2 0000                       		dc.w loc_1A962-Obj86_Index
0001AFB4 0000                       		dc.w loc_1A982-Obj86_Index
0001AFB6                            ; ===========================================================================
0001AFB6                            

0001AFB6                            Obj86_Main:	; Routine 0
0001AFB6 317C 2588 0008             		move.w	#$2588,obX(a0)
0001AFBC 317C 053C 000C             		move.w	#$53C,obY(a0)
0001AFC2 317C 0300 0002             		move.w	#$300,obGfx(a0)
0001AFC8 217C 0000 0000 0004        		move.l	#Map_PLaunch,obMap(a0)
0001AFD0 117C 0000 001C             		move.b	#0,obAnim(a0)
0001AFD6 117C 0003 0018             		move.b	#3,obPriority(a0)
0001AFDC 117C 0008 0017             		move.b	#8,obWidth(a0)
0001AFE2 117C 0008 0016             		move.b	#8,obHeight(a0)
0001AFE8 117C 0004 0001             		move.b	#4,obRender(a0)
0001AFEE 08E8 0007 0001             		bset	#7,obRender(a0)
0001AFF4 5428 0024                  		addq.b	#2,obRoutine(a0)
0001AFF8                            

0001AFF8                            Obj86_Generator:; Routine 2
0001AFF8 2268 0034                  		movea.l	$34(a0),a1
0001AFFC 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B002 6600                       		bne.s	loc_1A850
0001B004 10BC 003F                  		move.b	#id_ExplosionBomb,(a0)
0001B008 117C 0000 0024             		move.b	#0,obRoutine(a0)
0001B00E 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001B014                            ; ===========================================================================
0001B014                            

0001B014                            loc_1A850:
0001B014 117C 0000 001C             		move.b	#0,obAnim(a0)
0001B01A 4A28 0029                  		tst.b	$29(a0)
0001B01E 6700                       		beq.s	loc_1A86C
0001B020 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B024 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B02A 117C 003E 0028             		move.b	#$3E,obSubtype(a0)
0001B030                            

0001B030                            loc_1A86C:
0001B030 323C 0013                  		move.w	#$13,d1
0001B034 343C 0008                  		move.w	#8,d2
0001B038 363C 0011                  		move.w	#$11,d3
0001B03C 3828 0008                  		move.w	obX(a0),d4
0001B040 4EB9 0001 0070             		jsr	(SolidObject).l
0001B046 3038 D008                  		move.w	(v_player+obX).w,d0
0001B04A 9068 0008                  		sub.w	obX(a0),d0
0001B04E 6B00                       		bmi.s	loc_1A89A
0001B050 0440 0140                  		subi.w	#$140,d0
0001B054 6B00                       		bmi.s	loc_1A89A
0001B056 4A28 0001                  		tst.b	obRender(a0)
0001B05A 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B05E                            

0001B05E                            loc_1A89A:
0001B05E 43FA 0000                  		lea	Ani_PLaunch(pc),a1
0001B062 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
0001B068 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001B06E                            ; ===========================================================================
0001B06E                            

0001B06E                            Obj86_MakeBalls:; Routine 4
0001B06E 4A28 0029                  		tst.b	$29(a0)
0001B072 6700 0000                  		beq.w	loc_1A954
0001B076 4228 0029                  		clr.b	$29(a0)
0001B07A D068 0030                  		add.w	$30(a0),d0
0001B07E 0240 001E                  		andi.w	#$1E,d0
0001B082 D4C0                       		adda.w	d0,a2
0001B084 5868 0030                  		addq.w	#4,$30(a0)
0001B088 4268 0032                  		clr.w	$32(a0)
0001B08C 7403                       		moveq	#3,d2
0001B08E                            

0001B08E                            Obj86_Loop:
0001B08E 4EB9 0000 E13E             		jsr	(FindNextFreeObj).l
0001B094 6600 0000                  		bne.w	loc_1A954
0001B098 12BC 0086                  		move.b	#id_BossPlasma,(a1)
0001B09C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B0A2 337C 053C 000C             		move.w	#$53C,obY(a1)
0001B0A8 137C 0008 0024             		move.b	#8,obRoutine(a1)
0001B0AE 337C 2300 0002             		move.w	#$2300,obGfx(a1)
0001B0B4 237C 0000 0000 0004        		move.l	#Map_Plasma,obMap(a1)
0001B0BC 137C 000C 0016             		move.b	#$C,obHeight(a1)
0001B0C2 137C 000C 0017             		move.b	#$C,obWidth(a1)
0001B0C8 137C 0000 0020             		move.b	#0,obColType(a1)
0001B0CE 137C 0003 0018             		move.b	#3,obPriority(a1)
0001B0D4 337C 003E 0028             		move.w	#$3E,obSubtype(a1)
0001B0DA 137C 0004 0001             		move.b	#4,obRender(a1)
0001B0E0 08E9 0007 0001             		bset	#7,obRender(a1)
0001B0E6 2348 0034                  		move.l	a0,$34(a1)
0001B0EA 4EB9 0000 29BA             		jsr	(RandomNumber).l
0001B0F0 3228 0032                  		move.w	$32(a0),d1
0001B0F4 C3FC FFB1                  		muls.w	#-$4F,d1
0001B0F8 0641 2578                  		addi.w	#$2578,d1
0001B0FC 0240 001F                  		andi.w	#$1F,d0
0001B100 0440 0010                  		subi.w	#$10,d0
0001B104 D041                       		add.w	d1,d0
0001B106 3340 0030                  		move.w	d0,$30(a1)
0001B10A 5268 0032                  		addq.w	#1,$32(a0)
0001B10E 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B114 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B118                            

0001B118                            loc_1A954:
0001B118 4A68 0032                  		tst.w	$32(a0)
0001B11C 6600                       		bne.s	loc_1A95E
0001B11E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B122                            

0001B122                            loc_1A95E:
0001B122 6000 FF0C                  		bra.w	loc_1A86C
0001B126                            ; ===========================================================================
0001B126                            

0001B126                            loc_1A962:	; Routine 6
0001B126 117C 0002 001C             		move.b	#2,obAnim(a0)
0001B12C 4A68 0038                  		tst.w	$38(a0)
0001B130 6600                       		bne.s	loc_1A97E
0001B132 117C 0002 0024             		move.b	#2,obRoutine(a0)
0001B138 2268 0034                  		movea.l	$34(a0),a1
0001B13C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B142                            

0001B142                            loc_1A97E:
0001B142 6000 FEEC                  		bra.w	loc_1A86C
0001B146                            ; ===========================================================================
0001B146                            

0001B146                            loc_1A982:	; Routine 8
0001B146 7000                       		moveq	#0,d0
0001B148 1028 0025                  		move.b	ob2ndRout(a0),d0
0001B14C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B150 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B154 43FA 0000                  		lea	Ani_Plasma(pc),a1
0001B158 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
0001B15E 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001B164                            ; ===========================================================================
0001B164 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B166 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B168 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B16A                            ; ===========================================================================
0001B16A                            

0001B16A                            loc_1A9A6:
0001B16A 3028 0030                  		move.w	$30(a0),d0
0001B16E 9068 0008                  		sub.w	obX(a0),d0
0001B172 E940                       		asl.w	#4,d0
0001B174 3140 0010                  		move.w	d0,obVelX(a0)
0001B178 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001B17E 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B182 4E75                       		rts	
0001B184                            ; ===========================================================================
0001B184                            

0001B184                            loc_1A9C0:
0001B184 4A68 0010                  		tst.w	obVelX(a0)
0001B188 6700                       		beq.s	loc_1A9E6
0001B18A 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
0001B190 3028 0008                  		move.w	obX(a0),d0
0001B194 9068 0030                  		sub.w	$30(a0),d0
0001B198 6400                       		bcc.s	loc_1A9E6
0001B19A 4268 0010                  		clr.w	obVelX(a0)
0001B19E D168 0008                  		add.w	d0,obX(a0)
0001B1A2 2268 0034                  		movea.l	$34(a0),a1
0001B1A6 5369 0032                  		subq.w	#1,$32(a1)
0001B1AA                            

0001B1AA                            loc_1A9E6:
0001B1AA 117C 0000 001C             		move.b	#0,obAnim(a0)
0001B1B0 5368 0028                  		subq.w	#1,obSubtype(a0)
0001B1B4 6600                       		bne.s	locret_1AA1C
0001B1B6 5428 0025                  		addq.b	#2,ob2ndRout(a0)
0001B1BA 117C 0001 001C             		move.b	#1,obAnim(a0)
0001B1C0 117C 009A 0020             		move.b	#$9A,obColType(a0)
0001B1C6 317C 00B4 0028             		move.w	#$B4,obSubtype(a0)
0001B1CC 7000                       		moveq	#0,d0
0001B1CE 3038 D008                  		move.w	(v_player+obX).w,d0
0001B1D2 9068 0008                  		sub.w	obX(a0),d0
0001B1D6 3140 0010                  		move.w	d0,obVelX(a0)
0001B1DA 317C 0140 0012             		move.w	#$140,obVelY(a0)
0001B1E0                            

0001B1E0                            locret_1AA1C:
0001B1E0 4E75                       		rts	
0001B1E2                            ; ===========================================================================
0001B1E2                            

0001B1E2                            loc_1AA1E:
0001B1E2 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
0001B1E8 0C68 05E0 000C             		cmpi.w	#$5E0,obY(a0)
0001B1EE 6400                       		bcc.s	loc_1AA34
0001B1F0 5368 0028                  		subq.w	#1,obSubtype(a0)
0001B1F4 6700                       		beq.s	loc_1AA34
0001B1F6 4E75                       		rts	
0001B1F8                            ; ===========================================================================
0001B1F8                            

0001B1F8                            loc_1AA34:
0001B1F8 2268 0034                  		movea.l	$34(a0),a1
0001B1FC 5369 0038                  		subq.w	#1,$38(a1)
0001B200 6000 FA0A                  		bra.w	Obj84_Delete
0001B200 6000 FA0A                  		bra.w	Obj84_Delete
0001B204                            		include	"_anim\Plasma Ball Launcher.asm"
0001B204                            ; ---------------------------------------------------------------------------
0001B204                            ; Animation script - energy ball launcher (FZ)
0001B204                            ; ---------------------------------------------------------------------------
0001B204 0000                       Ani_PLaunch:	dc.w @red-Ani_PLaunch
0001B206 0000                       		dc.w @redsparking-Ani_PLaunch
0001B208 0000                       		dc.w @whitesparking-Ani_PLaunch
0001B20A 7E00 FF                    @red:		dc.b $7E, 0, afEnd
0001B20E 00                         		even
0001B20E 0100 0200 03FF             @redsparking:	dc.b 1,	0, 2, 0, 3, afEnd
0001B214                            		even
0001B214 0101 0201 03FF             @whitesparking:	dc.b 1,	1, 2, 1, 3, afEnd
0001B21A                            		even
0001B21A                            		even
0001B21A                            Map_PLaunch:	include	"_maps\Plasma Ball Launcher.asm"
0001B21A                            ; ---------------------------------------------------------------------------
0001B21A                            ; Sprite mappings - energy ball	launcher (FZ)
0001B21A                            ; ---------------------------------------------------------------------------
0001B21A                            Map_PLaunch_internal:
0001B21A 0000                       		dc.w @red-Map_PLaunch_internal
0001B21C 0000                       		dc.w @white-Map_PLaunch_internal
0001B21E 0000                       		dc.w @sparking1-Map_PLaunch_internal
0001B220 0000                       		dc.w @sparking2-Map_PLaunch_internal
0001B222 01                         @red:		dc.b 1
0001B223 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B228 01                         @white:		dc.b 1
0001B229 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B22E 01                         @sparking1:	dc.b 1
0001B22F F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B234 01                         @sparking2:	dc.b 1
0001B235 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B23A                            		even
0001B23A                            		even
0001B23A                            		include	"_anim\Plasma Balls.asm"
0001B23A                            ; ---------------------------------------------------------------------------
0001B23A                            ; Animation script - energy balls (FZ)
0001B23A                            ; ---------------------------------------------------------------------------
0001B23A 0000                       Ani_Plasma:	dc.w @full-Ani_Plasma
0001B23C 0000                       		dc.w @short-Ani_Plasma
0001B23E 0100 0A08 0A01 0A09 0A06+  @full:		dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B24D 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B25C 0A05 FF                    		dc.b $A, 5, afEnd
0001B260 00                         		even
0001B260 0006 0501 0507 0501 05FF   @short:		dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	afEnd
0001B26A                            		even
0001B26A                            		even
0001B26A                            Map_Plasma:	include	"_maps\Plasma Balls.asm"
0001B26A                            ; ---------------------------------------------------------------------------
0001B26A                            ; Sprite mappings - energy balls (FZ)
0001B26A                            ; ---------------------------------------------------------------------------
0001B26A                            Map_Plasma_internal:
0001B26A 0000                       		dc.w @fuzzy1-Map_Plasma_internal
0001B26C 0000                       		dc.w @fuzzy2-Map_Plasma_internal
0001B26E 0000                       		dc.w @white1-Map_Plasma_internal
0001B270 0000                       		dc.w @white2-Map_Plasma_internal
0001B272 0000                       		dc.w @white3-Map_Plasma_internal
0001B274 0000                       		dc.w @white4-Map_Plasma_internal
0001B276 0000                       		dc.w @fuzzy3-Map_Plasma_internal
0001B278 0000                       		dc.w @fuzzy4-Map_Plasma_internal
0001B27A 0000                       		dc.w @fuzzy5-Map_Plasma_internal
0001B27C 0000                       		dc.w @fuzzy6-Map_Plasma_internal
0001B27E 0000                       		dc.w @blank-Map_Plasma_internal
0001B280 02                         @fuzzy1:	dc.b 2
0001B281 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B286 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B28B 02                         @fuzzy2:	dc.b 2
0001B28C F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B291 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B296 02                         @white1:	dc.b 2
0001B297 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B29C 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B2A1 02                         @white2:	dc.b 2
0001B2A2 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B2A7 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B2AC 02                         @white3:	dc.b 2
0001B2AD F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B2B2 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B2B7 02                         @white4:	dc.b 2
0001B2B8 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B2BD F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B2C2 01                         @fuzzy3:	dc.b 1
0001B2C3 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B2C8 01                         @fuzzy4:	dc.b 1
0001B2C9 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B2CE 02                         @fuzzy5:	dc.b 2
0001B2CF F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B2D4 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B2D9 02                         @fuzzy6:	dc.b 2
0001B2DA F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B2DF F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B2E4 00                         @blank:		dc.b 0
0001B2E6 00                         		even
0001B2E6 00                         		even
0001B2E6                            

0001B2E6                            		include	"_incObj\3E Prison Capsule.asm"
0001B2E6                            ; ---------------------------------------------------------------------------
0001B2E6                            ; Object 3E - prison capsule
0001B2E6                            ; ---------------------------------------------------------------------------
0001B2E6                            

0001B2E6                            Prison:
0001B2E6 7000                       		moveq	#0,d0
0001B2E8 1028 0024                  		move.b	obRoutine(a0),d0
0001B2EC 323B 0000                  		move.w	Pri_Index(pc,d0.w),d1
0001B2F0 4EBB 1000                  		jsr	Pri_Index(pc,d1.w)
0001B310 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001B316                            

0001B316                            	@delete:
0001B316 4EF9 0000 DCDC             		jmp	(DeleteObject).l
0001B31C                            ; ===========================================================================
0001B31C 0000                       Pri_Index:	dc.w Pri_Main-Pri_Index
0001B31E 0000                       		dc.w Pri_BodyMain-Pri_Index
0001B320 0000                       		dc.w Pri_Switched-Pri_Index
0001B322 0000                       		dc.w Pri_Explosion-Pri_Index
0001B324 0000                       		dc.w Pri_Explosion-Pri_Index
0001B326 0000                       		dc.w Pri_Explosion-Pri_Index
0001B328 0000                       		dc.w Pri_Animals-Pri_Index
0001B32A 0000                       		dc.w Pri_EndAct-Pri_Index
0001B32C                            

0001B32C =00000030                  pri_origY:	equ $30		; original y-axis position
0001B32C                            

0001B32C 0220 0400                  Pri_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B330 040C 0501                  		dc.b 4,	$C, 5, 1
0001B334 0610 0403                  		dc.b 6,	$10, 4,	3
0001B338 0810 0305                  		dc.b 8,	$10, 3,	5
0001B33C                            ; ===========================================================================
0001B33C                            

0001B33C                            Pri_Main:	; Routine 0
0001B33C 217C 0000 0000 0004        		move.l	#Map_Pri,obMap(a0)
0001B344 317C 049D 0002             		move.w	#$49D,obGfx(a0)
0001B34A 117C 0004 0001             		move.b	#4,obRender(a0)
0001B350 3168 000C 0030             		move.w	obY(a0),pri_origY(a0)
0001B356 7000                       		moveq	#0,d0
0001B358 1028 0028                  		move.b	obSubtype(a0),d0
0001B35C E548                       		lsl.w	#2,d0
0001B35E 43FB 00CC                  		lea	Pri_Var(pc,d0.w),a1
0001B362 1159 0024                  		move.b	(a1)+,obRoutine(a0)
0001B366 1159 0019                  		move.b	(a1)+,obActWid(a0)
0001B36A 1159 0018                  		move.b	(a1)+,obPriority(a0)
0001B36E 1159 001A                  		move.b	(a1)+,obFrame(a0)
0001B372 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B376 6600                       		bne.s	@not02		; if not, branch
0001B378                            

0001B378 117C 0006 0020             		move.b	#6,obColType(a0)
0001B37E 117C 0008 0021             		move.b	#8,obColProp(a0)
0001B384                            

0001B384                            	@not02:
0001B384 4E75                       		rts	
0001B386                            ; ===========================================================================
0001B386                            

0001B386                            Pri_BodyMain:	; Routine 2
0001B386 0C38 0002 F7A7             		cmpi.b	#2,(v_bossstatus).w
0001B38C 6700                       		beq.s	@chkopened
0001B38E 323C 002B                  		move.w	#$2B,d1
0001B392 343C 0018                  		move.w	#$18,d2
0001B396 363C 0018                  		move.w	#$18,d3
0001B39A 3828 0008                  		move.w	obX(a0),d4
0001B39E 4EF9 0001 0070             		jmp	(SolidObject).l
0001B3A4                            ; ===========================================================================
0001B3A4                            

0001B3A4                            @chkopened:
0001B3A4 4A28 0025                  		tst.b	ob2ndRout(a0)	; has the prison been opened?
0001B3A8 6700                       		beq.s	@open		; if yes, branch
0001B3AA 4228 0025                  		clr.b	ob2ndRout(a0)
0001B3AE 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001B3B4 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001B3BA                            

0001B3BA                            	@open:
0001B3BA 117C 0002 001A             		move.b	#2,obFrame(a0)	; use frame number 2 (destroyed	prison)
0001B3C0 4E75                       		rts	
0001B3C2                            ; ===========================================================================
0001B3C2                            

0001B3C2                            Pri_Switched:	; Routine 4
0001B3C2 323C 0017                  		move.w	#$17,d1
0001B3C6 343C 0008                  		move.w	#8,d2
0001B3CA 363C 0008                  		move.w	#8,d3
0001B3CE 3828 0008                  		move.w	obX(a0),d4
0001B3D2 4EB9 0001 0070             		jsr	(SolidObject).l
0001B3D8 43F9 0000 0000             		lea	(Ani_Pri).l,a1
0001B3DE 4EB9 0000 ADB0             		jsr	(AnimateSprite).l
0001B3E4 3168 0030 000C             		move.w	pri_origY(a0),obY(a0)
0001B3EA 4A28 0025                  		tst.b	ob2ndRout(a0)	; has prison already been opened?
0001B3EE 6700                       		beq.s	@open2		; if yes, branch
0001B3F0                            

0001B3F0 5068 000C                  		addq.w	#8,obY(a0)
0001B3F4 117C 000A 0024             		move.b	#$A,obRoutine(a0)
0001B3FA 317C 003C 001E             		move.w	#60,obTimeFrame(a0) ; set time between animal spawns
0001B400 4238 FE1E                  		clr.b	(f_timecount).w	; stop time counter
0001B404 4238 F7AA                  		clr.b	(f_lockscreen).w ; lock screen position
0001B408 11FC 0001 F7CC             		move.b	#1,(f_lockctrl).w ; lock controls
0001B40E 31FC 0800 F602             		move.w	#(btnR<<8),(v_jpadhold2).w ; make Sonic run to the right
0001B414 4228 0025                  		clr.b	ob2ndRout(a0)
0001B418 08B8 0003 D022             		bclr	#3,(v_player+obStatus).w
0001B41E 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001B424                            

0001B424                            	@open2:
0001B424 4E75                       		rts	
0001B426                            ; ===========================================================================
0001B426                            

0001B426                            Pri_Explosion:	; Routine 6, 8, $A
0001B426 7007                       		moveq	#7,d0
0001B428 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001B42C 6600                       		bne.s	@noexplosion
0001B42E 4EB9 0000 E128             		jsr	(FindFreeObj).l
0001B434 6600                       		bne.s	@noexplosion
0001B436 137C 003F 0000             		move.b	#id_ExplosionBomb,0(a1) ; load explosion object
0001B43C 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B442 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B448 4EB9 0000 29BA             		jsr	(RandomNumber).l
0001B44E 7200                       		moveq	#0,d1
0001B450 1200                       		move.b	d0,d1
0001B452 E409                       		lsr.b	#2,d1
0001B454 0441 0020                  		subi.w	#$20,d1
0001B458 D369 0008                  		add.w	d1,obX(a1)
0001B45C E048                       		lsr.w	#8,d0
0001B45E E608                       		lsr.b	#3,d0
0001B460 D169 000C                  		add.w	d0,obY(a1)
0001B464                            

0001B464                            	@noexplosion:
0001B464 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001B468 6700                       		beq.s	@makeanimal
0001B46A 4E75                       		rts	
0001B46C                            ; ===========================================================================
0001B46C                            

0001B46C                            @makeanimal:
0001B46C 11FC 0002 F7A7             		move.b	#2,(v_bossstatus).w
0001B472 117C 000C 0024             		move.b	#$C,obRoutine(a0)	; replace explosions with animals
0001B478 117C 0006 001A             		move.b	#6,obFrame(a0)
0001B47E 317C 0096 001E             		move.w	#150,obTimeFrame(a0)
0001B484 0668 0020 000C             		addi.w	#$20,obY(a0)
0001B48A 7C07                       		moveq	#7,d6
0001B48C 3A3C 009A                  		move.w	#$9A,d5
0001B490 78E4                       		moveq	#-$1C,d4
0001B492                            

0001B492                            	@loop:
0001B492 4EB9 0000 E128             		jsr	(FindFreeObj).l
0001B498 6600                       		bne.s	@fail
0001B49A 137C 0028 0000             		move.b	#id_Animals,0(a1) ; load animal object
0001B4A0 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B4A6 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B4AC D969 0008                  		add.w	d4,obX(a1)
0001B4B0 5E44                       		addq.w	#7,d4
0001B4B2 3345 0036                  		move.w	d5,$36(a1)
0001B4B6 5145                       		subq.w	#8,d5
0001B4B8 51CE FFD8                  		dbf	d6,@loop	; repeat 7 more	times
0001B4BC                            

0001B4BC                            	@fail:
0001B4BC 4E75                       		rts	
0001B4BE                            ; ===========================================================================
0001B4BE                            

0001B4BE                            Pri_Animals:	; Routine $C
0001B4BE 7007                       		moveq	#7,d0
0001B4C0 C038 FE0F                  		and.b	(v_vbla_byte).w,d0
0001B4C4 6600                       		bne.s	@noanimal
0001B4C6 4EB9 0000 E128             		jsr	(FindFreeObj).l
0001B4CC 6600                       		bne.s	@noanimal
0001B4CE 137C 0028 0000             		move.b	#id_Animals,0(a1) ; load animal object
0001B4D4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B4DA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B4E0 4EB9 0000 29BA             		jsr	(RandomNumber).l
0001B4E6 0240 001F                  		andi.w	#$1F,d0
0001B4EA 5D40                       		subq.w	#6,d0
0001B4EC 4A41                       		tst.w	d1
0001B4EE 6A00                       		bpl.s	@ispositive
0001B4F0 4440                       		neg.w	d0
0001B4F2                            

0001B4F2                            	@ispositive:
0001B4F2 D169 0008                  		add.w	d0,obX(a1)
0001B4F6 337C 000C 0036             		move.w	#$C,$36(a1)
0001B4FC                            

0001B4FC                            	@noanimal:
0001B4FC 5368 001E                  		subq.w	#1,obTimeFrame(a0)
0001B500 6600                       		bne.s	@wait
0001B502 5428 0024                  		addq.b	#2,obRoutine(a0)
0001B506 317C 00B4 001E             		move.w	#180,obTimeFrame(a0)
0001B50C                            

0001B50C                            	@wait:
0001B50C 4E75                       		rts	
0001B50E                            ; ===========================================================================
0001B50E                            

0001B50E                            Pri_EndAct:	; Routine $E
0001B50E 703E                       		moveq	#$3E,d0
0001B510 7228                       		moveq	#id_Animals,d1
0001B512 7440                       		moveq	#$40,d2
0001B514 43F8 D040                  		lea	(v_objspace+$40).w,a1 ; load object RAM
0001B518                            

0001B518                            	@findanimal:
0001B518 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B51A 6700                       		beq.s	@found		; if yes, branch
0001B51C D2C2                       		adda.w	d2,a1		; next object RAM
0001B51E 51C8 FFF8                  		dbf	d0,@findanimal	; repeat $3E times
0001B522                            

0001B522 4EB9 0000 F324             		jsr	(GotThroughAct).l
0001B528 4EF9 0000 DCDC             		jmp	(DeleteObject).l
0001B52E                            

0001B52E                            	@found:
0001B52E 4E75                       		rts	
0001B52E 4E75                       		rts	
0001B530                            		include	"_anim\Prison Capsule.asm"
0001B530                            ; ---------------------------------------------------------------------------
0001B530                            ; Animation script - prison capsule
0001B530                            ; ---------------------------------------------------------------------------
0001B530 0000                       Ani_Pri:	dc.w @switchflash-Ani_Pri
0001B532 0000                       		dc.w @switchflash-Ani_Pri
0001B534 0201 03FF                  @switchflash:	dc.b 2,	1, 3, afEnd
0001B538                            		even
0001B538                            		even
0001B538                            Map_Pri:	include	"_maps\Prison Capsule.asm"
0001B538                            ; ---------------------------------------------------------------------------
0001B538                            ; Sprite mappings - prison capsule
0001B538                            ; ---------------------------------------------------------------------------
0001B538                            Map_Pri_internal:
0001B538 0000                       		dc.w @capsule-Map_Pri_internal
0001B53A 0000                       		dc.w @switch1-Map_Pri_internal
0001B53C 0000                       		dc.w @broken-Map_Pri_internal
0001B53E 0000                       		dc.w @switch2-Map_Pri_internal
0001B540 0000                       		dc.w @unusedthing1-Map_Pri_internal
0001B542 0000                       		dc.w @unusedthing2-Map_Pri_internal
0001B544 0000                       		dc.w @blank-Map_Pri_internal
0001B546 07                         @capsule:	dc.b 7
0001B547 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B54C E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B551 E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B556 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B55B F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B560 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B565 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B56A 01                         @switch1:	dc.b 1
0001B56B F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B570 06                         @broken:	dc.b 6
0001B571 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B576 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B57B 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B580 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B585 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B58A 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B58F 01                         @switch2:	dc.b 1
0001B590 F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B595 02                         @unusedthing1:	dc.b 2
0001B596 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B59B 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B5A0 01                         @unusedthing2:	dc.b 1
0001B5A1 F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B5A6 00                         @blank:		dc.b 0
0001B5A8 00                         		even
0001B5A8 00                         		even
0001B5A8                            

0001B5A8                            		include	"_incObj\sub ReactToItem.asm"
0001B5A8                            ; ---------------------------------------------------------------------------
0001B5A8                            ; Subroutine to react to obColType(a0)
0001B5A8                            ; ---------------------------------------------------------------------------
0001B5A8                            

0001B5A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B5A8                            

0001B5A8                            

0001B5A8                            ReactToItem:
0001B5A8 4E71                       		nop	
0001B5AA 3428 0008                  		move.w	obX(a0),d2	; load Sonic's x-axis position
0001B5AE 3628 000C                  		move.w	obY(a0),d3	; load Sonic's y-axis position
0001B5B2 5142                       		subq.w	#8,d2
0001B5B4 7A00                       		moveq	#0,d5
0001B5B6 1A28 0016                  		move.b	obHeight(a0),d5	; load Sonic's height
0001B5BA 5705                       		subq.b	#3,d5
0001B5BC 9645                       		sub.w	d5,d3
0001B5BE 0C28 0039 001A             		cmpi.b	#fr_Duck,obFrame(a0) ; is Sonic ducking?
0001B5C4 6600                       		bne.s	@notducking	; if not, branch
0001B5C6 0643 000C                  		addi.w	#$C,d3
0001B5CA 7A0A                       		moveq	#$A,d5
0001B5CC                            

0001B5CC                            	@notducking:
0001B5CC 383C 0010                  		move.w	#$10,d4
0001B5D0 DA45                       		add.w	d5,d5
0001B5D2 43F8 D800                  		lea	(v_lvlobjspace).w,a1 ; set object RAM start address
0001B5D6 3C3C 005F                  		move.w	#(v_lvlobjend-v_lvlobjspace)/$40-1,d6
0001B5DA                            

0001B5DA                            @loop:
0001B5DA 4A29 0001                  		tst.b	obRender(a1)
0001B5DE 6A00                       		bpl.s	@next
0001B5E0 1029 0020                  		move.b	obColType(a1),d0 ; load collision type
0001B5E4 6600                       		bne.s	@proximity	; if nonzero, branch
0001B5E6                            

0001B5E6                            	@next:
0001B5E6 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B5EA 51CE FFEE                  		dbf	d6,@loop	; repeat $5F more times
0001B5EE                            

0001B5EE 7000                       		moveq	#0,d0
0001B5F0 4E75                       		rts	
0001B5F2                            ; ===========================================================================
0001B5F2                            @sizes:		;   width, height
0001B5F2 1414                       		dc.b  $14, $14		; $01
0001B5F4 0C14                       		dc.b   $C, $14		; $02
0001B5F6 140C                       		dc.b  $14,  $C		; $03
0001B5F8 0410                       		dc.b	4, $10		; $04
0001B5FA 0C12                       		dc.b   $C, $12		; $05
0001B5FC 1010                       		dc.b  $10, $10		; $06
0001B5FE 0606                       		dc.b	6,   6		; $07
0001B600 180C                       		dc.b  $18,  $C		; $08
0001B602 0C10                       		dc.b   $C, $10		; $09
0001B604 100C                       		dc.b  $10,  $C		; $0A
0001B606 0808                       		dc.b	8,   8		; $0B
0001B608 1410                       		dc.b  $14, $10		; $0C
0001B60A 1408                       		dc.b  $14,   8		; $0D
0001B60C 0E0E                       		dc.b   $E,  $E		; $0E
0001B60E 1818                       		dc.b  $18, $18		; $0F
0001B610 2810                       		dc.b  $28, $10		; $10
0001B612 1018                       		dc.b  $10, $18		; $11
0001B614 0810                       		dc.b	8, $10		; $12
0001B616 2070                       		dc.b  $20, $70		; $13
0001B618 4020                       		dc.b  $40, $20		; $14
0001B61A 8020                       		dc.b  $80, $20		; $15
0001B61C 2020                       		dc.b  $20, $20		; $16
0001B61E 0808                       		dc.b	8,   8		; $17
0001B620 0404                       		dc.b	4,   4		; $18
0001B622 2008                       		dc.b  $20,   8		; $19
0001B624 0C0C                       		dc.b   $C,  $C		; $1A
0001B626 0804                       		dc.b	8,   4		; $1B
0001B628 1804                       		dc.b  $18,   4		; $1C
0001B62A 2804                       		dc.b  $28,   4		; $1D
0001B62C 0408                       		dc.b	4,   8		; $1E
0001B62E 0418                       		dc.b	4, $18		; $1F
0001B630 0428                       		dc.b	4, $28		; $20
0001B632 0420                       		dc.b	4, $20		; $21
0001B634 1818                       		dc.b  $18, $18		; $22
0001B636 0C18                       		dc.b   $C, $18		; $23
0001B638 4808                       		dc.b  $48,   8		; $24
0001B63A                            ; ===========================================================================
0001B63A                            

0001B63A                            @proximity:
0001B63A 0240 003F                  		andi.w	#$3F,d0
0001B63E D040                       		add.w	d0,d0
0001B640 45FB 00AE                  		lea	@sizes-2(pc,d0.w),a2
0001B644 7200                       		moveq	#0,d1
0001B646 121A                       		move.b	(a2)+,d1
0001B648 3029 0008                  		move.w	obX(a1),d0
0001B64C 9041                       		sub.w	d1,d0
0001B64E 9042                       		sub.w	d2,d0
0001B650 6400                       		bcc.s	@outsidex	; branch if not touching
0001B652 D241                       		add.w	d1,d1
0001B654 D041                       		add.w	d1,d0
0001B656 6500                       		bcs.s	@withinx	; branch if touching
0001B658 6000 FF8C                  		bra.w	@next
0001B65C                            ; ===========================================================================
0001B65C                            

0001B65C                            @outsidex:
0001B65C B044                       		cmp.w	d4,d0
0001B65E 6200 FF86                  		bhi.w	@next
0001B662                            

0001B662                            @withinx:
0001B662 7200                       		moveq	#0,d1
0001B664 121A                       		move.b	(a2)+,d1
0001B666 3029 000C                  		move.w	obY(a1),d0
0001B66A 9041                       		sub.w	d1,d0
0001B66C 9043                       		sub.w	d3,d0
0001B66E 6400                       		bcc.s	@outsidey	; branch if not touching
0001B670 D241                       		add.w	d1,d1
0001B672 D240                       		add.w	d0,d1
0001B674 6500                       		bcs.s	@withiny	; branch if touching
0001B676 6000 FF6E                  		bra.w	@next
0001B67A                            ; ===========================================================================
0001B67A                            

0001B67A                            @outsidey:
0001B67A B045                       		cmp.w	d5,d0
0001B67C 6200 FF68                  		bhi.w	@next
0001B680                            

0001B680                            @withiny:
0001B680                            	@chktype:
0001B680 1229 0020                  		move.b	obColType(a1),d1 ; load collision type
0001B684 0201 00C0                  		andi.b	#$C0,d1		; is obColType $40 or higher?
0001B688 6700 0000                  		beq.w	React_Enemy	; if not, branch
0001B68C 0C01 00C0                  		cmpi.b	#$C0,d1		; is obColType $C0 or higher?
0001B690 6700 0000                  		beq.w	React_Special	; if yes, branch
0001B694 4A01                       		tst.b	d1		; is obColType $80-$BF?
0001B696 6B00 0000                  		bmi.w	React_ChkHurt	; if yes, branch
0001B69A                            

0001B69A                            ; obColType is $40-$7F (powerups)
0001B69A                            

0001B69A 1029 0020                  		move.b	obColType(a1),d0
0001B69E 0200 003F                  		andi.b	#$3F,d0
0001B6A2 0C00 0006                  		cmpi.b	#6,d0		; is collision type $46	?
0001B6A6 6700                       		beq.s	React_Monitor	; if yes, branch
0001B6A8 0C68 005A 0030             		cmpi.w	#90,$30(a0)	; is Sonic invincible?
0001B6AE 6400 0000                  		bcc.w	@invincible	; if yes, branch
0001B6B2 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the object's routine counter
0001B6B6                            

0001B6B6                            	@invincible:
0001B6B6 4E75                       		rts	
0001B6B8                            ; ===========================================================================
0001B6B8                            

0001B6B8                            React_Monitor:
0001B6B8 4A68 0012                  		tst.w	obVelY(a0)	; is Sonic moving upwards?
0001B6BC 6A00                       		bpl.s	@movingdown	; if not, branch
0001B6BE                            

0001B6BE 3028 000C                  		move.w	obY(a0),d0
0001B6C2 0440 0010                  		subi.w	#$10,d0
0001B6C6 B069 000C                  		cmp.w	obY(a1),d0
0001B6CA 6500                       		bcs.s	@donothing
0001B6CC 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's vertical speed
0001B6D0 337C FE80 0012             		move.w	#-$180,obVelY(a1)
0001B6D6 4A29 0025                  		tst.b	ob2ndRout(a1)
0001B6DA 6600                       		bne.s	@donothing
0001B6DC 5829 0025                  		addq.b	#4,ob2ndRout(a1) ; advance the monitor's routine counter
0001B6E0 4E75                       		rts	
0001B6E2                            ; ===========================================================================
0001B6E2                            

0001B6E2                            @movingdown:
0001B6E2 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001B6E8 6600                       		bne.s	@donothing
0001B6EA 4468 0012                  		neg.w	obVelY(a0)	; reverse Sonic's y-motion
0001B6EE 5429 0024                  		addq.b	#2,obRoutine(a1) ; advance the monitor's routine counter
0001B6F2                            

0001B6F2                            	@donothing:
0001B6F2 4E75                       		rts	
0001B6F4                            ; ===========================================================================
0001B6F4                            

0001B6F4                            React_Enemy:
0001B6F4 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001B6F8 6600                       		bne.s	@donthurtsonic	; if yes, branch
0001B6FA 0C28 0002 001C             		cmpi.b	#id_Roll,obAnim(a0) ; is Sonic rolling/jumping?
0001B700 6600 0000                  		bne.w	React_ChkHurt	; if not, branch
0001B704                            

0001B704                            	@donthurtsonic:
0001B704 4A29 0021                  		tst.b	obColProp(a1)
0001B708 6700                       		beq.s	@breakenemy
0001B70A                            

0001B70A 4468 0010                  		neg.w	obVelX(a0)	; repel Sonic
0001B70E 4468 0012                  		neg.w	obVelY(a0)
0001B712 E0E8 0010                  		asr	obVelX(a0)
0001B716 E0E8 0012                  		asr	obVelY(a0)
0001B71A 137C 0000 0020             		move.b	#0,obColType(a1)
0001B720 5329 0021                  		subq.b	#1,obColProp(a1)
0001B724 6600                       		bne.s	@flagnotclear
0001B726 08E9 0007 0022             		bset	#7,obStatus(a1)
0001B72C                            

0001B72C                            	@flagnotclear:
0001B72C 4E75                       		rts	
0001B72E                            ; ===========================================================================
0001B72E                            

0001B72E                            @breakenemy:
0001B72E 08E9 0007 0022             		bset	#7,obStatus(a1)
0001B734 7000                       		moveq	#0,d0
0001B736 3038 F7D0                  		move.w	(v_itembonus).w,d0
0001B73A 5478 F7D0                  		addq.w	#2,(v_itembonus).w ; add 2 to item bonus counter
0001B73E 0C40 0006                  		cmpi.w	#6,d0
0001B742 6500                       		bcs.s	@bonusokay
0001B744 7006                       		moveq	#6,d0		; max bonus is lvl6
0001B746                            

0001B746                            	@bonusokay:
0001B746 3340 003E                  		move.w	d0,$3E(a1)
0001B74A 303B 0000                  		move.w	@points(pc,d0.w),d0
0001B74E 0C78 0020 F7D0             		cmpi.w	#$20,(v_itembonus).w ; have 16 enemies been destroyed?
0001B754 6500                       		bcs.s	@lessthan16	; if not, branch
0001B756 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B75A 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B760                            

0001B760                            	@lessthan16:
0001B760 6100 0000                  		bsr.w	AddPoints
0001B764 137C 0027 0000             		move.b	#id_ExplosionItem,0(a1) ; change object to explosion
0001B76A 137C 0000 0024             		move.b	#0,obRoutine(a1)
0001B770 4A68 0012                  		tst.w	obVelY(a0)
0001B774 6B00                       		bmi.s	@bouncedown
0001B776 3028 000C                  		move.w	obY(a0),d0
0001B77A B069 000C                  		cmp.w	obY(a1),d0
0001B77E 6400                       		bcc.s	@bounceup
0001B780 4468 0012                  		neg.w	obVelY(a0)
0001B784 4E75                       		rts	
0001B786                            ; ===========================================================================
0001B786                            

0001B786                            	@bouncedown:
0001B786 0668 0100 0012             		addi.w	#$100,obVelY(a0)
0001B78C 4E75                       		rts	
0001B78E                            

0001B78E                            	@bounceup:
0001B78E 0468 0100 0012             		subi.w	#$100,obVelY(a0)
0001B794 4E75                       		rts	
0001B796                            

0001B796 000A 0014 0032 0064        @points:	dc.w 10, 20, 50, 100	; points awarded div 10
0001B79E                            

0001B79E                            ; ===========================================================================
0001B79E                            

0001B79E                            React_Caterkiller:
0001B79E 08E9 0007 0022             		bset	#7,obStatus(a1)
0001B7A4                            

0001B7A4                            React_ChkHurt:
0001B7A4 4A38 FE2D                  		tst.b	(v_invinc).w	; is Sonic invincible?
0001B7A8 6700                       		beq.s	@notinvincible	; if not, branch
0001B7AA                            

0001B7AA                            	@isflashing:
0001B7AA 70FF                       		moveq	#-1,d0
0001B7AC 4E75                       		rts	
0001B7AE                            ; ===========================================================================
0001B7AE                            

0001B7AE                            	@notinvincible:
0001B7AE 4E71                       		nop	
0001B7B0 4A68 0030                  		tst.w	$30(a0)		; is Sonic flashing?
0001B7B4 66F4                       		bne.s	@isflashing	; if yes, branch
0001B7B6 2449                       		movea.l	a1,a2
0001B7B8                            

0001B7B8                            ; End of function ReactToItem
0001B7B8                            ; continue straight to HurtSonic
0001B7B8                            

0001B7B8                            ; ---------------------------------------------------------------------------
0001B7B8                            ; Hurting Sonic	subroutine
0001B7B8                            ; ---------------------------------------------------------------------------
0001B7B8                            

0001B7B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B7B8                            

0001B7B8                            

0001B7B8                            HurtSonic:
0001B7B8 4A38 FE2C                  		tst.b	(v_shield).w	; does Sonic have a shield?
0001B7BC 6600                       		bne.s	@hasshield	; if yes, branch
0001B7BE 4A78 FE20                  		tst.w	(v_rings).w	; does Sonic have any rings?
0001B7C2 6700 0000                  		beq.w	@norings	; if not, branch
0001B7C6                            

0001B7C6 4EB9 0000 E128             		jsr	(FindFreeObj).l
0001B7CC 6600                       		bne.s	@hasshield
0001B7CE 137C 0037 0000             		move.b	#id_RingLoss,0(a1) ; load bouncing multi rings object
0001B7D4 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001B7DA 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001B7E0                            

0001B7E0                            	@hasshield:
0001B7E0 11FC 0000 FE2C             		move.b	#0,(v_shield).w	; remove shield
0001B7E6 117C 0004 0024             		move.b	#4,obRoutine(a0)
0001B7EC 6100 8694                  		bsr.w	Sonic_ResetOnFloor
0001B7F0 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B7F6 317C FC00 0012             		move.w	#-$400,obVelY(a0) ; make Sonic bounce away from the object
0001B7FC 317C FE00 0010             		move.w	#-$200,obVelX(a0)
0001B802 0828 0006 0022             		btst	#6,obStatus(a0)	; is Sonic underwater?
0001B808 6700                       		beq.s	@isdry		; if not, branch
0001B80A                            

0001B80A 317C FE00 0012             		move.w	#-$200,obVelY(a0) ; slower bounce
0001B810 317C FF00 0010             		move.w	#-$100,obVelX(a0)
0001B816                            

0001B816                            	@isdry:
0001B816 3028 0008                  		move.w	obX(a0),d0
0001B81A B06A 0008                  		cmp.w	obX(a2),d0
0001B81E 6500                       		bcs.s	@isleft		; if Sonic is left of the object, branch
0001B820 4468 0010                  		neg.w	obVelX(a0)	; if Sonic is right of the object, reverse
0001B824                            

0001B824                            	@isleft:
0001B824 317C 0000 0014             		move.w	#0,obInertia(a0)
0001B82A 117C 001A 001C             		move.b	#id_Hurt,obAnim(a0)
0001B830 317C 0078 0030             		move.w	#120,$30(a0)	; set temp invincible time to 2 seconds
0001B836 303C 0000                  		move.w	#sfx_Death,d0	; load normal damage sound
0001B83A 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; was damage caused by spikes?
0001B83E 6600                       		bne.s	@sound		; if not, branch
0001B840 0C12 0016                  		cmpi.b	#id_Harpoon,(a2) ; was damage caused by LZ harpoon?
0001B844 6600                       		bne.s	@sound		; if not, branch
0001B846 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; load spikes damage sound
0001B84A                            

0001B84A                            	@sound:
0001B84A 4EB9 0000 13A2             		jsr	(PlaySound_Special).l
0001B850 70FF                       		moveq	#-1,d0
0001B852 4E75                       		rts	
0001B854                            ; ===========================================================================
0001B854                            

0001B854                            @norings:
0001B854 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat on?
0001B858 6600 FF86                  		bne.w	@hasshield	; if yes, branch
0001B85C                            

0001B85C                            ; ---------------------------------------------------------------------------
0001B85C                            ; Subroutine to	kill Sonic
0001B85C                            ; ---------------------------------------------------------------------------
0001B85C                            

0001B85C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B85C                            

0001B85C                            

0001B85C                            KillSonic:
0001B85C 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	active?
0001B860 6600                       		bne.s	@dontdie	; if yes, branch
0001B862 11FC 0000 FE2D             		move.b	#0,(v_invinc).w	; remove invincibility
0001B868 117C 0006 0024             		move.b	#6,obRoutine(a0)
0001B86E 6100 8612                  		bsr.w	Sonic_ResetOnFloor
0001B872 08E8 0001 0022             		bset	#1,obStatus(a0)
0001B878 317C F900 0012             		move.w	#-$700,obVelY(a0)
0001B87E 317C 0000 0010             		move.w	#0,obVelX(a0)
0001B884 317C 0000 0014             		move.w	#0,obInertia(a0)
0001B88A 3168 000C 0038             		move.w	obY(a0),$38(a0)
0001B890 117C 0018 001C             		move.b	#id_Death,obAnim(a0)
0001B896 08E8 0007 0002             		bset	#7,obGfx(a0)
0001B89C 303C 0000                  		move.w	#sfx_Death,d0	; play normal death sound
0001B8A0 0C12 0036                  		cmpi.b	#id_Spikes,(a2)	; check	if you were killed by spikes
0001B8A4 6600                       		bne.s	@sound
0001B8A6 303C 0000                  		move.w	#sfx_HitSpikes,d0 ; play spikes death sound
0001B8AA                            

0001B8AA                            	@sound:
0001B8AA 4EB9 0000 13A2             		jsr	(PlaySound_Special).l
0001B8B0                            

0001B8B0                            	@dontdie:
0001B8B0 70FF                       		moveq	#-1,d0
0001B8B2 4E75                       		rts	
0001B8B4                            ; End of function KillSonic
0001B8B4                            

0001B8B4                            

0001B8B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B8B4                            

0001B8B4                            

0001B8B4                            React_Special:
0001B8B4 1229 0020                  		move.b	obColType(a1),d1
0001B8B8 0201 003F                  		andi.b	#$3F,d1
0001B8BC 0C01 000B                  		cmpi.b	#$B,d1		; is collision type $CB	?
0001B8C0 6700                       		beq.s	@caterkiller	; if yes, branch
0001B8C2 0C01 000C                  		cmpi.b	#$C,d1		; is collision type $CC	?
0001B8C6 6700                       		beq.s	@yadrin		; if yes, branch
0001B8C8 0C01 0017                  		cmpi.b	#$17,d1		; is collision type $D7	?
0001B8CC 6700                       		beq.s	@D7orE1		; if yes, branch
0001B8CE 0C01 0021                  		cmpi.b	#$21,d1		; is collision type $E1	?
0001B8D2 6700                       		beq.s	@D7orE1		; if yes, branch
0001B8D4 4E75                       		rts	
0001B8D6                            ; ===========================================================================
0001B8D6                            

0001B8D6                            @caterkiller:
0001B8D6 6000 FEC6                  		bra.w	React_Caterkiller
0001B8DA                            ; ===========================================================================
0001B8DA                            

0001B8DA                            @yadrin:
0001B8DA 9A40                       		sub.w	d0,d5
0001B8DC 0C45 0008                  		cmpi.w	#8,d5
0001B8E0 6400                       		bcc.s	@normalenemy
0001B8E2 3029 0008                  		move.w	obX(a1),d0
0001B8E6 5940                       		subq.w	#4,d0
0001B8E8 0829 0000 0022             		btst	#0,obStatus(a1)
0001B8EE 6700                       		beq.s	@noflip
0001B8F0 0440 0010                  		subi.w	#$10,d0
0001B8F4                            

0001B8F4                            	@noflip:
0001B8F4 9042                       		sub.w	d2,d0
0001B8F6 6400                       		bcc.s	@loc_1B13C
0001B8F8 0640 0018                  		addi.w	#$18,d0
0001B8FC 6500                       		bcs.s	@loc_1B140
0001B8FE 6000                       		bra.s	@normalenemy
0001B900                            ; ===========================================================================
0001B900                            

0001B900                            	@loc_1B13C:
0001B900 B044                       		cmp.w	d4,d0
0001B902 6200                       		bhi.s	@normalenemy
0001B904                            

0001B904                            	@loc_1B140:
0001B904 6000 FE9E                  		bra.w	React_ChkHurt
0001B908                            ; ===========================================================================
0001B908                            

0001B908                            	@normalenemy:
0001B908 6000 FDEA                  		bra.w	React_Enemy
0001B90C                            ; ===========================================================================
0001B90C                            

0001B90C                            @D7orE1:
0001B90C 5229 0021                  		addq.b	#1,obColProp(a1)
0001B910 4E75                       		rts	
0001B912                            ; End of function React_Special
0001B912                            ; End of function React_Special
0001B912                            

0001B912                            ; ---------------------------------------------------------------------------
0001B912                            ; Subroutine to	show the special stage layout
0001B912                            ; ---------------------------------------------------------------------------
0001B912                            

0001B912                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B912                            

0001B912                            

0001B912                            SS_ShowLayout:
0001B912 6100 0000                  		bsr.w	SS_AniWallsRings
0001B916 6100 0000                  		bsr.w	SS_AniItems
0001B91A 3F05                       		move.w	d5,-(sp)
0001B91C 43F8 8000                  		lea	($FFFF8000).w,a1
0001B920 1038 F780                  		move.b	(v_ssangle).w,d0
0001B924 0200 00FC                  		andi.b	#$FC,d0
0001B928 4EB9 0000 29E0             		jsr	(CalcSine).l
0001B92E 3800                       		move.w	d0,d4
0001B930 3A01                       		move.w	d1,d5
0001B932 C9FC 0018                  		muls.w	#$18,d4
0001B936 CBFC 0018                  		muls.w	#$18,d5
0001B93A 7400                       		moveq	#0,d2
0001B93C 3438 F700                  		move.w	(v_screenposx).w,d2
0001B940 84FC 0018                  		divu.w	#$18,d2
0001B944 4842                       		swap	d2
0001B946 4442                       		neg.w	d2
0001B948 0642 FF4C                  		addi.w	#-$B4,d2
0001B94C 7600                       		moveq	#0,d3
0001B94E 3638 F704                  		move.w	(v_screenposy).w,d3
0001B952 86FC 0018                  		divu.w	#$18,d3
0001B956 4843                       		swap	d3
0001B958 4443                       		neg.w	d3
0001B95A 0643 FF4C                  		addi.w	#-$B4,d3
0001B95E 3E3C 000F                  		move.w	#$F,d7
0001B962                            

0001B962                            loc_1B19E:
0001B962 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B966 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B96A 4440                       		neg.w	d0
0001B96C C3C2                       		muls.w	d2,d1
0001B96E C1C3                       		muls.w	d3,d0
0001B970 2C00                       		move.l	d0,d6
0001B972 DC81                       		add.l	d1,d6
0001B974 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B978 C1C2                       		muls.w	d2,d0
0001B97A C3C3                       		muls.w	d3,d1
0001B97C D280                       		add.l	d0,d1
0001B97E 2406                       		move.l	d6,d2
0001B980 3C3C 000F                  		move.w	#$F,d6
0001B984                            

0001B984                            loc_1B1C0:
0001B984 2002                       		move.l	d2,d0
0001B986 E080                       		asr.l	#8,d0
0001B988 32C0                       		move.w	d0,(a1)+
0001B98A 2001                       		move.l	d1,d0
0001B98C E080                       		asr.l	#8,d0
0001B98E 32C0                       		move.w	d0,(a1)+
0001B990 D485                       		add.l	d5,d2
0001B992 D284                       		add.l	d4,d1
0001B994 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B998                            

0001B998 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B99C 0643 0018                  		addi.w	#$18,d3
0001B9A0 51CF FFC0                  		dbf	d7,loc_1B19E
0001B9A4                            

0001B9A4 3A1F                       		move.w	(sp)+,d5
0001B9A6 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B9AC 7000                       		moveq	#0,d0
0001B9AE 3038 F704                  		move.w	(v_screenposy).w,d0
0001B9B2 80FC 0018                  		divu.w	#$18,d0
0001B9B6 C0FC 0080                  		mulu.w	#$80,d0
0001B9BA D1C0                       		adda.l	d0,a0
0001B9BC 7000                       		moveq	#0,d0
0001B9BE 3038 F700                  		move.w	(v_screenposx).w,d0
0001B9C2 80FC 0018                  		divu.w	#$18,d0
0001B9C6 D0C0                       		adda.w	d0,a0
0001B9C8 49F8 8000                  		lea	($FFFF8000).w,a4
0001B9CC 3E3C 000F                  		move.w	#$F,d7
0001B9D0                            

0001B9D0                            loc_1B20C:
0001B9D0 3C3C 000F                  		move.w	#$F,d6
0001B9D4                            

0001B9D4                            loc_1B210:
0001B9D4 7000                       		moveq	#0,d0
0001B9D6 1018                       		move.b	(a0)+,d0
0001B9D8 6700                       		beq.s	loc_1B268
0001B9DA 0C00 004E                  		cmpi.b	#$4E,d0
0001B9DE 6200                       		bhi.s	loc_1B268
0001B9E0 3614                       		move.w	(a4),d3
0001B9E2 0643 0120                  		addi.w	#$120,d3
0001B9E6 0C43 0070                  		cmpi.w	#$70,d3
0001B9EA 6500                       		blo.s	loc_1B268
0001B9EC 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B9F0 6400                       		bhs.s	loc_1B268
0001B9F2 342C 0002                  		move.w	2(a4),d2
0001B9F6 0642 00F0                  		addi.w	#$F0,d2
0001B9FA 0C42 0070                  		cmpi.w	#$70,d2
0001B9FE 6500                       		blo.s	loc_1B268
0001BA00 0C42 0170                  		cmpi.w	#$170,d2
0001BA04 6400                       		bhs.s	loc_1B268
0001BA06 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BA0C E748                       		lsl.w	#3,d0
0001BA0E 4BF5 0000                  		lea	(a5,d0.w),a5
0001BA12 225D                       		movea.l	(a5)+,a1
0001BA14 321D                       		move.w	(a5)+,d1
0001BA16 D241                       		add.w	d1,d1
0001BA18 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BA1C 365D                       		movea.w	(a5)+,a3
0001BA1E 7200                       		moveq	#0,d1
0001BA20 1219                       		move.b	(a1)+,d1
0001BA22 5301                       		subq.b	#1,d1
0001BA24 6B00                       		bmi.s	loc_1B268
0001BA26 4EB9 0000 DDFE             		jsr	(BuildSpr_Normal).l
0001BA2C                            

0001BA2C                            loc_1B268:
0001BA2C 584C                       		addq.w	#4,a4
0001BA2E 51CE FFA4                  		dbf	d6,loc_1B210
0001BA32                            

0001BA32 41E8 0070                  		lea	$70(a0),a0
0001BA36 51CF FF98                  		dbf	d7,loc_1B20C
0001BA3A                            

0001BA3A 11C5 F62C                  		move.b	d5,(v_spritecount).w
0001BA3E 0C05 0050                  		cmpi.b	#$50,d5
0001BA42 6700                       		beq.s	loc_1B288
0001BA44 24BC 0000 0000             		move.l	#0,(a2)
0001BA4A 4E75                       		rts	
0001BA4C                            ; ===========================================================================
0001BA4C                            

0001BA4C                            loc_1B288:
0001BA4C 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BA52 4E75                       		rts	
0001BA54                            ; End of function SS_ShowLayout
0001BA54                            

0001BA54                            ; ---------------------------------------------------------------------------
0001BA54                            ; Subroutine to	animate	walls and rings	in the special stage
0001BA54                            ; ---------------------------------------------------------------------------
0001BA54                            

0001BA54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA54                            

0001BA54                            

0001BA54                            SS_AniWallsRings:
0001BA54 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BA5A 7000                       		moveq	#0,d0
0001BA5C 1038 F780                  		move.b	(v_ssangle).w,d0
0001BA60 E408                       		lsr.b	#2,d0
0001BA62 0240 000F                  		andi.w	#$F,d0
0001BA66 7223                       		moveq	#$23,d1
0001BA68                            

0001BA68                            loc_1B2A4:
0001BA68 3280                       		move.w	d0,(a1)
0001BA6A 5049                       		addq.w	#8,a1
0001BA6C 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BA70                            

0001BA70 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BA76 5338 FEC2                  		subq.b	#1,(v_ani1_time).w
0001BA7A 6A00                       		bpl.s	loc_1B2C8
0001BA7C 11FC 0007 FEC2             		move.b	#7,(v_ani1_time).w
0001BA82 5238 FEC3                  		addq.b	#1,(v_ani1_frame).w
0001BA86 0238 0003 FEC3             		andi.b	#3,(v_ani1_frame).w
0001BA8C                            

0001BA8C                            loc_1B2C8:
0001BA8C 1378 FEC3 01D0             		move.b	(v_ani1_frame).w,$1D0(a1)
0001BA92 5338 FEC4                  		subq.b	#1,(v_ani2_time).w
0001BA96 6A00                       		bpl.s	loc_1B2E4
0001BA98 11FC 0007 FEC4             		move.b	#7,(v_ani2_time).w
0001BA9E 5238 FEC5                  		addq.b	#1,(v_ani2_frame).w
0001BAA2 0238 0001 FEC5             		andi.b	#1,(v_ani2_frame).w
0001BAA8                            

0001BAA8                            loc_1B2E4:
0001BAA8 1038 FEC5                  		move.b	(v_ani2_frame).w,d0
0001BAAC 1340 0138                  		move.b	d0,$138(a1)
0001BAB0 1340 0160                  		move.b	d0,$160(a1)
0001BAB4 1340 0148                  		move.b	d0,$148(a1)
0001BAB8 1340 0150                  		move.b	d0,$150(a1)
0001BABC 1340 01D8                  		move.b	d0,$1D8(a1)
0001BAC0 1340 01E0                  		move.b	d0,$1E0(a1)
0001BAC4 1340 01E8                  		move.b	d0,$1E8(a1)
0001BAC8 1340 01F0                  		move.b	d0,$1F0(a1)
0001BACC 1340 01F8                  		move.b	d0,$1F8(a1)
0001BAD0 1340 0200                  		move.b	d0,$200(a1)
0001BAD4 5338 FEC6                  		subq.b	#1,(v_ani3_time).w
0001BAD8 6A00                       		bpl.s	loc_1B326
0001BADA 11FC 0004 FEC6             		move.b	#4,(v_ani3_time).w
0001BAE0 5238 FEC7                  		addq.b	#1,(v_ani3_frame).w
0001BAE4 0238 0003 FEC7             		andi.b	#3,(v_ani3_frame).w
0001BAEA                            

0001BAEA                            loc_1B326:
0001BAEA 1038 FEC7                  		move.b	(v_ani3_frame).w,d0
0001BAEE 1340 0168                  		move.b	d0,$168(a1)
0001BAF2 1340 0170                  		move.b	d0,$170(a1)
0001BAF6 1340 0178                  		move.b	d0,$178(a1)
0001BAFA 1340 0180                  		move.b	d0,$180(a1)
0001BAFE 5338 FEC0                  		subq.b	#1,(v_ani0_time).w
0001BB02 6A00                       		bpl.s	loc_1B350
0001BB04 11FC 0007 FEC0             		move.b	#7,(v_ani0_time).w
0001BB0A 5338 FEC1                  		subq.b	#1,(v_ani0_frame).w
0001BB0E 0238 0007 FEC1             		andi.b	#7,(v_ani0_frame).w
0001BB14                            

0001BB14                            loc_1B350:
0001BB14 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BB1A 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BB20 7000                       		moveq	#0,d0
0001BB22 1038 FEC1                  		move.b	(v_ani0_frame).w,d0
0001BB26 D040                       		add.w	d0,d0
0001BB28 41F0 0000                  		lea	(a0,d0.w),a0
0001BB2C 3290                       		move.w	(a0),(a1)
0001BB2E 3368 0002 0008             		move.w	2(a0),8(a1)
0001BB34 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BB3A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BB40 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BB46 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BB4C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BB52 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BB58 D0FC 0020                  		adda.w	#$20,a0
0001BB5C D2FC 0048                  		adda.w	#$48,a1
0001BB60 3290                       		move.w	(a0),(a1)
0001BB62 3368 0002 0008             		move.w	2(a0),8(a1)
0001BB68 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BB6E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BB74 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BB7A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BB80 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BB86 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BB8C D0FC 0020                  		adda.w	#$20,a0
0001BB90 D2FC 0048                  		adda.w	#$48,a1
0001BB94 3290                       		move.w	(a0),(a1)
0001BB96 3368 0002 0008             		move.w	2(a0),8(a1)
0001BB9C 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BBA2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BBA8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BBAE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BBB4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BBBA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BBC0 D0FC 0020                  		adda.w	#$20,a0
0001BBC4 D2FC 0048                  		adda.w	#$48,a1
0001BBC8 3290                       		move.w	(a0),(a1)
0001BBCA 3368 0002 0008             		move.w	2(a0),8(a1)
0001BBD0 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BBD6 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BBDC 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BBE2 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BBE8 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BBEE 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BBF4 D0FC 0020                  		adda.w	#$20,a0
0001BBF8 D2FC 0048                  		adda.w	#$48,a1
0001BBFC 4E75                       		rts	
0001BBFE                            ; End of function SS_AniWallsRings
0001BBFE                            

0001BBFE                            ; ===========================================================================
0001BBFE 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BC0E 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BC1E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BC2E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BC3E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BC4E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BC5E 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BC6E 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BC7E                            ; ---------------------------------------------------------------------------
0001BC7E                            ; Subroutine to	remove items when you collect them in the special stage
0001BC7E                            ; ---------------------------------------------------------------------------
0001BC7E                            

0001BC7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC7E                            

0001BC7E                            

0001BC7E                            SS_RemoveCollectedItem:
0001BC7E 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BC84 303C 001F                  		move.w	#$1F,d0
0001BC88                            

0001BC88                            loc_1B4C4:
0001BC88 4A12                       		tst.b	(a2)
0001BC8A 6700                       		beq.s	locret_1B4CE
0001BC8C 504A                       		addq.w	#8,a2
0001BC8E 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BC92                            

0001BC92                            locret_1B4CE:
0001BC92 4E75                       		rts	
0001BC94                            ; End of function SS_RemoveCollectedItem
0001BC94                            

0001BC94                            ; ---------------------------------------------------------------------------
0001BC94                            ; Subroutine to	animate	special	stage items when you touch them
0001BC94                            ; ---------------------------------------------------------------------------
0001BC94                            

0001BC94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC94                            

0001BC94                            

0001BC94                            SS_AniItems:
0001BC94 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BC9A 3E3C 001F                  		move.w	#$1F,d7
0001BC9E                            

0001BC9E                            loc_1B4DA:
0001BC9E 7000                       		moveq	#0,d0
0001BCA0 1010                       		move.b	(a0),d0
0001BCA2 6700                       		beq.s	loc_1B4E8
0001BCA4 E548                       		lsl.w	#2,d0
0001BCA6 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BCAA 4E91                       		jsr	(a1)
0001BCAC                            

0001BCAC                            loc_1B4E8:
0001BCAC 5048                       		addq.w	#8,a0
0001BCAE                            

0001BCAE                            loc_1B4EA:
0001BCAE 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BCB2                            

0001BCB2 4E75                       		rts	
0001BCB4                            ; End of function SS_AniItems
0001BCB4                            

0001BCB4                            ; ===========================================================================
0001BCB4 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BCB8 0000 0000                  		dc.l SS_AniBumper
0001BCBC 0000 0000                  		dc.l SS_Ani1Up
0001BCC0 0000 0000                  		dc.l SS_AniReverse
0001BCC4 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BCC8 0000 0000                  		dc.l SS_AniGlassBlock
0001BCCC                            ; ===========================================================================
0001BCCC                            

0001BCCC                            SS_AniRingSparks:
0001BCCC 5328 0002                  		subq.b	#1,2(a0)
0001BCD0 6A00                       		bpl.s	locret_1B530
0001BCD2 117C 0005 0002             		move.b	#5,2(a0)
0001BCD8 7000                       		moveq	#0,d0
0001BCDA 1028 0003                  		move.b	3(a0),d0
0001BCDE 5228 0003                  		addq.b	#1,3(a0)
0001BCE2 2268 0004                  		movea.l	4(a0),a1
0001BCE6 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BCEA 1280                       		move.b	d0,(a1)
0001BCEC 6600                       		bne.s	locret_1B530
0001BCEE 4290                       		clr.l	(a0)
0001BCF0 42A8 0004                  		clr.l	4(a0)
0001BCF4                            

0001BCF4                            locret_1B530:
0001BCF4 4E75                       		rts	
0001BCF6                            ; ===========================================================================
0001BCF6 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BCFC                            ; ===========================================================================
0001BCFC                            

0001BCFC                            SS_AniBumper:
0001BCFC 5328 0002                  		subq.b	#1,2(a0)
0001BD00 6A00                       		bpl.s	locret_1B566
0001BD02 117C 0007 0002             		move.b	#7,2(a0)
0001BD08 7000                       		moveq	#0,d0
0001BD0A 1028 0003                  		move.b	3(a0),d0
0001BD0E 5228 0003                  		addq.b	#1,3(a0)
0001BD12 2268 0004                  		movea.l	4(a0),a1
0001BD16 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BD1A 6600                       		bne.s	loc_1B564
0001BD1C 4290                       		clr.l	(a0)
0001BD1E 42A8 0004                  		clr.l	4(a0)
0001BD22 12BC 0025                  		move.b	#$25,(a1)
0001BD26 4E75                       		rts	
0001BD28                            ; ===========================================================================
0001BD28                            

0001BD28                            loc_1B564:
0001BD28 1280                       		move.b	d0,(a1)
0001BD2A                            

0001BD2A                            locret_1B566:
0001BD2A 4E75                       		rts	
0001BD2C                            ; ===========================================================================
0001BD2C 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BD32                            ; ===========================================================================
0001BD32                            

0001BD32                            SS_Ani1Up:
0001BD32 5328 0002                  		subq.b	#1,2(a0)
0001BD36 6A00                       		bpl.s	locret_1B596
0001BD38 117C 0005 0002             		move.b	#5,2(a0)
0001BD3E 7000                       		moveq	#0,d0
0001BD40 1028 0003                  		move.b	3(a0),d0
0001BD44 5228 0003                  		addq.b	#1,3(a0)
0001BD48 2268 0004                  		movea.l	4(a0),a1
0001BD4C 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BD50 1280                       		move.b	d0,(a1)
0001BD52 6600                       		bne.s	locret_1B596
0001BD54 4290                       		clr.l	(a0)
0001BD56 42A8 0004                  		clr.l	4(a0)
0001BD5A                            

0001BD5A                            locret_1B596:
0001BD5A 4E75                       		rts	
0001BD5C                            ; ===========================================================================
0001BD5C 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BD62                            ; ===========================================================================
0001BD62                            

0001BD62                            SS_AniReverse:
0001BD62 5328 0002                  		subq.b	#1,2(a0)
0001BD66 6A00                       		bpl.s	locret_1B5CC
0001BD68 117C 0007 0002             		move.b	#7,2(a0)
0001BD6E 7000                       		moveq	#0,d0
0001BD70 1028 0003                  		move.b	3(a0),d0
0001BD74 5228 0003                  		addq.b	#1,3(a0)
0001BD78 2268 0004                  		movea.l	4(a0),a1
0001BD7C 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BD80 6600                       		bne.s	loc_1B5CA
0001BD82 4290                       		clr.l	(a0)
0001BD84 42A8 0004                  		clr.l	4(a0)
0001BD88 12BC 002B                  		move.b	#$2B,(a1)
0001BD8C 4E75                       		rts	
0001BD8E                            ; ===========================================================================
0001BD8E                            

0001BD8E                            loc_1B5CA:
0001BD8E 1280                       		move.b	d0,(a1)
0001BD90                            

0001BD90                            locret_1B5CC:
0001BD90 4E75                       		rts	
0001BD92                            ; ===========================================================================
0001BD92 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BD98                            ; ===========================================================================
0001BD98                            

0001BD98                            SS_AniEmeraldSparks:
0001BD98 5328 0002                  		subq.b	#1,2(a0)
0001BD9C 6A00                       		bpl.s	locret_1B60C
0001BD9E 117C 0005 0002             		move.b	#5,2(a0)
0001BDA4 7000                       		moveq	#0,d0
0001BDA6 1028 0003                  		move.b	3(a0),d0
0001BDAA 5228 0003                  		addq.b	#1,3(a0)
0001BDAE 2268 0004                  		movea.l	4(a0),a1
0001BDB2 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BDB6 1280                       		move.b	d0,(a1)
0001BDB8 6600                       		bne.s	locret_1B60C
0001BDBA 4290                       		clr.l	(a0)
0001BDBC 42A8 0004                  		clr.l	4(a0)
0001BDC0 11FC 0004 D024             		move.b	#4,(v_player+obRoutine).w
0001BDC6 303C 0000                  		move.w	#sfx_SSGoal,d0
0001BDCA 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play special stage GOAL sound
0001BDD0                            

0001BDD0                            locret_1B60C:
0001BDD0 4E75                       		rts	
0001BDD2                            ; ===========================================================================
0001BDD2 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BDD8                            ; ===========================================================================
0001BDD8                            

0001BDD8                            SS_AniGlassBlock:
0001BDD8 5328 0002                  		subq.b	#1,2(a0)
0001BDDC 6A00                       		bpl.s	locret_1B640
0001BDDE 117C 0001 0002             		move.b	#1,2(a0)
0001BDE4 7000                       		moveq	#0,d0
0001BDE6 1028 0003                  		move.b	3(a0),d0
0001BDEA 5228 0003                  		addq.b	#1,3(a0)
0001BDEE 2268 0004                  		movea.l	4(a0),a1
0001BDF2 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BDF6 1280                       		move.b	d0,(a1)
0001BDF8 6600                       		bne.s	locret_1B640
0001BDFA 12A8 0004                  		move.b	4(a0),(a1)
0001BDFE 4290                       		clr.l	(a0)
0001BE00 42A8 0004                  		clr.l	4(a0)
0001BE04                            

0001BE04                            locret_1B640:
0001BE04 4E75                       		rts	
0001BE06                            ; ===========================================================================
0001BE06 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData: dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BE10                            

0001BE10                            ; ---------------------------------------------------------------------------
0001BE10                            ; Special stage	layout pointers
0001BE10                            ; ---------------------------------------------------------------------------
0001BE10                            SS_LayoutIndex:
0001BE10 0000 0000                  		dc.l SS_1
0001BE14 0000 0000                  		dc.l SS_2
0001BE18 0000 0000                  		dc.l SS_3
0001BE1C 0000 0000                  		dc.l SS_4
0001BE20 0000 0000                  		dc.l SS_5
0001BE24 0000 0000                  		dc.l SS_6
0001BE28                            		even
0001BE28                            

0001BE28                            ; ---------------------------------------------------------------------------
0001BE28                            ; Special stage start locations
0001BE28                            ; ---------------------------------------------------------------------------
0001BE28                            SS_StartLoc:	include	"_inc\Start Location Array - Special Stages.asm"
0001BE28                            ; ---------------------------------------------------------------------------
0001BE28                            ; Special stage start locations
0001BE28                            ; ---------------------------------------------------------------------------
0001BE28                            

0001BE28                            		incbin	"startpos\ss1.bin"
0001BE2C                            		incbin	"startpos\ss2.bin"
0001BE30                            		incbin	"startpos\ss3.bin"
0001BE34                            		incbin	"startpos\ss4.bin"
0001BE38                            		incbin	"startpos\ss5.bin"
0001BE3C                            		incbin	"startpos\ss6.bin"
0001BE40                            		even
0001BE40                            		even
0001BE40                            

0001BE40                            ; ---------------------------------------------------------------------------
0001BE40                            ; Subroutine to	load special stage layout
0001BE40                            ; ---------------------------------------------------------------------------
0001BE40                            

0001BE40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE40                            

0001BE40                            

0001BE40                            SS_Load:
0001BE40 7000                       		moveq	#0,d0
0001BE42 1038 FE16                  		move.b	(v_lastspecial).w,d0 ; load number of last special stage entered
0001BE46 5238 FE16                  		addq.b	#1,(v_lastspecial).w
0001BE4A 0C38 0006 FE16             		cmpi.b	#6,(v_lastspecial).w
0001BE50 6500                       		blo.s	SS_ChkEmldNum
0001BE52 11FC 0000 FE16             		move.b	#0,(v_lastspecial).w ; reset if higher than 6
0001BE58                            

0001BE58                            SS_ChkEmldNum:
0001BE58 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all emeralds?
0001BE5E 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BE60 7200                       		moveq	#0,d1
0001BE62 1238 FE57                  		move.b	(v_emeralds).w,d1
0001BE66 5301                       		subq.b	#1,d1
0001BE68 6500                       		blo.s	SS_LoadData
0001BE6A 47F8 FE58                  		lea	(v_emldlist).w,a3 ; check which emeralds you have
0001BE6E                            

0001BE6E                            SS_ChkEmldLoop:	
0001BE6E B033 1000                  		cmp.b	(a3,d1.w),d0
0001BE72 6600                       		bne.s	SS_ChkEmldRepeat
0001BE74 60CA                       		bra.s	SS_Load
0001BE76                            ; ===========================================================================
0001BE76                            

0001BE76                            SS_ChkEmldRepeat:
0001BE76 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001BE7A                            

0001BE7A                            SS_LoadData:
0001BE7A E548                       		lsl.w	#2,d0
0001BE7C 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001BE80 31D9 D008                  		move.w	(a1)+,(v_player+obX).w
0001BE84 31D9 D00C                  		move.w	(a1)+,(v_player+obY).w
0001BE88 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001BE8C 43F9 00FF 4000             		lea	($FF4000).l,a1
0001BE92 303C 0000                  		move.w	#0,d0
0001BE96 4EB9 0000 1724             		jsr	(EniDec).l
0001BE9C 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BEA2 303C 0FFF                  		move.w	#$FFF,d0
0001BEA6                            

0001BEA6                            SS_ClrRAM3:
0001BEA6 4299                       		clr.l	(a1)+
0001BEA8 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001BEAC                            

0001BEAC 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BEB2 41F9 00FF 4000             		lea	($FF4000).l,a0
0001BEB8 723F                       		moveq	#$3F,d1
0001BEBA                            

0001BEBA                            loc_1B6F6:
0001BEBA 743F                       		moveq	#$3F,d2
0001BEBC                            

0001BEBC                            loc_1B6F8:
0001BEBC 12D8                       		move.b	(a0)+,(a1)+
0001BEBE 51CA FFFC                  		dbf	d2,loc_1B6F8
0001BEC2                            

0001BEC2 43E9 0040                  		lea	$40(a1),a1
0001BEC6 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001BECA                            

0001BECA 43F9 00FF 4008             		lea	($FF4008).l,a1
0001BED0 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001BED6 724D                       		moveq	#$4D,d1
0001BED8                            

0001BED8                            loc_1B714:
0001BED8 22D8                       		move.l	(a0)+,(a1)+
0001BEDA 32FC 0000                  		move.w	#0,(a1)+
0001BEDE 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001BEE4 32D8                       		move.w	(a0)+,(a1)+
0001BEE6 51C9 FFF0                  		dbf	d1,loc_1B714
0001BEEA                            

0001BEEA 43F9 00FF 4400             		lea	($FF4400).l,a1
0001BEF0 323C 003F                  		move.w	#$3F,d1
0001BEF4                            

0001BEF4                            loc_1B730:
0001BEF4                            

0001BEF4 4299                       		clr.l	(a1)+
0001BEF6 51C9 FFFC                  		dbf	d1,loc_1B730
0001BEFA                            

0001BEFA 4E75                       		rts	
0001BEFC                            ; End of function SS_Load
0001BEFC                            

0001BEFC                            ; ===========================================================================
0001BEFC                            

0001BEFC                            SS_MapIndex:
0001BEFC                            		include	"_inc\Special Stage Mappings & VRAM Pointers.asm"
0001BEFC                            ; ---------------------------------------------------------------------------
0001BEFC                            ; Special stage	mappings and VRAM pointers
0001BEFC                            ; ---------------------------------------------------------------------------
0001BEFC 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001BF00 0142                       	dc.w $142		; VRAM setting
0001BF02 0000 0000                  	dc.l Map_SSWalls
0001BF06 0142                       	dc.w $142
0001BF08 0000 0000                  	dc.l Map_SSWalls
0001BF0C 0142                       	dc.w $142
0001BF0E 0000 0000                  	dc.l Map_SSWalls
0001BF12 0142                       	dc.w $142
0001BF14 0000 0000                  	dc.l Map_SSWalls
0001BF18 0142                       	dc.w $142
0001BF1A 0000 0000                  	dc.l Map_SSWalls
0001BF1E 0142                       	dc.w $142
0001BF20 0000 0000                  	dc.l Map_SSWalls
0001BF24 0142                       	dc.w $142
0001BF26 0000 0000                  	dc.l Map_SSWalls
0001BF2A 0142                       	dc.w $142
0001BF2C 0000 0000                  	dc.l Map_SSWalls
0001BF30 0142                       	dc.w $142
0001BF32 0000 0000                  	dc.l Map_SSWalls
0001BF36 2142                       	dc.w $2142
0001BF38 0000 0000                  	dc.l Map_SSWalls
0001BF3C 2142                       	dc.w $2142
0001BF3E 0000 0000                  	dc.l Map_SSWalls
0001BF42 2142                       	dc.w $2142
0001BF44 0000 0000                  	dc.l Map_SSWalls
0001BF48 2142                       	dc.w $2142
0001BF4A 0000 0000                  	dc.l Map_SSWalls
0001BF4E 2142                       	dc.w $2142
0001BF50 0000 0000                  	dc.l Map_SSWalls
0001BF54 2142                       	dc.w $2142
0001BF56 0000 0000                  	dc.l Map_SSWalls
0001BF5A 2142                       	dc.w $2142
0001BF5C 0000 0000                  	dc.l Map_SSWalls
0001BF60 2142                       	dc.w $2142
0001BF62 0000 0000                  	dc.l Map_SSWalls
0001BF66 2142                       	dc.w $2142
0001BF68 0000 0000                  	dc.l Map_SSWalls
0001BF6C 4142                       	dc.w $4142
0001BF6E 0000 0000                  	dc.l Map_SSWalls
0001BF72 4142                       	dc.w $4142
0001BF74 0000 0000                  	dc.l Map_SSWalls
0001BF78 4142                       	dc.w $4142
0001BF7A 0000 0000                  	dc.l Map_SSWalls
0001BF7E 4142                       	dc.w $4142
0001BF80 0000 0000                  	dc.l Map_SSWalls
0001BF84 4142                       	dc.w $4142
0001BF86 0000 0000                  	dc.l Map_SSWalls
0001BF8A 4142                       	dc.w $4142
0001BF8C 0000 0000                  	dc.l Map_SSWalls
0001BF90 4142                       	dc.w $4142
0001BF92 0000 0000                  	dc.l Map_SSWalls
0001BF96 4142                       	dc.w $4142
0001BF98 0000 0000                  	dc.l Map_SSWalls
0001BF9C 4142                       	dc.w $4142
0001BF9E 0000 0000                  	dc.l Map_SSWalls
0001BFA2 6142                       	dc.w $6142
0001BFA4 0000 0000                  	dc.l Map_SSWalls
0001BFA8 6142                       	dc.w $6142
0001BFAA 0000 0000                  	dc.l Map_SSWalls
0001BFAE 6142                       	dc.w $6142
0001BFB0 0000 0000                  	dc.l Map_SSWalls
0001BFB4 6142                       	dc.w $6142
0001BFB6 0000 0000                  	dc.l Map_SSWalls
0001BFBA 6142                       	dc.w $6142
0001BFBC 0000 0000                  	dc.l Map_SSWalls
0001BFC0 6142                       	dc.w $6142
0001BFC2 0000 0000                  	dc.l Map_SSWalls
0001BFC6 6142                       	dc.w $6142
0001BFC8 0000 0000                  	dc.l Map_SSWalls
0001BFCC 6142                       	dc.w $6142
0001BFCE 0000 0000                  	dc.l Map_SSWalls
0001BFD2 6142                       	dc.w $6142
0001BFD4 0000 F19A                  	dc.l Map_Bump
0001BFD8 023B                       	dc.w $23B
0001BFDA 0000 0000                  	dc.l Map_SS_R
0001BFDE 0570                       	dc.w $570
0001BFE0 0000 0000                  	dc.l Map_SS_R
0001BFE4 0251                       	dc.w $251
0001BFE6 0000 0000                  	dc.l Map_SS_R
0001BFEA 0370                       	dc.w $370
0001BFEC 0000 0000                  	dc.l Map_SS_Up
0001BFF0 0263                       	dc.w $263
0001BFF2 0000 0000                  	dc.l Map_SS_Down
0001BFF6 0263                       	dc.w $263
0001BFF8 0000 0000                  	dc.l Map_SS_R
0001BFFC 22F0                       	dc.w $22F0
0001BFFE 0000 0000                  	dc.l Map_SS_Glass
0001C002 0470                       	dc.w $470
0001C004 0000 0000                  	dc.l Map_SS_Glass
0001C008 05F0                       	dc.w $5F0
0001C00A 0000 0000                  	dc.l Map_SS_Glass
0001C00E 65F0                       	dc.w $65F0
0001C010 0000 0000                  	dc.l Map_SS_Glass
0001C014 25F0                       	dc.w $25F0
0001C016 0000 0000                  	dc.l Map_SS_Glass
0001C01A 45F0                       	dc.w $45F0
0001C01C 0000 0000                  	dc.l Map_SS_R
0001C020 02F0                       	dc.w $2F0
0001C022 0100 F19A                  	dc.l Map_Bump+$1000000	; add frame no.	* $1000000
0001C026 023B                       	dc.w $23B
0001C028 0200 F19A                  	dc.l Map_Bump+$2000000
0001C02C 023B                       	dc.w $23B
0001C02E 0000 0000                  	dc.l Map_SS_R
0001C032 0797                       	dc.w $797
0001C034 0000 0000                  	dc.l Map_SS_R
0001C038 07A0                       	dc.w $7A0
0001C03A 0000 0000                  	dc.l Map_SS_R
0001C03E 07A9                       	dc.w $7A9
0001C040 0000 0000                  	dc.l Map_SS_R
0001C044 0797                       	dc.w $797
0001C046 0000 0000                  	dc.l Map_SS_R
0001C04A 07A0                       	dc.w $7A0
0001C04C 0000 0000                  	dc.l Map_SS_R
0001C050 07A9                       	dc.w $7A9
0001C052 0000 A61E                  	dc.l Map_Ring
0001C056 27B2                       	dc.w $27B2
0001C058 0000 0000                  	dc.l Map_SS_Chaos3
0001C05C 0770                       	dc.w $770
0001C05E 0000 0000                  	dc.l Map_SS_Chaos3
0001C062 2770                       	dc.w $2770
0001C064 0000 0000                  	dc.l Map_SS_Chaos3
0001C068 4770                       	dc.w $4770
0001C06A 0000 0000                  	dc.l Map_SS_Chaos3
0001C06E 6770                       	dc.w $6770
0001C070 0000 0000                  	dc.l Map_SS_Chaos1
0001C074 0770                       	dc.w $770
0001C076 0000 0000                  	dc.l Map_SS_Chaos2
0001C07A 0770                       	dc.w $770
0001C07C 0000 0000                  	dc.l Map_SS_R
0001C080 04F0                       	dc.w $4F0
0001C082 0400 A61E                  	dc.l Map_Ring+$4000000
0001C086 27B2                       	dc.w $27B2
0001C088 0500 A61E                  	dc.l Map_Ring+$5000000
0001C08C 27B2                       	dc.w $27B2
0001C08E 0600 A61E                  	dc.l Map_Ring+$6000000
0001C092 27B2                       	dc.w $27B2
0001C094 0700 A61E                  	dc.l Map_Ring+$7000000
0001C098 27B2                       	dc.w $27B2
0001C09A 0000 0000                  	dc.l Map_SS_Glass
0001C09E 23F0                       	dc.w $23F0
0001C0A0 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C0A4 23F0                       	dc.w $23F0
0001C0A6 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C0AA 23F0                       	dc.w $23F0
0001C0AC 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C0B0 23F0                       	dc.w $23F0
0001C0B2 0000 0000                  	dc.l Map_SS_R+$2000000
0001C0B6 04F0                       	dc.w $4F0
0001C0B8 0000 0000                  	dc.l Map_SS_Glass
0001C0BC 05F0                       	dc.w $5F0
0001C0BE 0000 0000                  	dc.l Map_SS_Glass
0001C0C2 65F0                       	dc.w $65F0
0001C0C4 0000 0000                  	dc.l Map_SS_Glass
0001C0C8 25F0                       	dc.w $25F0
0001C0CA 0000 0000                  	dc.l Map_SS_Glass
0001C0CE 45F0                       	dc.w $45F0
0001C0CE 45F0                       	dc.w $45F0
0001C0D0                            

0001C0D0                            Map_SS_R:	include	"_maps\SS R Block.asm"
0001C0D0                            ; ---------------------------------------------------------------------------
0001C0D0                            ; Sprite mappings - special stage "R" block
0001C0D0                            ; ---------------------------------------------------------------------------
0001C0D0                            Map_SS_R_internal:
0001C0D0 0000                       		dc.w byte_1B912-Map_SS_R_internal
0001C0D2 0000                       		dc.w byte_1B918-Map_SS_R_internal
0001C0D4 0000                       		dc.w byte_1B91E-Map_SS_R_internal
0001C0D6 01                         byte_1B912:	dc.b 1
0001C0D7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C0DC 01                         byte_1B918:	dc.b 1
0001C0DD F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C0E2 00                         byte_1B91E:	dc.b 0
0001C0E4 00                         		even
0001C0E4 00                         		even
0001C0E4                            Map_SS_Glass:	include	"_maps\SS Glass Block.asm"
0001C0E4                            ; ---------------------------------------------------------------------------
0001C0E4                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C0E4                            ; ---------------------------------------------------------------------------
0001C0E4                            Map_SS_Glass_internal:
0001C0E4 0000                       		dc.w byte_1B928-Map_SS_Glass_internal
0001C0E6 0000                       		dc.w byte_1B92E-Map_SS_Glass_internal
0001C0E8 0000                       		dc.w byte_1B934-Map_SS_Glass_internal
0001C0EA 0000                       		dc.w byte_1B93A-Map_SS_Glass_internal
0001C0EC 01                         byte_1B928:	dc.b 1
0001C0ED F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C0F2 01                         byte_1B92E:	dc.b 1
0001C0F3 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C0F8 01                         byte_1B934:	dc.b 1
0001C0F9 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C0FE 01                         byte_1B93A:	dc.b 1
0001C0FF F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C104                            		even
0001C104                            		even
0001C104                            Map_SS_Up:	include	"_maps\SS UP Block.asm"
0001C104                            ; ---------------------------------------------------------------------------
0001C104                            ; Sprite mappings - special stage "UP" block
0001C104                            ; ---------------------------------------------------------------------------
0001C104                            Map_SS_Up_internal:
0001C104 0000                       		dc.w byte_1B944-Map_SS_Up_internal
0001C106 0000                       		dc.w byte_1B94A-Map_SS_Up_internal
0001C108 01                         byte_1B944:	dc.b 1
0001C109 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C10E 01                         byte_1B94A:	dc.b 1
0001C10F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C114                            		even
0001C114                            		even
0001C114                            Map_SS_Down:	include	"_maps\SS DOWN Block.asm"
0001C114                            ; ---------------------------------------------------------------------------
0001C114                            ; Sprite mappings - special stage "DOWN" block
0001C114                            ; ---------------------------------------------------------------------------
0001C114                            Map_SS_Down_internal:
0001C114 0000                       		dc.w byte_1B954-Map_SS_Down_internal
0001C116 0000                       		dc.w byte_1B95A-Map_SS_Down_internal
0001C118 01                         byte_1B954:	dc.b 1
0001C119 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C11E 01                         byte_1B95A:	dc.b 1
0001C11F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C124                            		even
0001C124                            		even
0001C124                            		include	"_maps\SS Chaos Emeralds.asm"
0001C124                            ; ---------------------------------------------------------------------------
0001C124                            ; Sprite mappings - special stage chaos	emeralds
0001C124                            ; ---------------------------------------------------------------------------
0001C124 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C126 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C128 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C12A 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C12C 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C12E 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C130 01                         byte_1B96C:	dc.b 1
0001C131 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C136 01                         byte_1B972:	dc.b 1
0001C137 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C13C 01                         byte_1B978:	dc.b 1
0001C13D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C142 01                         byte_1B97E:	dc.b 1
0001C143 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C148                            		even
0001C148                            		even
0001C148                            

0001C148                            		include	"_incObj\09 Sonic in Special Stage.asm"
0001C148                            ; ---------------------------------------------------------------------------
0001C148                            ; Object 09 - Sonic (special stage)
0001C148                            ; ---------------------------------------------------------------------------
0001C148                            

0001C148                            SonicSpecial:
0001C148 4A78 FE08                  		tst.w	(v_debuguse).w	; is debug mode	being used?
0001C14C 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C14E 6100 0000                  		bsr.w	SS_FixCamera
0001C152 6000 0000                  		bra.w	DebugMode
0001C156                            ; ===========================================================================
0001C156                            

0001C156                            Obj09_Normal:
0001C156 7000                       		moveq	#0,d0
0001C158 1028 0024                  		move.b	obRoutine(a0),d0
0001C15C 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C160 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C164                            ; ===========================================================================
0001C164 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C166 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C168 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C16A 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C16C                            ; ===========================================================================
0001C16C                            

0001C16C                            Obj09_Main:	; Routine 0
0001C16C 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C170 117C 000E 0016             		move.b	#$E,obHeight(a0)
0001C176 117C 0007 0017             		move.b	#7,obWidth(a0)
0001C17C 217C 0000 0000 0004        		move.l	#Map_Sonic,obMap(a0)
0001C184 317C 0780 0002             		move.w	#$780,obGfx(a0)
0001C18A 117C 0004 0001             		move.b	#4,obRender(a0)
0001C190 117C 0000 0018             		move.b	#0,obPriority(a0)
0001C196 117C 0002 001C             		move.b	#id_Roll,obAnim(a0)
0001C19C 08E8 0002 0022             		bset	#2,obStatus(a0)
0001C1A2 08E8 0001 0022             		bset	#1,obStatus(a0)
0001C1A8                            

0001C1A8                            Obj09_ChkDebug:	; Routine 2
0001C1A8 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	cheat enabled?
0001C1AC 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C1AE 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001C1B4 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C1B6 31FC 0001 FE08             		move.w	#1,(v_debuguse).w ; change Sonic into a ring
0001C1BC                            

0001C1BC                            Obj09_NoDebug:
0001C1BC 117C 0000 0030             		move.b	#0,$30(a0)
0001C1C2 7000                       		moveq	#0,d0
0001C1C4 1028 0022                  		move.b	obStatus(a0),d0
0001C1C8 0240 0002                  		andi.w	#2,d0
0001C1CC 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C1D0 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C1D4 4EB9 0001 4320             		jsr	(Sonic_LoadGfx).l
0001C1DA 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001C1E0                            ; ===========================================================================
0001C1E0 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C1E2 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C1E4                            ; ===========================================================================
0001C1E4                            

0001C1E4                            Obj09_OnWall:
0001C1E4 6100 0000                  		bsr.w	Obj09_Jump
0001C1E8 6100 0000                  		bsr.w	Obj09_Move
0001C1EC 6100 0000                  		bsr.w	Obj09_Fall
0001C1F0 6000                       		bra.s	Obj09_Display
0001C1F2                            ; ===========================================================================
0001C1F2                            

0001C1F2                            Obj09_InAir:
0001C1F2 6100 0000                  		bsr.w	nullsub_2
0001C1F6 6100 0000                  		bsr.w	Obj09_Move
0001C1FA 6100 0000                  		bsr.w	Obj09_Fall
0001C1FE                            

0001C1FE                            Obj09_Display:
0001C1FE 6100 0000                  		bsr.w	Obj09_ChkItems
0001C202 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C206 4EB9 0000 DC7A             		jsr	(SpeedToPos).l
0001C20C 6100 0000                  		bsr.w	SS_FixCamera
0001C210 3038 F780                  		move.w	(v_ssangle).w,d0
0001C214 D078 F782                  		add.w	(v_ssrotate).w,d0
0001C218 31C0 F780                  		move.w	d0,(v_ssangle).w
0001C21C 4EB9 0001 40A6             		jsr	(Sonic_Animate).l
0001C222 4E75                       		rts	
0001C224                            

0001C224                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C224                            

0001C224                            

0001C224                            Obj09_Move:
0001C224 0838 0002 F602             		btst	#bitL,(v_jpadhold2).w ; is left being pressed?
0001C22A 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C22C 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C230                            

0001C230                            Obj09_ChkRight:
0001C230 0838 0003 F602             		btst	#bitR,(v_jpadhold2).w ; is right being pressed?
0001C236 6700                       		beq.s	loc_1BA78	; if not, branch
0001C238 6100 0000                  		bsr.w	Obj09_MoveRight
0001C23C                            

0001C23C                            loc_1BA78:
0001C23C 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001C240 0200 000C                  		andi.b	#btnL+btnR,d0
0001C244 6600                       		bne.s	loc_1BAA8
0001C246 3028 0014                  		move.w	obInertia(a0),d0
0001C24A 6700                       		beq.s	loc_1BAA8
0001C24C 6B00                       		bmi.s	loc_1BA9A
0001C24E 0440 000C                  		subi.w	#$C,d0
0001C252 6400                       		bcc.s	loc_1BA94
0001C254 303C 0000                  		move.w	#0,d0
0001C258                            

0001C258                            loc_1BA94:
0001C258 3140 0014                  		move.w	d0,obInertia(a0)
0001C25C 6000                       		bra.s	loc_1BAA8
0001C25E                            ; ===========================================================================
0001C25E                            

0001C25E                            loc_1BA9A:
0001C25E 0640 000C                  		addi.w	#$C,d0
0001C262 6400                       		bcc.s	loc_1BAA4
0001C264 303C 0000                  		move.w	#0,d0
0001C268                            

0001C268                            loc_1BAA4:
0001C268 3140 0014                  		move.w	d0,obInertia(a0)
0001C26C                            

0001C26C                            loc_1BAA8:
0001C26C 1038 F780                  		move.b	(v_ssangle).w,d0
0001C270 0600 0020                  		addi.b	#$20,d0
0001C274 0200 00C0                  		andi.b	#$C0,d0
0001C278 4400                       		neg.b	d0
0001C27A 4EB9 0000 29E0             		jsr	(CalcSine).l
0001C280 C3E8 0014                  		muls.w	obInertia(a0),d1
0001C284 D3A8 0008                  		add.l	d1,obX(a0)
0001C288 C1E8 0014                  		muls.w	obInertia(a0),d0
0001C28C D1A8 000C                  		add.l	d0,obY(a0)
0001C290 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C294 2428 000C                  		move.l	obY(a0),d2
0001C298 2628 0008                  		move.l	obX(a0),d3
0001C29C 6100 0000                  		bsr.w	sub_1BCE8
0001C2A0 6700                       		beq.s	loc_1BAF2
0001C2A2 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C2A6 93A8 0008                  		sub.l	d1,obX(a0)
0001C2AA 91A8 000C                  		sub.l	d0,obY(a0)
0001C2AE 317C 0000 0014             		move.w	#0,obInertia(a0)
0001C2B4 4E75                       		rts	
0001C2B6                            ; ===========================================================================
0001C2B6                            

0001C2B6                            loc_1BAF2:
0001C2B6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C2BA 4E75                       		rts	
0001C2BC                            ; End of function Obj09_Move
0001C2BC                            

0001C2BC                            

0001C2BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2BC                            

0001C2BC                            

0001C2BC                            Obj09_MoveLeft:
0001C2BC 08E8 0000 0022             		bset	#0,obStatus(a0)
0001C2C2 3028 0014                  		move.w	obInertia(a0),d0
0001C2C6 6700                       		beq.s	loc_1BB06
0001C2C8 6A00                       		bpl.s	loc_1BB1A
0001C2CA                            

0001C2CA                            loc_1BB06:
0001C2CA 0440 000C                  		subi.w	#$C,d0
0001C2CE 0C40 F800                  		cmpi.w	#-$800,d0
0001C2D2 6E00                       		bgt.s	loc_1BB14
0001C2D4 303C F800                  		move.w	#-$800,d0
0001C2D8                            

0001C2D8                            loc_1BB14:
0001C2D8 3140 0014                  		move.w	d0,obInertia(a0)
0001C2DC 4E75                       		rts	
0001C2DE                            ; ===========================================================================
0001C2DE                            

0001C2DE                            loc_1BB1A:
0001C2DE 0440 0040                  		subi.w	#$40,d0
0001C2E2 6400                       		bcc.s	loc_1BB22
0001C2E4 4E71                       		nop	
0001C2E6                            

0001C2E6                            loc_1BB22:
0001C2E6 3140 0014                  		move.w	d0,obInertia(a0)
0001C2EA 4E75                       		rts	
0001C2EC                            ; End of function Obj09_MoveLeft
0001C2EC                            

0001C2EC                            

0001C2EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2EC                            

0001C2EC                            

0001C2EC                            Obj09_MoveRight:
0001C2EC 08A8 0000 0022             		bclr	#0,obStatus(a0)
0001C2F2 3028 0014                  		move.w	obInertia(a0),d0
0001C2F6 6B00                       		bmi.s	loc_1BB48
0001C2F8 0640 000C                  		addi.w	#$C,d0
0001C2FC 0C40 0800                  		cmpi.w	#$800,d0
0001C300 6D00                       		blt.s	loc_1BB42
0001C302 303C 0800                  		move.w	#$800,d0
0001C306                            

0001C306                            loc_1BB42:
0001C306 3140 0014                  		move.w	d0,obInertia(a0)
0001C30A 6000                       		bra.s	locret_1BB54
0001C30C                            ; ===========================================================================
0001C30C                            

0001C30C                            loc_1BB48:
0001C30C 0640 0040                  		addi.w	#$40,d0
0001C310 6400                       		bcc.s	loc_1BB50
0001C312 4E71                       		nop	
0001C314                            

0001C314                            loc_1BB50:
0001C314 3140 0014                  		move.w	d0,obInertia(a0)
0001C318                            

0001C318                            locret_1BB54:
0001C318 4E75                       		rts	
0001C31A                            ; End of function Obj09_MoveRight
0001C31A                            

0001C31A                            

0001C31A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C31A                            

0001C31A                            

0001C31A                            Obj09_Jump:
0001C31A 1038 F603                  		move.b	(v_jpadpress2).w,d0
0001C31E 0200 0070                  		andi.b	#btnABC,d0	; is A,	B or C pressed?
0001C322 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C324 1038 F780                  		move.b	(v_ssangle).w,d0
0001C328 0200 00FC                  		andi.b	#$FC,d0
0001C32C 4400                       		neg.b	d0
0001C32E 0400 0040                  		subi.b	#$40,d0
0001C332 4EB9 0000 29E0             		jsr	(CalcSine).l
0001C338 C3FC 0680                  		muls.w	#$680,d1
0001C33C E081                       		asr.l	#8,d1
0001C33E 3141 0010                  		move.w	d1,obVelX(a0)
0001C342 C1FC 0680                  		muls.w	#$680,d0
0001C346 E080                       		asr.l	#8,d0
0001C348 3140 0012                  		move.w	d0,obVelY(a0)
0001C34C 08E8 0001 0022             		bset	#1,obStatus(a0)
0001C352 303C 0000                  		move.w	#sfx_Jump,d0
0001C356 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play jumping sound
0001C35C                            

0001C35C                            Obj09_NoJump:
0001C35C 4E75                       		rts	
0001C35E                            ; End of function Obj09_Jump
0001C35E                            

0001C35E                            

0001C35E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C35E                            

0001C35E                            

0001C35E                            nullsub_2:
0001C35E 4E75                       		rts	
0001C360                            ; End of function nullsub_2
0001C360                            

0001C360                            ; ===========================================================================
0001C360                            ; ---------------------------------------------------------------------------
0001C360                            ; unused subroutine to limit Sonic's upward vertical speed
0001C360                            ; ---------------------------------------------------------------------------
0001C360 323C FC00                  		move.w	#-$400,d1
0001C364 B268 0012                  		cmp.w	obVelY(a0),d1
0001C368 6F00                       		ble.s	locret_1BBB4
0001C36A 1038 F602                  		move.b	(v_jpadhold2).w,d0
0001C36E 0200 0070                  		andi.b	#btnABC,d0
0001C372 6600                       		bne.s	locret_1BBB4
0001C374 3141 0012                  		move.w	d1,obVelY(a0)
0001C378                            

0001C378                            locret_1BBB4:
0001C378 4E75                       		rts	
0001C37A                            ; ---------------------------------------------------------------------------
0001C37A                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C37A                            ; ---------------------------------------------------------------------------
0001C37A                            

0001C37A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C37A                            

0001C37A                            

0001C37A                            SS_FixCamera:
0001C37A 3428 000C                  		move.w	obY(a0),d2
0001C37E 3628 0008                  		move.w	obX(a0),d3
0001C382 3038 F700                  		move.w	(v_screenposx).w,d0
0001C386 0443 00A0                  		subi.w	#$A0,d3
0001C38A 6500                       		bcs.s	loc_1BBCE
0001C38C 9043                       		sub.w	d3,d0
0001C38E 9178 F700                  		sub.w	d0,(v_screenposx).w
0001C392                            

0001C392                            loc_1BBCE:
0001C392 3038 F704                  		move.w	(v_screenposy).w,d0
0001C396 0442 0070                  		subi.w	#$70,d2
0001C39A 6500                       		bcs.s	locret_1BBDE
0001C39C 9042                       		sub.w	d2,d0
0001C39E 9178 F704                  		sub.w	d0,(v_screenposy).w
0001C3A2                            

0001C3A2                            locret_1BBDE:
0001C3A2 4E75                       		rts	
0001C3A4                            ; End of function SS_FixCamera
0001C3A4                            

0001C3A4                            ; ===========================================================================
0001C3A4                            

0001C3A4                            Obj09_ExitStage:
0001C3A4 0678 0040 F782             		addi.w	#$40,(v_ssrotate).w
0001C3AA 0C78 1800 F782             		cmpi.w	#$1800,(v_ssrotate).w
0001C3B0 6600                       		bne.s	loc_1BBF4
0001C3B2 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001C3B8                            

0001C3B8                            loc_1BBF4:
0001C3B8 0C78 3000 F782             		cmpi.w	#$3000,(v_ssrotate).w
0001C3BE 6D00                       		blt.s	loc_1BC12
0001C3C0 31FC 0000 F782             		move.w	#0,(v_ssrotate).w
0001C3C6 31FC 4000 F780             		move.w	#$4000,(v_ssangle).w
0001C3CC 5428 0024                  		addq.b	#2,obRoutine(a0)
0001C3D0 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C3D6                            

0001C3D6                            loc_1BC12:
0001C3D6 3038 F780                  		move.w	(v_ssangle).w,d0
0001C3DA D078 F782                  		add.w	(v_ssrotate).w,d0
0001C3DE 31C0 F780                  		move.w	d0,(v_ssangle).w
0001C3E2 4EB9 0001 40A6             		jsr	(Sonic_Animate).l
0001C3E8 4EB9 0001 4320             		jsr	(Sonic_LoadGfx).l
0001C3EE 6100 FF8A                  		bsr.w	SS_FixCamera
0001C3F2 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001C3F8                            ; ===========================================================================
0001C3F8                            

0001C3F8                            Obj09_Exit2:
0001C3F8 5368 0038                  		subq.w	#1,$38(a0)
0001C3FC 6600                       		bne.s	loc_1BC40
0001C3FE 11FC 0000 F600             		move.b	#id_Level,(v_gamemode).w
0001C404                            

0001C404                            loc_1BC40:
0001C404 4EB9 0001 40A6             		jsr	(Sonic_Animate).l
0001C40A 4EB9 0001 4320             		jsr	(Sonic_LoadGfx).l
0001C410 6100 FF68                  		bsr.w	SS_FixCamera
0001C414 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001C41A                            

0001C41A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C41A                            

0001C41A                            

0001C41A                            Obj09_Fall:
0001C41A 2428 000C                  		move.l	obY(a0),d2
0001C41E 2628 0008                  		move.l	obX(a0),d3
0001C422 1038 F780                  		move.b	(v_ssangle).w,d0
0001C426 0200 00FC                  		andi.b	#$FC,d0
0001C42A 4EB9 0000 29E0             		jsr	(CalcSine).l
0001C430 3828 0010                  		move.w	obVelX(a0),d4
0001C434 48C4                       		ext.l	d4
0001C436 E184                       		asl.l	#8,d4
0001C438 C1FC 002A                  		muls.w	#$2A,d0
0001C43C D084                       		add.l	d4,d0
0001C43E 3828 0012                  		move.w	obVelY(a0),d4
0001C442 48C4                       		ext.l	d4
0001C444 E184                       		asl.l	#8,d4
0001C446 C3FC 002A                  		muls.w	#$2A,d1
0001C44A D284                       		add.l	d4,d1
0001C44C D680                       		add.l	d0,d3
0001C44E 6100 0000                  		bsr.w	sub_1BCE8
0001C452 6700                       		beq.s	loc_1BCB0
0001C454 9680                       		sub.l	d0,d3
0001C456 7000                       		moveq	#0,d0
0001C458 3140 0010                  		move.w	d0,obVelX(a0)
0001C45C 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C462 D481                       		add.l	d1,d2
0001C464 6100 0000                  		bsr.w	sub_1BCE8
0001C468 6700                       		beq.s	loc_1BCC6
0001C46A 9481                       		sub.l	d1,d2
0001C46C 7200                       		moveq	#0,d1
0001C46E 3141 0012                  		move.w	d1,obVelY(a0)
0001C472 4E75                       		rts	
0001C474                            ; ===========================================================================
0001C474                            

0001C474                            loc_1BCB0:
0001C474 D481                       		add.l	d1,d2
0001C476 6100 0000                  		bsr.w	sub_1BCE8
0001C47A 6700                       		beq.s	loc_1BCD4
0001C47C 9481                       		sub.l	d1,d2
0001C47E 7200                       		moveq	#0,d1
0001C480 3141 0012                  		move.w	d1,obVelY(a0)
0001C484 08A8 0001 0022             		bclr	#1,obStatus(a0)
0001C48A                            

0001C48A                            loc_1BCC6:
0001C48A E080                       		asr.l	#8,d0
0001C48C E081                       		asr.l	#8,d1
0001C48E 3140 0010                  		move.w	d0,obVelX(a0)
0001C492 3141 0012                  		move.w	d1,obVelY(a0)
0001C496 4E75                       		rts	
0001C498                            ; ===========================================================================
0001C498                            

0001C498                            loc_1BCD4:
0001C498 E080                       		asr.l	#8,d0
0001C49A E081                       		asr.l	#8,d1
0001C49C 3140 0010                  		move.w	d0,obVelX(a0)
0001C4A0 3141 0012                  		move.w	d1,obVelY(a0)
0001C4A4 08E8 0001 0022             		bset	#1,obStatus(a0)
0001C4AA 4E75                       		rts	
0001C4AC                            ; End of function Obj09_Fall
0001C4AC                            

0001C4AC                            

0001C4AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4AC                            

0001C4AC                            

0001C4AC                            sub_1BCE8:
0001C4AC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C4B2 7800                       		moveq	#0,d4
0001C4B4 4842                       		swap	d2
0001C4B6 3802                       		move.w	d2,d4
0001C4B8 4842                       		swap	d2
0001C4BA 0644 0044                  		addi.w	#$44,d4
0001C4BE 88FC 0018                  		divu.w	#$18,d4
0001C4C2 C8FC 0080                  		mulu.w	#$80,d4
0001C4C6 D3C4                       		adda.l	d4,a1
0001C4C8 7800                       		moveq	#0,d4
0001C4CA 4843                       		swap	d3
0001C4CC 3803                       		move.w	d3,d4
0001C4CE 4843                       		swap	d3
0001C4D0 0644 0014                  		addi.w	#$14,d4
0001C4D4 88FC 0018                  		divu.w	#$18,d4
0001C4D8 D2C4                       		adda.w	d4,a1
0001C4DA 7A00                       		moveq	#0,d5
0001C4DC 1819                       		move.b	(a1)+,d4
0001C4DE 6100                       		bsr.s	sub_1BD30
0001C4E0 1819                       		move.b	(a1)+,d4
0001C4E2 6100                       		bsr.s	sub_1BD30
0001C4E4 D2FC 007E                  		adda.w	#$7E,a1
0001C4E8 1819                       		move.b	(a1)+,d4
0001C4EA 6100                       		bsr.s	sub_1BD30
0001C4EC 1819                       		move.b	(a1)+,d4
0001C4EE 6100                       		bsr.s	sub_1BD30
0001C4F0 4A05                       		tst.b	d5
0001C4F2 4E75                       		rts	
0001C4F4                            ; End of function sub_1BCE8
0001C4F4                            

0001C4F4                            

0001C4F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4F4                            

0001C4F4                            

0001C4F4                            sub_1BD30:
0001C4F4 6700                       		beq.s	locret_1BD44
0001C4F6 0C04 0028                  		cmpi.b	#$28,d4
0001C4FA 6700                       		beq.s	locret_1BD44
0001C4FC 0C04 003A                  		cmpi.b	#$3A,d4
0001C500 6500                       		bcs.s	loc_1BD46
0001C502 0C04 004B                  		cmpi.b	#$4B,d4
0001C506 6400                       		bcc.s	loc_1BD46
0001C508                            

0001C508                            locret_1BD44:
0001C508 4E75                       		rts	
0001C50A                            ; ===========================================================================
0001C50A                            

0001C50A                            loc_1BD46:
0001C50A 1144 0030                  		move.b	d4,$30(a0)
0001C50E 2149 0032                  		move.l	a1,$32(a0)
0001C512 7AFF                       		moveq	#-1,d5
0001C514 4E75                       		rts	
0001C516                            ; End of function sub_1BD30
0001C516                            

0001C516                            

0001C516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C516                            

0001C516                            

0001C516                            Obj09_ChkItems:
0001C516 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C51C 7800                       		moveq	#0,d4
0001C51E 3828 000C                  		move.w	obY(a0),d4
0001C522 0644 0050                  		addi.w	#$50,d4
0001C526 88FC 0018                  		divu.w	#$18,d4
0001C52A C8FC 0080                  		mulu.w	#$80,d4
0001C52E D3C4                       		adda.l	d4,a1
0001C530 7800                       		moveq	#0,d4
0001C532 3828 0008                  		move.w	obX(a0),d4
0001C536 0644 0020                  		addi.w	#$20,d4
0001C53A 88FC 0018                  		divu.w	#$18,d4
0001C53E D2C4                       		adda.w	d4,a1
0001C540 1811                       		move.b	(a1),d4
0001C542 6600                       		bne.s	Obj09_ChkCont
0001C544 4A28 003A                  		tst.b	$3A(a0)
0001C548 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C54C 7800                       		moveq	#0,d4
0001C54E 4E75                       		rts	
0001C550                            ; ===========================================================================
0001C550                            

0001C550                            Obj09_ChkCont:
0001C550 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C554 6600                       		bne.s	Obj09_Chk1Up
0001C556 6100 F726                  		bsr.w	SS_RemoveCollectedItem
0001C55A 6600                       		bne.s	Obj09_GetCont
0001C55C 14BC 0001                  		move.b	#1,(a2)
0001C560 2549 0004                  		move.l	a1,4(a2)
0001C564                            

0001C564                            Obj09_GetCont:
0001C564 4EB9 0000 A302             		jsr	(CollectRing).l
0001C56A 0C78 0032 FE20             		cmpi.w	#50,(v_rings).w	; check if you have 50 rings
0001C570 6500                       		bcs.s	Obj09_NoCont
0001C572 08F8 0000 FE1B             		bset	#0,(v_lifecount).w
0001C578 6600                       		bne.s	Obj09_NoCont
0001C57A 5238 FE18                  		addq.b	#1,(v_continues).w ; add 1 to number of continues
0001C57E 303C 0000                  		move.w	#sfx_Continue,d0
0001C582 4EB9 0000 139C             		jsr	(PlaySound).l	; play extra continue sound
0001C588                            

0001C588                            Obj09_NoCont:
0001C588 7800                       		moveq	#0,d4
0001C58A 4E75                       		rts	
0001C58C                            ; ===========================================================================
0001C58C                            

0001C58C                            Obj09_Chk1Up:
0001C58C 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C590 6600                       		bne.s	Obj09_ChkEmer
0001C592 6100 F6EA                  		bsr.w	SS_RemoveCollectedItem
0001C596 6600                       		bne.s	Obj09_Get1Up
0001C598 14BC 0003                  		move.b	#3,(a2)
0001C59C 2549 0004                  		move.l	a1,4(a2)
0001C5A0                            

0001C5A0                            Obj09_Get1Up:
0001C5A0 5238 FE12                  		addq.b	#1,(v_lives).w	; add 1 to number of lives
0001C5A4 5238 FE1C                  		addq.b	#1,(f_lifecount).w ; update the lives counter
0001C5A8 303C 0000                  		move.w	#bgm_ExtraLife,d0
0001C5AC 4EB9 0000 139C             		jsr	(PlaySound).l	; play extra life music
0001C5B2 7800                       		moveq	#0,d4
0001C5B4 4E75                       		rts	
0001C5B6                            ; ===========================================================================
0001C5B6                            

0001C5B6                            Obj09_ChkEmer:
0001C5B6 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C5BA 6500                       		bcs.s	Obj09_ChkGhost
0001C5BC 0C04 0040                  		cmpi.b	#$40,d4
0001C5C0 6200                       		bhi.s	Obj09_ChkGhost
0001C5C2 6100 F6BA                  		bsr.w	SS_RemoveCollectedItem
0001C5C6 6600                       		bne.s	Obj09_GetEmer
0001C5C8 14BC 0005                  		move.b	#5,(a2)
0001C5CC 2549 0004                  		move.l	a1,4(a2)
0001C5D0                            

0001C5D0                            Obj09_GetEmer:
0001C5D0 0C38 0006 FE57             		cmpi.b	#6,(v_emeralds).w ; do you have all the emeralds?
0001C5D6 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C5D8 0404 003B                  		subi.b	#$3B,d4
0001C5DC 7000                       		moveq	#0,d0
0001C5DE 1038 FE57                  		move.b	(v_emeralds).w,d0
0001C5E2 45F8 FE58                  		lea	(v_emldlist).w,a2
0001C5E6 1584 0000                  		move.b	d4,(a2,d0.w)
0001C5EA 5238 FE57                  		addq.b	#1,(v_emeralds).w ; add 1 to number of emeralds
0001C5EE                            

0001C5EE                            Obj09_NoEmer:
0001C5EE 303C 0000                  		move.w	#bgm_Emerald,d0
0001C5F2 4EB9 0000 13A2             		jsr	(PlaySound_Special).l ;	play emerald music
0001C5F8 7800                       		moveq	#0,d4
0001C5FA 4E75                       		rts	
0001C5FC                            ; ===========================================================================
0001C5FC                            

0001C5FC                            Obj09_ChkGhost:
0001C5FC 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C600 6600                       		bne.s	Obj09_ChkGhostTag
0001C602 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C608                            

0001C608                            Obj09_ChkGhostTag:
0001C608 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C60C 6600                       		bne.s	Obj09_NoGhost
0001C60E 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C614 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C616 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C61C                            

0001C61C                            Obj09_NoGhost:
0001C61C 78FF                       		moveq	#-1,d4
0001C61E 4E75                       		rts	
0001C620                            ; ===========================================================================
0001C620                            

0001C620                            Obj09_MakeGhostSolid:
0001C620 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C626 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C628 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C62E 723F                       		moveq	#$3F,d1
0001C630                            

0001C630                            Obj09_GhostLoop2:
0001C630 743F                       		moveq	#$3F,d2
0001C632                            

0001C632                            Obj09_GhostLoop:
0001C632 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C636 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C638 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C63C                            

0001C63C                            Obj09_NoReplace:
0001C63C 5249                       		addq.w	#1,a1
0001C63E 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C642 43E9 0040                  		lea	$40(a1),a1
0001C646 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C64A                            

0001C64A                            Obj09_GhostNotSolid:
0001C64A 4228 003A                  		clr.b	$3A(a0)
0001C64E 7800                       		moveq	#0,d4
0001C650 4E75                       		rts	
0001C652                            ; End of function Obj09_ChkItems
0001C652                            

0001C652                            

0001C652                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C652                            

0001C652                            

0001C652                            Obj09_ChkItems2:
0001C652 1028 0030                  		move.b	$30(a0),d0
0001C656 6600                       		bne.s	Obj09_ChkBumper
0001C658 5328 0036                  		subq.b	#1,$36(a0)
0001C65C 6A00                       		bpl.s	loc_1BEA0
0001C65E 117C 0000 0036             		move.b	#0,$36(a0)
0001C664                            

0001C664                            loc_1BEA0:
0001C664 5328 0037                  		subq.b	#1,$37(a0)
0001C668 6A00                       		bpl.s	locret_1BEAC
0001C66A 117C 0000 0037             		move.b	#0,$37(a0)
0001C670                            

0001C670                            locret_1BEAC:
0001C670 4E75                       		rts	
0001C672                            ; ===========================================================================
0001C672                            

0001C672                            Obj09_ChkBumper:
0001C672 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C676 6600                       		bne.s	Obj09_GOAL
0001C678 2228 0032                  		move.l	$32(a0),d1
0001C67C 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C682 3401                       		move.w	d1,d2
0001C684 0241 007F                  		andi.w	#$7F,d1
0001C688 C2FC 0018                  		mulu.w	#$18,d1
0001C68C 0441 0014                  		subi.w	#$14,d1
0001C690 EE4A                       		lsr.w	#7,d2
0001C692 0242 007F                  		andi.w	#$7F,d2
0001C696 C4FC 0018                  		mulu.w	#$18,d2
0001C69A 0442 0044                  		subi.w	#$44,d2
0001C69E 9268 0008                  		sub.w	obX(a0),d1
0001C6A2 9468 000C                  		sub.w	obY(a0),d2
0001C6A6 4EB9 0000 2C78             		jsr	(CalcAngle).l
0001C6AC 4EB9 0000 29E0             		jsr	(CalcSine).l
0001C6B2 C3FC F900                  		muls.w	#-$700,d1
0001C6B6 E081                       		asr.l	#8,d1
0001C6B8 3141 0010                  		move.w	d1,obVelX(a0)
0001C6BC C1FC F900                  		muls.w	#-$700,d0
0001C6C0 E080                       		asr.l	#8,d0
0001C6C2 3140 0012                  		move.w	d0,obVelY(a0)
0001C6C6 08E8 0001 0022             		bset	#1,obStatus(a0)
0001C6CC 6100 F5B0                  		bsr.w	SS_RemoveCollectedItem
0001C6D0 6600                       		bne.s	Obj09_BumpSnd
0001C6D2 14BC 0002                  		move.b	#2,(a2)
0001C6D6 2028 0032                  		move.l	$32(a0),d0
0001C6DA 5380                       		subq.l	#1,d0
0001C6DC 2540 0004                  		move.l	d0,4(a2)
0001C6E0                            

0001C6E0                            Obj09_BumpSnd:
0001C6E0 303C 0000                  		move.w	#sfx_Bumper,d0
0001C6E4 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	; play bumper sound
0001C6EA                            ; ===========================================================================
0001C6EA                            

0001C6EA                            Obj09_GOAL:
0001C6EA 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C6EE 6600                       		bne.s	Obj09_UPblock
0001C6F0 5428 0024                  		addq.b	#2,obRoutine(a0) ; run routine "Obj09_ExitStage"
0001C6F4 303C 0000                  		move.w	#sfx_SSGoal,d0
0001C6F8 4EB9 0000 13A2             		jsr	(PlaySound_Special).l	; play "GOAL" sound
0001C6FE 4E75                       		rts	
0001C700                            ; ===========================================================================
0001C700                            

0001C700                            Obj09_UPblock:
0001C700 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C704 6600                       		bne.s	Obj09_DOWNblock
0001C706 4A28 0036                  		tst.b	$36(a0)
0001C70A 6600 0000                  		bne.w	Obj09_NoGlass
0001C70E 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C714 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C71A 6700                       		beq.s	Obj09_UPsnd
0001C71C E1F8 F782                  		asl	(v_ssrotate).w	; increase stage rotation speed
0001C720 2268 0032                  		movea.l	$32(a0),a1
0001C724 5389                       		subq.l	#1,a1
0001C726 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C72A                            

0001C72A                            Obj09_UPsnd:
0001C72A 303C 0000                  		move.w	#sfx_SSItem,d0
0001C72E 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	; play up/down sound
0001C734                            ; ===========================================================================
0001C734                            

0001C734                            Obj09_DOWNblock:
0001C734 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C738 6600                       		bne.s	Obj09_Rblock
0001C73A 4A28 0036                  		tst.b	$36(a0)
0001C73E 6600 0000                  		bne.w	Obj09_NoGlass
0001C742 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C748 0838 0006 F783             		btst	#6,(v_ssrotate+1).w
0001C74E 6600                       		bne.s	Obj09_DOWNsnd
0001C750 E0F8 F782                  		asr	(v_ssrotate).w	; reduce stage rotation speed
0001C754 2268 0032                  		movea.l	$32(a0),a1
0001C758 5389                       		subq.l	#1,a1
0001C75A 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C75E                            

0001C75E                            Obj09_DOWNsnd:
0001C75E 303C 0000                  		move.w	#sfx_SSItem,d0
0001C762 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	; play up/down sound
0001C768                            ; ===========================================================================
0001C768                            

0001C768                            Obj09_Rblock:
0001C768 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C76C 6600                       		bne.s	Obj09_ChkGlass
0001C76E 4A28 0037                  		tst.b	$37(a0)
0001C772 6600 0000                  		bne.w	Obj09_NoGlass
0001C776 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C77C 6100 F500                  		bsr.w	SS_RemoveCollectedItem
0001C780 6600                       		bne.s	Obj09_RevStage
0001C782 14BC 0004                  		move.b	#4,(a2)
0001C786 2028 0032                  		move.l	$32(a0),d0
0001C78A 5380                       		subq.l	#1,d0
0001C78C 2540 0004                  		move.l	d0,4(a2)
0001C790                            

0001C790                            Obj09_RevStage:
0001C790 4478 F782                  		neg.w	(v_ssrotate).w	; reverse stage rotation
0001C794 303C 0000                  		move.w	#sfx_SSItem,d0
0001C798 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	; play sound
0001C79E                            ; ===========================================================================
0001C79E                            

0001C79E                            Obj09_ChkGlass:
0001C79E 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C7A2 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C7A4 0C00 002E                  		cmpi.b	#$2E,d0
0001C7A8 6700                       		beq.s	Obj09_Glass
0001C7AA 0C00 002F                  		cmpi.b	#$2F,d0
0001C7AE 6700                       		beq.s	Obj09_Glass
0001C7B0 0C00 0030                  		cmpi.b	#$30,d0
0001C7B4 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C7B6                            

0001C7B6                            Obj09_Glass:
0001C7B6 6100 F4C6                  		bsr.w	SS_RemoveCollectedItem
0001C7BA 6600                       		bne.s	Obj09_GlassSnd
0001C7BC 14BC 0006                  		move.b	#6,(a2)
0001C7C0 2268 0032                  		movea.l	$32(a0),a1
0001C7C4 5389                       		subq.l	#1,a1
0001C7C6 2549 0004                  		move.l	a1,4(a2)
0001C7CA 1011                       		move.b	(a1),d0
0001C7CC 5200                       		addq.b	#1,d0		; change glass type when touched
0001C7CE 0C00 0030                  		cmpi.b	#$30,d0
0001C7D2 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C7D4 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C7D6                            

0001C7D6                            Obj09_GlassUpdate:
0001C7D6 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C7DA                            

0001C7DA                            Obj09_GlassSnd:
0001C7DA 303C 0000                  		move.w	#sfx_SSGlass,d0
0001C7DE 4EF9 0000 13A2             		jmp	(PlaySound_Special).l	; play glass block sound
0001C7E4                            ; ===========================================================================
0001C7E4                            

0001C7E4                            Obj09_NoGlass:
0001C7E4 4E75                       		rts	
0001C7E6                            ; End of function Obj09_ChkItems2
0001C7E6                            ; End of function Obj09_ChkItems2
0001C7E6                            

0001C7E6                            		include	"_incObj\10.asm"
0001C7E6                            ; ---------------------------------------------------------------------------
0001C7E6                            ; Object 10 - blank
0001C7E6                            ; ---------------------------------------------------------------------------
0001C7E6                            

0001C7E6                            Obj10:
0001C7E6 4E75                       		rts	
0001C7E6 4E75                       		rts	
0001C7E8                            

0001C7E8                            		include	"_inc\AnimateLevelGfx.asm"
0001C7E8                            ; ---------------------------------------------------------------------------
0001C7E8                            ; Subroutine to	animate	level graphics
0001C7E8                            ; ---------------------------------------------------------------------------
0001C7E8                            

0001C7E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7E8                            

0001C7E8                            

0001C7E8                            AnimateLevelGfx:
0001C7E8 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001C7EC 6600                       		bne.s	@ispaused	; if yes, branch
0001C7EE 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001C7F4 6100 0000                  		bsr.w	AniArt_GiantRing
0001C7F8 7000                       		moveq	#0,d0
0001C7FA 1038 FE10                  		move.b	(v_zone).w,d0
0001C7FE D040                       		add.w	d0,d0
0001C800 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C804 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C808                            

0001C808                            	@ispaused:
0001C808 4E75                       		rts	
0001C80A                            

0001C80A                            ; ===========================================================================
0001C80A 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C80E 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C812 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C816 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C818                            ; ===========================================================================
0001C818                            ; ---------------------------------------------------------------------------
0001C818                            ; Animated pattern routine - Green Hill
0001C818                            ; ---------------------------------------------------------------------------
0001C818                            

0001C818                            AniArt_GHZ:
0001C818                            

0001C818                            AniArt_GHZ_Waterfall:
0001C818                            

0001C818 =00000008                  @size:		equ 8	; number of tiles per frame
0001C818                            

0001C818 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001C81C 6A00                       		bpl.s	AniArt_GHZ_Bigflower ; branch if not 0
0001C81E                            

0001C81E 11FC 0005 F7B1             		move.b	#5,(v_lani0_time).w ; time to display each frame
0001C824 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C82A 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001C82E 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001C832 0240 0001                  		andi.w	#1,d0		; there are only 2 frames
0001C836 6700                       		beq.s	@isframe0	; branch if frame 0
0001C838 43E9 0100                  		lea	@size*$20(a1),a1 ; use graphics for frame 1
0001C83C                            

0001C83C                            	@isframe0:
0001C846 323C 0007                  		move.w	#@size-1,d1	; number of 8x8	tiles
0001C84A 6000 0000                  		bra.w	LoadTiles
0001C84E                            ; ===========================================================================
0001C84E                            

0001C84E                            AniArt_GHZ_Bigflower:
0001C84E                            

0001C84E =00000010                  @size:		equ 16	; number of tiles per frame
0001C84E                            

0001C84E 5338 F7B3                  		subq.b	#1,(v_lani1_time).w
0001C852 6A00                       		bpl.s	AniArt_GHZ_Smallflower
0001C854                            

0001C854 11FC 000F F7B3             		move.b	#$F,(v_lani1_time).w
0001C85A 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C860 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001C864 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w
0001C868 0240 0001                  		andi.w	#1,d0
0001C86C 6700                       		beq.s	@isframe0
0001C86E 43E9 0200                  		lea	@size*$20(a1),a1
0001C872                            

0001C872                            	@isframe0:
0001C87C 323C 000F                  		move.w	#@size-1,d1
0001C880 6000 0000                  		bra.w	LoadTiles
0001C884                            ; ===========================================================================
0001C884                            

0001C884                            AniArt_GHZ_Smallflower:
0001C884                            

0001C884 =0000000C                  @size:		equ 12	; number of tiles per frame
0001C884                            

0001C884 5338 F7B5                  		subq.b	#1,(v_lani2_time).w
0001C888 6A00                       		bpl.s	@end
0001C88A                            

0001C88A 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001C890 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001C894 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001C898 0240 0003                  		andi.w	#3,d0		; there are 4 frames
0001C89C 103B 0000                  		move.b	@sequence(pc,d0.w),d0
0001C8A0 0800 0000                  		btst	#0,d0		; is frame 0 or 2? (actual frame, not frame counter)
0001C8A4 6600                       		bne.s	@isframe1	; if not, branch
0001C8A6 11FC 007F F7B5             		move.b	#$7F,(v_lani2_time).w ; set longer duration for frames 0 and 2
0001C8AC                            

0001C8AC                            	@isframe1:
0001C8AC EF48                       		lsl.w	#7,d0		; multiply frame num by $80
0001C8AE 3200                       		move.w	d0,d1
0001C8B0 D040                       		add.w	d0,d0
0001C8B2 D041                       		add.w	d1,d0		; multiply that by 3 (i.e. frame num times 12 * $20)
0001C8BE 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C8C4 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001C8C8 323C 000B                  		move.w	#@size-1,d1
0001C8CC 6100 0000                  		bsr.w	LoadTiles
0001C8D0                            

0001C8D0                            @end:
0001C8D0 4E75                       		rts	
0001C8D2                            

0001C8D2 0001 0201                  @sequence:	dc.b 0,	1, 2, 1
0001C8D6                            ; ===========================================================================
0001C8D6                            ; ---------------------------------------------------------------------------
0001C8D6                            ; Animated pattern routine - Marble
0001C8D6                            ; ---------------------------------------------------------------------------
0001C8D6                            

0001C8D6                            AniArt_MZ:
0001C8D6                            

0001C8D6                            AniArt_MZ_Lava:
0001C8D6                            

0001C8D6 =00000008                  @size:		equ 8	; number of tiles per frame
0001C8D6                            

0001C8D6 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001C8DA 6A00                       		bpl.s	AniArt_MZ_Magma	; branch if not 0
0001C8DC                            

0001C8DC 11FC 0013 F7B1             		move.b	#$13,(v_lani0_time).w ; time to display each frame
0001C8E2 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C8E8 7000                       		moveq	#0,d0
0001C8EA 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001C8EE 5200                       		addq.b	#1,d0		; increment frame counter
0001C8F0 0C00 0003                  		cmpi.b	#3,d0		; there are 3 frames
0001C8F4 6600                       		bne.s	@frame01or2	; branch if frame 0, 1 or 2
0001C8F6 7000                       		moveq	#0,d0
0001C8F8                            

0001C8F8                            	@frame01or2:
0001C8F8 11C0 F7B0                  		move.b	d0,(v_lani0_frame).w
0001C8FC C0FC 0100                  		mulu.w	#@size*$20,d0
0001C900 D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001C90C 323C 0007                  		move.w	#@size-1,d1
0001C910 6100 0000                  		bsr.w	LoadTiles
0001C914                            

0001C914                            AniArt_MZ_Magma:
0001C914 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001C918 6A00                       		bpl.s	AniArt_MZ_Torch	; branch if not 0
0001C91A                            		
0001C91A 11FC 0001 F7B3             		move.b	#1,(v_lani1_time).w ; time between each gfx change
0001C920 7000                       		moveq	#0,d0
0001C922 1038 F7B0                  		move.b	(v_lani0_frame).w,d0 ; get surface lava frame number
0001C926 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load magma gfx
0001C92C EE58                       		ror.w	#7,d0		; multiply frame num by $200
0001C92E D8C0                       		adda.w	d0,a4		; jump to appropriate tile
0001C93A 7600                       		moveq	#0,d3
0001C93C 1638 F7B2                  		move.b	(v_lani1_frame).w,d3
0001C940 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter (unused)
0001C944 1638 FE68                  		move.b	(v_oscillate+$A).w,d3 ; get oscillating value
0001C948 343C 0003                  		move.w	#3,d2
0001C94C                            

0001C94C                            	@loop:
0001C94C 3003                       		move.w	d3,d0
0001C94E D040                       		add.w	d0,d0
0001C950 0240 001E                  		andi.w	#$1E,d0
0001C954 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C95A 3033 0000                  		move.w	(a3,d0.w),d0
0001C95E 47F3 0000                  		lea	(a3,d0.w),a3
0001C962 224C                       		movea.l	a4,a1
0001C964 323C 001F                  		move.w	#$1F,d1
0001C968 4E93                       		jsr	(a3)
0001C96A 5843                       		addq.w	#4,d3
0001C96C 51CA FFDE                  		dbf	d2,@loop
0001C970 4E75                       		rts	
0001C972                            ; ===========================================================================
0001C972                            

0001C972                            AniArt_MZ_Torch:
0001C972                            

0001C972 =00000006                  @size:		equ 6	; number of tiles per frame
0001C972                            

0001C972 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001C976 6A00 0000                  		bpl.w	@end		; branch if not 0
0001C97A                            		
0001C97A 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w ; time to display each frame
0001C980 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C986 7000                       		moveq	#0,d0
0001C988 1038 F7B6                  		move.b	(v_lani3_frame).w,d0
0001C98C 5238 F7B6                  		addq.b	#1,(v_lani3_frame).w ; increment frame counter
0001C990 0238 0003 F7B6             		andi.b	#3,(v_lani3_frame).w ; there are 3 frames
0001C996 C0FC 00C0                  		mulu.w	#@size*$20,d0
0001C99A D2C0                       		adda.w	d0,a1		; jump to appropriate tile
0001C9A6 323C 0005                  		move.w	#@size-1,d1
0001C9AA 6000 0000                  		bra.w	LoadTiles
0001C9AE                            

0001C9AE                            @end:
0001C9AE 4E75                       		rts	
0001C9B0                            ; ===========================================================================
0001C9B0                            ; ---------------------------------------------------------------------------
0001C9B0                            ; Animated pattern routine - Scrap Brain
0001C9B0                            ; ---------------------------------------------------------------------------
0001C9B0                            

0001C9B0                            AniArt_SBZ:
0001C9B0                            

0001C9B0 =0000000C                  @size:		equ 12	; number of tiles per frame
0001C9B0                            

0001C9B0 4A38 F7B4                  		tst.b	(v_lani2_frame).w
0001C9B4 6700                       		beq.s	@smokepuff	; branch if counter hits 0
0001C9B6                            		
0001C9B6 5338 F7B4                  		subq.b	#1,(v_lani2_frame).w ; decrement counter
0001C9BA 6000                       		bra.s	@chk_smokepuff2
0001C9BC                            ; ===========================================================================
0001C9BC                            

0001C9BC                            @smokepuff:
0001C9BC 5338 F7B1                  		subq.b	#1,(v_lani0_time).w ; decrement timer
0001C9C0 6A00                       		bpl.s	@chk_smokepuff2 ; branch if not 0
0001C9C2                            		
0001C9C2 11FC 0007 F7B1             		move.b	#7,(v_lani0_time).w ; time to display each frame
0001C9C8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C9D8 1038 F7B0                  		move.b	(v_lani0_frame).w,d0
0001C9DC 5238 F7B0                  		addq.b	#1,(v_lani0_frame).w ; increment frame counter
0001C9E0 0240 0007                  		andi.w	#7,d0
0001C9E4 6700                       		beq.s	@untilnextpuff	; branch if frame 0
0001C9E6 5340                       		subq.w	#1,d0
0001C9E8 C0FC 0180                  		mulu.w	#@size*$20,d0
0001C9EC 43F1 0000                  		lea	(a1,d0.w),a1
0001C9F0 323C 000B                  		move.w	#@size-1,d1
0001C9F4 6000 0000                  		bra.w	LoadTiles
0001C9F8                            ; ===========================================================================
0001C9F8                            

0001C9F8                            @untilnextpuff:
0001C9F8 11FC 00B4 F7B4             		move.b	#180,(v_lani2_frame).w ; time between smoke puffs (3 seconds)
0001C9FE                            

0001C9FE                            @clearsky:
0001C9FE 323C 0005                  		move.w	#(@size/2)-1,d1
0001CA02 6100 0000                  		bsr.w	LoadTiles
0001CA06 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CA0C 323C 0005                  		move.w	#(@size/2)-1,d1
0001CA10 6000 0000                  		bra.w	LoadTiles	; load blank tiles for no smoke puff
0001CA14                            ; ===========================================================================
0001CA14                            

0001CA14                            @chk_smokepuff2:
0001CA14 4A38 F7B5                  		tst.b	(v_lani2_time).w
0001CA18 6700                       		beq.s	@smokepuff2	; branch if counter hits 0
0001CA1A                            		
0001CA1A 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement counter
0001CA1E 6000                       		bra.s	@end
0001CA20                            ; ===========================================================================
0001CA20                            

0001CA20                            @smokepuff2:
0001CA20 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001CA24 6A00                       		bpl.s	@end		; branch if not 0
0001CA26                            		
0001CA26 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w ; time to display each frame
0001CA2C 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CA3C 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001CA40 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001CA44 0240 0007                  		andi.w	#7,d0
0001CA48 6700                       		beq.s	@untilnextpuff2	; branch if frame 0
0001CA4A 5340                       		subq.w	#1,d0
0001CA4C C0FC 0180                  		mulu.w	#@size*$20,d0
0001CA50 43F1 0000                  		lea	(a1,d0.w),a1
0001CA54 323C 000B                  		move.w	#@size-1,d1
0001CA58 6000 0000                  		bra.w	LoadTiles
0001CA5C                            ; ===========================================================================
0001CA5C                            

0001CA5C                            @untilnextpuff2:
0001CA5C 11FC 0078 F7B5             		move.b	#120,(v_lani2_time).w ; time between smoke puffs (2 seconds)
0001CA62 609A                       		bra.s	@clearsky
0001CA64                            ; ===========================================================================
0001CA64                            

0001CA64                            @end:
0001CA64 4E75                       		rts	
0001CA66                            ; ===========================================================================
0001CA66                            ; ---------------------------------------------------------------------------
0001CA66                            ; Animated pattern routine - ending sequence
0001CA66                            ; ---------------------------------------------------------------------------
0001CA66                            

0001CA66                            AniArt_Ending:
0001CA66                            

0001CA66                            AniArt_Ending_BigFlower:
0001CA66                            

0001CA66 =00000010                  @size:		equ 16	; number of tiles per frame
0001CA66                            

0001CA66 5338 F7B3                  		subq.b	#1,(v_lani1_time).w ; decrement timer
0001CA6A 6A00                       		bpl.s	AniArt_Ending_SmallFlower ; branch if not 0
0001CA6C                            		
0001CA6C 11FC 0007 F7B3             		move.b	#7,(v_lani1_time).w
0001CA72 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CA78 45F8 9400                  		lea	($FFFF9400).w,a2 ; load 2nd big flower from RAM
0001CA7C 1038 F7B2                  		move.b	(v_lani1_frame).w,d0
0001CA80 5238 F7B2                  		addq.b	#1,(v_lani1_frame).w ; increment frame counter
0001CA84 0240 0001                  		andi.w	#1,d0		; only 2 frames
0001CA88 6700                       		beq.s	@isframe0	; branch if frame 0
0001CA8A 43E9 0200                  		lea	@size*$20(a1),a1
0001CA8E 45EA 0200                  		lea	@size*$20(a2),a2
0001CA92                            

0001CA92                            	@isframe0:
0001CA9C 323C 000F                  		move.w	#@size-1,d1
0001CAA0 6100 0000                  		bsr.w	LoadTiles
0001CAA4 224A                       		movea.l	a2,a1
0001CAB0 323C 000F                  		move.w	#@size-1,d1
0001CAB4 6000 0000                  		bra.w	LoadTiles
0001CAB8                            ; ===========================================================================
0001CAB8                            

0001CAB8                            AniArt_Ending_SmallFlower:
0001CAB8                            

0001CAB8 =0000000C                  @size:		equ 12	; number of tiles per frame
0001CAB8                            

0001CAB8 5338 F7B5                  		subq.b	#1,(v_lani2_time).w ; decrement timer
0001CABC 6A00                       		bpl.s	AniArt_Ending_Flower3 ; branch if not 0
0001CABE                            		
0001CABE 11FC 0007 F7B5             		move.b	#7,(v_lani2_time).w
0001CAC4 1038 F7B4                  		move.b	(v_lani2_frame).w,d0
0001CAC8 5238 F7B4                  		addq.b	#1,(v_lani2_frame).w ; increment frame counter
0001CACC 0240 0007                  		andi.w	#7,d0		; max 8 frames
0001CAD0 103B 0000                  		move.b	@sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001CAD4 EF48                       		lsl.w	#7,d0		; multiply by $80
0001CAD6 3200                       		move.w	d0,d1
0001CAD8 D040                       		add.w	d0,d0
0001CADA D041                       		add.w	d1,d0		; multiply by 3
0001CAE6 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CAEC 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001CAF0 323C 000B                  		move.w	#@size-1,d1
0001CAF4 6000 0000                  		bra.w	LoadTiles
0001CAF8                            ; ===========================================================================
0001CAF8 0000 0001 0202 0201        @sequence:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CB00                            ; ===========================================================================
0001CB00                            

0001CB00                            AniArt_Ending_Flower3:
0001CB00                            

0001CB00 =00000010                  @size:		equ 16	; number of tiles per frame
0001CB00                            

0001CB00 5338 F7B9                  		subq.b	#1,(v_lani4_time).w ; decrement timer
0001CB04 6A00                       		bpl.s	AniArt_Ending_Flower4 ; branch if not 0
0001CB06                            		
0001CB06 11FC 000E F7B9             		move.b	#$E,(v_lani4_time).w
0001CB0C 1038 F7B8                  		move.b	(v_lani4_frame).w,d0
0001CB10 5238 F7B8                  		addq.b	#1,(v_lani4_frame).w ; increment frame counter
0001CB14 0240 0003                  		andi.w	#3,d0		; max 4 frames
0001CB18 103B 0000                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001CB1C E148                       		lsl.w	#8,d0		; multiply by $100
0001CB1E D040                       		add.w	d0,d0		; multiply by 2
0001CB2A 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CB2E 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001CB32 323C 000F                  		move.w	#@size-1,d1
0001CB36 6000 0000                  		bra.w	LoadTiles
0001CB3A                            ; ===========================================================================
0001CB3A 0001 0201                  AniArt_Ending_Flower3_sequence:	dc.b 0,	1, 2, 1
0001CB3E                            ; ===========================================================================
0001CB3E                            

0001CB3E                            AniArt_Ending_Flower4:
0001CB3E                            

0001CB3E =00000010                  @size:		equ 16	; number of tiles per frame
0001CB3E                            

0001CB3E 5338 F7BB                  		subq.b	#1,(v_lani5_time).w ; decrement timer
0001CB42 6A00                       		bpl.s	@end		; branch if not 0
0001CB44                            		
0001CB44 11FC 000B F7BB             		move.b	#$B,(v_lani5_time).w
0001CB4A 1038 F7BA                  		move.b	(v_lani5_frame).w,d0
0001CB4E 5238 F7BA                  		addq.b	#1,(v_lani5_frame).w ; increment frame counter
0001CB52 0240 0003                  		andi.w	#3,d0
0001CB56 103B 00E2                  		move.b	AniArt_Ending_Flower3_sequence(pc,d0.w),d0 ; get actual frame num from sequence data
0001CB5A E148                       		lsl.w	#8,d0		; multiply by $100
0001CB5C D040                       		add.w	d0,d0		; multiply by 2
0001CB68 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CB6C 43F1 0000                  		lea	(a1,d0.w),a1	; jump to appropriate tile
0001CB70 323C 000F                  		move.w	#@size-1,d1
0001CB74 6000 0000                  		bra.w	LoadTiles
0001CB78                            ; ===========================================================================
0001CB78                            

0001CB78                            @end:
0001CB78 4E75                       		rts	
0001CB7A                            ; ===========================================================================
0001CB7A                            

0001CB7A                            AniArt_none:
0001CB7A 4E75                       		rts	
0001CB7C                            

0001CB7C                            ; ---------------------------------------------------------------------------
0001CB7C                            ; Subroutine to	transfer graphics to VRAM
0001CB7C                            

0001CB7C                            ; input:
0001CB7C                            ;	a1 = source address
0001CB7C                            ;	a6 = vdp_data_port ($C00000)
0001CB7C                            ;	d1 = number of tiles to load (minus one)
0001CB7C                            ; ---------------------------------------------------------------------------
0001CB7C                            

0001CB7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB7C                            

0001CB7C                            

0001CB7C                            LoadTiles:
0001CB7C 2C99                       		move.l	(a1)+,(a6)
0001CB7E 2C99                       		move.l	(a1)+,(a6)
0001CB80 2C99                       		move.l	(a1)+,(a6)
0001CB82 2C99                       		move.l	(a1)+,(a6)
0001CB84 2C99                       		move.l	(a1)+,(a6)
0001CB86 2C99                       		move.l	(a1)+,(a6)
0001CB88 2C99                       		move.l	(a1)+,(a6)
0001CB8A 2C99                       		move.l	(a1)+,(a6)
0001CB8C 51C9 FFEE                  		dbf	d1,LoadTiles
0001CB90 4E75                       		rts	
0001CB92                            ; End of function LoadTiles
0001CB92                            

0001CB92                            ; ===========================================================================
0001CB92                            ; ---------------------------------------------------------------------------
0001CB92                            ; Animated pattern routine - more Marble Zone
0001CB92                            ; ---------------------------------------------------------------------------
0001CB92 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CB96 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CB9A 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CB9E 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CBA2 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CBA6 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CBAA 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CBAE 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CBB2                            ; ===========================================================================
0001CBB2                            

0001CBB2                            loc_1C3EE:
0001CBB2 2C91                       		move.l	(a1),(a6)
0001CBB4 43E9 0010                  		lea	$10(a1),a1
0001CBB8 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CBBC 4E75                       		rts	
0001CBBE                            ; ===========================================================================
0001CBBE                            

0001CBBE                            loc_1C3FA:
0001CBBE 2029 0002                  		move.l	2(a1),d0
0001CBC2 1029 0001                  		move.b	1(a1),d0
0001CBC6 E098                       		ror.l	#8,d0
0001CBC8 2C80                       		move.l	d0,(a6)
0001CBCA 43E9 0010                  		lea	$10(a1),a1
0001CBCE 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CBD2 4E75                       		rts	
0001CBD4                            ; ===========================================================================
0001CBD4                            

0001CBD4                            loc_1C410:
0001CBD4 2CA9 0002                  		move.l	2(a1),(a6)
0001CBD8 43E9 0010                  		lea	$10(a1),a1
0001CBDC 51C9 FFF6                  		dbf	d1,loc_1C410
0001CBE0 4E75                       		rts	
0001CBE2                            ; ===========================================================================
0001CBE2                            

0001CBE2                            loc_1C41E:
0001CBE2 2029 0004                  		move.l	4(a1),d0
0001CBE6 1029 0003                  		move.b	3(a1),d0
0001CBEA E098                       		ror.l	#8,d0
0001CBEC 2C80                       		move.l	d0,(a6)
0001CBEE 43E9 0010                  		lea	$10(a1),a1
0001CBF2 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CBF6 4E75                       		rts	
0001CBF8                            ; ===========================================================================
0001CBF8                            

0001CBF8                            loc_1C434:
0001CBF8 2CA9 0004                  		move.l	4(a1),(a6)
0001CBFC 43E9 0010                  		lea	$10(a1),a1
0001CC00 51C9 FFF6                  		dbf	d1,loc_1C434
0001CC04 4E75                       		rts	
0001CC06                            ; ===========================================================================
0001CC06                            

0001CC06                            loc_1C442:
0001CC06 2029 0006                  		move.l	6(a1),d0
0001CC0A 1029 0005                  		move.b	5(a1),d0
0001CC0E E098                       		ror.l	#8,d0
0001CC10 2C80                       		move.l	d0,(a6)
0001CC12 43E9 0010                  		lea	$10(a1),a1
0001CC16 51C9 FFEE                  		dbf	d1,loc_1C442
0001CC1A 4E75                       		rts	
0001CC1C                            ; ===========================================================================
0001CC1C                            

0001CC1C                            loc_1C458:
0001CC1C 2CA9 0006                  		move.l	6(a1),(a6)
0001CC20 43E9 0010                  		lea	$10(a1),a1
0001CC24 51C9 FFF6                  		dbf	d1,loc_1C458
0001CC28 4E75                       		rts	
0001CC2A                            ; ===========================================================================
0001CC2A                            

0001CC2A                            loc_1C466:
0001CC2A 2029 0008                  		move.l	8(a1),d0
0001CC2E 1029 0007                  		move.b	7(a1),d0
0001CC32 E098                       		ror.l	#8,d0
0001CC34 2C80                       		move.l	d0,(a6)
0001CC36 43E9 0010                  		lea	$10(a1),a1
0001CC3A 51C9 FFEE                  		dbf	d1,loc_1C466
0001CC3E 4E75                       		rts	
0001CC40                            ; ===========================================================================
0001CC40                            

0001CC40                            loc_1C47C:
0001CC40 2CA9 0008                  		move.l	8(a1),(a6)
0001CC44 43E9 0010                  		lea	$10(a1),a1
0001CC48 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CC4C 4E75                       		rts	
0001CC4E                            ; ===========================================================================
0001CC4E                            

0001CC4E                            loc_1C48A:
0001CC4E 2029 000A                  		move.l	$A(a1),d0
0001CC52 1029 0009                  		move.b	9(a1),d0
0001CC56 E098                       		ror.l	#8,d0
0001CC58 2C80                       		move.l	d0,(a6)
0001CC5A 43E9 0010                  		lea	$10(a1),a1
0001CC5E 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CC62 4E75                       		rts	
0001CC64                            ; ===========================================================================
0001CC64                            

0001CC64                            loc_1C4A0:
0001CC64 2CA9 000A                  		move.l	$A(a1),(a6)
0001CC68 43E9 0010                  		lea	$10(a1),a1
0001CC6C 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CC70 4E75                       		rts	
0001CC72                            ; ===========================================================================
0001CC72                            

0001CC72                            loc_1C4AE:
0001CC72 2029 000C                  		move.l	$C(a1),d0
0001CC76 1029 000B                  		move.b	$B(a1),d0
0001CC7A E098                       		ror.l	#8,d0
0001CC7C 2C80                       		move.l	d0,(a6)
0001CC7E 43E9 0010                  		lea	$10(a1),a1
0001CC82 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CC86 4E75                       		rts	
0001CC88                            ; ===========================================================================
0001CC88                            

0001CC88                            loc_1C4C4:
0001CC88 2CA9 000C                  		move.l	$C(a1),(a6)
0001CC8C 43E9 0010                  		lea	$10(a1),a1
0001CC90 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CC94 4E75                       		rts	
0001CC96                            ; ===========================================================================
0001CC96                            

0001CC96                            loc_1C4D2:
0001CC96 2029 000C                  		move.l	$C(a1),d0
0001CC9A E198                       		rol.l	#8,d0
0001CC9C 1029 0000                  		move.b	0(a1),d0
0001CCA0 2C80                       		move.l	d0,(a6)
0001CCA2 43E9 0010                  		lea	$10(a1),a1
0001CCA6 51C9 FFEE                  		dbf	d1,loc_1C4D2
0001CCAA 4E75                       		rts	
0001CCAC                            ; ===========================================================================
0001CCAC                            

0001CCAC                            loc_1C4E8:
0001CCAC 3CA9 000E                  		move.w	$E(a1),(a6)
0001CCB0 3CA9 0000                  		move.w	0(a1),(a6)
0001CCB4 43E9 0010                  		lea	$10(a1),a1
0001CCB8 51C9 FFF2                  		dbf	d1,loc_1C4E8
0001CCBC 4E75                       		rts	
0001CCBE                            ; ===========================================================================
0001CCBE                            

0001CCBE                            loc_1C4FA:
0001CCBE 2029 0000                  		move.l	0(a1),d0
0001CCC2 1029 000F                  		move.b	$F(a1),d0
0001CCC6 E098                       		ror.l	#8,d0
0001CCC8 2C80                       		move.l	d0,(a6)
0001CCCA 43E9 0010                  		lea	$10(a1),a1
0001CCCE 51C9 FFEE                  		dbf	d1,loc_1C4FA
0001CCD2 4E75                       		rts	
0001CCD4                            

0001CCD4                            ; ---------------------------------------------------------------------------
0001CCD4                            ; Animated pattern routine - giant ring
0001CCD4                            ; ---------------------------------------------------------------------------
0001CCD4                            

0001CCD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CCD4                            

0001CCD4                            

0001CCD4                            AniArt_GiantRing:
0001CCD4                            

0001CCD4 =0000000E                  @size:		equ 14
0001CCD4                            

0001CCD4 4A78 F7BE                  		tst.w	(v_gfxbigring).w	; Is there any of the art left to load?
0001CCD8 6600                       		bne.s	@loadTiles		; If so, get to work
0001CCDA 4E75                       		rts	
0001CCDC                            ; ===========================================================================
0001CCDC                            ; loc_1C518:
0001CCDC                            @loadTiles:
0001CCDC 0478 01C0 F7BE             		subi.w	#@size*$20,(v_gfxbigring).w	; Count-down the 14 tiles we're going to load now
0001CCE2 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CCE8 7000                       		moveq	#0,d0
0001CCEA 3038 F7BE                  		move.w	(v_gfxbigring).w,d0
0001CCEE 43F1 0000                  		lea	(a1,d0.w),a1
0001CCF2                            		; Turn VRAM address into VDP command
0001CCF2 0640 8000                  		addi.w	#$8000,d0
0001CCF6 E588                       		lsl.l	#2,d0
0001CCF8 E448                       		lsr.w	#2,d0
0001CCFA 0040 4000                  		ori.w	#$4000,d0
0001CCFE 4840                       		swap	d0
0001CD00                            		; Send VDP command (write to VRAM at address contained in v_gfxbigring)
0001CD00 2D40 0004                  		move.l	d0,4(a6)
0001CD04                            

0001CD04 323C 000D                  		move.w	#@size-1,d1
0001CD08 6000 FE72                  		bra.w	LoadTiles
0001CD0C                            

0001CD0C                            ; End of function AniArt_GiantRing
0001CD0C                            ; End of function AniArt_GiantRing
0001CD0C                            

0001CD0C                            		include	"_incObj\21 HUD.asm"
0001CD0C                            ; ---------------------------------------------------------------------------
0001CD0C                            ; Object 21 - SCORE, TIME, RINGS
0001CD0C                            ; ---------------------------------------------------------------------------
0001CD0C                            

0001CD0C                            HUD:
0001CD0C 7000                       		moveq	#0,d0
0001CD0E 1028 0024                  		move.b	obRoutine(a0),d0
0001CD12 323B 0000                  		move.w	HUD_Index(pc,d0.w),d1
0001CD16 4EFB 1000                  		jmp	HUD_Index(pc,d1.w)
0001CD1A                            ; ===========================================================================
0001CD1A 0000                       HUD_Index:	dc.w HUD_Main-HUD_Index
0001CD1C 0000                       		dc.w HUD_Flash-HUD_Index
0001CD1E                            ; ===========================================================================
0001CD1E                            

0001CD1E                            HUD_Main:	; Routine 0
0001CD1E 5428 0024                  		addq.b	#2,obRoutine(a0)
0001CD22 317C 0090 0008             		move.w	#$90,obX(a0)
0001CD28 317C 0108 000A             		move.w	#$108,obScreenY(a0)
0001CD2E 217C 0000 0000 0004        		move.l	#Map_HUD,obMap(a0)
0001CD36 317C 06CA 0002             		move.w	#$6CA,obGfx(a0)
0001CD3C 117C 0000 0001             		move.b	#0,obRender(a0)
0001CD42 117C 0000 0018             		move.b	#0,obPriority(a0)
0001CD48                            

0001CD48                            HUD_Flash:	; Routine 2
0001CD48 4A78 FE20                  		tst.w	(v_rings).w	; do you have any rings?
0001CD4C 6700                       		beq.s	@norings	; if not, branch
0001CD4E 4228 001A                  		clr.b	obFrame(a0)	; make all counters yellow
0001CD52 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001CD58                            ; ===========================================================================
0001CD58                            

0001CD58                            @norings:
0001CD58 7000                       		moveq	#0,d0
0001CD5A 0838 0003 FE05             		btst	#3,(v_framebyte).w
0001CD60 6600                       		bne.s	@display
0001CD62 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CD64 0C38 0009 FE23             		cmpi.b	#9,(v_timemin).w ; have	9 minutes elapsed?
0001CD6A 6600                       		bne.s	@display	; if not, branch
0001CD6C 5440                       		addq.w	#2,d0		; make time counter flash red
0001CD6E                            

0001CD6E                            	@display:
0001CD6E 1140 001A                  		move.b	d0,obFrame(a0)
0001CD72 4EF9 0000 DCA0             		jmp	DisplaySprite
0001CD72 4EF9 0000 DCA0             		jmp	DisplaySprite
0001CD78                            Map_HUD:	include	"_maps\HUD.asm"
0001CD78                            ; ---------------------------------------------------------------------------
0001CD78                            ; Sprite mappings - SCORE, TIME, RINGS
0001CD78                            ; ---------------------------------------------------------------------------
0001CD78                            Map_HUD_internal:
0001CD78 0000                       		dc.w @allyellow-Map_HUD_internal
0001CD7A 0000                       		dc.w @ringred-Map_HUD_internal
0001CD7C 0000                       		dc.w @timered-Map_HUD_internal
0001CD7E 0000                       		dc.w @allred-Map_HUD_internal
0001CD80 0A                         @allyellow:	dc.b $A
0001CD81 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CD86 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CD8B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CD90 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CD95 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CD9A A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CD9F A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CDA4 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CDA9 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CDAE 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CDB3 00                         		dc.b 0
0001CDB4 0A                         @ringred:	dc.b $A
0001CDB5 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CDBA 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CDBF 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CDC4 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CDC9 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CDCE A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CDD3 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CDD8 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CDDD 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CDE2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CDE7 00                         		dc.b 0
0001CDE8 0A                         @timered:	dc.b $A
0001CDE9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CDEE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CDF3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CDF8 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CDFD 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE02 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CE07 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CE0C A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE11 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE16 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE1B 00                         		dc.b 0
0001CE1C 0A                         @allred:	dc.b $A
0001CE1D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CE22 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CE27 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CE2C 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CE31 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CE36 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CE3B A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CE40 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CE45 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CE4A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CE50 00                         		even
0001CE50 00                         		even
0001CE50                            

0001CE50                            ; ---------------------------------------------------------------------------
0001CE50                            ; Add points subroutine
0001CE50                            ; ---------------------------------------------------------------------------
0001CE50                            

0001CE50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE50                            

0001CE50                            

0001CE50                            AddPoints:
0001CE50 11FC 0001 FE1F             		move.b	#1,(f_scorecount).w ; set score counter to update
0001CE56                            

0001CE56                            

0001CE56 47F8 FE26                  			lea     (v_score).w,a3
0001CE5A D193                       			add.l   d0,(a3)
0001CE5C 223C 000F 423F             			move.l  #999999,d1
0001CE62 B293                       			cmp.l   (a3),d1 ; is score below 999999?
0001CE64 6200                       			bhi.s   @belowmax ; if yes, branch
0001CE66 2681                       			move.l  d1,(a3) ; reset score to 999999
0001CE68                            		@belowmax:
0001CE68 2013                       			move.l  (a3),d0
0001CE6A B0B8 FFC0                  			cmp.l   (v_scorelife).w,d0 ; has Sonic got 50000+ points?
0001CE6E 6500                       			blo.s   @noextralife ; if not, branch
0001CE70                            

0001CE70 06B8 0000 1388 FFC0        			addi.l  #5000,(v_scorelife).w ; increase requirement by 50000
0001CE78 4A38 FFF8                  			tst.b   (v_megadrive).w
0001CE7C 6B00                       			bmi.s   @noextralife ; branch if Mega Drive is Japanese
0001CE7E 5238 FE12                  			addq.b  #1,(v_lives).w ; give extra life
0001CE82 5238 FE1C                  			addq.b  #1,(f_lifecount).w
0001CE86 303C 0000                  			move.w	#bgm_ExtraLife,d0
0001CE8A 4EF9 0000 139C             			jmp	(PlaySound).l
0001CE90                            

0001CE90                            @locret_1C6B6:
0001CE90                            @noextralife:
0001CE90 4E75                       		rts	
0001CE92                            ; End of function AddPoints
0001CE92                            

0001CE92                            		include	"_inc\HUD_Update.asm"
0001CE92                            ; ---------------------------------------------------------------------------
0001CE92                            ; Subroutine to	update the HUD
0001CE92                            ; ---------------------------------------------------------------------------
0001CE92                            

0001CE92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE92                            

0001CE92                            HUD_Update:
0001CE92 4A78 FFFA                  		tst.w	(f_debugmode).w	; is debug mode	on?
0001CE96 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001CE9A 4A38 FE1F                  		tst.b	(f_scorecount).w ; does the score need updating?
0001CE9E 6700                       		beq.s	@chkrings	; if not, branch
0001CEA0                            

0001CEA0 4238 FE1F                  		clr.b	(f_scorecount).w
0001CEAA 2238 FE26                  		move.l	(v_score).w,d1	; load score
0001CEAE 6100 0000                  		bsr.w	Hud_Score
0001CEB2                            

0001CEB2                            	@chkrings:
0001CEB2 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001CEB6 6700                       		beq.s	@chktime	; if not, branch
0001CEB8 6A00                       		bpl.s	@notzero
0001CEBA 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001CEBE                            

0001CEBE                            	@notzero:
0001CEBE 4238 FE1D                  		clr.b	(f_ringcount).w
0001CEC8 7200                       		moveq	#0,d1
0001CECA 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001CECE 6100 0000                  		bsr.w	Hud_Rings
0001CED2                            

0001CED2                            	@chktime:
0001CED2 4A38 FE1E                  		tst.b	(f_timecount).w	; does the time	need updating?
0001CED6 6700                       		beq.s	@chklives	; if not, branch
0001CED8 4A78 F63A                  		tst.w	(f_pause).w	; is the game paused?
0001CEDC 6600                       		bne.s	@chklives	; if yes, branch
0001CEDE 43F8 FE22                  		lea	(v_time).w,a1
0001CEE2 0C99 0009 3B3B             		cmpi.l	#(9*$10000)+(59*$100)+59,(a1)+ ; is the time 9:59:59?
0001CEE8 6700                       		beq.s	TimeOver	; if yes, branch
0001CEEA                            

0001CEEA 5221                       		addq.b	#1,-(a1)	; increment 1/60s counter
0001CEEC 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001CEF0 6500                       		bcs.s	@chklives
0001CEF2 12BC 0000                  		move.b	#0,(a1)
0001CEF6 5221                       		addq.b	#1,-(a1)	; increment second counter
0001CEF8 0C11 003C                  		cmpi.b	#60,(a1)	; check if passed 60
0001CEFC 6500                       		bcs.s	@updatetime
0001CEFE 12BC 0000                  		move.b	#0,(a1)
0001CF02 5221                       		addq.b	#1,-(a1)	; increment minute counter
0001CF04 0C11 0009                  		cmpi.b	#9,(a1)		; check if passed 9
0001CF08 6500                       		bcs.s	@updatetime
0001CF0A 12BC 0009                  		move.b	#9,(a1)		; keep as 9
0001CF0E                            

0001CF0E                            	@updatetime:
0001CF14 7200                       		moveq	#0,d1
0001CF16 1238 FE23                  		move.b	(v_timemin).w,d1 ; load	minutes
0001CF1A 6100 0000                  		bsr.w	Hud_Mins
0001CF24 7200                       		moveq	#0,d1
0001CF26 1238 FE24                  		move.b	(v_timesec).w,d1 ; load	seconds
0001CF2A 6100 0000                  		bsr.w	Hud_Secs
0001CF2E                            

0001CF2E                            	@chklives:
0001CF2E 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001CF32 6700                       		beq.s	@chkbonus	; if not, branch
0001CF34 4238 FE1C                  		clr.b	(f_lifecount).w
0001CF38 6100 0000                  		bsr.w	Hud_Lives
0001CF3C                            

0001CF3C                            	@chkbonus:
0001CF3C 4A38 F7D6                  		tst.b	(f_endactbonus).w ; do time/ring bonus counters need updating?
0001CF40 6700                       		beq.s	@finish		; if not, branch
0001CF42 4238 F7D6                  		clr.b	(f_endactbonus).w
0001CF50 7200                       		moveq	#0,d1
0001CF52 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001CF56 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CF5A 7200                       		moveq	#0,d1
0001CF5C 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001CF60 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CF64                            

0001CF64                            	@finish:
0001CF64 4E75                       		rts	
0001CF66                            ; ===========================================================================
0001CF66                            

0001CF66                            TimeOver:
0001CF66 4238 FE1E                  		clr.b	(f_timecount).w
0001CF6A 41F8 D000                  		lea	(v_player).w,a0
0001CF6E 2448                       		movea.l	a0,a2
0001CF70 6100 E8EA                  		bsr.w	KillSonic
0001CF74 11FC 0001 FE1A             		move.b	#1,(f_timeover).w
0001CF7A 4E75                       		rts	
0001CF7C                            ; ===========================================================================
0001CF7C                            

0001CF7C                            HudDebug:
0001CF7C 6100 0000                  		bsr.w	HudDb_XY
0001CF80 4A38 FE1D                  		tst.b	(f_ringcount).w	; does the ring	counter	need updating?
0001CF84 6700                       		beq.s	@objcounter	; if not, branch
0001CF86 6A00                       		bpl.s	@notzero
0001CF88 6100 0000                  		bsr.w	Hud_LoadZero	; reset rings to 0 if Sonic is hit
0001CF8C                            

0001CF8C                            	@notzero:
0001CF8C 4238 FE1D                  		clr.b	(f_ringcount).w
0001CF96 7200                       		moveq	#0,d1
0001CF98 3238 FE20                  		move.w	(v_rings).w,d1	; load number of rings
0001CF9C 6100 0000                  		bsr.w	Hud_Rings
0001CFA0                            

0001CFA0                            	@objcounter:
0001CFA6 7200                       		moveq	#0,d1
0001CFA8 1238 F62C                  		move.b	(v_spritecount).w,d1 ; load "number of objects" counter
0001CFAC 6100 0000                  		bsr.w	Hud_Secs
0001CFB0 4A38 FE1C                  		tst.b	(f_lifecount).w ; does the lives counter need updating?
0001CFB4 6700                       		beq.s	@chkbonus	; if not, branch
0001CFB6 4238 FE1C                  		clr.b	(f_lifecount).w
0001CFBA 6100 0000                  		bsr.w	Hud_Lives
0001CFBE                            

0001CFBE                            	@chkbonus:
0001CFBE 4A38 F7D6                  		tst.b	(f_endactbonus).w ; does the ring/time bonus counter need updating?
0001CFC2 6700                       		beq.s	@finish		; if not, branch
0001CFC4 4238 F7D6                  		clr.b	(f_endactbonus).w
0001CFD2 7200                       		moveq	#0,d1
0001CFD4 3238 F7D2                  		move.w	(v_timebonus).w,d1 ; load time bonus
0001CFD8 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CFDC 7200                       		moveq	#0,d1
0001CFDE 3238 F7D4                  		move.w	(v_ringbonus).w,d1 ; load ring bonus
0001CFE2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001CFE6                            

0001CFE6                            	@finish:
0001CFE6 4E75                       		rts	
0001CFE8                            ; End of function HUD_Update
0001CFE8                            

0001CFE8                            ; ---------------------------------------------------------------------------
0001CFE8                            ; Subroutine to	load "0" on the	HUD
0001CFE8                            ; ---------------------------------------------------------------------------
0001CFE8                            

0001CFE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFE8                            

0001CFE8                            

0001CFE8                            Hud_LoadZero:
0001CFF2 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001CFF6 343C 0002                  		move.w	#2,d2
0001CFFA 6000                       		bra.s	loc_1C83E
0001CFFC                            ; End of function Hud_LoadZero
0001CFFC                            

0001CFFC                            ; ---------------------------------------------------------------------------
0001CFFC                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001CFFC                            ; ---------------------------------------------------------------------------
0001CFFC                            

0001CFFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFFC                            

0001CFFC                            

0001CFFC                            Hud_Base:
0001CFFC 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D002 6100 0000                  		bsr.w	Hud_Lives
0001D010 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D014 343C 000E                  		move.w	#$E,d2
0001D018                            

0001D018                            loc_1C83E:
0001D018 43FA 0000                  		lea	Art_Hud(pc),a1
0001D01C                            

0001D01C                            loc_1C842:
0001D01C 323C 000F                  		move.w	#$F,d1
0001D020 101A                       		move.b	(a2)+,d0
0001D022 6B00                       		bmi.s	loc_1C85E
0001D024 4880                       		ext.w	d0
0001D026 EB48                       		lsl.w	#5,d0
0001D028 47F1 0000                  		lea	(a1,d0.w),a3
0001D02C                            

0001D02C                            loc_1C852:
0001D02C 2C9B                       		move.l	(a3)+,(a6)
0001D02E 51C9 FFFC                  		dbf	d1,loc_1C852
0001D032                            

0001D032                            loc_1C858:
0001D032 51CA FFE8                  		dbf	d2,loc_1C842
0001D036                            

0001D036 4E75                       		rts	
0001D038                            ; ===========================================================================
0001D038                            

0001D038                            loc_1C85E:
0001D038 2CBC 0000 0000             		move.l	#0,(a6)
0001D03E 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D042                            

0001D042 60EE                       		bra.s	loc_1C858
0001D044                            ; End of function Hud_Base
0001D044                            

0001D044                            ; ===========================================================================
0001D044 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D050 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D054                            ; ---------------------------------------------------------------------------
0001D054                            ; Subroutine to	load debug mode	numbers	patterns
0001D054                            ; ---------------------------------------------------------------------------
0001D054                            

0001D054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D054                            

0001D054                            

0001D054                            HudDb_XY:
0001D05E 3238 F700                  		move.w	(v_screenposx).w,d1 ; load camera x-position
0001D062 4841                       		swap	d1
0001D064 3238 D008                  		move.w	(v_player+obX).w,d1 ; load Sonic's x-position
0001D068 6100                       		bsr.s	HudDb_XY2
0001D06A 3238 F704                  		move.w	(v_screenposy).w,d1 ; load camera y-position
0001D06E 4841                       		swap	d1
0001D070 3238 D00C                  		move.w	(v_player+obY).w,d1 ; load Sonic's y-position
0001D074                            ; End of function HudDb_XY
0001D074                            

0001D074                            

0001D074                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D074                            

0001D074                            

0001D074                            HudDb_XY2:
0001D074 7C07                       		moveq	#7,d6
0001D076 43F9 0000 05FE             		lea	(Art_Text).l,a1
0001D07C                            

0001D07C                            HudDb_XYLoop:
0001D07C E959                       		rol.w	#4,d1
0001D07E 3401                       		move.w	d1,d2
0001D080 0242 000F                  		andi.w	#$F,d2
0001D084 0C42 000A                  		cmpi.w	#$A,d2
0001D088 6500                       		bcs.s	loc_1C8B2
0001D08A 5E42                       		addq.w	#7,d2
0001D08C                            

0001D08C                            loc_1C8B2:
0001D08C EB4A                       		lsl.w	#5,d2
0001D08E 47F1 2000                  		lea	(a1,d2.w),a3
0001D092 2C9B                       		move.l	(a3)+,(a6)
0001D094 2C9B                       		move.l	(a3)+,(a6)
0001D096 2C9B                       		move.l	(a3)+,(a6)
0001D098 2C9B                       		move.l	(a3)+,(a6)
0001D09A 2C9B                       		move.l	(a3)+,(a6)
0001D09C 2C9B                       		move.l	(a3)+,(a6)
0001D09E 2C9B                       		move.l	(a3)+,(a6)
0001D0A0 2C9B                       		move.l	(a3)+,(a6)
0001D0A2 4841                       		swap	d1
0001D0A4 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D0A8                            

0001D0A8 4E75                       		rts	
0001D0AA                            ; End of function HudDb_XY2
0001D0AA                            

0001D0AA                            ; ---------------------------------------------------------------------------
0001D0AA                            ; Subroutine to	load rings numbers patterns
0001D0AA                            ; ---------------------------------------------------------------------------
0001D0AA                            

0001D0AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0AA                            

0001D0AA                            

0001D0AA                            Hud_Rings:
0001D0AA 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D0B0 7C02                       		moveq	#2,d6
0001D0B2 6000                       		bra.s	Hud_LoadArt
0001D0B4                            ; End of function Hud_Rings
0001D0B4                            

0001D0B4                            ; ---------------------------------------------------------------------------
0001D0B4                            ; Subroutine to	load score numbers patterns
0001D0B4                            ; ---------------------------------------------------------------------------
0001D0B4                            

0001D0B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0B4                            

0001D0B4                            

0001D0B4                            Hud_Score:
0001D0B4 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D0BA 7C05                       		moveq	#5,d6
0001D0BC                            

0001D0BC                            Hud_LoadArt:
0001D0BC 7800                       		moveq	#0,d4
0001D0BE 43FA 0000                  		lea	Art_Hud(pc),a1
0001D0C2                            

0001D0C2                            Hud_ScoreLoop:
0001D0C2 7400                       		moveq	#0,d2
0001D0C4 261A                       		move.l	(a2)+,d3
0001D0C6                            

0001D0C6                            loc_1C8EC:
0001D0C6 9283                       		sub.l	d3,d1
0001D0C8 6500                       		bcs.s	loc_1C8F4
0001D0CA 5242                       		addq.w	#1,d2
0001D0CC 60F8                       		bra.s	loc_1C8EC
0001D0CE                            ; ===========================================================================
0001D0CE                            

0001D0CE                            loc_1C8F4:
0001D0CE D283                       		add.l	d3,d1
0001D0D0 4A42                       		tst.w	d2
0001D0D2 6700                       		beq.s	loc_1C8FE
0001D0D4 383C 0001                  		move.w	#1,d4
0001D0D8                            

0001D0D8                            loc_1C8FE:
0001D0D8 4A44                       		tst.w	d4
0001D0DA 6700                       		beq.s	loc_1C92C
0001D0DC ED4A                       		lsl.w	#6,d2
0001D0DE 2D40 0004                  		move.l	d0,4(a6)
0001D0E2 47F1 2000                  		lea	(a1,d2.w),a3
0001D0E6 2C9B                       		move.l	(a3)+,(a6)
0001D0E8 2C9B                       		move.l	(a3)+,(a6)
0001D0EA 2C9B                       		move.l	(a3)+,(a6)
0001D0EC 2C9B                       		move.l	(a3)+,(a6)
0001D0EE 2C9B                       		move.l	(a3)+,(a6)
0001D0F0 2C9B                       		move.l	(a3)+,(a6)
0001D0F2 2C9B                       		move.l	(a3)+,(a6)
0001D0F4 2C9B                       		move.l	(a3)+,(a6)
0001D0F6 2C9B                       		move.l	(a3)+,(a6)
0001D0F8 2C9B                       		move.l	(a3)+,(a6)
0001D0FA 2C9B                       		move.l	(a3)+,(a6)
0001D0FC 2C9B                       		move.l	(a3)+,(a6)
0001D0FE 2C9B                       		move.l	(a3)+,(a6)
0001D100 2C9B                       		move.l	(a3)+,(a6)
0001D102 2C9B                       		move.l	(a3)+,(a6)
0001D104 2C9B                       		move.l	(a3)+,(a6)
0001D106                            

0001D106                            loc_1C92C:
0001D106 0680 0040 0000             		addi.l	#$400000,d0
0001D10C 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D110                            

0001D110 4E75                       		rts	
0001D112                            

0001D112                            ; End of function Hud_Score
0001D112                            ; End of function Hud_Score
0001D112                            

0001D112                            ; ---------------------------------------------------------------------------
0001D112                            ; Subroutine to	load countdown numbers on the continue screen
0001D112                            ; ---------------------------------------------------------------------------
0001D112                            

0001D112                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D112                            

0001D112                            

0001D112                            ContScrCounter:
0001D11C 4DF9 00C0 0000             		lea	(vdp_data_port).l,a6
0001D122 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D128 7C01                       		moveq	#1,d6
0001D12A 7800                       		moveq	#0,d4
0001D12C 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D130                            

0001D130                            ContScr_Loop:
0001D130 7400                       		moveq	#0,d2
0001D132 261A                       		move.l	(a2)+,d3
0001D134                            

0001D134                            loc_1C95A:
0001D134 9283                       		sub.l	d3,d1
0001D136 6500                       		blo.s	loc_1C962
0001D138 5242                       		addq.w	#1,d2
0001D13A 60F8                       		bra.s	loc_1C95A
0001D13C                            ; ===========================================================================
0001D13C                            

0001D13C                            loc_1C962:
0001D13C D283                       		add.l	d3,d1
0001D13E ED4A                       		lsl.w	#6,d2
0001D140 47F1 2000                  		lea	(a1,d2.w),a3
0001D144 2C9B                       		move.l	(a3)+,(a6)
0001D146 2C9B                       		move.l	(a3)+,(a6)
0001D148 2C9B                       		move.l	(a3)+,(a6)
0001D14A 2C9B                       		move.l	(a3)+,(a6)
0001D14C 2C9B                       		move.l	(a3)+,(a6)
0001D14E 2C9B                       		move.l	(a3)+,(a6)
0001D150 2C9B                       		move.l	(a3)+,(a6)
0001D152 2C9B                       		move.l	(a3)+,(a6)
0001D154 2C9B                       		move.l	(a3)+,(a6)
0001D156 2C9B                       		move.l	(a3)+,(a6)
0001D158 2C9B                       		move.l	(a3)+,(a6)
0001D15A 2C9B                       		move.l	(a3)+,(a6)
0001D15C 2C9B                       		move.l	(a3)+,(a6)
0001D15E 2C9B                       		move.l	(a3)+,(a6)
0001D160 2C9B                       		move.l	(a3)+,(a6)
0001D162 2C9B                       		move.l	(a3)+,(a6)
0001D164 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D168                            

0001D168 4E75                       		rts	
0001D16A                            ; End of function ContScrCounter
0001D16A                            

0001D16A                            ; ===========================================================================
0001D16A                            

0001D16A                            		include	"_inc\HUD (part 2).asm"
0001D16A                            ; ---------------------------------------------------------------------------
0001D16A                            ; HUD counter sizes
0001D16A                            ; ---------------------------------------------------------------------------
0001D16A 0001 86A0                  Hud_100000:	dc.l 100000
0001D16E 0000 2710                  Hud_10000:	dc.l 10000
0001D172 0000 03E8                  Hud_1000:	dc.l 1000
0001D176 0000 0064                  Hud_100:	dc.l 100
0001D17A 0000 000A                  Hud_10:		dc.l 10
0001D17E 0000 0001                  Hud_1:		dc.l 1
0001D182                            

0001D182                            ; ---------------------------------------------------------------------------
0001D182                            ; Subroutine to	load time numbers patterns
0001D182                            ; ---------------------------------------------------------------------------
0001D182                            

0001D182                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D182                            

0001D182                            

0001D182                            Hud_Mins:
0001D182 45F9 0001 D17E             		lea	(Hud_1).l,a2
0001D188 7C00                       		moveq	#0,d6
0001D18A 6000                       		bra.s	loc_1C9BA
0001D18C                            ; End of function Hud_Mins
0001D18C                            

0001D18C                            

0001D18C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D18C                            

0001D18C                            

0001D18C                            Hud_Secs:
0001D18C 45F9 0001 D17A             		lea	(Hud_10).l,a2
0001D192 7C01                       		moveq	#1,d6
0001D194                            

0001D194                            loc_1C9BA:
0001D194 7800                       		moveq	#0,d4
0001D196 43FA 0000                  		lea	Art_Hud(pc),a1
0001D19A                            

0001D19A                            Hud_TimeLoop:
0001D19A 7400                       		moveq	#0,d2
0001D19C 261A                       		move.l	(a2)+,d3
0001D19E                            

0001D19E                            loc_1C9C4:
0001D19E 9283                       		sub.l	d3,d1
0001D1A0 6500                       		bcs.s	loc_1C9CC
0001D1A2 5242                       		addq.w	#1,d2
0001D1A4 60F8                       		bra.s	loc_1C9C4
0001D1A6                            ; ===========================================================================
0001D1A6                            

0001D1A6                            loc_1C9CC:
0001D1A6 D283                       		add.l	d3,d1
0001D1A8 4A42                       		tst.w	d2
0001D1AA 6700                       		beq.s	loc_1C9D6
0001D1AC 383C 0001                  		move.w	#1,d4
0001D1B0                            

0001D1B0                            loc_1C9D6:
0001D1B0 ED4A                       		lsl.w	#6,d2
0001D1B2 2D40 0004                  		move.l	d0,4(a6)
0001D1B6 47F1 2000                  		lea	(a1,d2.w),a3
0001D1BA 2C9B                       		move.l	(a3)+,(a6)
0001D1BC 2C9B                       		move.l	(a3)+,(a6)
0001D1BE 2C9B                       		move.l	(a3)+,(a6)
0001D1C0 2C9B                       		move.l	(a3)+,(a6)
0001D1C2 2C9B                       		move.l	(a3)+,(a6)
0001D1C4 2C9B                       		move.l	(a3)+,(a6)
0001D1C6 2C9B                       		move.l	(a3)+,(a6)
0001D1C8 2C9B                       		move.l	(a3)+,(a6)
0001D1CA 2C9B                       		move.l	(a3)+,(a6)
0001D1CC 2C9B                       		move.l	(a3)+,(a6)
0001D1CE 2C9B                       		move.l	(a3)+,(a6)
0001D1D0 2C9B                       		move.l	(a3)+,(a6)
0001D1D2 2C9B                       		move.l	(a3)+,(a6)
0001D1D4 2C9B                       		move.l	(a3)+,(a6)
0001D1D6 2C9B                       		move.l	(a3)+,(a6)
0001D1D8 2C9B                       		move.l	(a3)+,(a6)
0001D1DA 0680 0040 0000             		addi.l	#$400000,d0
0001D1E0 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D1E4                            

0001D1E4 4E75                       		rts	
0001D1E6                            ; End of function Hud_Secs
0001D1E6                            

0001D1E6                            ; ---------------------------------------------------------------------------
0001D1E6                            ; Subroutine to	load time/ring bonus numbers patterns
0001D1E6                            ; ---------------------------------------------------------------------------
0001D1E6                            

0001D1E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1E6                            

0001D1E6                            

0001D1E6                            Hud_TimeRingBonus:
0001D1E6 45F9 0001 D172             		lea	(Hud_1000).l,a2
0001D1EC 7C03                       		moveq	#3,d6
0001D1EE 7800                       		moveq	#0,d4
0001D1F0 43FA 0000                  		lea	Art_Hud(pc),a1
0001D1F4                            

0001D1F4                            Hud_BonusLoop:
0001D1F4 7400                       		moveq	#0,d2
0001D1F6 261A                       		move.l	(a2)+,d3
0001D1F8                            

0001D1F8                            loc_1CA1E:
0001D1F8 9283                       		sub.l	d3,d1
0001D1FA 6500                       		bcs.s	loc_1CA26
0001D1FC 5242                       		addq.w	#1,d2
0001D1FE 60F8                       		bra.s	loc_1CA1E
0001D200                            ; ===========================================================================
0001D200                            

0001D200                            loc_1CA26:
0001D200 D283                       		add.l	d3,d1
0001D202 4A42                       		tst.w	d2
0001D204 6700                       		beq.s	loc_1CA30
0001D206 383C 0001                  		move.w	#1,d4
0001D20A                            

0001D20A                            loc_1CA30:
0001D20A 4A44                       		tst.w	d4
0001D20C 6700                       		beq.s	Hud_ClrBonus
0001D20E ED4A                       		lsl.w	#6,d2
0001D210 47F1 2000                  		lea	(a1,d2.w),a3
0001D214 2C9B                       		move.l	(a3)+,(a6)
0001D216 2C9B                       		move.l	(a3)+,(a6)
0001D218 2C9B                       		move.l	(a3)+,(a6)
0001D21A 2C9B                       		move.l	(a3)+,(a6)
0001D21C 2C9B                       		move.l	(a3)+,(a6)
0001D21E 2C9B                       		move.l	(a3)+,(a6)
0001D220 2C9B                       		move.l	(a3)+,(a6)
0001D222 2C9B                       		move.l	(a3)+,(a6)
0001D224 2C9B                       		move.l	(a3)+,(a6)
0001D226 2C9B                       		move.l	(a3)+,(a6)
0001D228 2C9B                       		move.l	(a3)+,(a6)
0001D22A 2C9B                       		move.l	(a3)+,(a6)
0001D22C 2C9B                       		move.l	(a3)+,(a6)
0001D22E 2C9B                       		move.l	(a3)+,(a6)
0001D230 2C9B                       		move.l	(a3)+,(a6)
0001D232 2C9B                       		move.l	(a3)+,(a6)
0001D234                            

0001D234                            loc_1CA5A:
0001D234 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D238                            

0001D238 4E75                       		rts	
0001D23A                            ; ===========================================================================
0001D23A                            

0001D23A                            Hud_ClrBonus:
0001D23A 7A0F                       		moveq	#$F,d5
0001D23C                            

0001D23C                            Hud_ClrBonusLoop:
0001D23C 2CBC 0000 0000             		move.l	#0,(a6)
0001D242 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D246                            

0001D246 60EC                       		bra.s	loc_1CA5A
0001D248                            ; End of function Hud_TimeRingBonus
0001D248                            

0001D248                            ; ---------------------------------------------------------------------------
0001D248                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D248                            ; ---------------------------------------------------------------------------
0001D248                            

0001D248                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D248                            

0001D248                            

0001D248                            Hud_Lives:
0001D24E 7200                       		moveq	#0,d1
0001D250 1238 FE12                  		move.b	(v_lives).w,d1	; load number of lives
0001D254 45F9 0001 D17A             		lea	(Hud_10).l,a2
0001D25A 7C01                       		moveq	#1,d6
0001D25C 7800                       		moveq	#0,d4
0001D25E 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D262                            

0001D262                            Hud_LivesLoop:
0001D262 2D40 0004                  		move.l	d0,4(a6)
0001D266 7400                       		moveq	#0,d2
0001D268 261A                       		move.l	(a2)+,d3
0001D26A                            

0001D26A                            loc_1CA90:
0001D26A 9283                       		sub.l	d3,d1
0001D26C 6500                       		bcs.s	loc_1CA98
0001D26E 5242                       		addq.w	#1,d2
0001D270 60F8                       		bra.s	loc_1CA90
0001D272                            ; ===========================================================================
0001D272                            

0001D272                            loc_1CA98:
0001D272 D283                       		add.l	d3,d1
0001D274 4A42                       		tst.w	d2
0001D276 6700                       		beq.s	loc_1CAA2
0001D278 383C 0001                  		move.w	#1,d4
0001D27C                            

0001D27C                            loc_1CAA2:
0001D27C 4A44                       		tst.w	d4
0001D27E 6700                       		beq.s	Hud_ClrLives
0001D280                            

0001D280                            loc_1CAA6:
0001D280 EB4A                       		lsl.w	#5,d2
0001D282 47F1 2000                  		lea	(a1,d2.w),a3
0001D286 2C9B                       		move.l	(a3)+,(a6)
0001D288 2C9B                       		move.l	(a3)+,(a6)
0001D28A 2C9B                       		move.l	(a3)+,(a6)
0001D28C 2C9B                       		move.l	(a3)+,(a6)
0001D28E 2C9B                       		move.l	(a3)+,(a6)
0001D290 2C9B                       		move.l	(a3)+,(a6)
0001D292 2C9B                       		move.l	(a3)+,(a6)
0001D294 2C9B                       		move.l	(a3)+,(a6)
0001D296                            

0001D296                            loc_1CABC:
0001D296 0680 0040 0000             		addi.l	#$400000,d0
0001D29C 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D2A0                            

0001D2A0 4E75                       		rts	
0001D2A2                            ; ===========================================================================
0001D2A2                            

0001D2A2                            Hud_ClrLives:
0001D2A2 4A46                       		tst.w	d6
0001D2A4 67DA                       		beq.s	loc_1CAA6
0001D2A6 7A07                       		moveq	#7,d5
0001D2A8                            

0001D2A8                            Hud_ClrLivesLoop:
0001D2A8 2CBC 0000 0000             		move.l	#0,(a6)
0001D2AE 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D2B2 60E2                       		bra.s	loc_1CABC
0001D2B4                            ; End of function Hud_Lives
0001D2B4                            ; End of function Hud_Lives
0001D2B4                            

0001D2B4                            Art_Hud:	incbin	"artunc\HUD Numbers.bin" ; 8x16 pixel numbers on HUD
0001D5B4                            		even
0001D5B4                            Art_LivesNums:	incbin	"artunc\Lives Counter Numbers.bin" ; 8x8 pixel numbers on lives counter
0001D6F4                            		even
0001D6F4                            

0001D6F4                            		include	"_incObj\DebugMode.asm"
0001D6F4                            ; ---------------------------------------------------------------------------
0001D6F4                            ; When debug mode is currently in use
0001D6F4                            ; ---------------------------------------------------------------------------
0001D6F4                            

0001D6F4                            DebugMode:
0001D6F4 7000                       		moveq	#0,d0
0001D6F6 1038 FE08                  		move.b	(v_debuguse).w,d0
0001D6FA 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D6FE 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D702                            ; ===========================================================================
0001D702 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D704 0000                       		dc.w Debug_Action-Debug_Index
0001D706                            ; ===========================================================================
0001D706                            

0001D706                            Debug_Main:	; Routine 0
0001D706 5438 FE08                  		addq.b	#2,(v_debuguse).w
0001D70A 31F8 F72C FEF0             		move.w	(v_limittop2).w,(v_limittopdb).w ; buffer level x-boundary
0001D710 31F8 F726 FEF2             		move.w	(v_limitbtm1).w,(v_limitbtmdb).w ; buffer level y-boundary
0001D716 31FC 0000 F72C             		move.w	#0,(v_limittop2).w
0001D71C 31FC 0720 F726             		move.w	#$720,(v_limitbtm1).w
0001D722 0278 07FF D00C             		andi.w	#$7FF,(v_player+obY).w
0001D728 0278 07FF F704             		andi.w	#$7FF,(v_screenposy).w
0001D72E 0278 03FF F70C             		andi.w	#$3FF,(v_bgscreenposy).w
0001D734 117C 0000 001A             		move.b	#0,obFrame(a0)
0001D73A 117C 0000 001C             		move.b	#id_Walk,obAnim(a0)
0001D740 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; is game mode $10 (special stage)?
0001D746 6600                       		bne.s	@islevel	; if not, branch
0001D748                            

0001D748 31FC 0000 F782             		move.w	#0,(v_ssrotate).w ; stop special stage rotating
0001D74E 31FC 0000 F780             		move.w	#0,(v_ssangle).w ; make	special	stage "upright"
0001D754 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D756 6000                       		bra.s	@selectlist
0001D758                            ; ===========================================================================
0001D758                            

0001D758                            @islevel:
0001D758 7000                       		moveq	#0,d0
0001D75A 1038 FE10                  		move.b	(v_zone).w,d0
0001D75E                            

0001D75E                            @selectlist:
0001D75E 45F9 0000 0000             		lea	(DebugList).l,a2
0001D764 D040                       		add.w	d0,d0
0001D766 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D76A 3C1A                       		move.w	(a2)+,d6
0001D76C BC38 FE06                  		cmp.b	(v_debugitem).w,d6 ; have you gone past the last item?
0001D770 6200                       		bhi.s	@noreset	; if not, branch
0001D772 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; back to start of list
0001D778                            

0001D778                            	@noreset:
0001D778 6100 0000                  		bsr.w	Debug_ShowItem
0001D77C 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0001D782 11FC 0001 FE0B             		move.b	#1,(v_debugyspeed).w
0001D788                            

0001D788                            Debug_Action:	; Routine 2
0001D788 7006                       		moveq	#6,d0
0001D78A 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w
0001D790 6700                       		beq.s	@isntlevel
0001D792                            

0001D792 7000                       		moveq	#0,d0
0001D794 1038 FE10                  		move.b	(v_zone).w,d0
0001D798                            

0001D798                            	@isntlevel:
0001D798 45F9 0000 0000             		lea	(DebugList).l,a2
0001D79E D040                       		add.w	d0,d0
0001D7A0 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D7A4 3C1A                       		move.w	(a2)+,d6
0001D7A6 6100 0000                  		bsr.w	Debug_Control
0001D7AA 4EF9 0000 DCA0             		jmp	(DisplaySprite).l
0001D7B0                            

0001D7B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D7B0                            

0001D7B0                            

0001D7B0                            Debug_Control:
0001D7B0 7800                       		moveq	#0,d4
0001D7B2 323C 0001                  		move.w	#1,d1
0001D7B6 1838 F605                  		move.b	(v_jpadpress1).w,d4
0001D7BA 0244 000F                  		andi.w	#btnDir,d4	; is up/down/left/right	pressed?
0001D7BE 6600                       		bne.s	@dirpressed	; if yes, branch
0001D7C0                            

0001D7C0 1038 F604                  		move.b	(v_jpadhold1).w,d0
0001D7C4 0240 000F                  		andi.w	#btnDir,d0	; is up/down/left/right	held?
0001D7C8 6600                       		bne.s	@dirheld	; if yes, branch
0001D7CA                            

0001D7CA 11FC 000C FE0A             		move.b	#12,(v_debugxspeed).w
0001D7D0 11FC 000F FE0B             		move.b	#15,(v_debugyspeed).w
0001D7D6 6000 0000                  		bra.w	Debug_ChgItem
0001D7DA                            ; ===========================================================================
0001D7DA                            

0001D7DA                            @dirheld:
0001D7DA 5338 FE0A                  		subq.b	#1,(v_debugxspeed).w
0001D7DE 6600                       		bne.s	loc_1D01C
0001D7E0 11FC 0001 FE0A             		move.b	#1,(v_debugxspeed).w
0001D7E6 5238 FE0B                  		addq.b	#1,(v_debugyspeed).w
0001D7EA 6600                       		bne.s	@dirpressed
0001D7EC 11FC 00FF FE0B             		move.b	#-1,(v_debugyspeed).w
0001D7F2                            

0001D7F2                            @dirpressed:
0001D7F2 1838 F604                  		move.b	(v_jpadhold1).w,d4
0001D7F6                            

0001D7F6                            loc_1D01C:
0001D7F6 7200                       		moveq	#0,d1
0001D7F8 1238 FE0B                  		move.b	(v_debugyspeed).w,d1
0001D7FC 5241                       		addq.w	#1,d1
0001D7FE 4841                       		swap	d1
0001D800 E881                       		asr.l	#4,d1
0001D802 2428 000C                  		move.l	obY(a0),d2
0001D806 2628 0008                  		move.l	obX(a0),d3
0001D80A 0804 0000                  		btst	#bitUp,d4	; is up	being pressed?
0001D80E 6700                       		beq.s	loc_1D03C	; if not, branch
0001D810 9481                       		sub.l	d1,d2
0001D812 6400                       		bcc.s	loc_1D03C
0001D814 7400                       		moveq	#0,d2
0001D816                            

0001D816                            loc_1D03C:
0001D816 0804 0001                  		btst	#bitDn,d4	; is down being	pressed?
0001D81A 6700                       		beq.s	loc_1D052	; if not, branch
0001D81C D481                       		add.l	d1,d2
0001D81E 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D824 6500                       		bcs.s	loc_1D052
0001D826 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D82C                            

0001D82C                            loc_1D052:
0001D82C 0804 0002                  		btst	#bitL,d4
0001D830 6700                       		beq.s	loc_1D05E
0001D832 9681                       		sub.l	d1,d3
0001D834 6400                       		bcc.s	loc_1D05E
0001D836 7600                       		moveq	#0,d3
0001D838                            

0001D838                            loc_1D05E:
0001D838 0804 0003                  		btst	#bitR,d4
0001D83C 6700                       		beq.s	loc_1D066
0001D83E D681                       		add.l	d1,d3
0001D840                            

0001D840                            loc_1D066:
0001D840 2142 000C                  		move.l	d2,obY(a0)
0001D844 2143 0008                  		move.l	d3,obX(a0)
0001D848                            

0001D848                            Debug_ChgItem:
0001D848 0838 0006 F604             		btst	#bitA,(v_jpadhold1).w ; is button A pressed?
0001D84E 6700                       		beq.s	@createitem	; if not, branch
0001D850 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0001D856 6700                       		beq.s	@nextitem	; if not, branch
0001D858 5338 FE06                  		subq.b	#1,(v_debugitem).w ; go back 1 item
0001D85C 6400                       		bcc.s	@display
0001D85E DD38 FE06                  		add.b	d6,(v_debugitem).w
0001D862 6000                       		bra.s	@display
0001D864                            ; ===========================================================================
0001D864                            

0001D864                            @nextitem:
0001D864 0838 0006 F605             		btst	#bitA,(v_jpadpress1).w ; is button A pressed?
0001D86A 6700                       		beq.s	@createitem	; if not, branch
0001D86C 5238 FE06                  		addq.b	#1,(v_debugitem).w ; go forwards 1 item
0001D870 BC38 FE06                  		cmp.b	(v_debugitem).w,d6
0001D874 6200                       		bhi.s	@display
0001D876 11FC 0000 FE06             		move.b	#0,(v_debugitem).w ; loop back to first item
0001D87C                            

0001D87C                            	@display:
0001D87C 6000 0000                  		bra.w	Debug_ShowItem
0001D880                            ; ===========================================================================
0001D880                            

0001D880                            @createitem:
0001D880 0838 0005 F605             		btst	#bitC,(v_jpadpress1).w ; is button C pressed?
0001D886 6700                       		beq.s	@backtonormal	; if not, branch
0001D888 4EB9 0000 E128             		jsr	(FindFreeObj).l
0001D88E 6600                       		bne.s	@backtonormal
0001D890 3368 0008 0008             		move.w	obX(a0),obX(a1)
0001D896 3368 000C 000C             		move.w	obY(a0),obY(a1)
0001D89C 1368 0004 0000             		move.b	4(a0),0(a1)	; create object
0001D8A2 1368 0001 0001             		move.b	obRender(a0),obRender(a1)
0001D8A8 1368 0001 0022             		move.b	obRender(a0),obStatus(a1)
0001D8AE 0229 007F 0022             		andi.b	#$7F,obStatus(a1)
0001D8B4 7000                       		moveq	#0,d0
0001D8B6 1038 FE06                  		move.b	(v_debugitem).w,d0
0001D8BA E748                       		lsl.w	#3,d0
0001D8BC 1372 0004 0028             		move.b	4(a2,d0.w),obSubtype(a1)
0001D8C2 4E75                       		rts	
0001D8C4                            ; ===========================================================================
0001D8C4                            

0001D8C4                            @backtonormal:
0001D8C4 0838 0004 F605             		btst	#bitB,(v_jpadpress1).w ; is button B pressed?
0001D8CA 6700                       		beq.s	@stayindebug	; if not, branch
0001D8CC 7000                       		moveq	#0,d0
0001D8CE 31C0 FE08                  		move.w	d0,(v_debuguse).w ; deactivate debug mode
0001D8D2 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0001D8DA 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0001D8E0 11C0 D01C                  		move.b	d0,(v_player+obAnim).w
0001D8E4 3140 000A                  		move.w	d0,obX+2(a0)
0001D8E8 3140 000E                  		move.w	d0,obY+2(a0)
0001D8EC 31F8 FEF0 F72C             		move.w	(v_limittopdb).w,(v_limittop2).w ; restore level boundaries
0001D8F2 31F8 FEF2 F726             		move.w	(v_limitbtmdb).w,(v_limitbtm1).w
0001D8F8 0C38 0000 F600             		cmpi.b	#id_Special,(v_gamemode).w ; are you in the special stage?
0001D8FE 6600                       		bne.s	@stayindebug	; if not, branch
0001D900                            

0001D900 4278 F780                  		clr.w	(v_ssangle).w
0001D904 31FC 0040 F782             		move.w	#$40,(v_ssrotate).w ; set new level rotation speed
0001D90A 21FC 0000 0000 D004        		move.l	#Map_Sonic,(v_player+obMap).w
0001D912 31FC 0780 D002             		move.w	#$780,(v_player+obGfx).w
0001D918 11FC 0002 D01C             		move.b	#id_Roll,(v_player+obAnim).w
0001D91E 08F8 0002 D022             		bset	#2,(v_player+obStatus).w
0001D924 08F8 0001 D022             		bset	#1,(v_player+obStatus).w
0001D92A                            

0001D92A                            	@stayindebug:
0001D92A 4E75                       		rts	
0001D92C                            ; End of function Debug_Control
0001D92C                            

0001D92C                            

0001D92C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D92C                            

0001D92C                            

0001D92C                            Debug_ShowItem:
0001D92C 7000                       		moveq	#0,d0
0001D92E 1038 FE06                  		move.b	(v_debugitem).w,d0
0001D932 E748                       		lsl.w	#3,d0
0001D934 2172 0000 0004             		move.l	(a2,d0.w),obMap(a0) ; load mappings for item
0001D93A 3172 0006 0002             		move.w	6(a2,d0.w),obGfx(a0) ; load VRAM setting for item
0001D940 1172 0005 001A             		move.b	5(a2,d0.w),obFrame(a0) ; load frame number for item
0001D946 4E75                       		rts	
0001D948                            ; End of function Debug_ShowItem
0001D948                            ; End of function Debug_ShowItem
0001D948                            		include	"_inc\DebugList.asm"
0001D948                            ; ---------------------------------------------------------------------------
0001D948                            ; Debug	mode item lists
0001D948                            ; ---------------------------------------------------------------------------
0001D948                            DebugList:
0001D948 0000                       	dc.w @GHZ-DebugList
0001D94A 0000                       	dc.w @LZ-DebugList
0001D94C 0000                       	dc.w @MZ-DebugList
0001D94E 0000                       	dc.w @SLZ-DebugList
0001D950 0000                       	dc.w @SYZ-DebugList
0001D952 0000                       	dc.w @SBZ-DebugList
0001D954 0000                       	dc.w @Ending-DebugList
0001D956                            

0001D956                            dbug:	macro map,object,subtype,frame,vram
0001D956                            	dc.l map+(object<<24)
0001D956                            	dc.b subtype,frame
0001D956                            	dc.w vram
0001D956                            	endm
0001D956                            

0001D956                            @GHZ:
0001D956 0000                       	dc.w (@GHZend-@GHZ-2)/8
0001D958                            

0001D958                            ;		mappings	object		subtype	frame	VRAM setting
0001D958 2500 A61E 0000 27B2        	dbug 	Map_Ring,	id_Rings,	0,	0,	$27B2
0001D960 2600 AC22 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0001D968 1F00 9DDC 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
0001D970 2200 A0C2 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0001D978 2B00 B262 0000 047B        	dbug	Map_Chop,	id_Chopper,	0,	0,	$47B
0001D980 3600 D684 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0001D988 1800 87C8 0000 4000        	dbug	Map_Plat_GHZ,	id_BasicPlatform, 0,	0,	$4000
0001D990 3B00 D7AA 0000 63D0        	dbug	Map_PRock,	id_PurpleRock,	0,	0,	$63D0
0001D998 4000 FE3A 0000 04F0        	dbug	Map_Moto,	id_MotoBug,	0,	0,	$4F0
0001D9A0 4100 E3B6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0001D9A8 4200 E5DE 0000 249B        	dbug	Map_Newt,	id_Newtron,	0,	0,	$249B
0001D9B0 4400 E8EC 0000 434C        	dbug	Map_Edge,	id_EdgeWalls,	0,	0,	$434C
0001D9B8 1900 8836 0000 43AA        	dbug	Map_GBall,	id_Obj19,	0,	0,	$43AA
0001D9C0 7901 78B2 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0001D9C8 4B00 A662 0000 2400        	dbug	Map_GRing,	id_GiantRing,	0,	0,	$2400
0001D9D0 7D01 7A02 0101 84B6        	dbug	Map_Bonus,	id_HiddenBonus,	1,	1,	$84B6
0001D9D8                            	@GHZend:
0001D9D8                            

0001D9D8                            @LZ:
0001D9D8 0000                       	dc.w (@LZend-@LZ-2)/8
0001D9DA                            

0001D9DA                            ;		mappings	object		subtype	frame	VRAM setting
0001D9DA 2500 A61E 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0001D9E2 2600 AC22 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0001D9EA 4100 E3B6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0001D9F2 2C00 B308 0800 2486        	dbug	Map_Jaws,	id_Jaws,	8,	0,	$2486
0001D9FA 2D00 B4F4 0002 84A6        	dbug	Map_Burro,	id_Burrobot,	0,	2,	$84A6
0001DA02 1601 267C 0000 03CC        	dbug	Map_Harp,	id_Harpoon,	0,	0,	$3CC
0001DA0A 1601 267C 0203 03CC        	dbug	Map_Harp,	id_Harpoon,	2,	3,	$3CC
0001DA12 3300 C97E 0000 43DE        	dbug	Map_Push,	id_PushBlock,	0,	0,	$43DE
0001DA1A 3200 C53C 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0001DA22 3600 D684 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0001DA2A 5201 073A 0400 43BC        	dbug	Map_MBlockLZ,	id_MovingBlock,	4,	0,	$43BC
0001DA32 6101 28A4 0100 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 1,	0,	$43E6
0001DA3A 6101 28A4 1301 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $13,	1,	$43E6
0001DA42 6101 28A4 0500 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, 5,	0,	$43E6
0001DA4A 6201 29FA 0000 443E        	dbug	Map_Gar,	id_Gargoyle,	0,	0,	$443E
0001DA52 6101 28A4 2702 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $27,	2,	$43E6
0001DA5A 6101 28A4 3003 43E6        	dbug	Map_LBlock,	id_LabyrinthBlock, $30,	3,	$43E6
0001DA62 6301 2D5E 7F00 03F6        	dbug	Map_LConv,	id_LabyrinthConvey, $7F, 0,	$3F6
0001DA6A 6001 25C6 0000 0467        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$467
0001DA72 6401 30AE 8413 8348        	dbug	Map_Bub,	id_Bubble,	$84,	$13,	$8348
0001DA7A 6501 3236 0202 C259        	dbug	Map_WFall,	id_Waterfall,	2,	2,	$C259
0001DA82 6501 3236 0909 C259        	dbug	Map_WFall,	id_Waterfall,	9,	9,	$C259
0001DA8A 0B01 1A04 0000 43DE        	dbug	Map_Pole,	id_Pole,	0,	0,	$43DE
0001DA92 0C01 1AD4 0200 4328        	dbug	Map_Flap,	id_FlapDoor,	2,	0,	$4328
0001DA9A 7901 78B2 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0001DAA2                            	@LZend:
0001DAA2                            

0001DAA2                            @MZ:
0001DAA2 0000                       	dc.w (@MZend-@MZ-2)/8
0001DAA4                            

0001DAA4                            ;		mappings	object		subtype	frame	VRAM setting
0001DAA4 2500 A61E 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0001DAAC 2600 AC22 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0001DAB4 2200 A0C2 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0001DABC 3600 D684 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0001DAC4 4100 E3B6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0001DACC 1300 BA06 0000 0345        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$345
0001DAD4 4600 EF9E 0000 4000        	dbug	Map_Brick,	id_MarbleBrick,	0,	0,	$4000
0001DADC 4C00 F8E4 0000 63A8        	dbug	Map_Geyser,	id_GeyserMaker,	0,	0,	$63A8
0001DAE4 4E00 FBC8 0000 63A8        	dbug	Map_LWall,	id_LavaWall,	0,	0,	$63A8
0001DAEC 3300 C97E 0000 42B8        	dbug	Map_Push,	id_PushBlock,	0,	0,	$42B8
0001DAF4 5000 FFC8 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
0001DAFC 5101 046E 0000 42B8        	dbug	Map_Smab,	id_SmashBlock,	0,	0,	$42B8
0001DB04 5201 06E4 0000 02B8        	dbug	Map_MBlock,	id_MovingBlock,	0,	0,	$2B8
0001DB0C 5300 8DD2 0000 62B8        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$62B8
0001DB14 5400 F8AA 0000 8680        	dbug	Map_LTag,	id_LavaTag,	0,	0,	$8680
0001DB1C 5501 08D8 0000 04B8        	dbug	Map_Bas,	id_Basaran,	0,	0,	$4B8
0001DB24 7801 7528 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
0001DB2C 7901 78B2 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0001DB34                            	@MZend:
0001DB34                            

0001DB34                            @SLZ:
0001DB34 0000                       	dc.w (@SLZend-@SLZ-2)/8
0001DB36                            

0001DB36                            ;		mappings	object		subtype	frame	VRAM setting
0001DB36 2500 A61E 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0001DB3E 2600 AC22 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0001DB46 5901 142A 0000 4000        	dbug	Map_Elev,	id_Elevator,	0,	0,	$4000
0001DB4E 5300 8DD2 0002 44E0        	dbug	Map_CFlo,	id_CollapseFloor, 0,	2,	$44E0
0001DB56 1800 8826 0000 4000        	dbug	Map_Plat_SLZ,	id_BasicPlatform, 0,	0,	$4000
0001DB5E 5A01 1564 0000 4000        	dbug	Map_Circ,	id_CirclingPlatform, 0,	0,	$4000
0001DB66 5B01 171E 0000 4000        	dbug	Map_Stair,	id_Staircase,	0,	0,	$4000
0001DB6E 5D01 1CF2 0000 43A0        	dbug	Map_Fan,	id_Fan,		0,	0,	$43A0
0001DB76 5E01 2086 0000 0374        	dbug	Map_Seesaw,	id_Seesaw,	0,	0,	$374
0001DB7E 4100 E3B6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0001DB86 1300 BA06 0000 0480        	dbug	Map_Fire,	id_LavaMaker,	0,	0,	$480
0001DB8E 1C00 8EE2 0000 44D8        	dbug	Map_Scen,	id_Scenery,	0,	0,	$44D8
0001DB96 5F01 230A 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
0001DB9E 6001 25C6 0000 2429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$2429
0001DBA6 7901 78B2 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0001DBAE                            	@SLZend:
0001DBAE                            

0001DBAE                            @SYZ:
0001DBAE 0000                       	dc.w (@SYZend-@SYZ-2)/8
0001DBB0                            

0001DBB0                            ;		mappings	object		subtype	frame	VRAM setting
0001DBB0 2500 A61E 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0001DBB8 2600 AC22 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0001DBC0 3600 D684 0000 051B        	dbug	Map_Spike,	id_Spikes,	0,	0,	$51B
0001DBC8 4100 E3B6 0000 0523        	dbug	Map_Spring,	id_Springs,	0,	0,	$523
0001DBD0 4300 E83E 0000 04B8        	dbug	Map_Roll,	id_Roller,	0,	0,	$4B8
0001DBD8 1200 F01C 0000 0000        	dbug	Map_Light,	id_SpinningLight, 0,	0,	0
0001DBE0 4700 F19A 0000 0380        	dbug	Map_Bump,	id_Bumper,	0,	0,	$380
0001DBE8 1F00 9DDC 0000 0400        	dbug	Map_Crab,	id_Crabmeat,	0,	0,	$400
0001DBF0 2200 A0C2 0000 0444        	dbug	Map_Buzz,	id_BuzzBomber,	0,	0,	$444
0001DBF8 5000 FFC8 0000 247B        	dbug	Map_Yad,	id_Yadrin,	0,	0,	$247B
0001DC00 1800 8814 0000 4000        	dbug	Map_Plat_SYZ,	id_BasicPlatform, 0,	0,	$4000
0001DC08 5601 0DE2 0000 4000        	dbug	Map_FBlock,	id_FloatingBlock, 0,	0,	$4000
0001DC10 3200 C53C 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0001DC18 7801 7528 0000 24FF        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$24FF
0001DC20 7901 78B2 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0001DC28                            	@SYZend:
0001DC28                            

0001DC28                            @SBZ:
0001DC28 0000                       	dc.w (@SBZend-@SBZ-2)/8
0001DC2A                            

0001DC2A                            ;		mappings	object		subtype	frame	VRAM setting
0001DC2A 2500 A61E 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0001DC32 2600 AC22 0000 0680        	dbug	Map_Monitor,	id_Monitor,	0,	0,	$680
0001DC3A 5F01 230A 0000 0400        	dbug	Map_Bomb,	id_Bomb,	0,	0,	$400
0001DC42 6001 25C6 0000 0429        	dbug	Map_Orb,	id_Orbinaut,	0,	0,	$429
0001DC4A 7801 7528 0000 22B0        	dbug	Map_Cat,	id_Caterkiller,	0,	0,	$22B0
0001DC52 1501 1182 0702 4391        	dbug	Map_BBall,	id_SwingingPlatform, 7,	2,	$4391
0001DC5A 6701 5DFC E000 C344        	dbug	Map_Disc,	id_RunningDisc,	$E0,	0,	$C344
0001DC62 5201 06E4 2802 22C0        	dbug	Map_MBlock,	id_MovingBlock,	$28,	2,	$22C0
0001DC6A 3200 C53C 0000 0513        	dbug	Map_But,	id_Button,	0,	0,	$513
0001DC72 6901 6056 0300 4492        	dbug	Map_Trap,	id_SpinPlatform, 3,	0,	$4492
0001DC7A 6901 60B0 8300 04DF        	dbug	Map_Spin,	id_SpinPlatform, $83,	0,	$4DF
0001DC82 6A01 630E 0200 43B5        	dbug	Map_Saw,	id_Saws,	2,	0,	$43B5
0001DC8A 5300 8DD2 0000 43F5        	dbug	Map_CFlo,	id_CollapseFloor, 0,	0,	$43F5
0001DC92 5201 06E4 3903 4460        	dbug	Map_MBlock,	id_MovingBlock,	$39,	3,	$4460
0001DC9A 6B01 66DE 0000 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	0,	0,	$22C0
0001DCA2 2A00 9078 0000 42E8        	dbug	Map_ADoor,	id_AutoDoor,	0,	0,	$42E8
0001DCAA 6B01 66DE 1301 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$13,	1,	$22C0
0001DCB2 6A01 630E 0100 43B5        	dbug	Map_Saw,	id_Saws,	1,	0,	$43B5
0001DCBA 6B01 66DE 2401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$24,	1,	$22C0
0001DCC2 6A01 630E 0402 43B5        	dbug	Map_Saw,	id_Saws,	4,	2,	$43B5
0001DCCA 6B01 66DE 3401 22C0        	dbug	Map_Stomp,	id_ScrapStomp,	$34,	1,	$22C0
0001DCD2 6C01 68A0 0000 44C3        	dbug	Map_VanP,	id_VanishPlatform, 0,	0,	$44C3
0001DCDA 6D00 EC90 6400 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	0,	$83D9
0001DCE2 6D00 EC90 640B 83D9        	dbug	Map_Flame,	id_Flamethrower, $64,	$B,	$83D9
0001DCEA 6E01 6956 0400 047E        	dbug	Map_Elec,	id_Electro,	4,	0,	$47E
0001DCF2 7001 6D9E 0000 42F0        	dbug	Map_Gird,	id_Girder,	0,	0,	$42F0
0001DCFA 7101 1B98 1100 8680        	dbug	Map_Invis,	id_Invisibarrier, $11,	0,	$8680
0001DD02 1E00 94EE 0400 2302        	dbug	Map_Hog,	id_BallHog,	4,	0,	$2302
0001DD0A 7901 78B2 0100 07A0        	dbug	Map_Lamp,	id_Lamppost,	1,	0,	$7A0
0001DD12                            	@SBZend:
0001DD12                            

0001DD12                            @Ending:
0001DD12 0000                       	dc.w (@Endingend-@Ending-2)/8
0001DD14                            

0001DD14                            ;		mappings	object		subtype	frame	VRAM setting
0001DD14 2500 A61E 0000 27B2        	dbug	Map_Ring,	id_Rings,	0,	0,	$27B2
0001DD1C 2500 A61E 0008 27B2        	dbug	Map_Ring,	id_Rings,	0,	8,	$27B2
0001DD24                            	@Endingend:
0001DD24                            

0001DD24                            	even
0001DD24                            	even
0001DD24                            		include	"_inc\LevelHeaders.asm"
0001DD24                            ; ---------------------------------------------------------------------------
0001DD24                            ; Level Headers
0001DD24                            ; ---------------------------------------------------------------------------
0001DD24                            

0001DD24                            LevelHeaders:
0001DD24                            

0001DD24                            lhead:	macro plc1,lvlgfx,plc2,sixteen,twofivesix,music,pal
0001DD24                            	dc.l (plc1<<24)+lvlgfx
0001DD24                            	dc.l (plc2<<24)+sixteen
0001DD24                            	dc.l twofivesix
0001DD24                            	dc.b 0, music, pal, pal
0001DD24                            	endm
0001DD24                            

0001DD24                            ; 1st PLC, level gfx (unused), 2nd PLC, 16x16 data, 256x256 data,
0001DD24                            ; music (unused), palette (unused), palette
0001DD24                            

0001DD24                            ;		1st PLC				2nd PLC				256x256 data			palette
0001DD24                            ;				level gfx*			16x16 data			music*
0001DD24                            

0001DD24 0000 0000 0000 0000 0000+  	lhead	plcid_GHZ,	Nem_GHZ_2nd,	plcid_GHZ2,	Blk16_GHZ,	Blk256_GHZ,	bgm_GHZ,	palid_GHZ	; Green Hill
0001DD34 0000 0000 0000 0000 0000+  	lhead	plcid_LZ,	Nem_LZ,		plcid_LZ2,	Blk16_LZ,	Blk256_LZ,	bgm_LZ,		palid_LZ	; Labyrinth
0001DD44 0000 0000 0000 0000 0000+  	lhead	plcid_MZ,	Nem_MZ,		plcid_MZ2,	Blk16_MZ,	Blk256_MZ,	bgm_MZ,		palid_MZ	; Marble
0001DD54 0000 0000 0000 0000 0000+  	lhead	plcid_SLZ,	Nem_SLZ,	plcid_SLZ2,	Blk16_SLZ,	Blk256_SLZ,	bgm_SLZ,	palid_SLZ	; Star Light
0001DD64 0000 0000 0000 0000 0000+  	lhead	plcid_SYZ,	Nem_SYZ,	plcid_SYZ2,	Blk16_SYZ,	Blk256_SYZ,	bgm_SYZ,	palid_SYZ	; Spring Yard
0001DD74 0000 0000 0000 0000 0000+  	lhead	plcid_SBZ,	Nem_SBZ,	plcid_SBZ2,	Blk16_SBZ,	Blk256_SBZ,	bgm_SBZ,	palid_SBZ1	; Scrap Brain
0001DD84 0000 0000 0000 0000 0000+  	lhead	0,		Nem_GHZ_2nd,	0,		Blk16_GHZ,	Blk256_GHZ,	bgm_SBZ,	palid_Ending	; Ending
0001DD94                            	even
0001DD94                            

0001DD94                            ;	* music and level gfx are actually set elsewhere, so these values are useless
0001DD94                            ;	* music and level gfx are actually set elsewhere, so these values are useless
0001DD94                            		include	"_inc\Pattern Load Cues.asm"
0001DD94                            ; ---------------------------------------------------------------------------
0001DD94                            ; Pattern load cues
0001DD94                            ; ---------------------------------------------------------------------------
0001DD94                            ArtLoadCues:
0001DD94                            

0001DD94 0000                       ptr_PLC_Main:		dc.w PLC_Main-ArtLoadCues
0001DD96 0000                       ptr_PLC_Main2:		dc.w PLC_Main2-ArtLoadCues
0001DD98 0000                       ptr_PLC_Explode:	dc.w PLC_Explode-ArtLoadCues
0001DD9A 0000                       ptr_PLC_GameOver:	dc.w PLC_GameOver-ArtLoadCues
0001DD9C                            PLC_Levels:
0001DD9C 0000                       ptr_PLC_GHZ:		dc.w PLC_GHZ-ArtLoadCues
0001DD9E 0000                       ptr_PLC_GHZ2:		dc.w PLC_GHZ2-ArtLoadCues
0001DDA0 0000                       ptr_PLC_LZ:		dc.w PLC_LZ-ArtLoadCues
0001DDA2 0000                       ptr_PLC_LZ2:		dc.w PLC_LZ2-ArtLoadCues
0001DDA4 0000                       ptr_PLC_MZ:		dc.w PLC_MZ-ArtLoadCues
0001DDA6 0000                       ptr_PLC_MZ2:		dc.w PLC_MZ2-ArtLoadCues
0001DDA8 0000                       ptr_PLC_SLZ:		dc.w PLC_SLZ-ArtLoadCues
0001DDAA 0000                       ptr_PLC_SLZ2:		dc.w PLC_SLZ2-ArtLoadCues
0001DDAC 0000                       ptr_PLC_SYZ:		dc.w PLC_SYZ-ArtLoadCues
0001DDAE 0000                       ptr_PLC_SYZ2:		dc.w PLC_SYZ2-ArtLoadCues
0001DDB0 0000                       ptr_PLC_SBZ:		dc.w PLC_SBZ-ArtLoadCues
0001DDB2 0000                       ptr_PLC_SBZ2:		dc.w PLC_SBZ2-ArtLoadCues
0001DDB4 0000                       ptr_PLC_TitleCard:	dc.w PLC_TitleCard-ArtLoadCues
0001DDB6 0000                       ptr_PLC_Boss:		dc.w PLC_Boss-ArtLoadCues
0001DDB8 0000                       ptr_PLC_Signpost:	dc.w PLC_Signpost-ArtLoadCues
0001DDBA 0000                       ptr_PLC_Warp:		dc.w PLC_Warp-ArtLoadCues
0001DDBC 0000                       ptr_PLC_SpecialStage:	dc.w PLC_SpecialStage-ArtLoadCues
0001DDBE                            PLC_Animals:
0001DDBE 0000                       ptr_PLC_GHZAnimals:	dc.w PLC_GHZAnimals-ArtLoadCues
0001DDC0 0000                       ptr_PLC_LZAnimals:	dc.w PLC_LZAnimals-ArtLoadCues
0001DDC2 0000                       ptr_PLC_MZAnimals:	dc.w PLC_MZAnimals-ArtLoadCues
0001DDC4 0000                       ptr_PLC_SLZAnimals:	dc.w PLC_SLZAnimals-ArtLoadCues
0001DDC6 0000                       ptr_PLC_SYZAnimals:	dc.w PLC_SYZAnimals-ArtLoadCues
0001DDC8 0000                       ptr_PLC_SBZAnimals:	dc.w PLC_SBZAnimals-ArtLoadCues
0001DDCA 0000                       ptr_PLC_SSResult:	dc.w PLC_SSResult-ArtLoadCues
0001DDCC 0000                       ptr_PLC_Ending:		dc.w PLC_Ending-ArtLoadCues
0001DDCE 0000                       ptr_PLC_TryAgain:	dc.w PLC_TryAgain-ArtLoadCues
0001DDD0 0000                       ptr_PLC_EggmanSBZ2:	dc.w PLC_EggmanSBZ2-ArtLoadCues
0001DDD2 0000                       ptr_PLC_FZBoss:		dc.w PLC_FZBoss-ArtLoadCues
0001DDD4                            

0001DDD4                            plcm:	macro gfx,vram
0001DDD4                            	dc.l gfx
0001DDD4                            	dc.w vram
0001DDD4                            	endm
0001DDD4                            

0001DDD4                            ; ---------------------------------------------------------------------------
0001DDD4                            ; Pattern load cues - standard block 1
0001DDD4                            ; ---------------------------------------------------------------------------
0001DDD4 0000                       PLC_Main:	dc.w ((PLC_Mainend-PLC_Main-2)/6)-1
0001DDD6 0000 0000 F400             		plcm	Nem_Lamp, $F400		; lamppost
0001DDDC 0000 0000 D940             		plcm	Nem_Hud, $D940		; HUD
0001DDE2 0000 0000 FA80             		plcm	Nem_Lives, $FA80	; lives	counter
0001DDE8 0000 0000 F640             		plcm	Nem_Ring, $F640 	; rings
0001DDEE 0000 0000 F2E0             		plcm	Nem_Points, $F2E0	; points from enemy
0001DDF4                            	PLC_Mainend:
0001DDF4                            ; ---------------------------------------------------------------------------
0001DDF4                            ; Pattern load cues - standard block 2
0001DDF4                            ; ---------------------------------------------------------------------------
0001DDF4 0000                       PLC_Main2:	dc.w ((PLC_Main2end-PLC_Main2-2)/6)-1
0001DDF6 0000 0000 D000             		plcm	Nem_Monitors, $D000	; monitors
0001DDFC 0000 0000 A820             		plcm	Nem_Shield, $A820	; shield
0001DE02 0000 0000 AB80             		plcm	Nem_Stars, $AB80	; invincibility	stars
0001DE08                            	PLC_Main2end:
0001DE08                            ; ---------------------------------------------------------------------------
0001DE08                            ; Pattern load cues - explosion
0001DE08                            ; ---------------------------------------------------------------------------
0001DE08 0000                       PLC_Explode:	dc.w ((PLC_Explodeend-PLC_Explode-2)/6)-1
0001DE0A 0000 0000 B400             		plcm	Nem_Explode, $B400	; explosion
0001DE10                            	PLC_Explodeend:
0001DE10                            ; ---------------------------------------------------------------------------
0001DE10                            ; Pattern load cues - game/time	over
0001DE10                            ; ---------------------------------------------------------------------------
0001DE10 0000                       PLC_GameOver:	dc.w ((PLC_GameOverend-PLC_GameOver-2)/6)-1
0001DE12 0000 0000 ABC0             		plcm	Nem_GameOver, $ABC0	; game/time over
0001DE18                            	PLC_GameOverend:
0001DE18                            ; ---------------------------------------------------------------------------
0001DE18                            ; Pattern load cues - Green Hill
0001DE18                            ; ---------------------------------------------------------------------------
0001DE18 0000                       PLC_GHZ:	dc.w ((PLC_GHZ2-PLC_GHZ-2)/6)-1
0001DE1A 0000 0000 0000             		plcm	Nem_GHZ_1st, 0		; GHZ main patterns
0001DE20 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
0001DE26 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
0001DE2C 0000 0000 7A00             		plcm	Nem_PplRock, $7A00	; purple rock
0001DE32 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
0001DE38 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
0001DE3E 0000 0000 8F60             		plcm	Nem_Chopper, $8F60	; chopper enemy
0001DE44 0000 0000 9360             		plcm	Nem_Newtron, $9360	; newtron enemy
0001DE4A 0000 0000 9E00             		plcm	Nem_Motobug, $9E00	; motobug enemy
0001DE50 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0001DE56 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0001DE5C 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0001DE62                            

0001DE62 0000                       PLC_GHZ2:	dc.w ((PLC_GHZ2end-PLC_GHZ2-2)/6)-1
0001DE64 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
0001DE6A 0000 0000 71C0             		plcm	Nem_Bridge, $71C0	; bridge
0001DE70 0000 0000 7300             		plcm	Nem_SpikePole, $7300	; spiked pole
0001DE76 0000 0000 7540             		plcm	Nem_Ball, $7540		; giant	ball
0001DE7C 0000 0000 A1E0             		plcm	Nem_GhzWall1, $A1E0	; breakable wall
0001DE82 0000 0000 6980             		plcm	Nem_GhzWall2, $6980	; normal wall
0001DE88                            	PLC_GHZ2end:
0001DE88                            ; ---------------------------------------------------------------------------
0001DE88                            ; Pattern load cues - Labyrinth
0001DE88                            ; ---------------------------------------------------------------------------
0001DE88 0000                       PLC_LZ:		dc.w ((PLC_LZ2-PLC_LZ-2)/6)-1
0001DE8A 0000 0000 0000             		plcm	Nem_LZ,0		; LZ main patterns
0001DE90 0000 0000 3C00             		plcm	Nem_LzBlock1, $3C00	; block
0001DE96 0000 0000 3E00             		plcm	Nem_LzBlock2, $3E00	; blocks
0001DE9C 0000 0000 4B20             		plcm	Nem_Splash, $4B20	; waterfalls and splash
0001DEA2 0000 0000 6000             		plcm	Nem_Water, $6000	; water	surface
0001DEA8 0000 0000 6200             		plcm	Nem_LzSpikeBall, $6200	; spiked ball
0001DEAE 0000 0000 6500             		plcm	Nem_FlapDoor, $6500	; flapping door
0001DEB4 0000 0000 6900             		plcm	Nem_Bubbles, $6900	; bubbles and numbers
0001DEBA 0000 0000 7780             		plcm	Nem_LzBlock3, $7780	; block
0001DEC0 0000 0000 7880             		plcm	Nem_LzDoor1, $7880	; vertical door
0001DEC6 0000 0000 7980             		plcm	Nem_Harpoon, $7980	; harpoon
0001DECC 0000 0000 94C0             		plcm	Nem_Burrobot, $94C0	; burrobot enemy
0001DED2                            

0001DED2 0000                       PLC_LZ2:	dc.w ((PLC_LZ2end-PLC_LZ2-2)/6)-1
0001DED4 0000 0000 7BC0             		plcm	Nem_LzPole, $7BC0	; pole that breaks
0001DEDA 0000 0000 7CC0             		plcm	Nem_LzDoor2, $7CC0	; large	horizontal door
0001DEE0 0000 0000 7EC0             		plcm	Nem_LzWheel, $7EC0	; wheel
0001DEE6 0000 0000 5D20             		plcm	Nem_Gargoyle, $5D20	; gargoyle head
0001DEEC 0000 0000 89E0             		plcm	Nem_LzPlatfm, $89E0	; rising platform
0001DEF2 0000 0000 8CE0             		plcm	Nem_Orbinaut, $8CE0	; orbinaut enemy
0001DEF8 0000 0000 90C0             		plcm	Nem_Jaws, $90C0		; jaws enemy
0001DEFE 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
0001DF04 0000 0000 A000             		plcm	Nem_Cork, $A000		; cork block
0001DF0A 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0001DF10 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0001DF16 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0001DF1C                            	PLC_LZ2end:
0001DF1C                            ; ---------------------------------------------------------------------------
0001DF1C                            ; Pattern load cues - Marble
0001DF1C                            ; ---------------------------------------------------------------------------
0001DF1C 0000                       PLC_MZ:		dc.w ((PLC_MZ2-PLC_MZ-2)/6)-1
0001DF1E 0000 0000 0000             		plcm	Nem_MZ,0		; MZ main patterns
0001DF24 0000 0000 6000             		plcm	Nem_MzMetal, $6000	; metal	blocks
0001DF2A 0000 0000 68A0             		plcm	Nem_MzFire, $68A0	; fireballs
0001DF30 0000 0000 7000             		plcm	Nem_Swing, $7000	; swinging platform
0001DF36 0000 0000 71C0             		plcm	Nem_MzGlass, $71C0	; green	glassy block
0001DF3C 0000 0000 7500             		plcm	Nem_Lava, $7500		; lava
0001DF42 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
0001DF48 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
0001DF4E 0000 0000 9700             		plcm	Nem_Basaran, $9700	; basaran enemy
0001DF54 0000 0000 9FE0             		plcm	Nem_Cater, $9FE0	; caterkiller enemy
0001DF5A                            

0001DF5A 0000                       PLC_MZ2:	dc.w ((PLC_MZ2end-PLC_MZ2-2)/6)-1
0001DF5C 0000 0000 A260             		plcm	Nem_MzSwitch, $A260	; switch
0001DF62 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0001DF68 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0001DF6E 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0001DF74 0000 0000 5700             		plcm	Nem_MzBlock, $5700	; green	stone block
0001DF7A                            	PLC_MZ2end:
0001DF7A                            ; ---------------------------------------------------------------------------
0001DF7A                            ; Pattern load cues - Star Light
0001DF7A                            ; ---------------------------------------------------------------------------
0001DF7A 0000                       PLC_SLZ:	dc.w ((PLC_SLZ2-PLC_SLZ-2)/6)-1
0001DF7C 0000 0000 0000             		plcm	Nem_SLZ,0		; SLZ main patterns
0001DF82 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
0001DF88 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
0001DF8E 0000 0000 9000             		plcm	Nem_MzFire, $9000	; fireballs
0001DF94 0000 0000 9C00             		plcm	Nem_SlzBlock, $9C00	; block
0001DF9A 0000 0000 A260             		plcm	Nem_SlzWall, $A260	; breakable wall
0001DFA0 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0001DFA6 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0001DFAC 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0001DFB2                            

0001DFB2 0000                       PLC_SLZ2:	dc.w ((PLC_SLZ2end-PLC_SLZ2-2)/6)-1
0001DFB4 0000 0000 6E80             		plcm	Nem_Seesaw, $6E80	; seesaw
0001DFBA 0000 0000 7400             		plcm	Nem_Fan, $7400		; fan
0001DFC0 0000 0000 7980             		plcm	Nem_Pylon, $7980	; foreground pylon
0001DFC6 0000 0000 7B80             		plcm	Nem_SlzSwing, $7B80	; swinging platform
0001DFCC 0000 0000 9B00             		plcm	Nem_SlzCannon, $9B00	; fireball launcher
0001DFD2 0000 0000 9E00             		plcm	Nem_SlzSpike, $9E00	; spikeball
0001DFD8                            	PLC_SLZ2end:
0001DFD8                            ; ---------------------------------------------------------------------------
0001DFD8                            ; Pattern load cues - Spring Yard
0001DFD8                            ; ---------------------------------------------------------------------------
0001DFD8 0000                       PLC_SYZ:	dc.w ((PLC_SYZ2-PLC_SYZ-2)/6)-1
0001DFDA 0000 0000 0000             		plcm	Nem_SYZ,0		; SYZ main patterns
0001DFE0 0000 0000 8000             		plcm	Nem_Crabmeat, $8000	; crabmeat enemy
0001DFE6 0000 0000 8880             		plcm	Nem_Buzz, $8880		; buzz bomber enemy
0001DFEC 0000 0000 8F60             		plcm	Nem_Yadrin, $8F60	; yadrin enemy
0001DFF2 0000 0000 9700             		plcm	Nem_Roller, $9700	; roller enemy
0001DFF8                            

0001DFF8 0000                       PLC_SYZ2:	dc.w ((PLC_SYZ2end-PLC_SYZ2-2)/6)-1
0001DFFA 0000 0000 7000             		plcm	Nem_Bumper, $7000	; bumper
0001E000 0000 0000 72C0             		plcm	Nem_SyzSpike1, $72C0	; large	spikeball
0001E006 0000 0000 7740             		plcm	Nem_SyzSpike2, $7740	; small	spikeball
0001E00C 0000 0000 9FE0             		plcm	Nem_Cater, $9FE0	; caterkiller enemy
0001E012 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
0001E018 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0001E01E 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0001E024 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0001E02A                            	PLC_SYZ2end:
0001E02A                            ; ---------------------------------------------------------------------------
0001E02A                            ; Pattern load cues - Scrap Brain
0001E02A                            ; ---------------------------------------------------------------------------
0001E02A 0000                       PLC_SBZ:	dc.w ((PLC_SBZ2-PLC_SBZ-2)/6)-1
0001E02C 0000 0000 0000             		plcm	Nem_SBZ,0		; SBZ main patterns
0001E032 0000 0000 5800             		plcm	Nem_Stomper, $5800	; moving platform and stomper
0001E038 0000 0000 5D00             		plcm	Nem_SbzDoor1, $5D00	; door
0001E03E 0000 0000 5E00             		plcm	Nem_Girder, $5E00	; girder
0001E044 0000 0000 6040             		plcm	Nem_BallHog, $6040	; ball hog enemy
0001E04A 0000 0000 6880             		plcm	Nem_SbzWheel1, $6880	; spot on large	wheel
0001E050 0000 0000 6900             		plcm	Nem_SbzWheel2, $6900	; wheel	that grabs Sonic
0001E056 0000 0000 7220             		plcm	Nem_SyzSpike1, $7220	; large	spikeball
0001E05C 0000 0000 76A0             		plcm	Nem_Cutter, $76A0	; pizza	cutter
0001E062 0000 0000 7B20             		plcm	Nem_FlamePipe, $7B20	; flaming pipe
0001E068 0000 0000 7EA0             		plcm	Nem_SbzFloor, $7EA0	; collapsing floor
0001E06E 0000 0000 9860             		plcm	Nem_SbzBlock, $9860	; vanishing block
0001E074                            

0001E074 0000                       PLC_SBZ2:	dc.w ((PLC_SBZ2end-PLC_SBZ2-2)/6)-1
0001E076 0000 0000 5600             		plcm	Nem_Cater, $5600	; caterkiller enemy
0001E07C 0000 0000 8000             		plcm	Nem_Bomb, $8000		; bomb enemy
0001E082 0000 0000 8520             		plcm	Nem_Orbinaut, $8520	; orbinaut enemy
0001E088 0000 0000 8C00             		plcm	Nem_SlideFloor, $8C00	; floor	that slides away
0001E08E 0000 0000 8DE0             		plcm	Nem_SbzDoor2, $8DE0	; horizontal door
0001E094 0000 0000 8FC0             		plcm	Nem_Electric, $8FC0	; electric orb
0001E09A 0000 0000 9240             		plcm	Nem_TrapDoor, $9240	; trapdoor
0001E0A0 0000 0000 7F20             		plcm	Nem_SbzFloor, $7F20	; collapsing floor
0001E0A6 0000 0000 9BE0             		plcm	Nem_SpinPform, $9BE0	; small	spinning platform
0001E0AC 0000 0000 A1E0             		plcm	Nem_LzSwitch, $A1E0	; switch
0001E0B2 0000 0000 A360             		plcm	Nem_Spikes, $A360	; spikes
0001E0B8 0000 0000 A460             		plcm	Nem_HSpring, $A460	; horizontal spring
0001E0BE 0000 0000 A660             		plcm	Nem_VSpring, $A660	; vertical spring
0001E0C4                            	PLC_SBZ2end:
0001E0C4                            ; ---------------------------------------------------------------------------
0001E0C4                            ; Pattern load cues - title card
0001E0C4                            ; ---------------------------------------------------------------------------
0001E0C4 0000                       PLC_TitleCard:	dc.w ((PLC_TitleCardend-PLC_TitleCard-2)/6)-1
0001E0C6 0000 0000 B000             		plcm	Nem_TitleCard, $B000
0001E0CC                            	PLC_TitleCardend:
0001E0CC                            ; ---------------------------------------------------------------------------
0001E0CC                            ; Pattern load cues - act 3 boss
0001E0CC                            ; ---------------------------------------------------------------------------
0001E0CC 0000                       PLC_Boss:	dc.w ((PLC_Bossend-PLC_Boss-2)/6)-1
0001E0CE 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
0001E0D4 0000 0000 8D80             		plcm	Nem_Weapons, $8D80	; Eggman's weapons
0001E0DA 0000 0000 93A0             		plcm	Nem_Prison, $93A0	; prison capsule
0001E0E0 0000 0000 A300             		plcm	Nem_Bomb, $A300		; bomb enemy ((gets overwritten)
0001E0E6 0000 0000 A300             		plcm	Nem_SlzSpike, $A300	; spikeball ((SLZ boss)
0001E0EC 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
0001E0F2                            	PLC_Bossend:
0001E0F2                            ; ---------------------------------------------------------------------------
0001E0F2                            ; Pattern load cues - act 1/2 signpost
0001E0F2                            ; ---------------------------------------------------------------------------
0001E0F2 0000                       PLC_Signpost:	dc.w ((PLC_Signpostend-PLC_Signpost-2)/6)-1
0001E0F4 0000 0000 D000             		plcm	Nem_SignPost, $D000	; signpost
0001E0FA 0000 0000 96C0             		plcm	Nem_Bonus, $96C0	; hidden bonus points
0001E100 0000 0000 8C40             		plcm	Nem_BigFlash, $8C40	; giant	ring flash effect
0001E106                            	PLC_Signpostend:
0001E106                            ; ---------------------------------------------------------------------------
0001E106                            ; Pattern load cues - beta special stage warp effect
0001E106                            ; ---------------------------------------------------------------------------
0001E106                            PLC_Warp:
0001E106                            	PLC_Warpend:
0001E106                            ; ---------------------------------------------------------------------------
0001E106                            ; Pattern load cues - special stage
0001E106                            ; ---------------------------------------------------------------------------
0001E106 0000                       PLC_SpecialStage:	dc.w ((PLC_SpeStageend-PLC_SpecialStage-2)/6)-1
0001E108 0000 0000 0000             		plcm	Nem_SSBgCloud, 0	; bubble and cloud background
0001E10E 0000 0000 0A20             		plcm	Nem_SSBgFish, $A20	; bird and fish	background
0001E114 0000 0000 2840             		plcm	Nem_SSWalls, $2840	; walls
0001E11A 0000 0000 4760             		plcm	Nem_Bumper, $4760	; bumper
0001E120 0000 0000 4A20             		plcm	Nem_SSGOAL, $4A20	; GOAL block
0001E126 0000 0000 4C60             		plcm	Nem_SSUpDown, $4C60	; UP and DOWN blocks
0001E12C 0000 0000 5E00             		plcm	Nem_SSRBlock, $5E00	; R block
0001E132 0000 0000 6E00             		plcm	Nem_SS1UpBlock, $6E00	; 1UP block
0001E138 0000 0000 7E00             		plcm	Nem_SSEmStars, $7E00	; emerald collection stars
0001E13E 0000 0000 8E00             		plcm	Nem_SSRedWhite, $8E00	; red and white	block
0001E144 0000 0000 9E00             		plcm	Nem_SSGhost, $9E00	; ghost	block
0001E14A 0000 0000 AE00             		plcm	Nem_SSWBlock, $AE00	; W block
0001E150 0000 0000 BE00             		plcm	Nem_SSGlass, $BE00	; glass	block
0001E156 0000 0000 EE00             		plcm	Nem_SSEmerald, $EE00	; emeralds
0001E15C 0000 0000 F2E0             		plcm	Nem_SSZone1, $F2E0	; ZONE 1 block
0001E162 0000 0000 F400             		plcm	Nem_SSZone2, $F400	; ZONE 2 block
0001E168 0000 0000 F520             		plcm	Nem_SSZone3, $F520	; ZONE 3 block
0001E16E                            	PLC_SpeStageend:
0001E16E 0000 0000 F2E0             		plcm	Nem_SSZone4, $F2E0	; ZONE 4 block
0001E174 0000 0000 F400             		plcm	Nem_SSZone5, $F400	; ZONE 5 block
0001E17A 0000 0000 F520             		plcm	Nem_SSZone6, $F520	; ZONE 6 block
0001E180                            ; ---------------------------------------------------------------------------
0001E180                            ; Pattern load cues - GHZ animals
0001E180                            ; ---------------------------------------------------------------------------
0001E180 0000                       PLC_GHZAnimals:	dc.w ((PLC_GHZAnimalsend-PLC_GHZAnimals-2)/6)-1
0001E182 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
0001E188 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
0001E18E                            	PLC_GHZAnimalsend:
0001E18E                            ; ---------------------------------------------------------------------------
0001E18E                            ; Pattern load cues - LZ animals
0001E18E                            ; ---------------------------------------------------------------------------
0001E18E 0000                       PLC_LZAnimals:	dc.w ((PLC_LZAnimalsend-PLC_LZAnimals-2)/6)-1
0001E190 0000 0000 B000             		plcm	Nem_Penguin, $B000	; penguin
0001E196 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
0001E19C                            	PLC_LZAnimalsend:
0001E19C                            ; ---------------------------------------------------------------------------
0001E19C                            ; Pattern load cues - MZ animals
0001E19C                            ; ---------------------------------------------------------------------------
0001E19C 0000                       PLC_MZAnimals:	dc.w ((PLC_MZAnimalsend-PLC_MZAnimals-2)/6)-1
0001E19E 0000 0000 B000             		plcm	Nem_Squirrel, $B000	; squirrel
0001E1A4 0000 0000 B240             		plcm	Nem_Seal, $B240		; seal
0001E1AA                            	PLC_MZAnimalsend:
0001E1AA                            ; ---------------------------------------------------------------------------
0001E1AA                            ; Pattern load cues - SLZ animals
0001E1AA                            ; ---------------------------------------------------------------------------
0001E1AA 0000                       PLC_SLZAnimals:	dc.w ((PLC_SLZAnimalsend-PLC_SLZAnimals-2)/6)-1
0001E1AC 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
0001E1B2 0000 0000 B240             		plcm	Nem_Flicky, $B240	; flicky
0001E1B8                            	PLC_SLZAnimalsend:
0001E1B8                            ; ---------------------------------------------------------------------------
0001E1B8                            ; Pattern load cues - SYZ animals
0001E1B8                            ; ---------------------------------------------------------------------------
0001E1B8 0000                       PLC_SYZAnimals:	dc.w ((PLC_SYZAnimalsend-PLC_SYZAnimals-2)/6)-1
0001E1BA 0000 0000 B000             		plcm	Nem_Pig, $B000		; pig
0001E1C0 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
0001E1C6                            	PLC_SYZAnimalsend:
0001E1C6                            ; ---------------------------------------------------------------------------
0001E1C6                            ; Pattern load cues - SBZ animals
0001E1C6                            ; ---------------------------------------------------------------------------
0001E1C6 0000                       PLC_SBZAnimals:	dc.w ((PLC_SBZAnimalsend-PLC_SBZAnimals-2)/6)-1
0001E1C8 0000 0000 B000             		plcm	Nem_Rabbit, $B000	; rabbit
0001E1CE 0000 0000 B240             		plcm	Nem_Chicken, $B240	; chicken
0001E1D4                            	PLC_SBZAnimalsend:
0001E1D4                            ; ---------------------------------------------------------------------------
0001E1D4                            ; Pattern load cues - special stage results screen
0001E1D4                            ; ---------------------------------------------------------------------------
0001E1D4 0000                       PLC_SSResult: dc.w ((PLC_SpeStResultend-PLC_SSResult-2)/6)-1
0001E1D6 0000 0000 A820             		plcm	Nem_ResultEm, $A820	; emeralds
0001E1DC 0000 0000 AA20             		plcm	Nem_MiniSonic, $AA20	; mini Sonic
0001E1E2                            	PLC_SpeStResultend:
0001E1E2                            ; ---------------------------------------------------------------------------
0001E1E2                            ; Pattern load cues - ending sequence
0001E1E2                            ; ---------------------------------------------------------------------------
0001E1E2 0000                       PLC_Ending:	dc.w ((PLC_Endingend-PLC_Ending-2)/6)-1
0001E1E4 0000 0000 0000             		plcm	Nem_GHZ_1st,0		; GHZ main patterns
0001E1EA 0000 0000 39A0             		plcm	Nem_GHZ_2nd, $39A0	; GHZ secondary	patterns
0001E1F0 0000 0000 6B00             		plcm	Nem_Stalk, $6B00	; flower stalk
0001E1F6 0000 0000 7400             		plcm	Nem_EndFlower, $7400	; flowers
0001E1FC 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
0001E202 0000 0000 7C20             		plcm	Nem_EndSonic, $7C20	; Sonic
0001E208 0000 0000 AA60             		plcm	Nem_Rabbit, $AA60	; rabbit
0001E20E 0000 0000 ACA0             		plcm	Nem_Chicken, $ACA0	; chicken
0001E214 0000 0000 AE60             		plcm	Nem_Penguin, $AE60	; penguin
0001E21A 0000 0000 B0A0             		plcm	Nem_Seal, $B0A0		; seal
0001E220 0000 0000 B260             		plcm	Nem_Pig, $B260		; pig
0001E226 0000 0000 B4A0             		plcm	Nem_Flicky, $B4A0	; flicky
0001E22C 0000 0000 B660             		plcm	Nem_Squirrel, $B660	; squirrel
0001E232 0000 0000 B8A0             		plcm	Nem_EndStH, $B8A0	; "SONIC THE HEDGEHOG"
0001E238                            	PLC_Endingend:
0001E238                            ; ---------------------------------------------------------------------------
0001E238                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E238                            ; ---------------------------------------------------------------------------
0001E238 0000                       PLC_TryAgain:	dc.w ((PLC_TryAgainend-PLC_TryAgain-2)/6)-1
0001E23A 0000 0000 78A0             		plcm	Nem_EndEm, $78A0	; emeralds
0001E240 0000 0000 7C20             		plcm	Nem_TryAgain, $7C20	; Eggman
0001E246 0000 0000 B400             		plcm	Nem_CreditText, $B400	; credits alphabet
0001E24C                            	PLC_TryAgainend:
0001E24C                            ; ---------------------------------------------------------------------------
0001E24C                            ; Pattern load cues - Eggman on SBZ 2
0001E24C                            ; ---------------------------------------------------------------------------
0001E24C 0000                       PLC_EggmanSBZ2:	dc.w ((PLC_EggmanSBZ2end-PLC_EggmanSBZ2-2)/6)-1
0001E24E 0000 0000 A300             		plcm	Nem_SbzBlock, $A300	; block
0001E254 0000 0000 8000             		plcm	Nem_Sbz2Eggman, $8000	; Eggman
0001E25A 0000 0000 9400             		plcm	Nem_LzSwitch, $9400	; switch
0001E260                            	PLC_EggmanSBZ2end:
0001E260                            ; ---------------------------------------------------------------------------
0001E260                            ; Pattern load cues - final boss
0001E260                            ; ---------------------------------------------------------------------------
0001E260 0000                       PLC_FZBoss:	dc.w ((PLC_FZBossend-PLC_FZBoss-2)/6)-1
0001E262 0000 0000 7400             		plcm	Nem_FzEggman, $7400	; Eggman after boss
0001E268 0000 0000 6000             		plcm	Nem_FzBoss, $6000	; FZ boss
0001E26E 0000 0000 8000             		plcm	Nem_Eggman, $8000	; Eggman main patterns
0001E274 0000 0000 8E00             		plcm	Nem_Sbz2Eggman, $8E00	; Eggman without ship
0001E27A 0000 0000 A540             		plcm	Nem_Exhaust, $A540	; exhaust flame
0001E280                            	PLC_FZBossend:
0001E280                            		even
0001E280                            

0001E280                            ; ---------------------------------------------------------------------------
0001E280                            ; Pattern load cue IDs
0001E280                            ; ---------------------------------------------------------------------------
0001E280 =00000000                  plcid_Main:		equ (ptr_PLC_Main-ArtLoadCues)/2	; 0
0001E280 =00000001                  plcid_Main2:		equ (ptr_PLC_Main2-ArtLoadCues)/2	; 1
0001E280 =00000002                  plcid_Explode:		equ (ptr_PLC_Explode-ArtLoadCues)/2	; 2
0001E280 =00000003                  plcid_GameOver:		equ (ptr_PLC_GameOver-ArtLoadCues)/2	; 3
0001E280 =00000004                  plcid_GHZ:		equ (ptr_PLC_GHZ-ArtLoadCues)/2		; 4
0001E280 =00000005                  plcid_GHZ2:		equ (ptr_PLC_GHZ2-ArtLoadCues)/2	; 5
0001E280 =00000006                  plcid_LZ:		equ (ptr_PLC_LZ-ArtLoadCues)/2		; 6
0001E280 =00000007                  plcid_LZ2:		equ (ptr_PLC_LZ2-ArtLoadCues)/2		; 7
0001E280 =00000008                  plcid_MZ:		equ (ptr_PLC_MZ-ArtLoadCues)/2		; 8
0001E280 =00000009                  plcid_MZ2:		equ (ptr_PLC_MZ2-ArtLoadCues)/2		; 9
0001E280 =0000000A                  plcid_SLZ:		equ (ptr_PLC_SLZ-ArtLoadCues)/2		; $A
0001E280 =0000000B                  plcid_SLZ2:		equ (ptr_PLC_SLZ2-ArtLoadCues)/2	; $B
0001E280 =0000000C                  plcid_SYZ:		equ (ptr_PLC_SYZ-ArtLoadCues)/2		; $C
0001E280 =0000000D                  plcid_SYZ2:		equ (ptr_PLC_SYZ2-ArtLoadCues)/2	; $D
0001E280 =0000000E                  plcid_SBZ:		equ (ptr_PLC_SBZ-ArtLoadCues)/2		; $E
0001E280 =0000000F                  plcid_SBZ2:		equ (ptr_PLC_SBZ2-ArtLoadCues)/2	; $F
0001E280 =00000010                  plcid_TitleCard:	equ (ptr_PLC_TitleCard-ArtLoadCues)/2	; $10
0001E280 =00000011                  plcid_Boss:		equ (ptr_PLC_Boss-ArtLoadCues)/2	; $11
0001E280 =00000012                  plcid_Signpost:		equ (ptr_PLC_Signpost-ArtLoadCues)/2	; $12
0001E280 =00000013                  plcid_Warp:		equ (ptr_PLC_Warp-ArtLoadCues)/2	; $13
0001E280 =00000014                  plcid_SpecialStage:	equ (ptr_PLC_SpecialStage-ArtLoadCues)/2 ; $14
0001E280 =00000015                  plcid_GHZAnimals:	equ (ptr_PLC_GHZAnimals-ArtLoadCues)/2	; $15
0001E280 =00000016                  plcid_LZAnimals:	equ (ptr_PLC_LZAnimals-ArtLoadCues)/2	; $16
0001E280 =00000017                  plcid_MZAnimals:	equ (ptr_PLC_MZAnimals-ArtLoadCues)/2	; $17
0001E280 =00000018                  plcid_SLZAnimals:	equ (ptr_PLC_SLZAnimals-ArtLoadCues)/2	; $18
0001E280 =00000019                  plcid_SYZAnimals:	equ (ptr_PLC_SYZAnimals-ArtLoadCues)/2	; $19
0001E280 =0000001A                  plcid_SBZAnimals:	equ (ptr_PLC_SBZAnimals-ArtLoadCues)/2	; $1A
0001E280 =0000001B                  plcid_SSResult:		equ (ptr_PLC_SSResult-ArtLoadCues)/2	; $1B
0001E280 =0000001C                  plcid_Ending:		equ (ptr_PLC_Ending-ArtLoadCues)/2	; $1C
0001E280 =0000001D                  plcid_TryAgain:		equ (ptr_PLC_TryAgain-ArtLoadCues)/2	; $1D
0001E280 =0000001E                  plcid_EggmanSBZ2:	equ (ptr_PLC_EggmanSBZ2-ArtLoadCues)/2	; $1E
0001E280 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
0001E280 =0000001F                  plcid_FZBoss:		equ (ptr_PLC_FZBoss-ArtLoadCues)/2	; $1F
0001E280                            

0001E400                            			dcb.b	$300,$FF
0001E700                            	Nem_SegaLogo:	incbin	"artnem\Sega Logo (JP1).bin" ; large Sega logo
0001EB70                            			even
0001EB70                            	Eni_SegaLogo:	incbin	"tilemaps\Sega Logo (JP1).bin" ; large Sega logo (mappings)
0001EC6C                            			even
0001EC6C                            Eni_Title:	incbin	"tilemaps\Title Screen.bin" ; title screen foreground (mappings)
0001ED80                            		even
0001ED80                            Nem_TitleFg:	incbin	"artnem\Title Screen Foreground.bin"
0001FD8C                            		even
0001FD8C                            Nem_TitleSonic:	incbin	"artnem\Title Screen Sonic.bin"
0002175A                            		even
0002175A                            Nem_TitleTM:	incbin	"artnem\Title Screen TM.bin"
0002178E                            		even
0002178E                            Eni_JapNames:	incbin	"tilemaps\Hidden Japanese Credits.bin" ; Japanese credits (mappings)
0002184C                            		even
0002184C                            Nem_JapNames:	incbin	"artnem\Hidden Japanese Credits.bin"
00021CF4                            		even
00021CF4                            

00021CF4                            Map_Sonic:	include	"_maps\Sonic.asm"
00021CF4                            ; ---------------------------------------------------------------------------
00021CF4                            ; Sprite mappings - Sonic
00021CF4                            ; ---------------------------------------------------------------------------
00021CF4                            Map_Sonic_internal:
00021CF4                            

00021CF4 0000                       ptr_MS_Null:	dc.w MS_Null-Map_Sonic_internal
00021CF6 0000                       ptr_MS_Stand:	dc.w MS_Stand-Map_Sonic_internal
00021CF8 0000                       ptr_MS_Wait1:	dc.w MS_Wait1-Map_Sonic_internal
00021CFA 0000                       ptr_MS_Wait2:	dc.w MS_Wait2-Map_Sonic_internal
00021CFC 0000                       ptr_MS_Wait3:	dc.w MS_Wait3-Map_Sonic_internal
00021CFE 0000                       ptr_MS_LookUp:	dc.w MS_LookUp-Map_Sonic_internal
00021D00 0000                       ptr_MS_Walk11:	dc.w MS_Walk11-Map_Sonic_internal
00021D02 0000                       ptr_MS_Walk12:	dc.w MS_Walk12-Map_Sonic_internal
00021D04 0000                       ptr_MS_Walk13:	dc.w MS_Walk13-Map_Sonic_internal
00021D06 0000                       ptr_MS_Walk14:	dc.w MS_Walk14-Map_Sonic_internal
00021D08 0000                       ptr_MS_Walk15:	dc.w MS_Walk15-Map_Sonic_internal
00021D0A 0000                       ptr_MS_Walk16:	dc.w MS_Walk16-Map_Sonic_internal
00021D0C 0000                       ptr_MS_Walk21:	dc.w MS_Walk21-Map_Sonic_internal
00021D0E 0000                       ptr_MS_Walk22:	dc.w MS_Walk22-Map_Sonic_internal
00021D10 0000                       ptr_MS_Walk23:	dc.w MS_Walk23-Map_Sonic_internal
00021D12 0000                       ptr_MS_Walk24:	dc.w MS_Walk24-Map_Sonic_internal
00021D14 0000                       ptr_MS_Walk25:	dc.w MS_Walk25-Map_Sonic_internal
00021D16 0000                       ptr_MS_Walk26:	dc.w MS_Walk26-Map_Sonic_internal
00021D18 0000                       ptr_MS_Walk31:	dc.w MS_Walk31-Map_Sonic_internal
00021D1A 0000                       ptr_MS_Walk32:	dc.w MS_Walk32-Map_Sonic_internal
00021D1C 0000                       ptr_MS_Walk33:	dc.w MS_Walk33-Map_Sonic_internal
00021D1E 0000                       ptr_MS_Walk34:	dc.w MS_Walk34-Map_Sonic_internal
00021D20 0000                       ptr_MS_Walk35:	dc.w MS_Walk35-Map_Sonic_internal
00021D22 0000                       ptr_MS_Walk36:	dc.w MS_Walk36-Map_Sonic_internal
00021D24 0000                       ptr_MS_Walk41:	dc.w MS_Walk41-Map_Sonic_internal
00021D26 0000                       ptr_MS_Walk42:	dc.w MS_Walk42-Map_Sonic_internal
00021D28 0000                       ptr_MS_Walk43:	dc.w MS_Walk43-Map_Sonic_internal
00021D2A 0000                       ptr_MS_Walk44:	dc.w MS_Walk44-Map_Sonic_internal
00021D2C 0000                       ptr_MS_Walk45:	dc.w MS_Walk45-Map_Sonic_internal
00021D2E 0000                       ptr_MS_Walk46:	dc.w MS_Walk46-Map_Sonic_internal
00021D30 0000                       ptr_MS_Run11:	dc.w MS_Run11-Map_Sonic_internal
00021D32 0000                       ptr_MS_Run12:	dc.w MS_Run12-Map_Sonic_internal
00021D34 0000                       ptr_MS_Run13:	dc.w MS_Run13-Map_Sonic_internal
00021D36 0000                       ptr_MS_Run14:	dc.w MS_Run14-Map_Sonic_internal
00021D38 0000                       ptr_MS_Run21:	dc.w MS_Run21-Map_Sonic_internal
00021D3A 0000                       ptr_MS_Run22:	dc.w MS_Run22-Map_Sonic_internal
00021D3C 0000                       ptr_MS_Run23:	dc.w MS_Run23-Map_Sonic_internal
00021D3E 0000                       ptr_MS_Run24:	dc.w MS_Run24-Map_Sonic_internal
00021D40 0000                       ptr_MS_Run31:	dc.w MS_Run31-Map_Sonic_internal
00021D42 0000                       ptr_MS_Run32:	dc.w MS_Run32-Map_Sonic_internal
00021D44 0000                       ptr_MS_Run33:	dc.w MS_Run33-Map_Sonic_internal
00021D46 0000                       ptr_MS_Run34:	dc.w MS_Run34-Map_Sonic_internal
00021D48 0000                       ptr_MS_Run41:	dc.w MS_Run41-Map_Sonic_internal
00021D4A 0000                       ptr_MS_Run42:	dc.w MS_Run42-Map_Sonic_internal
00021D4C 0000                       ptr_MS_Run43:	dc.w MS_Run43-Map_Sonic_internal
00021D4E 0000                       ptr_MS_Run44:	dc.w MS_Run44-Map_Sonic_internal
00021D50 0000                       ptr_MS_Roll1:	dc.w MS_Roll1-Map_Sonic_internal
00021D52 0000                       ptr_MS_Roll2:	dc.w MS_Roll2-Map_Sonic_internal
00021D54 0000                       ptr_MS_Roll3:	dc.w MS_Roll3-Map_Sonic_internal
00021D56 0000                       ptr_MS_Roll4:	dc.w MS_Roll4-Map_Sonic_internal
00021D58 0000                       ptr_MS_Roll5:	dc.w MS_Roll5-Map_Sonic_internal
00021D5A 0000                       ptr_MS_Warp1:	dc.w MS_Warp1-Map_Sonic_internal
00021D5C 0000                       ptr_MS_Warp2:	dc.w MS_Warp2-Map_Sonic_internal
00021D5E 0000                       ptr_MS_Warp3:	dc.w MS_Warp3-Map_Sonic_internal
00021D60 0000                       ptr_MS_Warp4:	dc.w MS_Warp4-Map_Sonic_internal
00021D62 0000                       ptr_MS_Stop1:	dc.w MS_Stop1-Map_Sonic_internal
00021D64 0000                       ptr_MS_Stop2:	dc.w MS_Stop2-Map_Sonic_internal
00021D66 0000                       ptr_MS_Duck:	dc.w MS_Duck-Map_Sonic_internal
00021D68 0000                       ptr_MS_Balance1: dc.w MS_Balance1-Map_Sonic_internal
00021D6A 0000                       ptr_MS_Balance2: dc.w MS_Balance2-Map_Sonic_internal
00021D6C 0000                       ptr_MS_Float1:	dc.w MS_Float1-Map_Sonic_internal
00021D6E 0000                       ptr_MS_Float2:	dc.w MS_Float2-Map_Sonic_internal
00021D70 0000                       ptr_MS_Float3:	dc.w MS_Float3-Map_Sonic_internal
00021D72 0000                       ptr_MS_Float4:	dc.w MS_Float4-Map_Sonic_internal
00021D74 0000                       ptr_MS_Spring:	dc.w MS_Spring-Map_Sonic_internal
00021D76 0000                       ptr_MS_Hang1:	dc.w MS_Hang1-Map_Sonic_internal
00021D78 0000                       ptr_MS_Hang2:	dc.w MS_Hang2-Map_Sonic_internal
00021D7A 0000                       ptr_MS_Leap1:	dc.w MS_Leap1-Map_Sonic_internal
00021D7C 0000                       ptr_MS_Leap2:	dc.w MS_Leap2-Map_Sonic_internal
00021D7E 0000                       ptr_MS_Push1:	dc.w MS_Push1-Map_Sonic_internal
00021D80 0000                       ptr_MS_Push2:	dc.w MS_Push2-Map_Sonic_internal
00021D82 0000                       ptr_MS_Push3:	dc.w MS_Push3-Map_Sonic_internal
00021D84 0000                       ptr_MS_Push4:	dc.w MS_Push4-Map_Sonic_internal
00021D86 0000                       ptr_MS_Surf:	dc.w MS_Surf-Map_Sonic_internal
00021D88 0000                       ptr_MS_BubStand: dc.w MS_BubStand-Map_Sonic_internal
00021D8A 0000                       ptr_MS_Burnt:	dc.w MS_Burnt-Map_Sonic_internal
00021D8C 0000                       ptr_MS_Drown:	dc.w MS_Drown-Map_Sonic_internal
00021D8E 0000                       ptr_MS_Death:	dc.w MS_Death-Map_Sonic_internal
00021D90 0000                       ptr_MS_Shrink1:	dc.w MS_Shrink1-Map_Sonic_internal
00021D92 0000                       ptr_MS_Shrink2:	dc.w MS_Shrink2-Map_Sonic_internal
00021D94 0000                       ptr_MS_Shrink3:	dc.w MS_Shrink3-Map_Sonic_internal
00021D96 0000                       ptr_MS_Shrink4:	dc.w MS_Shrink4-Map_Sonic_internal
00021D98 0000                       ptr_MS_Shrink5:	dc.w MS_Shrink5-Map_Sonic_internal
00021D9A 0000                       ptr_MS_Float5:	dc.w MS_Float5-Map_Sonic_internal
00021D9C 0000                       ptr_MS_Float6:	dc.w MS_Float6-Map_Sonic_internal
00021D9E 0000                       ptr_MS_Injury:	dc.w MS_Injury-Map_Sonic_internal
00021DA0 0000                       ptr_MS_GetAir:	dc.w MS_GetAir-Map_Sonic_internal
00021DA2 0000                       ptr_MS_WaterSlide: dc.w MS_WaterSlide-Map_Sonic_internal
00021DA4                            

00021DA4 00                         MS_Null:	dc.b 0
00021DA5 04                         MS_Stand:	dc.b 4			; standing
00021DA6 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
00021DAB F40D 0003 F0               		dc.b $F4, $D, 0, 3, $F0
00021DB0 0408 000B F0               		dc.b 4,	8, 0, $B, $F0
00021DB5 0C08 000E F8               		dc.b $C, 8, 0, $E, $F8
00021DBA 03                         MS_Wait1:	dc.b 3			; waiting 1
00021DBB EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00021DC0 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00021DC5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021DCA 03                         MS_Wait2:	dc.b 3			; waiting 2
00021DCB EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00021DD0 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00021DD5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021DDA 03                         MS_Wait3:	dc.b 3			; waiting 3
00021DDB EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
00021DE0 FC09 0006 F0               		dc.b $FC, 9, 0,	6, $F0
00021DE5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021DEA 03                         MS_LookUp:	dc.b 3			; looking up
00021DEB EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
00021DF0 0408 0009 F0               		dc.b 4,	8, 0, 9, $F0
00021DF5 0C08 000C F8               		dc.b $C, 8, 0, $C, $F8
00021DFA 04                         MS_Walk11:	dc.b 4			; walking 1-1
00021DFB EB0D 0000 EC               		dc.b $EB, $D, 0, 0, $EC
00021E00 FB09 0008 EC               		dc.b $FB, 9, 0,	8, $EC
00021E05 FB06 000E 04               		dc.b $FB, 6, 0,	$E, 4
00021E0A 0B04 0014 EC               		dc.b $B, 4, 0, $14, $EC
00021E0F 02                         MS_Walk12:	dc.b 2			; walking 1-2
00021E10 EC0D 0000 ED               		dc.b $EC, $D, 0, 0, $ED
00021E15 FC0E 0008 F5               		dc.b $FC, $E, 0, 8, $F5
00021E1A 02                         MS_Walk13:	dc.b 2			; walking 1-3
00021E1B ED09 0000 F3               		dc.b $ED, 9, 0,	0, $F3
00021E20 FD0A 0006 F3               		dc.b $FD, $A, 0, 6, $F3
00021E25 04                         MS_Walk14:	dc.b 4			; walking 1-4
00021E26 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
00021E2B FB09 0006 EC               		dc.b $FB, 9, 0,	6, $EC
00021E30 FB06 000C 04               		dc.b $FB, 6, 0,	$C, 4
00021E35 0B04 0012 EC               		dc.b $B, 4, 0, $12, $EC
00021E3A 02                         MS_Walk15:	dc.b 2			; walking 1-5
00021E3B EC09 0000 F3               		dc.b $EC, 9, 0,	0, $F3
00021E40 FC0E 0006 EB               		dc.b $FC, $E, 0, 6, $EB
00021E45 03                         MS_Walk16:	dc.b 3			; walking 1-6
00021E46 ED0D 0000 EC               		dc.b $ED, $D, 0, 0, $EC
00021E4B FD0C 0008 F4               		dc.b $FD, $C, 0, 8, $F4
00021E50 0509 000C F4               		dc.b 5,	9, 0, $C, $F4
00021E55 05                         MS_Walk21:	dc.b 5			; walking 2-1
00021E56 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00021E5B EB06 0006 03               		dc.b $EB, 6, 0,	6, 3
00021E60 FB08 000C EB               		dc.b $FB, 8, 0,	$C, $EB
00021E65 0309 000F F3               		dc.b 3,	9, 0, $F, $F3
00021E6A 1300 0015 FB               		dc.b $13, 0, 0,	$15, $FB
00021E6F 06                         MS_Walk22:	dc.b 6			; walking 2-2
00021E70 EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00021E75 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00021E7A FC0C 0008 EC               		dc.b $FC, $C, 0, 8, $EC
00021E7F 0409 000C F4               		dc.b 4,	9, 0, $C, $F4
00021E84 FC05 0012 0C               		dc.b $FC, 5, 0,	$12, $C
00021E89 F400 0016 14               		dc.b $F4, 0, 0,	$16, $14
00021E8E 04                         MS_Walk23:	dc.b 4			; walking 2-3
00021E8F ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00021E94 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00021E99 FD0D 0008 F5               		dc.b $FD, $D, 0, 8, $F5
00021E9E 0D08 0010 FD               		dc.b $D, 8, 0, $10, $FD
00021EA3 05                         MS_Walk24:	dc.b 5			; walking 2-4
00021EA4 EB09 0000 EB               		dc.b $EB, 9, 0,	0, $EB
00021EA9 EB05 0006 03               		dc.b $EB, 5, 0,	6, 3
00021EAE FB0D 000A F3               		dc.b $FB, $D, 0, $A, $F3
00021EB3 0B08 0012 F3               		dc.b $B, 8, 0, $12, $F3
00021EB8 1304 0015 FB               		dc.b $13, 4, 0,	$15, $FB
00021EBD 04                         MS_Walk25:	dc.b 4			; walking 2-5
00021EBE EC09 0000 EC               		dc.b $EC, 9, 0,	0, $EC
00021EC3 EC01 0006 04               		dc.b $EC, 1, 0,	6, 4
00021EC8 FC0D 0008 F4               		dc.b $FC, $D, 0, 8, $F4
00021ECD 0C08 0010 FC               		dc.b $C, 8, 0, $10, $FC
00021ED2 05                         MS_Walk26:	dc.b 5			; walking 2-6
00021ED3 ED09 0000 ED               		dc.b $ED, 9, 0,	0, $ED
00021ED8 ED01 0006 05               		dc.b $ED, 1, 0,	6, 5
00021EDD FD00 0008 ED               		dc.b $FD, 0, 0,	8, $ED
00021EE2 FD0D 0009 F5               		dc.b $FD, $D, 0, 9, $F5
00021EE7 0D08 0011 FD               		dc.b $D, 8, 0, $11, $FD
00021EEC 04                         MS_Walk31:	dc.b 4			; walking 3-1
00021EED F407 0000 EB               		dc.b $F4, 7, 0,	0, $EB
00021EF2 EC09 0008 FB               		dc.b $EC, 9, 0,	8, $FB
00021EF7 FC04 000E FB               		dc.b $FC, 4, 0,	$E, $FB
00021EFC 0409 0010 FB               		dc.b 4,	9, 0, $10, $FB
00021F01 02                         MS_Walk32:	dc.b 2			; walking 3-2
00021F02 F407 0000 EC               		dc.b $F4, 7, 0,	0, $EC
00021F07 EC0B 0008 FC               		dc.b $EC, $B, 0, 8, $FC
00021F0C 02                         MS_Walk33:	dc.b 2			; walking 3-3
00021F0D F406 0000 ED               		dc.b $F4, 6, 0,	0, $ED
00021F12 F40A 0006 FD               		dc.b $F4, $A, 0, 6, $FD
00021F17 04                         MS_Walk34:	dc.b 4			; walking 3-4
00021F18 F406 0000 EB               		dc.b $F4, 6, 0,	0, $EB
00021F1D EC09 0006 FB               		dc.b $EC, 9, 0,	6, $FB
00021F22 FC04 000C FB               		dc.b $FC, 4, 0,	$C, $FB
00021F27 0409 000E FB               		dc.b 4,	9, 0, $E, $FB
00021F2C 02                         MS_Walk35:	dc.b 2			; walking 3-5
00021F2D F406 0000 EC               		dc.b $F4, 6, 0,	0, $EC
00021F32 F40B 0006 FC               		dc.b $F4, $B, 0, 6, $FC
00021F37 03                         MS_Walk36:	dc.b 3			; walking 3-6
00021F38 F407 0000 ED               		dc.b $F4, 7, 0,	0, $ED
00021F3D EC00 0008 FD               		dc.b $EC, 0, 0,	8, $FD
00021F42 F40A 0009 FD               		dc.b $F4, $A, 0, 9, $FD
00021F47 06                         MS_Walk41:	dc.b 6			; walking 4-1
00021F48 FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00021F4D ED04 0006 F3               		dc.b $ED, 4, 0,	6, $F3
00021F52 F504 0008 EB               		dc.b $F5, 4, 0,	8, $EB
00021F57 F50A 000A FB               		dc.b $F5, $A, 0, $A, $FB
00021F5C 0D00 0013 FB               		dc.b $D, 0, 0, $13, $FB
00021F61 FD00 0014 13               		dc.b $FD, 0, 0,	$14, $13
00021F66 06                         MS_Walk42:	dc.b 6			; walking 4-2
00021F67 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00021F6C E408 0006 F4               		dc.b $E4, 8, 0,	6, $F4
00021F71 EC04 0009 FC               		dc.b $EC, 4, 0,	9, $FC
00021F76 F404 000B EC               		dc.b $F4, 4, 0,	$B, $EC
00021F7B F40A 000D FC               		dc.b $F4, $A, 0, $D, $FC
00021F80 0C00 0016 FC               		dc.b $C, 0, 0, $16, $FC
00021F85 04                         MS_Walk43:	dc.b 4			; walking 4-3
00021F86 FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00021F8B F304 0006 ED               		dc.b $F3, 4, 0,	6, $ED
00021F90 EB0A 0008 FD               		dc.b $EB, $A, 0, 8, $FD
00021F95 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00021F9A 05                         MS_Walk44:	dc.b 5			; walking 4-4
00021F9B FD06 0000 EB               		dc.b $FD, 6, 0,	0, $EB
00021FA0 ED08 0006 F3               		dc.b $ED, 8, 0,	6, $F3
00021FA5 F504 0009 EB               		dc.b $F5, 4, 0,	9, $EB
00021FAA F50D 000B FB               		dc.b $F5, $D, 0, $B, $FB
00021FAF 0508 0013 FB               		dc.b 5,	8, 0, $13, $FB
00021FB4 04                         MS_Walk45:	dc.b 4			; walking 4-5
00021FB5 FC06 0000 EC               		dc.b $FC, 6, 0,	0, $EC
00021FBA F404 0006 EC               		dc.b $F4, 4, 0,	6, $EC
00021FBF EC0A 0008 FC               		dc.b $EC, $A, 0, 8, $FC
00021FC4 0404 0011 FC               		dc.b 4,	4, 0, $11, $FC
00021FC9 05                         MS_Walk46:	dc.b 5			; walking 4-6
00021FCA FB06 0000 ED               		dc.b $FB, 6, 0,	0, $ED
00021FCF EB0A 0006 FD               		dc.b $EB, $A, 0, 6, $FD
00021FD4 F304 000F ED               		dc.b $F3, 4, 0,	$F, $ED
00021FD9 0304 0011 FD               		dc.b 3,	4, 0, $11, $FD
00021FDE 0B00 0013 FD               		dc.b $B, 0, 0, $13, $FD
00021FE3 02                         MS_Run11:	dc.b 2			; running 1-1
00021FE4 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00021FE9 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00021FEE 02                         MS_Run12:	dc.b 2			; running 1-2
00021FEF EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00021FF4 FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00021FF9 02                         MS_Run13:	dc.b 2			; running 1-3
00021FFA EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
00021FFF FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
00022004 02                         MS_Run14:	dc.b 2			; running 1-4
00022005 EE09 0000 F4               		dc.b $EE, 9, 0,	0, $F4
0002200A FE0E 0006 EC               		dc.b $FE, $E, 0, 6, $EC
0002200F 04                         MS_Run21:	dc.b 4			; running 2-1
00022010 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
00022015 EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
0002201A FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
0002201F FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00022024 03                         MS_Run22:	dc.b 3			; running 2-2
00022025 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002202A EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
0002202F FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00022034 04                         MS_Run23:	dc.b 4			; running 2-3
00022035 EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002203A EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
0002203F FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00022044 FE00 0014 EE               		dc.b $FE, 0, 0,	$14, $EE
00022049 03                         MS_Run24:	dc.b 3			; running 2-4
0002204A EE09 0000 EE               		dc.b $EE, 9, 0,	0, $EE
0002204F EE01 0006 06               		dc.b $EE, 1, 0,	6, 6
00022054 FE0E 0008 F6               		dc.b $FE, $E, 0, 8, $F6
00022059 02                         MS_Run31:	dc.b 2			; running 3-1
0002205A F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
0002205F F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00022064 02                         MS_Run32:	dc.b 2			; running 3-2
00022065 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
0002206A F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
0002206F 02                         MS_Run33:	dc.b 2			; running 3-3
00022070 F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00022075 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
0002207A 02                         MS_Run34:	dc.b 2			; running 3-4
0002207B F406 0000 EE               		dc.b $F4, 6, 0,	0, $EE
00022080 F40B 0006 FE               		dc.b $F4, $B, 0, 6, $FE
00022085 04                         MS_Run41:	dc.b 4			; running 4-1
00022086 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
0002208B F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
00022090 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
00022095 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
0002209A 02                         MS_Run42:	dc.b 2			; running 4-2
0002209B F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
000220A0 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000220A5 04                         MS_Run43:	dc.b 4			; running 4-3
000220A6 FA06 0000 EE               		dc.b $FA, 6, 0,	0, $EE
000220AB F204 0006 EE               		dc.b $F2, 4, 0,	6, $EE
000220B0 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000220B5 0A00 0014 FE               		dc.b $A, 0, 0, $14, $FE
000220BA 02                         MS_Run44:	dc.b 2			; running 4-4
000220BB F207 0000 EE               		dc.b $F2, 7, 0,	0, $EE
000220C0 EA0B 0008 FE               		dc.b $EA, $B, 0, 8, $FE
000220C5 01                         MS_Roll1:	dc.b 1			; rolling 1
000220C6 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000220CB 01                         MS_Roll2:	dc.b 1			; rolling 2
000220CC F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000220D1 01                         MS_Roll3:	dc.b 1			; rolling 3
000220D2 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000220D7 01                         MS_Roll4:	dc.b 1			; rolling 4
000220D8 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000220DD 01                         MS_Roll5:	dc.b 1			; rolling 5
000220DE F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000220E3 02                         MS_Warp1:	dc.b 2			; warped 1 (unused)
000220E4 F40E 0000 EC               		dc.b $F4, $E, 0, 0, $EC
000220E9 F402 000C 0C               		dc.b $F4, 2, 0,	$C, $C
000220EE 01                         MS_Warp2:	dc.b 1			; warped 2 (unused)
000220EF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000220F4 02                         MS_Warp3:	dc.b 2			; warped 3 (unused)
000220F5 EC0B 0000 F4               		dc.b $EC, $B, 0, 0, $F4
000220FA 0C08 000C F4               		dc.b $C, 8, 0, $C, $F4
000220FF 01                         MS_Warp4:	dc.b 1			; warped 4 (unused)
00022100 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00022105 02                         MS_Stop1:	dc.b 2			; stopping 1
00022106 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
0002210B FD0E 0006 F0               		dc.b $FD, $E, 0, 6, $F0
00022110 04                         MS_Stop2:	dc.b 4			; stopping 2
00022111 ED09 0000 F0               		dc.b $ED, 9, 0,	0, $F0
00022116 FD0D 0006 F0               		dc.b $FD, $D, 0, 6, $F0
0002211B 0D04 000E 00               		dc.b $D, 4, 0, $E, 0
00022120 0500 0010 E8               		dc.b 5,	0, 0, $10, $E8
00022125 04                         MS_Duck:	dc.b 4			; ducking
00022126 F404 0000 FC               		dc.b $F4, 4, 0,	0, $FC
0002212B FC0D 0002 F4               		dc.b $FC, $D, 0, 2, $F4
00022130 0C08 000A F4               		dc.b $C, 8, 0, $A, $F4
00022135 0400 000D EC               		dc.b 4,	0, 0, $D, $EC
0002213A 03                         MS_Balance1:	dc.b 3			; balancing 1
0002213B EC08 0800 E8               		dc.b $EC, 8, 8,	0, $E8
00022140 F402 0803 00               		dc.b $F4, 2, 8,	3, 0
00022145 F40F 0806 E0               		dc.b $F4, $F, 8, 6, $E0
0002214A 03                         MS_Balance2:	dc.b 3			; balancing 2
0002214B EC0E 0800 E8               		dc.b $EC, $E, 8, 0, $E8
00022150 040D 080C E0               		dc.b 4,	$D, 8, $C, $E0
00022155 0C00 1814 00               		dc.b $C, 0, $18, $14, 0
0002215A 03                         MS_Float1:	dc.b 3			; spinning 1 (LZ)
0002215B F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
00022160 FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00022165 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
0002216A 02                         MS_Float2:	dc.b 2			; spinning 2 (LZ)
0002216B F40A 0000 E8               		dc.b $F4, $A, 0, 0, $E8
00022170 F40A 0800 00               		dc.b $F4, $A, 8, 0, 0
00022175 03                         MS_Float3:	dc.b 3			; spinning 3 (LZ)
00022176 F40D 0000 E4               		dc.b $F4, $D, 0, 0, $E4
0002217B FC00 0008 04               		dc.b $FC, 0, 0,	8, 4
00022180 040C 0009 EC               		dc.b 4,	$C, 0, 9, $EC
00022185 03                         MS_Float4:	dc.b 3			; spinning 4 (LZ)
00022186 F40D 0000 FC               		dc.b $F4, $D, 0, 0, $FC
0002218B FC05 0008 EC               		dc.b $FC, 5, 0,	8, $EC
00022190 0408 000C FC               		dc.b 4,	8, 0, $C, $FC
00022195 03                         MS_Spring:	dc.b 3			; bouncing on a spring
00022196 E80B 0000 F0               		dc.b $E8, $B, 0, 0, $F0
0002219B 0804 000C F8               		dc.b 8,	4, 0, $C, $F8
000221A0 1000 000E F8               		dc.b $10, 0, 0,	$E, $F8
000221A5 04                         MS_Hang1:	dc.b 4			; hanging 1 (LZ)
000221A6 F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
000221AB 0005 000C 08               		dc.b 0,	5, 0, $C, 8
000221B0 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
000221B5 F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
000221BA 04                         MS_Hang2:	dc.b 4			; hanging 2 (LZ)
000221BB F80E 0000 E8               		dc.b $F8, $E, 0, 0, $E8
000221C0 0005 000C 08               		dc.b 0,	5, 0, $C, 8
000221C5 F800 0010 08               		dc.b $F8, 0, 0,	$10, 8
000221CA F000 0011 F8               		dc.b $F0, 0, 0,	$11, $F8
000221CF 05                         MS_Leap1:	dc.b 5			; celebration leap 1 (unused)
000221D0 E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
000221D5 F001 0009 0C               		dc.b $F0, 1, 0,	9, $C
000221DA 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
000221DF 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
000221E4 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
000221E9 05                         MS_Leap2:	dc.b 5			; celebration leap 2 (unused)
000221EA E80A 0000 F4               		dc.b $E8, $A, 0, 0, $F4
000221EF E801 0009 0C               		dc.b $E8, 1, 0,	9, $C
000221F4 0009 000B F4               		dc.b 0,	9, 0, $B, $F4
000221F9 1004 0011 F4               		dc.b $10, 4, 0,	$11, $F4
000221FE 0000 0013 EC               		dc.b 0,	0, 0, $13, $EC
00022203 02                         MS_Push1:	dc.b 2			; pushing 1
00022204 ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00022209 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
0002220E 03                         MS_Push2:	dc.b 3			; pushing 2
0002220F EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
00022214 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00022219 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
0002221E 02                         MS_Push3:	dc.b 2			; pushing 3
0002221F ED0A 0000 F3               		dc.b $ED, $A, 0, 0, $F3
00022224 050D 0009 EB               		dc.b 5,	$D, 0, 9, $EB
00022229 03                         MS_Push4:	dc.b 3			; pushing 4
0002222A EC0A 0000 F3               		dc.b $EC, $A, 0, 0, $F3
0002222F 0408 0009 F3               		dc.b 4,	8, 0, 9, $F3
00022234 0C04 000C F3               		dc.b $C, 4, 0, $C, $F3
00022239 02                         MS_Surf:	dc.b 2			; surfing or sliding (unused)
0002223A EC09 0000 F0               		dc.b $EC, 9, 0,	0, $F0
0002223F FC0E 0006 F0               		dc.b $FC, $E, 0, 6, $F0
00022244 03                         MS_BubStand:	dc.b 3			; collecting bubble (unused)
00022245 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0002224A 0405 0009 F8               		dc.b 4,	5, 0, 9, $F8
0002224F E400 000D F8               		dc.b $E4, 0, 0,	$D, $F8
00022254 03                         MS_Burnt:	dc.b 3			; grey death
00022255 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
0002225A E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
0002225F F80B 000A F4               		dc.b $F8, $B, 0, $A, $F4
00022264 05                         MS_Drown:	dc.b 5			; drowning
00022265 E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
0002226A E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
0002226F F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
00022274 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00022279 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
0002227E 05                         MS_Death:	dc.b 5			; death
0002227F E80D 0000 EC               		dc.b $E8, $D, 0, 0, $EC
00022284 E801 0008 0C               		dc.b $E8, 1, 0,	8, $C
00022289 F809 000A F4               		dc.b $F8, 9, 0,	$A, $F4
0002228E 080C 0010 F4               		dc.b 8,	$C, 0, $10, $F4
00022293 1000 0014 F4               		dc.b $10, 0, 0,	$14, $F4
00022298 02                         MS_Shrink1:	dc.b 2			; shrinking 1 (unused)
00022299 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
0002229E F40F 0003 F0               		dc.b $F4, $F, 0, 3, $F0
000222A3 03                         MS_Shrink2:	dc.b 3			; shrinking 2 (unused)
000222A4 EC08 0000 F0               		dc.b $EC, 8, 0,	0, $F0
000222A9 F40E 0003 F0               		dc.b $F4, $E, 0, 3, $F0
000222AE 0C08 000F F8               		dc.b $C, 8, 0, $F, $F8
000222B3 01                         MS_Shrink3:	dc.b 1			; shrinking 3 (unused)
000222B4 F00B 0000 F4               		dc.b $F0, $B, 0, 0, $F4
000222B9 01                         MS_Shrink4:	dc.b 1			; shrinking 4 (unused)
000222BA F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000222BF 01                         MS_Shrink5:	dc.b 1			; shrinking 5 (unused)
000222C0 F801 0000 FC               		dc.b $F8, 1, 0,	0, $FC
000222C5 03                         MS_Float5:	dc.b 3			; spinning 5 (LZ)
000222C6 F40D 0800 E4               		dc.b $F4, $D, 8, 0, $E4
000222CB FC05 0808 04               		dc.b $FC, 5, 8,	8, 4
000222D0 0408 080C EC               		dc.b 4,	8, 8, $C, $EC
000222D5 03                         MS_Float6:	dc.b 3			; spinning 6 (LZ)
000222D6 F40D 0800 FC               		dc.b $F4, $D, 8, 0, $FC
000222DB FC00 0808 F4               		dc.b $FC, 0, 8,	8, $F4
000222E0 040C 0809 F4               		dc.b 4,	$C, 8, 9, $F4
000222E5 03                         MS_Injury:	dc.b 3			; injury
000222E6 F00E 0000 EC               		dc.b $F0, $E, 0, 0, $EC
000222EB F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
000222F0 080C 000E F4               		dc.b 8,	$C, 0, $E, $F4
000222F5 03                         MS_GetAir:	dc.b 3			; collecting bubble (LZ)
000222F6 EB09 0000 F4               		dc.b $EB, 9, 0,	0, $F4
000222FB FB0E 0006 EC               		dc.b $FB, $E, 0, 6, $EC
00022300 0301 0012 0C               		dc.b 3,	1, 0, $12, $C
00022305 02                         MS_WaterSlide:	dc.b 2			; water	slide (LZ)
00022306 F00F 0000 EC               		dc.b $F0, $F, 0, 0, $EC
0002230B F802 0010 0C               		dc.b $F8, 2, 0,	$10, $C
00022310                            		even
00022310                            		even
00022310                            SonicDynPLC:	include	"_maps\Sonic - Dynamic Gfx Script.asm"
00022310                            ; ---------------------------------------------------------------------------
00022310                            ; Uncompressed graphics	loading	array for Sonic
00022310                            ; ---------------------------------------------------------------------------
00022310                            SonicDynPLC_internal:
00022310 0000                       		dc.w SonPLC_Null-SonicDynPLC_internal
00022312 0000                       		dc.w SonPLC_Stand-SonicDynPLC_internal
00022314 0000                       		dc.w SonPLC_Wait1-SonicDynPLC_internal
00022316 0000                       		dc.w SonPLC_Wait2-SonicDynPLC_internal
00022318 0000                       		dc.w SonPLC_Wait3-SonicDynPLC_internal
0002231A 0000                       		dc.w SonPLC_LookUp-SonicDynPLC_internal
0002231C 0000                       		dc.w SonPLC_Walk11-SonicDynPLC_internal
0002231E 0000                       		dc.w SonPLC_Walk12-SonicDynPLC_internal
00022320 0000                       		dc.w SonPLC_Walk13-SonicDynPLC_internal
00022322 0000                       		dc.w SonPLC_Walk14-SonicDynPLC_internal
00022324 0000                       		dc.w SonPLC_Walk15-SonicDynPLC_internal
00022326 0000                       		dc.w SonPLC_Walk16-SonicDynPLC_internal
00022328 0000                       		dc.w SonPLC_Walk21-SonicDynPLC_internal
0002232A 0000                       		dc.w SonPLC_Walk22-SonicDynPLC_internal
0002232C 0000                       		dc.w SonPLC_Walk23-SonicDynPLC_internal
0002232E 0000                       		dc.w SonPLC_Walk24-SonicDynPLC_internal
00022330 0000                       		dc.w SonPLC_Walk25-SonicDynPLC_internal
00022332 0000                       		dc.w SonPLC_Walk26-SonicDynPLC_internal
00022334 0000                       		dc.w SonPLC_Walk31-SonicDynPLC_internal
00022336 0000                       		dc.w SonPLC_Walk32-SonicDynPLC_internal
00022338 0000                       		dc.w SonPLC_Walk33-SonicDynPLC_internal
0002233A 0000                       		dc.w SonPLC_Walk34-SonicDynPLC_internal
0002233C 0000                       		dc.w SonPLC_Walk35-SonicDynPLC_internal
0002233E 0000                       		dc.w SonPLC_Walk36-SonicDynPLC_internal
00022340 0000                       		dc.w SonPLC_Walk41-SonicDynPLC_internal
00022342 0000                       		dc.w SonPLC_Walk42-SonicDynPLC_internal
00022344 0000                       		dc.w SonPLC_Walk43-SonicDynPLC_internal
00022346 0000                       		dc.w SonPLC_Walk44-SonicDynPLC_internal
00022348 0000                       		dc.w SonPLC_Walk45-SonicDynPLC_internal
0002234A 0000                       		dc.w SonPLC_Walk46-SonicDynPLC_internal
0002234C 0000                       		dc.w SonPLC_Run11-SonicDynPLC_internal
0002234E 0000                       		dc.w SonPLC_Run12-SonicDynPLC_internal
00022350 0000                       		dc.w SonPLC_Run13-SonicDynPLC_internal
00022352 0000                       		dc.w SonPLC_Run14-SonicDynPLC_internal
00022354 0000                       		dc.w SonPLC_Run21-SonicDynPLC_internal
00022356 0000                       		dc.w SonPLC_Run22-SonicDynPLC_internal
00022358 0000                       		dc.w SonPLC_Run23-SonicDynPLC_internal
0002235A 0000                       		dc.w SonPLC_Run24-SonicDynPLC_internal
0002235C 0000                       		dc.w SonPLC_Run31-SonicDynPLC_internal
0002235E 0000                       		dc.w SonPLC_Run32-SonicDynPLC_internal
00022360 0000                       		dc.w SonPLC_Run33-SonicDynPLC_internal
00022362 0000                       		dc.w SonPLC_Run34-SonicDynPLC_internal
00022364 0000                       		dc.w SonPLC_Run41-SonicDynPLC_internal
00022366 0000                       		dc.w SonPLC_Run42-SonicDynPLC_internal
00022368 0000                       		dc.w SonPLC_Run43-SonicDynPLC_internal
0002236A 0000                       		dc.w SonPLC_Run44-SonicDynPLC_internal
0002236C 0000                       		dc.w SonPLC_Roll1-SonicDynPLC_internal
0002236E 0000                       		dc.w SonPLC_Roll2-SonicDynPLC_internal
00022370 0000                       		dc.w SonPLC_Roll3-SonicDynPLC_internal
00022372 0000                       		dc.w SonPLC_Roll4-SonicDynPLC_internal
00022374 0000                       		dc.w SonPLC_Roll5-SonicDynPLC_internal
00022376 0000                       		dc.w SonPLC_Warp1-SonicDynPLC_internal
00022378 0000                       		dc.w SonPLC_Warp2-SonicDynPLC_internal
0002237A 0000                       		dc.w SonPLC_Warp3-SonicDynPLC_internal
0002237C 0000                       		dc.w SonPLC_Warp4-SonicDynPLC_internal
0002237E 0000                       		dc.w SonPLC_Stop1-SonicDynPLC_internal
00022380 0000                       		dc.w SonPLC_Stop2-SonicDynPLC_internal
00022382 0000                       		dc.w SonPLC_Duck-SonicDynPLC_internal
00022384 0000                       		dc.w SonPLC_Balance1-SonicDynPLC_internal
00022386 0000                       		dc.w SonPLC_Balance2-SonicDynPLC_internal
00022388 0000                       		dc.w SonPLC_Float1-SonicDynPLC_internal
0002238A 0000                       		dc.w SonPLC_Float2-SonicDynPLC_internal
0002238C 0000                       		dc.w SonPLC_Float3-SonicDynPLC_internal
0002238E 0000                       		dc.w SonPLC_Float4-SonicDynPLC_internal
00022390 0000                       		dc.w SonPLC_Spring-SonicDynPLC_internal
00022392 0000                       		dc.w SonPLC_Hang1-SonicDynPLC_internal
00022394 0000                       		dc.w SonPLC_Hang2-SonicDynPLC_internal
00022396 0000                       		dc.w SonPLC_Leap1-SonicDynPLC_internal
00022398 0000                       		dc.w SonPLC_Leap2-SonicDynPLC_internal
0002239A 0000                       		dc.w SonPLC_Push1-SonicDynPLC_internal
0002239C 0000                       		dc.w SonPLC_Push2-SonicDynPLC_internal
0002239E 0000                       		dc.w SonPLC_Push3-SonicDynPLC_internal
000223A0 0000                       		dc.w SonPLC_Push4-SonicDynPLC_internal
000223A2 0000                       		dc.w SonPLC_Surf-SonicDynPLC_internal
000223A4 0000                       		dc.w SonPLC_BubStand-SonicDynPLC_internal
000223A6 0000                       		dc.w SonPLC_Death-SonicDynPLC_internal
000223A8 0000                       		dc.w SonPLC_Drown-SonicDynPLC_internal
000223AA 0000                       		dc.w SonPLC_Burnt-SonicDynPLC_internal
000223AC 0000                       		dc.w SonPLC_Shrink1-SonicDynPLC_internal
000223AE 0000                       		dc.w SonPLC_Shrink2-SonicDynPLC_internal
000223B0 0000                       		dc.w SonPLC_Shrink3-SonicDynPLC_internal
000223B2 0000                       		dc.w SonPLC_Shrink4-SonicDynPLC_internal
000223B4 0000                       		dc.w SonPLC_Shrink5-SonicDynPLC_internal
000223B6 0000                       		dc.w SonPLC_Float1-SonicDynPLC_internal
000223B8 0000                       		dc.w SonPLC_Float3-SonicDynPLC_internal
000223BA 0000                       		dc.w SonPLC_Injury-SonicDynPLC_internal
000223BC 0000                       		dc.w SonPLC_GetAir-SonicDynPLC_internal
000223BE 0000                       		dc.w SonPLC_WaterSlide-SonicDynPLC_internal
000223C0 00                         SonPLC_Null:	dc.b 0
000223C1 0420 0070 0320 0B20 0E     SonPLC_Stand:	dc.b 4,	$20, 0,	$70, 3,	$20, $B, $20, $E
000223CA 0350 1150 1720 1D          SonPLC_Wait1:	dc.b 3,	$50, $11, $50, $17, $20, $1D
000223D1 0350 2050 1720 1D          SonPLC_Wait2:	dc.b 3,	$50, $20, $50, $17, $20, $1D
000223D8 0350 2050 1720 26          SonPLC_Wait3:	dc.b 3,	$50, $20, $50, $17, $20, $26
000223DF 0380 2920 0B20 0E          SonPLC_LookUp:	dc.b 3,	$80, $29, $20, $B, $20,	$E
000223E6 0470 3250 3A50 4010 46     SonPLC_Walk11:	dc.b 4,	$70, $32, $50, $3A, $50, $40, $10, $46
000223EF 0270 32B0 48               SonPLC_Walk12:	dc.b 2,	$70, $32, $B0, $48
000223F4 0250 5480 5A               SonPLC_Walk13:	dc.b 2,	$50, $54, $80, $5A
000223F9 0450 5450 6350 6910 6F     SonPLC_Walk14:	dc.b 4,	$50, $54, $50, $63, $50, $69, $10, $6F
00022402 0250 54B0 71               SonPLC_Walk15:	dc.b 2,	$50, $54, $B0, $71
00022407 0370 3230 7D50 81          SonPLC_Walk16:	dc.b 3,	$70, $32, $30, $7D, $50, $81
0002240E 0550 8750 8D20 9350 9600+  SonPLC_Walk21:	dc.b 5,	$50, $87, $50, $8D, $20, $93, $50, $96,	0, $9C
00022419 0650 8710 9D30 9F50 A330+  SonPLC_Walk22:	dc.b 6,	$50, $87, $10, $9D, $30, $9F, $50, $A3,	$30, $A9, 0, $AD
00022426 0450 AE10 B470 B620 BE     SonPLC_Walk23:	dc.b 4,	$50, $AE, $10, $B4, $70, $B6, $20, $BE
0002242F 0550 C130 C770 CB20 D310+  SonPLC_Walk24:	dc.b 5,	$50, $C1, $30, $C7, $70, $CB, $20, $D3,	$10, $D6
0002243A 0450 C110 D870 DA20 E2     SonPLC_Walk25:	dc.b 4,	$50, $C1, $10, $D8, $70, $DA, $20, $E2
00022443 0550 8710 9D00 9370 E520+  SonPLC_Walk26:	dc.b 5,	$50, $87, $10, $9D, 0, $93, $70, $E5, $20, $ED
0002244E 0470 F050 F810 FE51 00     SonPLC_Walk31:	dc.b 4,	$70, $F0, $50, $F8, $10, $FE, $51, 0
00022457 0270 F0B1 06               SonPLC_Walk32:	dc.b 2,	$70, $F0, $B1, 6
0002245C 0251 1281 18               SonPLC_Walk33:	dc.b 2,	$51, $12, $81, $18
00022461 0451 1251 2111 2751 29     SonPLC_Walk34:	dc.b 4,	$51, $12, $51, $21, $11, $27, $51, $29
0002246A 0251 12B1 2F               SonPLC_Walk35:	dc.b 2,	$51, $12, $B1, $2F
0002246F 0370 F001 0681 3B          SonPLC_Walk36:	dc.b 3,	$70, $F0, 1, 6,	$81, $3B
00022476 0651 4411 4A11 4C81 4E01+  SonPLC_Walk41:	dc.b 6,	$51, $44, $11, $4A, $11, $4C, $81, $4E,	1, $57,	1, $58
00022483 0651 4421 5911 5C11 5E81+  SonPLC_Walk42:	dc.b 6,	$51, $44, $21, $59, $11, $5C, $11, $5E,	$81, $60, 1, $57
00022490 0451 6911 6F81 7111 7A     SonPLC_Walk43:	dc.b 4,	$51, $69, $11, $6F, $81, $71, $11, $7A
00022499 0551 7C21 8211 8571 8721+  SonPLC_Walk44:	dc.b 5,	$51, $7C, $21, $82, $11, $85, $71, $87,	$21, $8F
000224A4 0451 7C11 9281 9411 9D     SonPLC_Walk45:	dc.b 4,	$51, $7C, $11, $92, $81, $94, $11, $9D
000224AD 0551 4481 9F11 5E11 A801+  SonPLC_Walk46:	dc.b 5,	$51, $44, $81, $9F, $11, $5E, $11, $A8,	1, $57
000224B8 0251 AAB1 B0               SonPLC_Run11:	dc.b 2,	$51, $AA, $B1, $B0
000224BD 0250 54B1 BC               SonPLC_Run12:	dc.b 2,	$50, $54, $B1, $BC
000224C2 0251 AAB1 C8               SonPLC_Run13:	dc.b 2,	$51, $AA, $B1, $C8
000224C7 0250 54B1 D4               SonPLC_Run14:	dc.b 2,	$50, $54, $B1, $D4
000224CC 0451 E011 E6B1 E801 F4     SonPLC_Run21:	dc.b 4,	$51, $E0, $11, $E6, $B1, $E8, 1, $F4
000224D5 0351 F511 FBB1 FD          SonPLC_Run22:	dc.b 3,	$51, $F5, $11, $FB, $B1, $FD
000224DC 0451 E012 09B2 0B01 F4     SonPLC_Run23:	dc.b 4,	$51, $E0, $12, 9, $B2, $B, 1, $F4
000224E5 0351 F511 FBB2 17          SonPLC_Run24:	dc.b 3,	$51, $F5, $11, $FB, $B2, $17
000224EC 0252 23B2 29               SonPLC_Run31:	dc.b 2,	$52, $23, $B2, $29
000224F1 0251 12B2 35               SonPLC_Run32:	dc.b 2,	$51, $12, $B2, $35
000224F6 0252 23B2 41               SonPLC_Run33:	dc.b 2,	$52, $23, $B2, $41
000224FB 0251 12B2 4D               SonPLC_Run34:	dc.b 2,	$51, $12, $B2, $4D
00022500 0452 5912 5FB2 6102 6D     SonPLC_Run41:	dc.b 4,	$52, $59, $12, $5F, $B2, $61, 2, $6D
00022509 0272 6EB2 76               SonPLC_Run42:	dc.b 2,	$72, $6E, $B2, $76
0002250E 0452 5912 82B2 8402 6D     SonPLC_Run43:	dc.b 4,	$52, $59, $12, $82, $B2, $84, 2, $6D
00022517 0272 6EB2 90               SonPLC_Run44:	dc.b 2,	$72, $6E, $B2, $90
0002251C 01F2 9C                    SonPLC_Roll1:	dc.b 1,	$F2, $9C
0002251F 01F2 AC                    SonPLC_Roll2:	dc.b 1,	$F2, $AC
00022522 01F2 BC                    SonPLC_Roll3:	dc.b 1,	$F2, $BC
00022525 01F2 CC                    SonPLC_Roll4:	dc.b 1,	$F2, $CC
00022528 01F2 DC                    SonPLC_Roll5:	dc.b 1,	$F2, $DC
0002252B 02B2 EC22 F8               SonPLC_Warp1:	dc.b 2,	$B2, $EC, $22, $F8
00022530 01F2 FB                    SonPLC_Warp2:	dc.b 1,	$F2, $FB
00022533 02B3 0B23 17               SonPLC_Warp3:	dc.b 2,	$B3, $B, $23, $17
00022538 01F3 1A                    SonPLC_Warp4:	dc.b 1,	$F3, $1A
0002253B 0253 2AB3 30               SonPLC_Stop1:	dc.b 2,	$53, $2A, $B3, $30
00022540 0453 3C73 4213 4A03 4C     SonPLC_Stop2:	dc.b 4,	$53, $3C, $73, $42, $13, $4A, 3, $4C
00022549 0413 4D73 4F23 5703 5A     SonPLC_Duck:	dc.b 4,	$13, $4D, $73, $4F, $23, $57, 3, $5A
00022552 0323 5B23 5EF3 61          SonPLC_Balance1: dc.b 3,	$23, $5B, $23, $5E, $F3, $61
00022559 03B3 7173 7D00 71          SonPLC_Balance2: dc.b 3,	$B3, $71, $73, $7D, 0, $71
00022560 0373 8533 8D23 91          SonPLC_Float1:	dc.b 3,	$73, $85, $33, $8D, $23, $91
00022567 0183 94                    SonPLC_Float2:	dc.b 1,	$83, $94
0002256A 0373 9D03 A533 A6          SonPLC_Float3:	dc.b 3,	$73, $9D, 3, $A5, $33, $A6
00022571 0373 AA33 B223 B6          SonPLC_Float4:	dc.b 3,	$73, $AA, $33, $B2, $23, $B6
00022578 03B3 B913 C503 C7          SonPLC_Spring:	dc.b 3,	$B3, $B9, $13, $C5, 3, $C7
0002257F 04B3 C833 D403 D803 D9     SonPLC_Hang1:	dc.b 4,	$B3, $C8, $33, $D4, 3, $D8, 3, $D9
00022588 04B3 DA33 E603 EA03 EB     SonPLC_Hang2:	dc.b 4,	$B3, $DA, $33, $E6, 3, $EA, 3, $EB
00022591 0583 EC13 F553 F713 FD03+  SonPLC_Leap1:	dc.b 5,	$83, $EC, $13, $F5, $53, $F7, $13, $FD,	3, $FF
0002259C 0584 0014 0953 F713 FD03+  SonPLC_Leap2:	dc.b 5,	$84, 0,	$14, 9,	$53, $F7, $13, $FD, 3, $FF
000225A7 0284 0B74 14               SonPLC_Push1:	dc.b 2,	$84, $B, $74, $14
000225AC 0384 1C24 2514 28          SonPLC_Push2:	dc.b 3,	$84, $1C, $24, $25, $14, $28
000225B3 0284 2A74 33               SonPLC_Push3:	dc.b 2,	$84, $2A, $74, $33
000225B8 0384 1C24 3B14 3E          SonPLC_Push4:	dc.b 3,	$84, $1C, $24, $3B, $14, $3E
000225BF 0254 40B4 46               SonPLC_Surf:	dc.b 2,	$54, $40, $B4, $46
000225C4 0384 5234 5B04 5F          SonPLC_BubStand: dc.b 3,	$84, $52, $34, $5B, 4, $5F
000225CB 0374 6014 68B4 6A          SonPLC_Death:	dc.b 3,	$74, $60, $14, $68, $B4, $6A
000225D2 0574 7614 7E54 8034 8604+  SonPLC_Drown:	dc.b 5,	$74, $76, $14, $7E, $54, $80, $34, $86,	4, $8A
000225DD 0574 8B14 7E54 9334 8604+  SonPLC_Burnt:	dc.b 5,	$74, $8B, $14, $7E, $54, $93, $34, $86,	4, $8A
000225E8 0224 99F4 9C               SonPLC_Shrink1:	dc.b 2,	$24, $99, $F4, $9C
000225ED 0324 ACB4 AF24 BB          SonPLC_Shrink2:	dc.b 3,	$24, $AC, $B4, $AF, $24, $BB
000225F4 01B4 BE                    SonPLC_Shrink3:	dc.b 1,	$B4, $BE
000225F7 0154 CA                    SonPLC_Shrink4:	dc.b 1,	$54, $CA
000225FA 0114 D0                    SonPLC_Shrink5:	dc.b 1,	$14, $D0
000225FD 03B4 D214 DE34 E0          SonPLC_Injury:	dc.b 3,	$B4, $D2, $14, $DE, $34, $E0
00022604 0354 E4B4 EA10 6D          SonPLC_GetAir:	dc.b 3,	$54, $E4, $B4, $EA, $10, $6D
0002260B 02F4 F625 06               SonPLC_WaterSlide: dc.b 2, $F4, $F6, $25, 6
00022610                            		even
00022610                            		even
00022610                            

00022610                            ; ---------------------------------------------------------------------------
00022610                            ; Uncompressed graphics	- Sonic
00022610                            ; ---------------------------------------------------------------------------
00022610                            Art_Sonic:	incbin	"artunc\Sonic.bin"	; Sonic
0002C730                            		even
0002C730                            ; ---------------------------------------------------------------------------
0002C730                            ; Compressed graphics - various
0002C730                            ; ---------------------------------------------------------------------------
0002C730                            Nem_Shield:	incbin	"artnem\Shield.bin"
0002C8C6                            		even
0002C8C6                            Nem_Stars:	incbin	"artnem\Invincibility Stars.bin"
0002CA0E                            		even
0002CA0E                            

0002CA0E                            Map_SSWalls:	include	"_maps\SS Walls.asm"
0002CA0E                            ; ---------------------------------------------------------------------------
0002CA0E                            ; Sprite mappings - walls of the special stage
0002CA0E                            ; ---------------------------------------------------------------------------
0002CA0E                            Map_SSWalls_internal:
0002CA0E 0000                       		dc.w byte_2C584-Map_SSWalls_internal
0002CA10 0000                       		dc.w byte_2C58A-Map_SSWalls_internal
0002CA12 0000                       		dc.w byte_2C590-Map_SSWalls_internal
0002CA14 0000                       		dc.w byte_2C596-Map_SSWalls_internal
0002CA16 0000                       		dc.w byte_2C59C-Map_SSWalls_internal
0002CA18 0000                       		dc.w byte_2C5A2-Map_SSWalls_internal
0002CA1A 0000                       		dc.w byte_2C5A8-Map_SSWalls_internal
0002CA1C 0000                       		dc.w byte_2C5AE-Map_SSWalls_internal
0002CA1E 0000                       		dc.w byte_2C5B4-Map_SSWalls_internal
0002CA20 0000                       		dc.w byte_2C5BA-Map_SSWalls_internal
0002CA22 0000                       		dc.w byte_2C5C0-Map_SSWalls_internal
0002CA24 0000                       		dc.w byte_2C5C6-Map_SSWalls_internal
0002CA26 0000                       		dc.w byte_2C5CC-Map_SSWalls_internal
0002CA28 0000                       		dc.w byte_2C5D2-Map_SSWalls_internal
0002CA2A 0000                       		dc.w byte_2C5D8-Map_SSWalls_internal
0002CA2C 0000                       		dc.w byte_2C5DE-Map_SSWalls_internal
0002CA2E 01                         byte_2C584:	dc.b 1
0002CA2F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002CA34 01                         byte_2C58A:	dc.b 1
0002CA35 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002CA3A 01                         byte_2C590:	dc.b 1
0002CA3B F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002CA40 01                         byte_2C596:	dc.b 1
0002CA41 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002CA46 01                         byte_2C59C:	dc.b 1
0002CA47 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002CA4C 01                         byte_2C5A2:	dc.b 1
0002CA4D F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002CA52 01                         byte_2C5A8:	dc.b 1
0002CA53 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002CA58 01                         byte_2C5AE:	dc.b 1
0002CA59 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002CA5E 01                         byte_2C5B4:	dc.b 1
0002CA5F F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002CA64 01                         byte_2C5BA:	dc.b 1
0002CA65 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002CA6A 01                         byte_2C5C0:	dc.b 1
0002CA6B F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002CA70 01                         byte_2C5C6:	dc.b 1
0002CA71 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002CA76 01                         byte_2C5CC:	dc.b 1
0002CA77 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002CA7C 01                         byte_2C5D2:	dc.b 1
0002CA7D F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002CA82 01                         byte_2C5D8:	dc.b 1
0002CA83 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002CA88 01                         byte_2C5DE:	dc.b 1
0002CA89 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002CA8E                            		even
0002CA8E                            		even
0002CA8E                            

0002CA8E                            ; ---------------------------------------------------------------------------
0002CA8E                            ; Compressed graphics - special stage
0002CA8E                            ; ---------------------------------------------------------------------------
0002CA8E                            Nem_SSWalls:	incbin	"artnem\Special Walls.bin" ; special stage walls
0002D3C6                            		even
0002D3C6                            Eni_SSBg1:	incbin	"tilemaps\SS Background 1.bin" ; special stage background (mappings)
0002D4FA                            		even
0002D4FA                            Nem_SSBgFish:	incbin	"artnem\Special Birds & Fish.bin" ; special stage birds and fish background
0002E18A                            		even
0002E18A                            Eni_SSBg2:	incbin	"tilemaps\SS Background 2.bin" ; special stage background (mappings)
0002E48A                            		even
0002E48A                            Nem_SSBgCloud:	incbin	"artnem\Special Clouds.bin" ; special stage clouds background
0002E97E                            		even
0002E97E                            Nem_SSGOAL:	incbin	"artnem\Special GOAL.bin" ; special stage GOAL block
0002EA6C                            		even
0002EA6C                            Nem_SSRBlock:	incbin	"artnem\Special R.bin"	; special stage R block
0002EB3C                            		even
0002EB3C                            Nem_SS1UpBlock:	incbin	"artnem\Special 1UP.bin" ; special stage 1UP block
0002EC32                            		even
0002EC32                            Nem_SSEmStars:	incbin	"artnem\Special Emerald Twinkle.bin" ; special stage stars from a collected emerald
0002EC90                            		even
0002EC90                            Nem_SSRedWhite:	incbin	"artnem\Special Red-White.bin" ; special stage red/white block
0002ED22                            		even
0002ED22                            Nem_SSZone1:	incbin	"artnem\Special ZONE1.bin" ; special stage ZONE1 block
0002EDE4                            		even
0002EDE4                            Nem_SSZone2:	incbin	"artnem\Special ZONE2.bin" ; ZONE2 block
0002EEB2                            		even
0002EEB2                            Nem_SSZone3:	incbin	"artnem\Special ZONE3.bin" ; ZONE3 block
0002EF7E                            		even
0002EF7E                            Nem_SSZone4:	incbin	"artnem\Special ZONE4.bin" ; ZONE4 block
0002F046                            		even
0002F046                            Nem_SSZone5:	incbin	"artnem\Special ZONE5.bin" ; ZONE5 block
0002F110                            		even
0002F110                            Nem_SSZone6:	incbin	"artnem\Special ZONE6.bin" ; ZONE6 block
0002F1E0                            		even
0002F1E0                            Nem_SSUpDown:	incbin	"artnem\Special UP-DOWN.bin" ; special stage UP/DOWN block
0002F3D4                            		even
0002F3D4                            Nem_SSEmerald:	incbin	"artnem\Special Emeralds.bin" ; special stage chaos emeralds
0002F53C                            		even
0002F53C                            Nem_SSGhost:	incbin	"artnem\Special Ghost.bin" ; special stage ghost block
0002F5EC                            		even
0002F5EC                            Nem_SSWBlock:	incbin	"artnem\Special W.bin"	; special stage W block
0002F6C6                            		even
0002F6C6                            Nem_SSGlass:	incbin	"artnem\Special Glass.bin" ; special stage destroyable glass block
0002F74A                            		even
0002F74A                            Nem_ResultEm:	incbin	"artnem\Special Result Emeralds.bin" ; chaos emeralds on special stage results screen
0002F8C8                            		even
0002F8C8                            ; ---------------------------------------------------------------------------
0002F8C8                            ; Compressed graphics - GHZ stuff
0002F8C8                            ; ---------------------------------------------------------------------------
0002F8C8                            Nem_Stalk:	incbin	"artnem\GHZ Flower Stalk.bin"
0002F912                            		even
0002F912                            Nem_Swing:	incbin	"artnem\GHZ Swinging Platform.bin"
0002FA2C                            		even
0002FA2C                            Nem_Bridge:	incbin	"artnem\GHZ Bridge.bin"
0002FB18                            		even
0002FB18                            Nem_GhzUnkBlock: incbin	"artnem\Unused - GHZ Block.bin"
0002FB60                            		even
0002FB60                            Nem_Ball:	incbin	"artnem\GHZ Giant Ball.bin"
0002FCFE                            		even
0002FCFE                            Nem_Spikes:	incbin	"artnem\Spikes.bin"
0002FD7A                            		even
0002FD7A                            Nem_GhzLog:	incbin	"artnem\Unused - GHZ Log.bin"
0002FF8E                            		even
0002FF8E                            Nem_SpikePole:	incbin	"artnem\GHZ Spiked Log.bin"
000300BA                            		even
000300BA                            Nem_PplRock:	incbin	"artnem\GHZ Purple Rock.bin"
000301E8                            		even
000301E8                            Nem_GhzWall1:	incbin	"artnem\GHZ Breakable Wall.bin"
00030286                            		even
00030286                            Nem_GhzWall2:	incbin	"artnem\GHZ Edge Wall.bin"
000302E6                            		even
000302E6                            ; ---------------------------------------------------------------------------
000302E6                            ; Compressed graphics - LZ stuff
000302E6                            ; ---------------------------------------------------------------------------
000302E6                            Nem_Water:	incbin	"artnem\LZ Water Surface.bin"
0003040A                            		even
0003040A                            Nem_Splash:	incbin	"artnem\LZ Water & Splashes.bin"
00030BFE                            		even
00030BFE                            Nem_LzSpikeBall: incbin	"artnem\LZ Spiked Ball & Chain.bin"
00030D7E                            		even
00030D7E                            Nem_FlapDoor:	incbin	"artnem\LZ Flapping Door.bin"
00030EE8                            		even
00030EE8                            Nem_Bubbles:	incbin	"artnem\LZ Bubbles & Countdown.bin"
0003153E                            		even
0003153E                            Nem_LzBlock3:	incbin	"artnem\LZ 32x16 Block.bin"
000315F4                            		even
000315F4                            Nem_LzDoor1:	incbin	"artnem\LZ Vertical Door.bin"
00031696                            		even
00031696                            Nem_Harpoon:	incbin	"artnem\LZ Harpoon.bin"
000317F2                            		even
000317F2                            Nem_LzPole:	incbin	"artnem\LZ Breakable Pole.bin"
00031856                            		even
00031856                            Nem_LzDoor2:	incbin	"artnem\LZ Horizontal Door.bin"
000319A8                            		even
000319A8                            Nem_LzWheel:	incbin	"artnem\LZ Wheel.bin"
00031E8A                            		even
00031E8A                            Nem_Gargoyle:	incbin	"artnem\LZ Gargoyle & Fireball.bin"
00031FFA                            		even
00031FFA                            Nem_LzBlock2:	incbin	"artnem\LZ Blocks.bin"
000322B2                            		even
000322B2                            Nem_LzPlatfm:	incbin	"artnem\LZ Rising Platform.bin"
000323EA                            		even
000323EA                            Nem_Cork:	incbin	"artnem\LZ Cork.bin"
00032514                            		even
00032514                            Nem_LzBlock1:	incbin	"artnem\LZ 32x32 Block.bin"
00032624                            		even
00032624                            ; ---------------------------------------------------------------------------
00032624                            ; Compressed graphics - MZ stuff
00032624                            ; ---------------------------------------------------------------------------
00032624                            Nem_MzMetal:	incbin	"artnem\MZ Metal Blocks.bin"
000328B2                            		even
000328B2                            Nem_MzSwitch:	incbin	"artnem\MZ Switch.bin"
00032970                            		even
00032970                            Nem_MzGlass:	incbin	"artnem\MZ Green Glass Block.bin"
00032A28                            		even
00032A28                            Nem_UnkGrass:	incbin	"artnem\Unused - Grass.bin"
00032A7C                            		even
00032A7C                            Nem_MzFire:	incbin	"artnem\Fireballs.bin"
00032D5A                            		even
00032D5A                            Nem_Lava:	incbin	"artnem\MZ Lava.bin"
00033670                            		even
00033670                            Nem_MzBlock:	incbin	"artnem\MZ Green Pushable Block.bin"
000337D4                            		even
000337D4                            Nem_MzUnkBlock:	incbin	"artnem\Unused - MZ Background.bin"
0003385C                            		even
0003385C                            ; ---------------------------------------------------------------------------
0003385C                            ; Compressed graphics - SLZ stuff
0003385C                            ; ---------------------------------------------------------------------------
0003385C                            Nem_Seesaw:	incbin	"artnem\SLZ Seesaw.bin"
00033A98                            		even
00033A98                            Nem_SlzSpike:	incbin	"artnem\SLZ Little Spikeball.bin"
00033BDE                            		even
00033BDE                            Nem_Fan:	incbin	"artnem\SLZ Fan.bin"
00033E22                            		even
00033E22                            Nem_SlzWall:	incbin	"artnem\SLZ Breakable Wall.bin"
00033E84                            		even
00033E84                            Nem_Pylon:	incbin	"artnem\SLZ Pylon.bin"
00033F66                            		even
00033F66                            Nem_SlzSwing:	incbin	"artnem\SLZ Swinging Platform.bin"
00034148                            		even
00034148                            Nem_SlzBlock:	incbin	"artnem\SLZ 32x32 Block.bin"
00034254                            		even
00034254                            Nem_SlzCannon:	incbin	"artnem\SLZ Cannon.bin"
000342F8                            		even
000342F8                            ; ---------------------------------------------------------------------------
000342F8                            ; Compressed graphics - SYZ stuff
000342F8                            ; ---------------------------------------------------------------------------
000342F8                            Nem_Bumper:	incbin	"artnem\SYZ Bumper.bin"
00034462                            		even
00034462                            Nem_SyzSpike2:	incbin	"artnem\SYZ Small Spikeball.bin"
000344C4                            		even
000344C4                            Nem_LzSwitch:	incbin	"artnem\Switch.bin"
000345A6                            		even
000345A6                            Nem_SyzSpike1:	incbin	"artnem\SYZ Large Spikeball.bin"
00034834                            		even
00034834                            ; ---------------------------------------------------------------------------
00034834                            ; Compressed graphics - SBZ stuff
00034834                            ; ---------------------------------------------------------------------------
00034834                            Nem_SbzWheel1:	incbin	"artnem\SBZ Running Disc.bin"
00034888                            		even
00034888                            Nem_SbzWheel2:	incbin	"artnem\SBZ Junction Wheel.bin"
00034B24                            		even
00034B24                            Nem_Cutter:	incbin	"artnem\SBZ Pizza Cutter.bin"
00034D28                            		even
00034D28                            Nem_Stomper:	incbin	"artnem\SBZ Stomper.bin"
00034EC6                            		even
00034EC6                            Nem_SpinPform:	incbin	"artnem\SBZ Spinning Platform.bin"
000351F6                            		even
000351F6                            Nem_TrapDoor:	incbin	"artnem\SBZ Trapdoor.bin"
000353D4                            		even
000353D4                            Nem_SbzFloor:	incbin	"artnem\SBZ Collapsing Floor.bin"
0003542C                            		even
0003542C                            Nem_Electric:	incbin	"artnem\SBZ Electrocuter.bin"
000355AC                            		even
000355AC                            Nem_SbzBlock:	incbin	"artnem\SBZ Vanishing Block.bin"
000356AA                            		even
000356AA                            Nem_FlamePipe:	incbin	"artnem\SBZ Flaming Pipe.bin"
00035836                            		even
00035836                            Nem_SbzDoor1:	incbin	"artnem\SBZ Small Vertical Door.bin"
00035886                            		even
00035886                            Nem_SlideFloor:	incbin	"artnem\SBZ Sliding Floor Trap.bin"
000358DE                            		even
000358DE                            Nem_SbzDoor2:	incbin	"artnem\SBZ Large Horizontal Door.bin"
000359DA                            		even
000359DA                            Nem_Girder:	incbin	"artnem\SBZ Crushing Girder.bin"
00035AF0                            		even
00035AF0                            ; ---------------------------------------------------------------------------
00035AF0                            ; Compressed graphics - enemies
00035AF0                            ; ---------------------------------------------------------------------------
00035AF0                            Nem_BallHog:	incbin	"artnem\Enemy Ball Hog.bin"
00035EB0                            		even
00035EB0                            Nem_Crabmeat:	incbin	"artnem\Enemy Crabmeat.bin"
0003639E                            		even
0003639E                            Nem_Buzz:	incbin	"artnem\Enemy Buzz Bomber.bin"
00036744                            		even
00036744                            Nem_UnkExplode:	incbin	"artnem\Unused - Explosion.bin"
0003692C                            		even
0003692C                            Nem_Burrobot:	incbin	"artnem\Enemy Burrobot.bin"
00037016                            		even
00037016                            Nem_Chopper:	incbin	"artnem\Enemy Chopper.bin"
0003727E                            		even
0003727E                            Nem_Jaws:	incbin	"artnem\Enemy Jaws.bin"
00037508                            		even
00037508                            Nem_Roller:	incbin	"artnem\Enemy Roller.bin"
00037A2C                            		even
00037A2C                            Nem_Motobug:	incbin	"artnem\Enemy Motobug.bin"
00037CB6                            		even
00037CB6                            Nem_Newtron:	incbin	"artnem\Enemy Newtron.bin"
000382D4                            		even
000382D4                            Nem_Yadrin:	incbin	"artnem\Enemy Yadrin.bin"
000386BC                            		even
000386BC                            Nem_Basaran:	incbin	"artnem\Enemy Basaran.bin"
000389B8                            		even
000389B8                            Nem_Splats:	incbin	"artnem\Enemy Splats.bin"
00038C00                            		even
00038C00                            Nem_Bomb:	incbin	"artnem\Enemy Bomb.bin"
00038E98                            		even
00038E98                            Nem_Orbinaut:	incbin	"artnem\Enemy Orbinaut.bin"
00039076                            		even
00039076                            Nem_Cater:	incbin	"artnem\Enemy Caterkiller.bin"
00039204                            		even
00039204                            ; ---------------------------------------------------------------------------
00039204                            ; Compressed graphics - various
00039204                            ; ---------------------------------------------------------------------------
00039204                            Nem_TitleCard:	incbin	"artnem\Title Cards.bin"
00039812                            		even
00039812                            Nem_Hud:	incbin	"artnem\HUD.bin"	; HUD (rings, time, score)
00039908                            		even
00039908                            Nem_Lives:	incbin	"artnem\HUD - Life Counter Icon.bin"
00039A0E                            		even
00039A0E                            Nem_Ring:	incbin	"artnem\Rings.bin"
00039B02                            		even
00039B02                            Nem_Monitors:	incbin	"artnem\Monitors.bin"
00039F62                            		even
00039F62                            Nem_Explode:	incbin	"artnem\Explosion.bin"
0003A5C8                            		even
0003A5C8                            Nem_Points:	incbin	"artnem\Points.bin"	; points from destroyed enemy or object
0003A678                            		even
0003A678                            Nem_GameOver:	incbin	"artnem\Game Over.bin"	; game over / time over
0003A80A                            		even
0003A80A                            Nem_HSpring:	incbin	"artnem\Spring Horizontal.bin"
0003A90C                            		even
0003A90C                            Nem_VSpring:	incbin	"artnem\Spring Vertical.bin"
0003A9E8                            		even
0003A9E8                            Nem_SignPost:	incbin	"artnem\Signpost.bin"	; end of level signpost
0003AE64                            		even
0003AE64                            Nem_Lamp:	incbin	"artnem\Lamppost.bin"
0003AF24                            		even
0003AF24                            Nem_BigFlash:	incbin	"artnem\Giant Ring Flash.bin"
0003B098                            		even
0003B098                            Nem_Bonus:	incbin	"artnem\Hidden Bonuses.bin" ; hidden bonuses at end of a level
0003B39A                            		even
0003B39A                            ; ---------------------------------------------------------------------------
0003B39A                            ; Compressed graphics - continue screen
0003B39A                            ; ---------------------------------------------------------------------------
0003B39A                            Nem_ContSonic:	incbin	"artnem\Continue Screen Sonic.bin"
0003B64A                            		even
0003B64A                            Nem_MiniSonic:	incbin	"artnem\Continue Screen Stuff.bin"
0003B884                            		even
0003B884                            ; ---------------------------------------------------------------------------
0003B884                            ; Compressed graphics - animals
0003B884                            ; ---------------------------------------------------------------------------
0003B884                            Nem_Rabbit:	incbin	"artnem\Animal Rabbit.bin"
0003B9DC                            		even
0003B9DC                            Nem_Chicken:	incbin	"artnem\Animal Chicken.bin"
0003BB38                            		even
0003BB38                            Nem_Penguin:	incbin	"artnem\Animal Penguin.bin"
0003BCB4                            		even
0003BCB4                            Nem_Seal:	incbin	"artnem\Animal Seal.bin"
0003BDD0                            		even
0003BDD0                            Nem_Pig:	incbin	"artnem\Animal Pig.bin"
0003BF06                            		even
0003BF06                            Nem_Flicky:	incbin	"artnem\Animal Flicky.bin"
0003C040                            		even
0003C040                            Nem_Squirrel:	incbin	"artnem\Animal Squirrel.bin"
0003C19C                            		even
0003C19C                            ; ---------------------------------------------------------------------------
0003C19C                            ; Compressed graphics - primary patterns and block mappings
0003C19C                            ; ---------------------------------------------------------------------------
0003C19C                            Blk16_GHZ:	incbin	"map16\GHZ.bin"
0003CB3C                            		even
0003CB3C                            Nem_GHZ_1st:	incbin	"artnem\8x8 - GHZ1.bin"	; GHZ primary patterns
0003E19C                            		even
0003E19C                            Nem_GHZ_2nd:	incbin	"artnem\8x8 - GHZ2.bin"	; GHZ secondary patterns
0003F544                            		even
0003F544                            Blk256_GHZ:	incbin	"map256\GHZ.bin"
00041654                            		even
00041654                            Blk16_LZ:	incbin	"map16\LZ.bin"
0004197E                            		even
0004197E                            Nem_LZ:		incbin	"artnem\8x8 - LZ.bin"	; LZ primary patterns
000434C6                            		even
000434C6                            Blk256_LZ:	incbin	"map256\LZ.bin"
00045CB6                            		even
00045CB6                            Blk16_MZ:	incbin	"map16\MZ.bin"
000464C0                            		even
000464C0                            Nem_MZ:		incbin	"artnem\8x8 - MZ.bin"	; MZ primary patterns
00048D04                            		even
00048D04                            		incbin	"map256\MZ (JP1).bin"
0004A4A4                            		even
0004A4A4                            Blk16_SLZ:	incbin	"map16\SLZ.bin"
0004AC88                            		even
0004AC88                            Nem_SLZ:	incbin	"artnem\8x8 - SLZ.bin"	; SLZ primary patterns
0004E7DC                            		even
0004E7DC                            Blk256_SLZ:	incbin	"map256\SLZ.bin"
00050C0C                            		even
00050C0C                            Blk16_SYZ:	incbin	"map16\SYZ.bin"
0005157A                            		even
0005157A                            Nem_SYZ:	incbin	"artnem\8x8 - SYZ.bin"	; SYZ primary patterns
00054CA6                            		even
00054CA6                            Blk256_SYZ:	incbin	"map256\SYZ.bin"
00057056                            		even
00057056                            Blk16_SBZ:	incbin	"map16\SBZ.bin"
00057EF0                            		even
00057EF0                            Nem_SBZ:	incbin	"artnem\8x8 - SBZ.bin"	; SBZ primary patterns
0005A69C                            		even
0005A69C                            		incbin	"map256\SBZ (JP1).bin"
0005D0FC                            		even
0005D0FC                            ; ---------------------------------------------------------------------------
0005D0FC                            ; Compressed graphics - bosses and ending sequence
0005D0FC                            ; ---------------------------------------------------------------------------
0005D0FC                            Nem_Eggman:	incbin	"artnem\Boss - Main.bin"
0005D960                            		even
0005D960                            Nem_Weapons:	incbin	"artnem\Boss - Weapons.bin"
0005DC4A                            		even
0005DC4A                            Nem_Prison:	incbin	"artnem\Prison Capsule.bin"
0005E4CE                            		even
0005E4CE                            Nem_Sbz2Eggman:	incbin	"artnem\Boss - Eggman in SBZ2 & FZ.bin"
0005ECFA                            		even
0005ECFA                            Nem_FzBoss:	incbin	"artnem\Boss - Final Zone.bin"
0005F462                            		even
0005F462                            Nem_FzEggman:	incbin	"artnem\Boss - Eggman after FZ Fight.bin"
0005F9E2                            		even
0005F9E2                            Nem_Exhaust:	incbin	"artnem\Boss - Exhaust Flame.bin"
0005FB02                            		even
0005FB02                            Nem_EndEm:	incbin	"artnem\Ending - Emeralds.bin"
0005FD00                            		even
0005FD00                            Nem_EndSonic:	incbin	"artnem\Ending - Sonic.bin"
00060EDE                            		even
00060EDE                            Nem_TryAgain:	incbin	"artnem\Ending - Try Again.bin"
00061822                            		even
00061822                            		even
00061822                            Kos_EndFlowers:	incbin	"artkos\Flowers at Ending.bin" ; ending sequence animated flowers
00061DB2                            		even
00061DB2                            Nem_EndFlower:	incbin	"artnem\Ending - Flowers.bin"
0006203A                            		even
0006203A                            Nem_CreditText:	incbin	"artnem\Ending - Credits.bin"
00062638                            		even
00062638                            Nem_EndStH:	incbin	"artnem\Ending - StH Logo.bin"
000628C0                            		even
000628C0                            

000628C0 FFFF FFFF FFFF FFFF FFFF+  		dcb.b $40,$FF
00062900                            ; ---------------------------------------------------------------------------
00062900                            ; Collision data
00062900                            ; ---------------------------------------------------------------------------
00062900                            AngleMap:	incbin	"collide\Angle Map.bin"
00062A00                            		even
00062A00                            CollArray1:	incbin	"collide\Collision Array (Normal).bin"
00063A00                            		even
00063A00                            CollArray2:	incbin	"collide\Collision Array (Rotated).bin"
00064A00                            		even
00064A00                            Col_GHZ:	incbin	"collide\GHZ.bin"	; GHZ index
00064B9A                            		even
00064B9A                            Col_LZ:		incbin	"collide\LZ.bin"	; LZ index
00064C62                            		even
00064C62                            Col_MZ:		incbin	"collide\MZ.bin"	; MZ index
00064DF2                            		even
00064DF2                            Col_SLZ:	incbin	"collide\SLZ.bin"	; SLZ index
00064FE6                            		even
00064FE6                            Col_SYZ:	incbin	"collide\SYZ.bin"	; SYZ index
000651DA                            		even
000651DA                            Col_SBZ:	incbin	"collide\SBZ.bin"	; SBZ index
00065432                            		even
00065432                            ; ---------------------------------------------------------------------------
00065432                            ; Special Stage layouts
00065432                            ; ---------------------------------------------------------------------------
00065432                            SS_1:		incbin	"sslayout\1.bin"
000656AC                            		even
000656AC                            SS_2:		incbin	"sslayout\2.bin"
00065ABE                            		even
00065ABE                            SS_3:		incbin	"sslayout\3.bin"
00065E1A                            		even
00065E1A                            SS_4:		incbin	"sslayout\4.bin"
000662F4                            		even
000662F4                            	SS_5:		incbin	"sslayout\5 (JP1).bin"
000667A4                            			even
000667A4                            	SS_6:		incbin	"sslayout\6 (JP1).bin"
00066A96                            		even
00066A96                            ; ---------------------------------------------------------------------------
00066A96                            ; Animated uncompressed graphics
00066A96                            ; ---------------------------------------------------------------------------
00066A96                            Art_GhzWater:	incbin	"artunc\GHZ Waterfall.bin"
00066C96                            		even
00066C96                            Art_GhzFlower1:	incbin	"artunc\GHZ Flower Large.bin"
00067096                            		even
00067096                            Art_GhzFlower2:	incbin	"artunc\GHZ Flower Small.bin"
00067516                            		even
00067516                            Art_MzLava1:	incbin	"artunc\MZ Lava Surface.bin"
00067816                            		even
00067816                            Art_MzLava2:	incbin	"artunc\MZ Lava.bin"
00067E16                            		even
00067E16                            Art_MzTorch:	incbin	"artunc\MZ Background Torch.bin"
00068116                            		even
00068116                            Art_SbzSmoke:	incbin	"artunc\SBZ Background Smoke.bin"
00068B96                            		even
00068B96                            

00068B96                            ; ---------------------------------------------------------------------------
00068B96                            ; Level	layout index
00068B96                            ; ---------------------------------------------------------------------------
00068B96                            Level_Index:
00068B96                            		; GHZ
00068B96 0000 0000 0000             		dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00068B9C 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00068BA2 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00068BA8 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00068BAE                            		; LZ
00068BAE 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00068BB4 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00068BBA 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00068BC0 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00068BC6                            		; MZ
00068BC6 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00068BCC 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00068BD2 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00068BD8 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00068BDE                            		; SLZ
00068BDE 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00068BE4 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00068BEA 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00068BF0 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00068BF6                            		; SYZ
00068BF6 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00068BFC 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00068C02 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00068C08 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00068C0E                            		; SBZ
00068C0E 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00068C14 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00068C1A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00068C20 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00068C26                            		; Ending
00068C26 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00068C2C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00068C32 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00068C38 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00068C3E                            

00068C3E                            Level_GHZ1:	incbin	"levels\ghz1.bin"
00068D30                            		even
00068D30 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00068D34                            Level_GHZ2:	incbin	"levels\ghz2.bin"
00068DFC                            		even
00068DFC 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00068E00                            Level_GHZ3:	incbin	"levels\ghz3.bin"
00068F22                            		even
00068F22                            Level_GHZbg:	incbin	"levels\ghzbg.bin"
00068F44                            		even
00068F44 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00068F48 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00068F4C                            

00068F4C                            Level_LZ1:	incbin	"levels\lz1.bin"
0006904E                            		even
0006904E                            Level_LZbg:	incbin	"levels\lzbg.bin"
00069150                            		even
00069150 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00069154                            Level_LZ2:	incbin	"levels\lz2.bin"
000691EE                            		even
000691EE 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
000691F2                            Level_LZ3:	incbin	"levels\lz3.bin"
0006930C                            		even
0006930C 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00069310                            Level_SBZ3:	incbin	"levels\sbz3.bin"
000693CA                            		even
000693CA 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000693CE                            

000693CE                            Level_MZ1:	incbin	"levels\mz1.bin"
0006946C                            		even
0006946C                            Level_MZ1bg:	incbin	"levels\mz1bg.bin"
000694E6                            		even
000694E6                            Level_MZ2:	incbin	"levels\mz2.bin"
0006958A                            		even
0006958A                            Level_MZ2bg:	incbin	"levels\mz2bg.bin"
0006961C                            		even
0006961C 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00069620                            Level_MZ3:	incbin	"levels\mz3.bin"
00069702                            		even
00069702                            Level_MZ3bg:	incbin	"levels\mz3bg.bin"
000697A6                            		even
000697A6 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000697AA 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000697AE                            

000697AE                            Level_SLZ1:	incbin	"levels\slz1.bin"
000698C0                            		even
000698C0                            Level_SLZbg:	incbin	"levels\slzbg.bin"
0006993A                            		even
0006993A                            Level_SLZ2:	incbin	"levels\slz2.bin"
00069A2A                            		even
00069A2A                            Level_SLZ3:	incbin	"levels\slz3.bin"
00069B44                            		even
00069B44 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00069B48                            

00069B48                            Level_SYZ1:	incbin	"levels\syz1.bin"
00069C04                            		even
00069C04                            		incbin	"levels\syzbg (JP1).bin"
00069C3E                            		even
00069C3E 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00069C42                            Level_SYZ2:	incbin	"levels\syz2.bin"
00069D46                            		even
00069D46 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00069D4A                            Level_SYZ3:	incbin	"levels\syz3.bin"
00069EA4                            		even
00069EA4 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00069EA8 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00069EAC                            

00069EAC                            Level_SBZ1:	incbin	"levels\sbz1.bin"
00069FCE                            		even
00069FCE                            Level_SBZ1bg:	incbin	"levels\sbz1bg.bin"
0006A00C                            		even
0006A00C                            Level_SBZ2:	incbin	"levels\sbz2.bin"
0006A14E                            		even
0006A14E                            Level_SBZ2bg:	incbin	"levels\sbz2bg.bin"
0006A2B8                            		even
0006A2B8 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006A2BC 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006A2C0                            Level_End:	incbin	"levels\ending.bin"
0006A2E0                            		even
0006A2E0 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006A2E4                            

0006A2E4                            

0006A2E4                            Art_BigRing:	incbin	"artunc\Giant Ring.bin"
0006AF24                            		even
0006AF24                            

0006B000                            

0006B000                            ; ---------------------------------------------------------------------------
0006B000                            ; Sprite locations index
0006B000                            ; ---------------------------------------------------------------------------
0006B000                            ObjPos_Index:
0006B000                            		; GHZ
0006B000 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B004 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B008 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B00C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B010                            		; LZ
0006B010 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B014 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B018 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B01C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B020                            		; MZ
0006B020 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B024 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B028 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B02C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B030                            		; SLZ
0006B030 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B034 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B038 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B03C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B040                            		; SYZ
0006B040 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B044 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B048 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B04C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B050                            		; SBZ
0006B050 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B054 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B058 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B05C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B060                            		; Ending
0006B060 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B064 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B068 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B06C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B070                            		; --- Put extra object data here. ---
0006B070                            ObjPosLZPlatform_Index:
0006B070 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006B074 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006B078 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006B07C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006B080                            ObjPosSBZPlatform_Index:
0006B080 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006B084 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006B088 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006B08C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006B090 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006B096                            ObjPos_GHZ1:	incbin	"objpos\ghz1.bin"
0006B5A0                            		even
0006B5A0                            ObjPos_GHZ2:	incbin	"objpos\ghz2.bin"
0006BB5E                            		even
0006BB5E                            		incbin	"objpos\ghz3 (JP1).bin"
0006C218                            		even
0006C218                            		incbin	"objpos\lz1 (JP1).bin"
0006C68C                            		even
0006C68C                            ObjPos_LZ2:	incbin	"objpos\lz2.bin"
0006C9CE                            		even
0006C9CE                            		incbin	"objpos\lz3 (JP1).bin"
0006CF92                            		even
0006CF92                            ObjPos_SBZ3:	incbin	"objpos\sbz3.bin"
0006D42A                            		even
0006D42A                            ObjPos_LZ1pf1:	incbin	"objpos\lz1pf1.bin"
0006D45C                            		even
0006D45C                            ObjPos_LZ1pf2:	incbin	"objpos\lz1pf2.bin"
0006D48E                            		even
0006D48E                            ObjPos_LZ2pf1:	incbin	"objpos\lz2pf1.bin"
0006D4C0                            		even
0006D4C0                            ObjPos_LZ2pf2:	incbin	"objpos\lz2pf2.bin"
0006D4F2                            		even
0006D4F2                            ObjPos_LZ3pf1:	incbin	"objpos\lz3pf1.bin"
0006D53C                            		even
0006D53C                            ObjPos_LZ3pf2:	incbin	"objpos\lz3pf2.bin"
0006D57A                            		even
0006D57A                            		incbin	"objpos\mz1 (JP1).bin"
0006D8E6                            		even
0006D8E6                            ObjPos_MZ2:	incbin	"objpos\mz2.bin"
0006DD90                            		even
0006DD90                            ObjPos_MZ3:	incbin	"objpos\mz3.bin"
0006E306                            		even
0006E306                            ObjPos_SLZ1:	incbin	"objpos\slz1.bin"
0006E846                            		even
0006E846                            ObjPos_SLZ2:	incbin	"objpos\slz2.bin"
0006ECAE                            		even
0006ECAE                            ObjPos_SLZ3:	incbin	"objpos\slz3.bin"
0006F290                            		even
0006F290                            ObjPos_SYZ1:	incbin	"objpos\syz1.bin"
0006F71C                            		even
0006F71C                            ObjPos_SYZ2:	incbin	"objpos\syz2.bin"
0006FC86                            		even
0006FC86                            		incbin	"objpos\syz3 (JP1).bin"
00070292                            		even
00070292                            		incbin	"objpos\sbz1 (JP1).bin"
000709D0                            		even
000709D0                            ObjPos_SBZ2:	incbin	"objpos\sbz2.bin"
000710AE                            		even
000710AE                            ObjPos_FZ:	incbin	"objpos\fz.bin"
000710C0                            		even
000710C0                            ObjPos_SBZ1pf1:	incbin	"objpos\sbz1pf1.bin"
000710F2                            		even
000710F2                            ObjPos_SBZ1pf2:	incbin	"objpos\sbz1pf2.bin"
00071124                            		even
00071124                            ObjPos_SBZ1pf3:	incbin	"objpos\sbz1pf3.bin"
00071156                            		even
00071156                            ObjPos_SBZ1pf4:	incbin	"objpos\sbz1pf4.bin"
00071188                            		even
00071188                            ObjPos_SBZ1pf5:	incbin	"objpos\sbz1pf5.bin"
000711BA                            		even
000711BA                            ObjPos_SBZ1pf6:	incbin	"objpos\sbz1pf6.bin"
000711F2                            		even
000711F2                            ObjPos_End:	incbin	"objpos\ending.bin"
0007134E                            		even
0007134E FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00071354                            

00071354                            		dcb.b $63C,$FF
00071990                            		;dcb.b ($10000-(*%$10000))-(EndOfRom-SoundDriver),$FF
00071990                            

00071990                            SoundDriver:	include "s1.sounddriver.asm"
00071990                            ; ---------------------------------------------------------------------------
00071990                            ; Modified SMPS 68k Type 1b sound driver
00071990                            ; ---------------------------------------------------------------------------
00071990                            ; Go_SoundTypes:
00071990 0000 0000                  Go_SoundPriorities:	dc.l SoundPriorities
00071994                            ; Go_SoundD0:
00071994 0000 0000                  Go_SpecSoundIndex:	dc.l SpecSoundIndex
00071998 0000 0000                  Go_MusicIndex:		dc.l MusicIndex
0007199C 0000 0000                  Go_SoundIndex:		dc.l SoundIndex
000719A0                            ; off_719A0:
000719A0 0000 0000                  Go_SpeedUpIndex:	dc.l SpeedUpIndex
000719A4 0000 0000                  Go_PSGIndex:		dc.l PSG_Index
000719A8                            ; ---------------------------------------------------------------------------
000719A8                            ; PSG instruments used in music
000719A8                            ; ---------------------------------------------------------------------------
000719A8                            PSG_Index:
000719A8 0000 0000 0000 0000 0000+  		dc.l PSG1, PSG2, PSG3
000719B4 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000719C0 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000719CC                            PSG1:		incbin	"sound/psg/psg1.bin"
000719E3                            PSG2:		incbin	"sound/psg/psg2.bin"
000719EA                            PSG3:		incbin	"sound/psg/psg3.bin"
000719FB                            PSG4:		incbin	"sound/psg/psg4.bin"
00071A06                            PSG6:		incbin	"sound/psg/psg6.bin"
00071A15                            PSG5:		incbin	"sound/psg/psg5.bin"
00071A3F                            PSG7:		incbin	"sound/psg/psg7.bin"
00071A5B                            PSG8:		incbin	"sound/psg/psg8.bin"
00071A83                            PSG9:		incbin	"sound/psg/psg9.bin"
00071A94                            ; ---------------------------------------------------------------------------
00071A94                            ; New tempos for songs during speed shoes
00071A94                            ; ---------------------------------------------------------------------------
00071A94                            ; DANGER! several songs will use the first few bytes of MusicIndex as their main
00071A94                            ; tempos while speed shoes are active. If you don't want that, you should add
00071A94                            ; their "correct" sped-up main tempos to the list.
00071A94                            ; byte_71A94:
00071A94                            SpeedUpIndex:
00071A94 07                         		dc.b 7		; GHZ
00071A95 72                         		dc.b $72	; LZ
00071A96 73                         		dc.b $73	; MZ
00071A97 26                         		dc.b $26	; SLZ
00071A98 15                         		dc.b $15	; SYZ
00071A99 08                         		dc.b 8		; SBZ
00071A9A FF                         		dc.b $FF	; Invincibility
00071A9B 05                         		dc.b 5		; Extra Life
00071A9C                            		;dc.b ?		; Special Stage
00071A9C                            		;dc.b ?		; Title Screen
00071A9C                            		;dc.b ?		; Ending
00071A9C                            		;dc.b ?		; Boss
00071A9C                            		;dc.b ?		; FZ
00071A9C                            		;dc.b ?		; Sonic Got Through
00071A9C                            		;dc.b ?		; Game Over
00071A9C                            		;dc.b ?		; Continue Screen
00071A9C                            		;dc.b ?		; Credits
00071A9C                            		;dc.b ?		; Drowning
00071A9C                            		;dc.b ?		; Get Emerald
00071A9C                            

00071A9C                            ; ---------------------------------------------------------------------------
00071A9C                            ; Music	Pointers
00071A9C                            ; ---------------------------------------------------------------------------
00071A9C                            MusicIndex:
00071A9C 0000 0000                  ptr_mus81:	dc.l Music81
00071AA0 0000 0000                  ptr_mus82:	dc.l Music82
00071AA4 0000 0000                  ptr_mus83:	dc.l Music83
00071AA8 0000 0000                  ptr_mus84:	dc.l Music84
00071AAC 0000 0000                  ptr_mus85:	dc.l Music85
00071AB0 0000 0000                  ptr_mus86:	dc.l Music86
00071AB4 0000 0000                  ptr_mus87:	dc.l Music87
00071AB8 0000 0000                  ptr_mus88:	dc.l Music88
00071ABC 0000 0000                  ptr_mus89:	dc.l Music89
00071AC0 0000 0000                  ptr_mus8A:	dc.l Music8A
00071AC4 0000 0000                  ptr_mus8B:	dc.l Music8B
00071AC8 0000 0000                  ptr_mus8C:	dc.l Music8C
00071ACC 0000 0000                  ptr_mus8D:	dc.l Music8D
00071AD0 0000 0000                  ptr_mus8E:	dc.l Music8E
00071AD4 0000 0000                  ptr_mus8F:	dc.l Music8F
00071AD8 0000 0000                  ptr_mus90:	dc.l Music90
00071ADC 0000 0000                  ptr_mus91:	dc.l Music91
00071AE0 0000 0000                  ptr_mus92:	dc.l Music92
00071AE4 0000 0000                  ptr_mus93:	dc.l Music93
00071AE8                            ptr_musend
00071AE8                            ; ---------------------------------------------------------------------------
00071AE8                            ; Priority of sound. New music or SFX must have a priority higher than or equal
00071AE8                            ; to what is stored in v_sndprio or it won't play. If bit 7 of new priority is
00071AE8                            ; set ($80 and up), the new music or SFX will not set its priority -- meaning
00071AE8                            ; any music or SFX can override it (as long as it can override whatever was
00071AE8                            ; playing before). Usually, SFX will only override SFX, special SFX ($D0-$DF)
00071AE8                            ; will only override special SFX and music will only override music.
00071AE8                            ; ---------------------------------------------------------------------------
00071AE8                            ; SoundTypes:
00071AE8                            SoundPriorities:
00071AE8 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $81
00071AF7 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
00071B07 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
00071B17 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
00071B27 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
00071B37 8080 8080 8080 8080 8080+  		dc.b $80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80,$80	; $D0
00071B47 9090 9090 90               		dc.b $90,$90,$90,$90,$90                                            	; $E0
00071B4C                            

00071B4C                            ; ---------------------------------------------------------------------------
00071B4C                            ; Subroutine to update music more than once per frame
00071B4C                            ; (Called by horizontal & vert. interrupts)
00071B4C                            ; ---------------------------------------------------------------------------
00071B4C                            

00071B4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071B4C                            

00071B4C                            ; sub_71B4C:
00071B4C                            UpdateMusic:
00071B4C 33FC 0100 00A1 1100        		stopZ80
00071B54 4E71                       		nop	
00071B56 4E71                       		nop	
00071B58 4E71                       		nop	
00071B5A                            ; loc_71B5A:
00071B5A                            @updateloop:
00071B5A 0839 0000 00A1 1100        		btst	#0,(z80_bus_request).l		; Is the z80 busy?
00071B62 66F6                       		bne.s	@updateloop			; If so, wait
00071B64                            

00071B64 0839 0007 00A0 1FFD        		btst	#7,(z80_dac_status).l		; Is DAC accepting new samples?
00071B6C 6700                       		beq.s	@driverinput			; Branch if yes
00071B6E 33FC 0000 00A1 1100        		startZ80
00071B76 4E71                       		nop	
00071B78 4E71                       		nop	
00071B7A 4E71                       		nop	
00071B7C 4E71                       		nop	
00071B7E 4E71                       		nop	
00071B80 60CA                       		bra.s	UpdateMusic
00071B82                            ; ===========================================================================
00071B82                            ; loc_71B82:
00071B82                            @driverinput:
00071B82 4DF9 00FF F000             		lea	(v_snddriver_ram&$FFFFFF).l,a6
00071B88 422E 000E                  		clr.b	f_voice_selector(a6)
00071B8C 4A2E 0003                  		tst.b	f_pausemusic(a6)		; is music paused?
00071B90 6600 0000                  		bne.w	PauseMusic			; if yes, branch
00071B94 532E 0001                  		subq.b	#1,v_main_tempo_timeout(a6)	; Has main tempo timer expired?
00071B98 6600                       		bne.s	@skipdelay
00071B9A 4EBA 0000                  		jsr	TempoWait(pc)
00071B9E                            ; loc_71B9E:
00071B9E                            @skipdelay:
00071B9E 102E 0004                  		move.b	v_fadeout_counter(a6),d0
00071BA2 6700                       		beq.s	@skipfadeout
00071BA4 4EBA 0000                  		jsr	DoFadeOut(pc)
00071BA8                            ; loc_71BA8:
00071BA8                            @skipfadeout:
00071BA8 4A2E 0024                  		tst.b	f_fadein_flag(a6)
00071BAC 6700                       		beq.s	@skipfadein
00071BAE 4EBA 0000                  		jsr	DoFadeIn(pc)
00071BB2                            ; loc_71BB2:
00071BB2                            @skipfadein:
00071BB2                            		; DANGER! The following line only checks v_soundqueue0 and v_soundqueue1, breaking v_soundqueue2.
00071BB2 4A6E 000A                  		tst.w	v_soundqueue0(a6)	; is a music or sound queued for playing?
00071BB6 6700                       		beq.s	@nosndinput		; if not, branch
00071BB8 4EBA 0000                  		jsr	CycleSoundQueue(pc)
00071BBC                            ; loc_71BBC:
00071BBC                            @nosndinput:
00071BBC 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; is song queue set for silence (empty)?
00071BC2 6700                       		beq.s	@nonewsound		; If yes, branch
00071BC4 4EBA 0000                  		jsr	PlaySoundID(pc)
00071BC8                            ; loc_71BC8:
00071BC8                            @nonewsound:
00071BC8 4BEE 0040                  		lea	v_music_dac_track(a6),a5
00071BCC 4A15                       		tst.b	(a5)			; Is DAC track playing? (TrackPlaybackControl)
00071BCE 6A00                       		bpl.s	@dacdone		; Branch if not
00071BD0 4EBA 0000                  		jsr	DACUpdateTrack(pc)
00071BD4                            ; loc_71BD4:
00071BD4                            @dacdone:
00071BD4 422E 0008                  		clr.b	f_updating_dac(a6)
00071BD8 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00071BDA                            ; loc_71BDA:
00071BDA                            @bgmfmloop:
00071BDA DAFC 0030                  		adda.w	#TrackSz,a5
00071BDE 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00071BE0 6A00                       		bpl.s	@bgmfmnext		; Branch if not
00071BE2 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00071BE6                            ; loc_71BE6:
00071BE6                            @bgmfmnext:
00071BE6 51CF FFF2                  		dbf	d7,@bgmfmloop
00071BEA                            

00071BEA 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks
00071BEC                            ; loc_71BEC:
00071BEC                            @bgmpsgloop:
00071BEC DAFC 0030                  		adda.w	#TrackSz,a5
00071BF0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00071BF2 6A00                       		bpl.s	@bgmpsgnext		; Branch if not
00071BF4 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00071BF8                            ; loc_71BF8:
00071BF8                            @bgmpsgnext:
00071BF8 51CF FFF2                  		dbf	d7,@bgmpsgloop
00071BFC                            

00071BFC 1D7C 0080 000E             		move.b	#$80,f_voice_selector(a6)			; Now at SFX tracks
00071C02 7E02                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d7	; 3 FM tracks (SFX)
00071C04                            ; loc_71C04:
00071C04                            @sfxfmloop:
00071C04 DAFC 0030                  		adda.w	#TrackSz,a5
00071C08 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00071C0A 6A00                       		bpl.s	@sfxfmnext		; Branch if not
00071C0C 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00071C10                            ; loc_71C10:
00071C10                            @sfxfmnext:
00071C10 51CF FFF2                  		dbf	d7,@sfxfmloop
00071C14                            

00071C14 7E02                       		moveq	#((v_sfx_psg_tracks_end-v_sfx_psg_tracks)/TrackSz)-1,d7 ; 3 PSG tracks (SFX)
00071C16                            ; loc_71C16:
00071C16                            @sfxpsgloop:
00071C16 DAFC 0030                  		adda.w	#TrackSz,a5
00071C1A 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00071C1C 6A00                       		bpl.s	@sfxpsgnext		; Branch if not
00071C1E 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00071C22                            ; loc_71C22:
00071C22                            @sfxpsgnext:
00071C22 51CF FFF2                  		dbf	d7,@sfxpsgloop
00071C26                            		
00071C26 1D7C 0040 000E             		move.b	#$40,f_voice_selector(a6) ; Now at special SFX tracks
00071C2C DAFC 0030                  		adda.w	#TrackSz,a5
00071C30 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00071C32 6A00                       		bpl.s	@specfmdone		; Branch if not
00071C34 4EBA 0000                  		jsr	FMUpdateTrack(pc)
00071C38                            ; loc_71C38:
00071C38                            @specfmdone:
00071C38 DAFC 0030                  		adda.w	#TrackSz,a5
00071C3C 4A15                       		tst.b	(a5)			; Is track playing (TrackPlaybackControl)
00071C3E 6A00                       		bpl.s	DoStartZ80		; Branch if not
00071C40 4EBA 0000                  		jsr	PSGUpdateTrack(pc)
00071C44                            ; loc_71C44:
00071C44                            DoStartZ80:
00071C44 33FC 0000 00A1 1100        		startZ80
00071C4C 4E75                       		rts	
00071C4E                            ; End of function UpdateMusic
00071C4E                            

00071C4E                            

00071C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071C4E                            

00071C4E                            ; sub_71C4E: UpdateDAC:
00071C4E                            DACUpdateTrack:
00071C4E 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Has DAC sample timeout expired?
00071C52 6600                       		bne.s	@locret				; Return if not
00071C54 1D7C 0080 0008             		move.b	#$80,f_updating_dac(a6)		; Set flag to indicate this is the DAC
00071C5A                            ;DACDoNext:
00071C5A 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; DAC track data pointer
00071C5E                            ; loc_71C5E:
00071C5E                            @sampleloop:
00071C5E 7A00                       		moveq	#0,d5
00071C60 1A1C                       		move.b	(a4)+,d5	; Get next SMPS unit
00071C62 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00071C66 6500                       		blo.s	@notcoord	; Branch if not
00071C68 4EBA 0000                  		jsr	CoordFlag(pc)
00071C6C 60F0                       		bra.s	@sampleloop
00071C6E                            ; ===========================================================================
00071C6E                            ; loc_71C6E:
00071C6E                            @notcoord:
00071C6E 4A05                       		tst.b	d5			; Is it a sample?
00071C70 6A00                       		bpl.s	@gotduration		; Branch if not (duration)
00071C72 1B45 0010                  		move.b	d5,TrackSavedDAC(a5)	; Store new sample
00071C76 1A1C                       		move.b	(a4)+,d5		; Get another byte
00071C78 6A00                       		bpl.s	@gotduration		; Branch if it is a duration
00071C7A 534C                       		subq.w	#1,a4			; Put byte back
00071C7C 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5) ; Use last duration
00071C82 6000                       		bra.s	@gotsampleduration
00071C84                            ; ===========================================================================
00071C84                            ; loc_71C84:
00071C84                            @gotduration:
00071C84 4EBA 0000                  		jsr	SetDuration(pc)
00071C88                            ; loc_71C88:
00071C88                            @gotsampleduration:
00071C88 2B4C 0004                  		move.l	a4,TrackDataPointer(a5) ; Save pointer
00071C8C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00071C90 6600                       		bne.s	@locret			; Return if yes
00071C92 7000                       		moveq	#0,d0
00071C94 102D 0010                  		move.b	TrackSavedDAC(a5),d0	; Get sample
00071C98 0C00 0080                  		cmpi.b	#$80,d0			; Is it a rest?
00071C9C 6700                       		beq.s	@locret			; Return if yes
00071C9E 0800 0003                  		btst	#3,d0			; Is bit 3 set (samples between $88-$8F)?
00071CA2 6600                       		bne.s	@timpani		; Various timpani
00071CA4 13C0 00A0 1FFF             		move.b	d0,(z80_dac_sample).l
00071CAA                            ; locret_71CAA:
00071CAA                            @locret:
00071CAA 4E75                       		rts	
00071CAC                            ; ===========================================================================
00071CAC                            ; loc_71CAC:
00071CAC                            @timpani:
00071CAC 0400 0088                  		subi.b	#$88,d0		; Convert into an index
00071CB0 103B 0000                  		move.b	DAC_sample_rate(pc,d0.w),d0
00071CB4                            		; Warning: this affects the raw pitch of sample $83, meaning it will
00071CB4                            		; use this value from then on.
00071CB4 13C0 00A0 00EA             		move.b	d0,(z80_dac3_pitch).l
00071CBA 13FC 0083 00A0 1FFF        		move.b	#$83,(z80_dac_sample).l	; Use timpani
00071CC2 4E75                       		rts	
00071CC4                            ; End of function DACUpdateTrack
00071CC4                            

00071CC4                            ; ===========================================================================
00071CC4                            ; Note: this only defines rates for samples $88-$8D, meaning $8E-$8F are invalid.
00071CC4                            ; Also, $8C-$8D are so slow you may want to skip them.
00071CC4                            ; byte_71CC4:
00071CC4 1215 1C1D FFFF             DAC_sample_rate: dc.b $12, $15, $1C, $1D, $FF, $FF
00071CCA                            

00071CCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071CCA                            

00071CCA                            ; sub_71CCA:
00071CCA                            FMUpdateTrack:
00071CCA 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5) ; Update duration timeout
00071CCE 6600                       		bne.s	@notegoing		; Branch if it hasn't expired
00071CD0 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00071CD4 4EBA 0000                  		jsr	FMDoNext(pc)
00071CD8 4EBA 0000                  		jsr	FMPrepareNote(pc)
00071CDC 6000 0000                  		bra.w	FMNoteOn
00071CE0                            ; ===========================================================================
00071CE0                            ; loc_71CE0:
00071CE0                            @notegoing:
00071CE0 4EBA 0000                  		jsr	NoteTimeoutUpdate(pc)
00071CE4 4EBA 0000                  		jsr	DoModulation(pc)
00071CE8 6000 0000                  		bra.w	FMUpdateFreq
00071CEC                            ; End of function FMUpdateTrack
00071CEC                            

00071CEC                            

00071CEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071CEC                            

00071CEC                            ; sub_71CEC:
00071CEC                            FMDoNext:
00071CEC 286D 0004                  		movea.l	TrackDataPointer(a5),a4 ; Track data pointer
00071CF0 0895 0001                  		bclr	#1,(a5)			; Clear 'track at rest' bit (TrackPlaybackControl)
00071CF4                            ; loc_71CF4:
00071CF4                            @noteloop:
00071CF4 7A00                       		moveq	#0,d5
00071CF6 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00071CF8 0C05 00E0                  		cmpi.b	#$E0,d5		; Is this a coord. flag?
00071CFC 6500                       		blo.s	@gotnote	; Branch if not
00071CFE 4EBA 0000                  		jsr	CoordFlag(pc)
00071D02 60F0                       		bra.s	@noteloop
00071D04                            ; ===========================================================================
00071D04                            ; loc_71D04:
00071D04                            @gotnote:
00071D04 4EBA 0000                  		jsr	FMNoteOff(pc)
00071D08 4A05                       		tst.b	d5		; Is this a note?
00071D0A 6A00                       		bpl.s	@gotduration	; Branch if not
00071D0C 4EBA 0000                  		jsr	FMSetFreq(pc)
00071D10 1A1C                       		move.b	(a4)+,d5	; Get another byte
00071D12 6A00                       		bpl.s	@gotduration	; Branch if it is a duration
00071D14 534C                       		subq.w	#1,a4		; Otherwise, put it back
00071D16 6000 0000                  		bra.w	FinishTrackUpdate
00071D1A                            ; ===========================================================================
00071D1A                            ; loc_71D1A:
00071D1A                            @gotduration:
00071D1A 4EBA 0000                  		jsr	SetDuration(pc)
00071D1E 6000 0000                  		bra.w	FinishTrackUpdate
00071D22                            ; End of function FMDoNext
00071D22                            

00071D22                            

00071D22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071D22                            

00071D22                            ; sub_71D22:
00071D22                            FMSetFreq:
00071D22 0405 0080                  		subi.b	#$80,d5			; Make it a zero-based index
00071D26 6700                       		beq.s	TrackSetRest
00071D28 DA2D 0008                  		add.b	TrackTranspose(a5),d5	; Add track transposition
00071D2C 0245 007F                  		andi.w	#$7F,d5			; Clear high byte and sign bit
00071D30 E34D                       		lsl.w	#1,d5
00071D32 41FA 0000                  		lea	FMFrequencies(pc),a0
00071D36 3C30 5000                  		move.w	(a0,d5.w),d6
00071D3A 3B46 0010                  		move.w	d6,TrackFreq(a5)	; Store new frequency
00071D3E 4E75                       		rts	
00071D40                            ; End of function FMSetFreq
00071D40                            

00071D40                            

00071D40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071D40                            

00071D40                            ; sub_71D40:
00071D40                            SetDuration:
00071D40 1005                       		move.b	d5,d0
00071D42 122D 0002                  		move.b	TrackTempoDivider(a5),d1	; Get dividing timing
00071D46                            ; loc_71D46:
00071D46                            @multloop:
00071D46 5301                       		subq.b	#1,d1
00071D48 6700                       		beq.s	@donemult
00071D4A D005                       		add.b	d5,d0
00071D4C 60F8                       		bra.s	@multloop
00071D4E                            ; ===========================================================================
00071D4E                            ; loc_71D4E:
00071D4E                            @donemult:
00071D4E 1B40 000F                  		move.b	d0,TrackSavedDuration(a5)	; Save duration
00071D52 1B40 000E                  		move.b	d0,TrackDurationTimeout(a5)	; Save duration timeout
00071D56 4E75                       		rts	
00071D58                            ; End of function SetDuration
00071D58                            

00071D58                            ; ===========================================================================
00071D58                            ; loc_71D58:
00071D58                            TrackSetRest:
00071D58 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00071D5C 426D 0010                  		clr.w	TrackFreq(a5)	; Clear frequency
00071D60                            

00071D60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071D60                            

00071D60                            ; sub_71D60:
00071D60                            FinishTrackUpdate:
00071D60 2B4C 0004                  		move.l	a4,TrackDataPointer(a5)	; Store new track position
00071D64 1B6D 000F 000E             		move.b	TrackSavedDuration(a5),TrackDurationTimeout(a5)	; Reset note timeout
00071D6A 0815 0004                  		btst	#4,(a5)				; Is track set to not attack note? (TrackPlaybackControl)
00071D6E 6600                       		bne.s	@locret				; If so, branch
00071D70 1B6D 0013 0012             		move.b	TrackNoteTimeoutMaster(a5),TrackNoteTimeout(a5)	; Reset note fill timeout
00071D76 422D 000C                  		clr.b	TrackVolEnvIndex(a5)		; Reset PSG volume envelope index (even on FM tracks...)
00071D7A 0815 0003                  		btst	#3,(a5)				; Is modulation on? (TrackPlaybackControl)
00071D7E 6700                       		beq.s	@locret				; If not, return (TrackPlaybackControl)
00071D80 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Modulation data pointer
00071D84 1B58 0018                  		move.b	(a0)+,TrackModulationWait(a5)	; Reset wait
00071D88 1B58 0019                  		move.b	(a0)+,TrackModulationSpeed(a5)	; Reset speed
00071D8C 1B58 001A                  		move.b	(a0)+,TrackModulationDelta(a5)	; Reset delta
00071D90 1018                       		move.b	(a0)+,d0			; Get steps
00071D92 E208                       		lsr.b	#1,d0				; Halve them
00071D94 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; Then store
00071D98 426D 001C                  		clr.w	TrackModulationVal(a5)		; Reset frequency change
00071D9C                            ; locret_71D9C:
00071D9C                            @locret:
00071D9C 4E75                       		rts	
00071D9E                            ; End of function FinishTrackUpdate
00071D9E                            

00071D9E                            

00071D9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071D9E                            

00071D9E                            ; sub_71D9E: NoteFillUpdate
00071D9E                            NoteTimeoutUpdate:
00071D9E 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)	; Is note fill on?
00071DA2 6700                       		beq.s	@locret
00071DA4 532D 0012                  		subq.b	#1,TrackNoteTimeout(a5)	; Update note fill timeout
00071DA8 6600                       		bne.s	@locret				; Return if it hasn't expired
00071DAA 08D5 0001                  		bset	#1,(a5)				; Put track at rest (TrackPlaybackControl)
00071DAE 4A2D 0001                  		tst.b	TrackVoiceControl(a5)		; Is this a PSG track?
00071DB2 6B00 0000                  		bmi.w	@psgnoteoff			; If yes, branch
00071DB6 4EBA 0000                  		jsr	FMNoteOff(pc)
00071DBA 584F                       		addq.w	#4,sp				; Do not return to caller
00071DBC 4E75                       		rts	
00071DBE                            ; ===========================================================================
00071DBE                            ; loc_71DBE:
00071DBE                            @psgnoteoff:
00071DBE 4EBA 0000                  		jsr	PSGNoteOff(pc)
00071DC2 584F                       		addq.w	#4,sp		; Do not return to caller
00071DC4                            ; locret_71DC4:
00071DC4                            @locret:
00071DC4 4E75                       		rts	
00071DC6                            ; End of function NoteTimeoutUpdate
00071DC6                            

00071DC6                            

00071DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071DC6                            

00071DC6                            ; sub_71DC6:
00071DC6                            DoModulation:
00071DC6 584F                       		addq.w	#4,sp				; Do not return to caller (but see below)
00071DC8 0815 0003                  		btst	#3,(a5)				; Is modulation active? (TrackPlaybackControl)
00071DCC 6700                       		beq.s	@locret				; Return if not
00071DCE 4A2D 0018                  		tst.b	TrackModulationWait(a5)	; Has modulation wait expired?
00071DD2 6700                       		beq.s	@waitdone			; If yes, branch
00071DD4 532D 0018                  		subq.b	#1,TrackModulationWait(a5)	; Update wait timeout
00071DD8 4E75                       		rts	
00071DDA                            ; ===========================================================================
00071DDA                            ; loc_71DDA:
00071DDA                            @waitdone:
00071DDA 532D 0019                  		subq.b	#1,TrackModulationSpeed(a5)	; Update speed
00071DDE 6700                       		beq.s	@updatemodulation		; If it expired, want to update modulation
00071DE0 4E75                       		rts	
00071DE2                            ; ===========================================================================
00071DE2                            ; loc_71DE2:
00071DE2                            @updatemodulation:
00071DE2 206D 0014                  		movea.l	TrackModulationPtr(a5),a0	; Get modulation data
00071DE6 1B68 0001 0019             		move.b	1(a0),TrackModulationSpeed(a5)	; Restore modulation speed
00071DEC 4A2D 001B                  		tst.b	TrackModulationSteps(a5)	; Check number of steps
00071DF0 6600                       		bne.s	@calcfreq			; If nonzero, branch
00071DF2 1B68 0003 001B             		move.b	3(a0),TrackModulationSteps(a5)	; Restore from modulation data
00071DF8 442D 001A                  		neg.b	TrackModulationDelta(a5)	; Negate modulation delta
00071DFC 4E75                       		rts	
00071DFE                            ; ===========================================================================
00071DFE                            ; loc_71DFE:
00071DFE                            @calcfreq:
00071DFE 532D 001B                  		subq.b	#1,TrackModulationSteps(a5)	; Update modulation steps
00071E02 1C2D 001A                  		move.b	TrackModulationDelta(a5),d6	; Get modulation delta
00071E06 4886                       		ext.w	d6
00071E08 DC6D 001C                  		add.w	TrackModulationVal(a5),d6	; Add cumulative modulation change
00071E0C 3B46 001C                  		move.w	d6,TrackModulationVal(a5)	; Store it
00071E10 DC6D 0010                  		add.w	TrackFreq(a5),d6		; Add note frequency to it
00071E14 594F                       		subq.w	#4,sp		; In this case, we want to return to caller after all
00071E16                            ; locret_71E16:
00071E16                            @locret:
00071E16 4E75                       		rts	
00071E18                            ; End of function DoModulation
00071E18                            

00071E18                            

00071E18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071E18                            

00071E18                            ; sub_71E18:
00071E18                            FMPrepareNote:
00071E18 0815 0001                  		btst	#1,(a5)			; Is track resting? (TrackPlaybackControl)
00071E1C 6600                       		bne.s	locret_71E48		; Return if so
00071E1E 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get current note frequency
00071E22 6700                       		beq.s	FMSetRest		; Branch if zero
00071E24                            ; loc_71E24:
00071E24                            FMUpdateFreq:
00071E24 102D 001E                  		move.b	TrackDetune(a5),d0 	; Get detune value
00071E28 4880                       		ext.w	d0
00071E2A DC40                       		add.w	d0,d6			; Add note frequency
00071E2C 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00071E30 6600                       		bne.s	locret_71E48		; Return if so
00071E32 3206                       		move.w	d6,d1
00071E34 E049                       		lsr.w	#8,d1
00071E36 103C 00A4                  		move.b	#$A4,d0			; Register for upper 6 bits of frequency
00071E3A 4EBA 0000                  		jsr	WriteFMIorII(pc)
00071E3E 1206                       		move.b	d6,d1
00071E40 103C 00A0                  		move.b	#$A0,d0			; Register for lower 8 bits of frequency
00071E44 4EBA 0000                  		jsr	WriteFMIorII(pc)	; (It would be better if this were a jmp)
00071E48                            ; locret_71E48:
00071E48                            locret_71E48:
00071E48 4E75                       		rts	
00071E4A                            ; ===========================================================================
00071E4A                            ; loc_71E4A:
00071E4A                            FMSetRest:
00071E4A 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00071E4E 4E75                       		rts	
00071E50                            ; End of function FMPrepareNote
00071E50                            

00071E50                            ; ===========================================================================
00071E50                            ; loc_71E50:
00071E50                            PauseMusic:
00071E50 6B00                       		bmi.s	@unpausemusic		; Branch if music is being unpaused
00071E52 0C2E 0002 0003             		cmpi.b	#2,f_pausemusic(a6)
00071E58 6700 0000                  		beq.w	@unpausedallfm
00071E5C 1D7C 0002 0003             		move.b	#2,f_pausemusic(a6)
00071E62 7602                       		moveq	#2,d3
00071E64 103C 00B4                  		move.b	#$B4,d0		; Command to set AMS/FMS/panning
00071E68 7200                       		moveq	#0,d1		; No panning, AMS or FMS
00071E6A                            ; loc_71E6A:
00071E6A                            @killpanloop:
00071E6A 4EBA 0000                  		jsr	WriteFMI(pc)
00071E6E 4EBA 0000                  		jsr	WriteFMII(pc)
00071E72 5200                       		addq.b	#1,d0
00071E74 51CB FFF4                  		dbf	d3,@killpanloop
00071E78                            

00071E78 7602                       		moveq	#2,d3
00071E7A 7028                       		moveq	#$28,d0		; Key on/off register
00071E7C                            ; loc_71E7C:
00071E7C                            @noteoffloop:
00071E7C 1203                       		move.b	d3,d1		; FM1, FM2, FM3
00071E7E 4EBA 0000                  		jsr	WriteFMI(pc)
00071E82 5801                       		addq.b	#4,d1		; FM4, FM5, FM6
00071E84 4EBA 0000                  		jsr	WriteFMI(pc)
00071E88 51CB FFF2                  		dbf	d3,@noteoffloop
00071E8C                            

00071E8C 4EBA 0000                  		jsr	PSGSilenceAll(pc)
00071E90 6000 FDB2                  		bra.w	DoStartZ80
00071E94                            ; ===========================================================================
00071E94                            ; loc_71E94:
00071E94                            @unpausemusic:
00071E94 422E 0003                  		clr.b	f_pausemusic(a6)
00071E98 7630                       		moveq	#TrackSz,d3
00071E9A 4BEE 0040                  		lea	v_music_fmdac_tracks(a6),a5
00071E9E 7806                       		moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d4	; 6 FM + 1 DAC tracks
00071EA0                            ; loc_71EA0:
00071EA0                            @bgmfmloop:
00071EA0 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00071EA4 6700                       		beq.s	@bgmfmnext		; Branch if not
00071EA6 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00071EAA 6600                       		bne.s	@bgmfmnext		; Branch if yes
00071EAC 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00071EB0 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00071EB4 4EBA 0000                  		jsr	WriteFMIorII(pc)
00071EB8                            ; loc_71EB8:
00071EB8                            @bgmfmnext:
00071EB8 DAC3                       		adda.w	d3,a5
00071EBA 51CC FFE4                  		dbf	d4,@bgmfmloop
00071EBE                            

00071EBE 4BEE 0220                  		lea	v_sfx_fm_tracks(a6),a5
00071EC2 7802                       		moveq	#((v_sfx_fm_tracks_end-v_sfx_fm_tracks)/TrackSz)-1,d4	; 3 FM tracks (SFX)
00071EC4                            ; loc_71EC4:
00071EC4                            @sfxfmloop:
00071EC4 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00071EC8 6700                       		beq.s	@sfxfmnext		; Branch if not
00071ECA 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00071ECE 6600                       		bne.s	@sfxfmnext		; Branch if yes
00071ED0 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00071ED4 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00071ED8 4EBA 0000                  		jsr	WriteFMIorII(pc)
00071EDC                            ; loc_71EDC:
00071EDC                            @sfxfmnext:
00071EDC DAC3                       		adda.w	d3,a5
00071EDE 51CC FFE4                  		dbf	d4,@sfxfmloop
00071EE2                            

00071EE2 4BEE 0340                  		lea	v_spcsfx_track_ram(a6),a5
00071EE6 0815 0007                  		btst	#7,(a5)			; Is track playing? (TrackPlaybackControl)
00071EEA 6700                       		beq.s	@unpausedallfm		; Branch if not
00071EEC 0815 0002                  		btst	#2,(a5)			; Is track being overridden? (TrackPlaybackControl)
00071EF0 6600                       		bne.s	@unpausedallfm		; Branch if yes
00071EF2 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00071EF6 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Get value from track RAM
00071EFA 4EBA 0000                  		jsr	WriteFMIorII(pc)
00071EFE                            ; loc_71EFE:
00071EFE                            @unpausedallfm:
00071EFE 6000 FD44                  		bra.w	DoStartZ80
00071F02                            

00071F02                            ; ---------------------------------------------------------------------------
00071F02                            ; Subroutine to	play a sound or	music track
00071F02                            ; ---------------------------------------------------------------------------
00071F02                            

00071F02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071F02                            

00071F02                            ; Sound_Play:
00071F02                            CycleSoundQueue:
00071F02 2079 0007 1990             		movea.l	(Go_SoundPriorities).l,a0
00071F08 43EE 000A                  		lea	v_soundqueue0(a6),a1	; load music track number
00071F0C 162E 0000                  		move.b	v_sndprio(a6),d3	; Get priority of currently playing SFX
00071F10 7802                       		moveq	#2,d4			; Number of queues-1 (v_soundqueue0, v_soundqueue1, v_soundqueue2)
00071F12                            ; loc_71F12:
00071F12                            @inputloop:
00071F12 1011                       		move.b	(a1),d0			; move track number to d0
00071F14 1200                       		move.b	d0,d1
00071F16 4219                       		clr.b	(a1)+			; Clear entry
00071F18 0400 0081                  		subi.b	#bgm__First,d0		; Make it into 0-based index
00071F1C 6500                       		bcs.s	@nextinput		; If negative (i.e., it was $80 or lower), branch
00071F1E 0C2E 0080 0009             		cmpi.b	#$80,v_sound_id(a6)	; Is v_sound_id a $80 (silence/empty)?
00071F24 6700                       		beq.s	@havesound		; If yes, branch
00071F26 1D41 000A                  		move.b	d1,v_soundqueue0(a6)	; Put sound into v_soundqueue0
00071F2A 6000                       		bra.s	@nextinput
00071F2C                            ; ===========================================================================
00071F2C                            ; loc_71F2C:
00071F2C                            @havesound:
00071F2C 0240 007F                  		andi.w	#$7F,d0			; Clear high byte and sign bit
00071F30 1430 0000                  		move.b	(a0,d0.w),d2		; Get sound type
00071F34 B403                       		cmp.b	d3,d2			; Is it a lower priority sound?
00071F36 6500                       		blo.s	@nextinput		; Branch if yes
00071F38 1602                       		move.b	d2,d3			; Store new priority
00071F3A 1D41 0009                  		move.b	d1,v_sound_id(a6)	; Queue sound for playing
00071F3E                            ; loc_71F3E:
00071F3E                            @nextinput:
00071F3E 51CC FFD2                  		dbf	d4,@inputloop
00071F42                            

00071F42 4A03                       		tst.b	d3			; We don't want to change sound priority if it is negative
00071F44 6B00                       		bmi.s	@locret
00071F46 1D43 0000                  		move.b	d3,v_sndprio(a6)	; Set new sound priority
00071F4A                            ; locret_71F4A:
00071F4A                            @locret:
00071F4A 4E75                       		rts	
00071F4C                            ; End of function CycleSoundQueue
00071F4C                            

00071F4C                            

00071F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071F4C                            

00071F4C                            ; Sound_ChkValue:
00071F4C                            PlaySoundID:
00071F4C 7E00                       		moveq	#0,d7
00071F4E 1E2E 0009                  		move.b	v_sound_id(a6),d7
00071F52 6700 0000                  		beq.w	StopAllSound
00071F56 6A00                       		bpl.s	@locret			; If >= 0, return (not a valid sound, bgm or command)
00071F58 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; reset	music flag
00071F5E                            		; DANGER! Music ends at $93, yet this checks until $9F; attempting to
00071F5E                            		; play sounds $94-$9F will cause a crash! Remove the '+$C' to fix this.
00071F5E                            		; See LevSel_NoCheat for more.
00071F5E 0C07 0000                  		cmpi.b	#bgm__Last+$C,d7	; Is this music ($81-$9F)?
00071F62 6300 0000                  		bls.w	Sound_PlayBGM		; Branch if yes
00071F66 0C07 00A0                  		cmpi.b	#sfx__First,d7		; Is this after music but before sfx? (redundant check)
00071F6A 6500 0000                  		blo.w	@locret			; Return if yes
00071F6E 0C07 0000                  		cmpi.b	#sfx__Last,d7		; Is this sfx ($A0-$CF)?
00071F72 6300 0000                  		bls.w	Sound_PlaySFX		; Branch if yes
00071F76 0C07 00D0                  		cmpi.b	#spec__First,d7		; Is this after sfx but before special sfx? (redundant check)
00071F7A 6500 0000                  		blo.w	@locret			; Return if yes
00071F7E                            		; DANGER! Special SFXes end at $D0, yet this checks until $DF; attempting to
00071F7E                            		; play sounds $D1-$DF will cause a crash! Remove the '+$10' and change the 'blo' to a 'bls'
00071F7E                            		; and uncomment the two lines below to fix this.
00071F7E 0C07 0000                  		cmpi.b	#spec__Last+$10,d7	; Is this special sfx ($D0-$DF)?
00071F82 6500 0000                  		blo.w	Sound_PlaySpecial	; Branch if yes
00071F86                            		;cmpi.b	#flg__First,d7		; Is this after special sfx but before $E0?
00071F86                            		;blo.w	@locret			; Return if yes
00071F86 0C07 0000                  		cmpi.b	#flg__Last,d7		; Is this $E0-$E4?
00071F8A 6300                       		bls.s	Sound_E0toE4		; Branch if yes
00071F8C                            ; locret_71F8C:
00071F8C                            @locret:
00071F8C 4E75                       		rts	
00071F8E                            ; ===========================================================================
00071F8E                            

00071F8E                            Sound_E0toE4:
00071F8E 0407 00E0                  		subi.b	#flg__First,d7
00071F92 E54F                       		lsl.w	#2,d7
00071F94 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00071F98                            ; ===========================================================================
00071F98                            

00071F98                            Sound_ExIndex:
00071F98 6000 0000                  ptr_flgE0:	bra.w	FadeOutMusic		; $E0
00071F9C 6000 0000                  ptr_flgE1:	bra.w	PlaySegaSound		; $E1
00071FA0 6000 0000                  ptr_flgE2:	bra.w	SpeedUpMusic		; $E2
00071FA4 6000 0000                  ptr_flgE3:	bra.w	SlowDownMusic		; $E3
00071FA8 6000 0000                  ptr_flgE4:	bra.w	StopAllSound		; $E4
00071FAC                            ptr_flgend
00071FAC                            ; ===========================================================================
00071FAC                            ; ---------------------------------------------------------------------------
00071FAC                            ; Play "Say-gaa" PCM sound
00071FAC                            ; ---------------------------------------------------------------------------
00071FAC                            ; Sound_E1: PlaySega:
00071FAC                            PlaySegaSound:
00071FAC 13FC 0088 00A0 1FFF        		move.b	#$88,(z80_dac_sample).l	; Queue Sega PCM
00071FB4 33FC 0000 00A1 1100        		startZ80
00071FBC 323C 0011                  		move.w	#$11,d1
00071FC0                            ; loc_71FC0:
00071FC0                            @busyloop_outer:
00071FC0 303C FFFF                  		move.w	#-1,d0
00071FC4                            ; loc_71FC4:
00071FC4                            @busyloop:
00071FC4 4E71                       		nop	
00071FC6 51C8 FFFC                  		dbf	d0,@busyloop
00071FCA                            

00071FCA 51C9 FFF4                  		dbf	d1,@busyloop_outer
00071FCE                            

00071FCE 584F                       		addq.w	#4,sp	; Tamper return value so we don't return to caller
00071FD0 4E75                       		rts	
00071FD2                            ; ===========================================================================
00071FD2                            ; ---------------------------------------------------------------------------
00071FD2                            ; Play music track $81-$9F
00071FD2                            ; ---------------------------------------------------------------------------
00071FD2                            ; Sound_81to9F:
00071FD2                            Sound_PlayBGM:
00071FD2 0C07 0000                  		cmpi.b	#bgm_ExtraLife,d7	; is the "extra life" music to be played?
00071FD6 6600                       		bne.s	@bgmnot1up		; if not, branch
00071FD8 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is a 1-up music playing?
00071FDC 6600 0000                  		bne.w	@locdblret		; if yes, branch
00071FE0 4BEE 0040                  		lea	v_music_track_ram(a6),a5
00071FE4 7009                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d0	; 1 DAC + 6 FM + 3 PSG tracks
00071FE6                            ; loc_71FE6:
00071FE6                            @clearsfxloop:
00071FE6 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00071FEA DAFC 0030                  		adda.w	#TrackSz,a5
00071FEE 51C8 FFF6                  		dbf	d0,@clearsfxloop
00071FF2                            

00071FF2 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
00071FF6 7005                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d0	; 3 FM + 3 PSG tracks (SFX)
00071FF8                            ; loc_71FF8:
00071FF8                            @cleartrackplayloop:
00071FF8 0895 0007                  		bclr	#7,(a5)			; Clear 'track is playing' bit (TrackPlaybackControl)
00071FFC DAFC 0030                  		adda.w	#TrackSz,a5
00072000 51C8 FFF6                  		dbf	d0,@cleartrackplayloop
00072004                            

00072004 422E 0000                  		clr.b	v_sndprio(a6)		; Clear priority
00072008 204E                       		movea.l	a6,a0
0007200A 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
0007200E 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Backup $220 bytes: all variables and music track data
00072012                            ; loc_72012:
00072012                            @backupramloop:
00072012 22D8                       		move.l	(a0)+,(a1)+
00072014 51C8 FFFC                  		dbf	d0,@backupramloop
00072018                            

00072018 1D7C 0080 0027             		move.b	#$80,f_1up_playing(a6)
0007201E 422E 0000                  		clr.b	v_sndprio(a6)		; Clear priority again (?)
00072022 6000                       		bra.s	@bgm_loadMusic
00072024                            ; ===========================================================================
00072024                            ; loc_72024:
00072024                            @bgmnot1up:
00072024 422E 0027                  		clr.b	f_1up_playing(a6)
00072028 422E 0026                  		clr.b	v_fadein_counter(a6)
0007202C                            ; loc_7202C:
0007202C                            @bgm_loadMusic:
0007202C 4EBA 0000                  		jsr	InitMusicPlayback(pc)
00072030 2879 0007 19A0             		movea.l	(Go_SpeedUpIndex).l,a4
00072036 0407 0081                  		subi.b	#bgm__First,d7
0007203A 1D74 7000 0029             		move.b	(a4,d7.w),v_speeduptempo(a6)
00072040 2879 0007 1998             		movea.l	(Go_MusicIndex).l,a4
00072046 E54F                       		lsl.w	#2,d7
00072048 2874 7000                  		movea.l	(a4,d7.w),a4		; a4 now points to (uncompressed) song data
0007204C 7000                       		moveq	#0,d0
0007204E 3014                       		move.w	(a4),d0			; load voice pointer
00072050 D08C                       		add.l	a4,d0			; It is a relative pointer
00072052 2D40 0018                  		move.l	d0,v_voice_ptr(a6)
00072056 102C 0005                  		move.b	5(a4),d0		; load tempo
0007205A 1D40 0028                  		move.b	d0,v_tempo_mod(a6)
0007205E 4A2E 002A                  		tst.b	f_speedup(a6)
00072062 6700                       		beq.s	@nospeedshoes
00072064 102E 0029                  		move.b	v_speeduptempo(a6),d0
00072068                            ; loc_72068:
00072068                            @nospeedshoes:
00072068 1D40 0002                  		move.b	d0,v_main_tempo(a6)
0007206C 1D40 0001                  		move.b	d0,v_main_tempo_timeout(a6)
00072070 7200                       		moveq	#0,d1
00072072 264C                       		movea.l	a4,a3
00072074 5C4C                       		addq.w	#6,a4			; Point past header
00072076 7E00                       		moveq	#0,d7
00072078 1E2B 0002                  		move.b	2(a3),d7		; load number of FM+DAC tracks
0007207C 6700 0000                  		beq.w	@bgm_fmdone		; branch if zero
00072080 5307                       		subq.b	#1,d7
00072082 123C 00C0                  		move.b	#$C0,d1			; Default AMS+FMS+Panning
00072086 182B 0004                  		move.b	4(a3),d4		; load tempo dividing timing
0007208A 7C30                       		moveq	#TrackSz,d6
0007208C 1A3C 0001                  		move.b	#1,d5			; Note duration for first "note"
00072090 43EE 0040                  		lea	v_music_fmdac_tracks(a6),a1
00072094 45FA 0000                  		lea	FMDACInitBytes(pc),a2
00072098                            ; loc_72098:
00072098                            @bgm_fmloadloop:
00072098 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
0007209C 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
000720A0 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
000720A4 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag $F8) stack init value
000720A8 1341 000A                  		move.b	d1,TrackAMSFMSPan(a1)		; Set AMS/FMS/Panning
000720AC 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
000720B0 7000                       		moveq	#0,d0
000720B2 301C                       		move.w	(a4)+,d0			; load DAC/FM pointer
000720B4 D08B                       		add.l	a3,d0				; Relative pointer
000720B6 2340 0004                  		move.l	d0,TrackDataPointer(a1)		; Store track pointer
000720BA 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load FM channel modifier
000720BE D2C6                       		adda.w	d6,a1
000720C0 51CF FFD6                  		dbf	d7,@bgm_fmloadloop
000720C4                            		
000720C4 0C2B 0007 0002             		cmpi.b	#7,2(a3)	; Are 7 FM tracks defined?
000720CA 6600                       		bne.s	@silencefm6
000720CC 702B                       		moveq	#$2B,d0		; DAC enable/disable register
000720CE 7200                       		moveq	#0,d1		; Disable DAC
000720D0 4EBA 0000                  		jsr	WriteFMI(pc)
000720D4 6000 0000                  		bra.w	@bgm_fmdone
000720D8                            ; ===========================================================================
000720D8                            ; loc_720D8:
000720D8                            @silencefm6:
000720D8 7028                       		moveq	#$28,d0		; Key on/off register
000720DA 7206                       		moveq	#6,d1		; Note off on all operators of channel 6
000720DC 4EBA 0000                  		jsr	WriteFMI(pc)
000720E0 103C 0042                  		move.b	#$42,d0		; TL for operator 1 of FM6
000720E4 727F                       		moveq	#$7F,d1		; Total silence
000720E6 4EBA 0000                  		jsr	WriteFMII(pc)
000720EA 103C 004A                  		move.b	#$4A,d0		; TL for operator 3 of FM6
000720EE 727F                       		moveq	#$7F,d1		; Total silence
000720F0 4EBA 0000                  		jsr	WriteFMII(pc)
000720F4 103C 0046                  		move.b	#$46,d0		; TL for operator 2 of FM6
000720F8 727F                       		moveq	#$7F,d1		; Total silence
000720FA 4EBA 0000                  		jsr	WriteFMII(pc)
000720FE 103C 004E                  		move.b	#$4E,d0		; TL for operator 4 of FM6
00072102 727F                       		moveq	#$7F,d1		; Total silence
00072104 4EBA 0000                  		jsr	WriteFMII(pc)
00072108 103C 00B6                  		move.b	#$B6,d0		; AMS/FMS/panning of FM6
0007210C 123C 00C0                  		move.b	#$C0,d1		; Stereo
00072110 4EBA 0000                  		jsr	WriteFMII(pc)
00072114                            ; loc_72114:
00072114                            @bgm_fmdone:
00072114 7E00                       		moveq	#0,d7
00072116 1E2B 0003                  		move.b	3(a3),d7	; Load number of PSG tracks
0007211A 6700                       		beq.s	@bgm_psgdone	; branch if zero
0007211C 5307                       		subq.b	#1,d7
0007211E 43EE 0190                  		lea	v_music_psg_tracks(a6),a1
00072122 45FA 0000                  		lea	PSGInitBytes(pc),a2
00072126                            ; loc_72126:
00072126                            @bgm_psgloadloop:
00072126 08D1 0007                  		bset	#7,(a1)				; Initial playback control: set 'track playing' bit (TrackPlaybackControl)
0007212A 135A 0001                  		move.b	(a2)+,TrackVoiceControl(a1)	; Voice control bits
0007212E 1344 0002                  		move.b	d4,TrackTempoDivider(a1)
00072132 1346 000D                  		move.b	d6,TrackStackPointer(a1)	; set "gosub" (coord flag $F8) stack init value
00072136 1345 000E                  		move.b	d5,TrackDurationTimeout(a1)	; Set duration of first "note"
0007213A 7000                       		moveq	#0,d0
0007213C 301C                       		move.w	(a4)+,d0			; load PSG channel pointer
0007213E D08B                       		add.l	a3,d0				; Relative pointer
00072140 2340 0004                  		move.l	d0,TrackDataPointer(a1)	; Store track pointer
00072144 335C 0008                  		move.w	(a4)+,TrackTranspose(a1)	; load PSG modifier
00072148 101C                       		move.b	(a4)+,d0			; load redundant byte
0007214A 135C 000B                  		move.b	(a4)+,TrackVoiceIndex(a1)	; Initial PSG tone
0007214E D2C6                       		adda.w	d6,a1
00072150 51CF FFD4                  		dbf	d7,@bgm_psgloadloop
00072154                            ; loc_72154:
00072154                            @bgm_psgdone:
00072154 43EE 0220                  		lea	v_sfx_track_ram(a6),a1
00072158 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 6 SFX tracks
0007215A                            ; loc_7215A:
0007215A                            @sfxstoploop:
0007215A 4A11                       		tst.b	(a1)		; Is SFX playing? (TrackPlaybackControl)
0007215C 6A00 0000                  		bpl.w	@sfxnext	; Branch if not
00072160 7000                       		moveq	#0,d0
00072162 1029 0001                  		move.b	TrackVoiceControl(a1),d0 ; Get voice control bits
00072166 6B00                       		bmi.s	@sfxpsgchannel		; Branch if this is a PSG channel
00072168 5500                       		subq.b	#2,d0			; SFX can't have FM1 or FM2
0007216A E508                       		lsl.b	#2,d0			; Convert to index
0007216C 6000                       		bra.s	@gotchannelindex
0007216E                            ; ===========================================================================
0007216E                            ; loc_7216E:
0007216E                            @sfxpsgchannel:
0007216E E608                       		lsr.b	#3,d0		; Convert to index
00072170                            ; loc_72170:
00072170                            @gotchannelindex:
00072170 41FA 0000                  		lea	SFX_BGMChannelRAM(pc),a0
00072174 2070 0000                  		movea.l	(a0,d0.w),a0
00072178 08D0 0002                  		bset	#2,(a0)		; Set 'SFX is overriding' bit (TrackPlaybackControl)
0007217C                            ; loc_7217C:
0007217C                            @sfxnext:
0007217C D2C6                       		adda.w	d6,a1
0007217E 51CF FFDA                  		dbf	d7,@sfxstoploop
00072182                            

00072182 4A6E 0340                  		tst.w	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00072186 6A00                       		bpl.s	@checkspecialpsg				; Branch if not
00072188 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0007218E                            ; loc_7218E:
0007218E                            @checkspecialpsg:
0007218E 4A6E 0370                  		tst.w	v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Is special SFX being played?
00072192 6A00                       		bpl.s	@sendfmnoteoff					; Branch if not
00072194 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
0007219A                            ; loc_7219A:
0007219A                            @sendfmnoteoff:
0007219A 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
0007219E 7805                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d4	; 6 FM tracks
000721A0                            ; loc_721A0:
000721A0                            @fmnoteoffloop:
000721A0 4EBA 0000                  		jsr	FMNoteOff(pc)
000721A4 DAC6                       		adda.w	d6,a5
000721A6 51CC FFF8                  		dbf	d4,@fmnoteoffloop		; run all FM tracks
000721AA 7802                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d4 ; 3 PSG tracks
000721AC                            ; loc_721AC:
000721AC                            @psgnoteoffloop:
000721AC 4EBA 0000                  		jsr	PSGNoteOff(pc)
000721B0 DAC6                       		adda.w	d6,a5
000721B2 51CC FFF8                  		dbf	d4,@psgnoteoffloop		; run all PSG tracks
000721B6                            ; loc_721B6:
000721B6                            @locdblret:
000721B6 584F                       		addq.w	#4,sp	; Tamper with return value to not return to caller
000721B8 4E75                       		rts	
000721BA                            ; ===========================================================================
000721BA                            ; byte_721BA:
000721BA 0600 0102 0405 06          FMDACInitBytes:	dc.b 6,	0, 1, 2, 4, 5, 6	; first byte is for DAC; then notice the 0, 1, 2 then 4, 5, 6; this is the gap between parts I and II for YM2612 port writes
000721C2 00                         		even
000721C2                            ; byte_721C2:
000721C2 80A0 C0                    PSGInitBytes:	dc.b $80, $A0, $C0	; Specifically, these configure writes to the PSG port for each channel
000721C6 00                         		even
000721C6                            ; ===========================================================================
000721C6                            ; ---------------------------------------------------------------------------
000721C6                            ; Play normal sound effect
000721C6                            ; ---------------------------------------------------------------------------
000721C6                            ; Sound_A0toCF:
000721C6                            Sound_PlaySFX:
000721C6 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
000721CA 6600 0000                  		bne.w	@clear_sndprio		; Exit is it is
000721CE 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
000721D2 6600 0000                  		bne.w	@clear_sndprio		; Exit if it is
000721D6 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
000721DA 6600 0000                  		bne.w	@clear_sndprio		; Exit if it is
000721DE 0C07 0000                  		cmpi.b	#sfx_Ring,d7		; is ring sound	effect played?
000721E2 6600                       		bne.s	@sfx_notRing		; if not, branch
000721E4 4A2E 002B                  		tst.b	v_ring_speaker(a6)	; Is the ring sound playing on right speaker?
000721E8 6600                       		bne.s	@gotringspeaker		; Branch if not
000721EA 1E3C 0000                  		move.b	#sfx_RingLeft,d7	; play ring sound in left speaker
000721EE                            ; loc_721EE:
000721EE                            @gotringspeaker:
000721EE 086E 0000 002B             		bchg	#0,v_ring_speaker(a6)	; change speaker
000721F4                            ; Sound_notB5:
000721F4                            @sfx_notRing:
000721F4 0C07 0000                  		cmpi.b	#sfx_Push,d7		; is "pushing" sound played?
000721F8 6600                       		bne.s	@sfx_notPush		; if not, branch
000721FA 4A2E 002C                  		tst.b	f_push_playing(a6)	; Is pushing sound already playing?
000721FE 6600 0000                  		bne.w	@locret			; Return if not
00072202 1D7C 0080 002C             		move.b	#$80,f_push_playing(a6)	; Mark it as playing
00072208                            ; Sound_notA7:
00072208                            @sfx_notPush:
00072208 2079 0007 199C             		movea.l	(Go_SoundIndex).l,a0
0007220E 0407 00A0                  		subi.b	#sfx__First,d7		; Make it 0-based
00072212 E54F                       		lsl.w	#2,d7			; Convert sfx ID into index
00072214 2670 7000                  		movea.l	(a0,d7.w),a3		; SFX data pointer
00072218 224B                       		movea.l	a3,a1
0007221A 7200                       		moveq	#0,d1
0007221C 3219                       		move.w	(a1)+,d1		; Voice pointer
0007221E D28B                       		add.l	a3,d1			; Relative pointer
00072220 1A19                       		move.b	(a1)+,d5		; Dividing timing
00072222                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which SFXes whose
00072222                            		; index entry is above $3F will cause a crash. This is actually the same way that
00072222                            		; this bug is fixed in Ristar's driver.
00072222 1E19                       		move.b	(a1)+,d7	; Number of tracks (FM + PSG)
00072224 5307                       		subq.b	#1,d7
00072226 7C30                       		moveq	#TrackSz,d6
00072228                            ; loc_72228:
00072228                            @sfx_loadloop:
00072228 7600                       		moveq	#0,d3
0007222A 1629 0001                  		move.b	1(a1),d3	; Channel assignment bits
0007222E 1803                       		move.b	d3,d4
00072230 6B00                       		bmi.s	@sfxinitpsg	; Branch if PSG
00072232 5543                       		subq.w	#2,d3		; SFX can only have FM3, FM4 or FM5
00072234 E54B                       		lsl.w	#2,d3
00072236 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0007223A 2A75 3000                  		movea.l	(a5,d3.w),a5
0007223E 08D5 0002                  		bset	#2,(a5)		; Mark music track as being overridden (TrackPlaybackControl)
00072242 6000                       		bra.s	@sfxoverridedone
00072244                            ; ===========================================================================
00072244                            ; loc_72244:
00072244                            @sfxinitpsg:
00072244 E64B                       		lsr.w	#3,d3
00072246 4BFA 0000                  		lea	SFX_BGMChannelRAM(pc),a5
0007224A 2A75 3000                  		movea.l	(a5,d3.w),a5
0007224E 08D5 0002                  		bset	#2,(a5)			; Mark music track as being overridden (TrackPlaybackControl)
00072252 0C04 00C0                  		cmpi.b	#$C0,d4			; Is this PSG 3?
00072256 6600                       		bne.s	@sfxoverridedone	; Branch if not
00072258 1004                       		move.b	d4,d0
0007225A 0000 001F                  		ori.b	#$1F,d0			; Command to silence PSG 3
0007225E 13C0 00C0 0011             		move.b	d0,(psg_input).l
00072264 0840 0005                  		bchg	#5,d0			; Command to silence noise channel
00072268 13C0 00C0 0011             		move.b	d0,(psg_input).l
0007226E                            ; loc_7226E:
0007226E                            @sfxoverridedone:
0007226E 2A7B 3000                  		movea.l	SFX_SFXChannelRAM(pc,d3.w),a5
00072272 244D                       		movea.l	a5,a2
00072274 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00072276                            ; loc_72276:
00072276                            @clearsfxtrackram:
00072276 429A                       		clr.l	(a2)+
00072278 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
0007227C                            

0007227C 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits (TrackPlaybackControl)
0007227E 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)	; Initial voice control bits
00072282 7000                       		moveq	#0,d0
00072284 3019                       		move.w	(a1)+,d0			; Track data pointer
00072286 D08B                       		add.l	a3,d0				; Relative pointer
00072288 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0007228C 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00072290 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00072296 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag $F8) stack init value
0007229A 4A04                       		tst.b	d4				; Is this a PSG channel?
0007229C 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
0007229E 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
000722A4 2B41 0020                  		move.l	d1,TrackVoicePtr(a5)		; Voice pointer
000722A8                            ; loc_722A8:
000722A8                            @sfxpsginitdone:
000722A8 51CF FF7E                  		dbf	d7,@sfx_loadloop
000722AC                            

000722AC 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX being played?
000722B0 6A00                       		bpl.s	@doneoverride					; Branch if not
000722B2 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000722B8                            ; loc_722B8:
000722B8                            @doneoverride:
000722B8 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is SFX being played?
000722BC 6A00                       		bpl.s	@locret						; Branch if not
000722BE 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000722C4                            ; locret_722C4:
000722C4                            @locret:
000722C4 4E75                       		rts	
000722C6                            ; ===========================================================================
000722C6                            ; loc_722C6:
000722C6                            @clear_sndprio:
000722C6 422E 0000                  		clr.b	v_sndprio(a6)	; Clear priority
000722CA 4E75                       		rts	
000722CC                            ; ===========================================================================
000722CC                            ; ---------------------------------------------------------------------------
000722CC                            ; RAM addresses for FM and PSG channel variables used by the SFX
000722CC                            ; ---------------------------------------------------------------------------
000722CC                            ; dword_722CC: BGMChannelRAM:
000722CC                            SFX_BGMChannelRAM:
000722CC 00FF F0D0                  		dc.l (v_snddriver_ram+v_music_fm3_track)&$FFFFFF
000722D0 0000 0000                  		dc.l 0
000722D4 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
000722D8 00FF F130                  		dc.l (v_snddriver_ram+v_music_fm5_track)&$FFFFFF
000722DC 00FF F190                  		dc.l (v_snddriver_ram+v_music_psg1_track)&$FFFFFF
000722E0 00FF F1C0                  		dc.l (v_snddriver_ram+v_music_psg2_track)&$FFFFFF
000722E4 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Plain PSG3
000722E8 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF	; Noise
000722EC                            ; dword_722EC: SFXChannelRAM:
000722EC                            SFX_SFXChannelRAM:
000722EC 00FF F220                  		dc.l (v_snddriver_ram+v_sfx_fm3_track)&$FFFFFF
000722F0 0000 0000                  		dc.l 0
000722F4 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
000722F8 00FF F280                  		dc.l (v_snddriver_ram+v_sfx_fm5_track)&$FFFFFF
000722FC 00FF F2B0                  		dc.l (v_snddriver_ram+v_sfx_psg1_track)&$FFFFFF
00072300 00FF F2E0                  		dc.l (v_snddriver_ram+v_sfx_psg2_track)&$FFFFFF
00072304 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Plain PSG3
00072308 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF	; Noise
0007230C                            ; ===========================================================================
0007230C                            ; ---------------------------------------------------------------------------
0007230C                            ; Play GHZ waterfall sound
0007230C                            ; ---------------------------------------------------------------------------
0007230C                            ; Sound_D0toDF:
0007230C                            Sound_PlaySpecial:
0007230C 4A2E 0027                  		tst.b	f_1up_playing(a6)	; Is 1-up playing?
00072310 6600 0000                  		bne.w	@locret			; Return if so
00072314 4A2E 0004                  		tst.b	v_fadeout_counter(a6)	; Is music being faded out?
00072318 6600 0000                  		bne.w	@locret			; Exit if it is
0007231C 4A2E 0024                  		tst.b	f_fadein_flag(a6)	; Is music being faded in?
00072320 6600 0000                  		bne.w	@locret			; Exit if it is
00072324 2079 0007 1994             		movea.l	(Go_SpecSoundIndex).l,a0
0007232A 0407 00D0                  		subi.b	#spec__First,d7		; Make it 0-based
0007232E E54F                       		lsl.w	#2,d7
00072330 2670 7000                  		movea.l	(a0,d7.w),a3
00072334 224B                       		movea.l	a3,a1
00072336 7000                       		moveq	#0,d0
00072338 3019                       		move.w	(a1)+,d0			; Voice pointer
0007233A D08B                       		add.l	a3,d0				; Relative pointer
0007233C 2D40 0020                  		move.l	d0,v_special_voice_ptr(a6)	; Store voice pointer
00072340 1A19                       		move.b	(a1)+,d5			; Dividing timing
00072342                            		; DANGER! there is a missing 'moveq	#0,d7' here, without which special SFXes whose
00072342                            		; index entry is above $3F will cause a crash. This instance was not fixed in Ristar's driver.
00072342 1E19                       		move.b	(a1)+,d7			; Number of tracks (FM + PSG)
00072344 5307                       		subq.b	#1,d7
00072346 7C30                       		moveq	#TrackSz,d6
00072348                            ; loc_72348:
00072348                            @sfxloadloop:
00072348 1829 0001                  		move.b	1(a1),d4					; Voice control bits
0007234C 6B00                       		bmi.s	@sfxoverridepsg					; Branch if PSG
0007234E 08EE 0002 0100             		bset	#2,v_music_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00072354 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00072358 6000                       		bra.s	@sfxinitpsg
0007235A                            ; ===========================================================================
0007235A                            ; loc_7235A:
0007235A                            @sfxoverridepsg:
0007235A 08EE 0002 01F0             		bset	#2,v_music_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
00072360 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
00072364                            ; loc_72364:
00072364                            @sfxinitpsg:
00072364 244D                       		movea.l	a5,a2
00072366 700B                       		moveq	#(TrackSz/4)-1,d0	; $30 bytes
00072368                            ; loc_72368:
00072368                            @clearsfxtrackram:
00072368 429A                       		clr.l	(a2)+
0007236A 51C8 FFFC                  		dbf	d0,@clearsfxtrackram
0007236E                            

0007236E 3A99                       		move.w	(a1)+,(a5)			; Initial playback control bits & voice control bits (TrackPlaybackControl)
00072370 1B45 0002                  		move.b	d5,TrackTempoDivider(a5)
00072374 7000                       		moveq	#0,d0
00072376 3019                       		move.w	(a1)+,d0			; Track data pointer
00072378 D08B                       		add.l	a3,d0				; Relative pointer
0007237A 2B40 0004                  		move.l	d0,TrackDataPointer(a5)	; Store track pointer
0007237E 3B59 0008                  		move.w	(a1)+,TrackTranspose(a5)	; load FM/PSG channel modifier
00072382 1B7C 0001 000E             		move.b	#1,TrackDurationTimeout(a5)	; Set duration of first "note"
00072388 1B46 000D                  		move.b	d6,TrackStackPointer(a5)	; set "gosub" (coord flag $F8) stack init value
0007238C 4A04                       		tst.b	d4				; Is this a PSG channel?
0007238E 6B00                       		bmi.s	@sfxpsginitdone			; Branch if yes
00072390 1B7C 00C0 000A             		move.b	#$C0,TrackAMSFMSPan(a5)	; AMS/FMS/Panning
00072396                            ; loc_72396:
00072396                            @sfxpsginitdone:
00072396 51CF FFB0                  		dbf	d7,@sfxloadloop
0007239A                            

0007239A 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is track playing?
0007239E 6A00                       		bpl.s	@doneoverride					; Branch if not
000723A0 08EE 0002 0340             		bset	#2,v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000723A6                            ; loc_723A6:
000723A6                            @doneoverride:
000723A6 4A2E 0310                  		tst.b	v_sfx_psg3_track+TrackPlaybackControl(a6)	; Is track playing?
000723AA 6A00                       		bpl.s	@locret						; Branch if not
000723AC 08EE 0002 0370             		bset	#2,v_spcsfx_psg3_track+TrackPlaybackControl(a6)	; Set 'SFX is overriding' bit
000723B2 0004 001F                  		ori.b	#$1F,d4						; Command to silence channel
000723B6 13C4 00C0 0011             		move.b	d4,(psg_input).l
000723BC 0844 0005                  		bchg	#5,d4			; Command to silence noise channel
000723C0 13C4 00C0 0011             		move.b	d4,(psg_input).l
000723C6                            ; locret_723C6:
000723C6                            @locret:
000723C6 4E75                       		rts	
000723C8                            ; End of function PlaySoundID
000723C8                            

000723C8                            ; ===========================================================================
000723C8                            ; ---------------------------------------------------------------------------
000723C8                            ; Unused RAM addresses for FM and PSG channel variables used by the Special SFX
000723C8                            ; ---------------------------------------------------------------------------
000723C8                            ; The first block would have been used for overriding the music tracks
000723C8                            ; as they have a lower priority, just as they are in Sound_PlaySFX
000723C8                            ; The third block would be used to set up the Special SFX
000723C8                            ; The second block, however, is for the SFX tracks, which have a higher priority
000723C8                            ; and would be checked for if they're currently playing
000723C8                            ; If they are, then the third block would be used again, this time to mark
000723C8                            ; the new tracks as 'currently playing'
000723C8                            

000723C8                            ; These were actually used in Moonwalker's driver (and other SMPS 68k Type 1a drivers)
000723C8                            

000723C8                            ; BGMFM4PSG3RAM:
000723C8                            ;SpecSFX_BGMChannelRAM:
000723C8 00FF F100                  		dc.l (v_snddriver_ram+v_music_fm4_track)&$FFFFFF
000723CC 00FF F1F0                  		dc.l (v_snddriver_ram+v_music_psg3_track)&$FFFFFF
000723D0                            ; SFXFM4PSG3RAM:
000723D0                            ;SpecSFX_SFXChannelRAM:
000723D0 00FF F250                  		dc.l (v_snddriver_ram+v_sfx_fm4_track)&$FFFFFF
000723D4 00FF F310                  		dc.l (v_snddriver_ram+v_sfx_psg3_track)&$FFFFFF
000723D8                            ; SpecialSFXFM4PSG3RAM:
000723D8                            ;SpecSFX_SpecSFXChannelRAM:
000723D8 00FF F340                  		dc.l (v_snddriver_ram+v_spcsfx_fm4_track)&$FFFFFF
000723DC 00FF F370                  		dc.l (v_snddriver_ram+v_spcsfx_psg3_track)&$FFFFFF
000723E0                            

000723E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000723E0                            

000723E0                            ; Snd_FadeOut1: Snd_FadeOutSFX: FadeOutSFX:
000723E0                            StopSFX:
000723E0 422E 0000                  		clr.b	v_sndprio(a6)		; Clear priority
000723E4 4BEE 0220                  		lea	v_sfx_track_ram(a6),a5
000723E8 7E05                       		moveq	#((v_sfx_track_ram_end-v_sfx_track_ram)/TrackSz)-1,d7	; 3 FM + 3 PSG tracks (SFX)
000723EA                            ; loc_723EA:
000723EA                            @trackloop:
000723EA 4A15                       		tst.b	(a5)		; Is track playing? (TrackPlaybackControl)
000723EC 6A00 0000                  		bpl.w	@nexttrack	; Branch if not
000723F0 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
000723F4 7600                       		moveq	#0,d3
000723F6 162D 0001                  		move.b	TrackVoiceControl(a5),d3	; Get voice control bits
000723FA 6B00                       		bmi.s	@trackpsg			; Branch if PSG
000723FC 4EBA 0000                  		jsr	FMNoteOff(pc)
00072400 0C03 0004                  		cmpi.b	#4,d3						; Is this FM4?
00072404 6600                       		bne.s	@getfmpointer					; Branch if not
00072406 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
0007240A 6A00                       		bpl.s	@getfmpointer					; Branch if not
0007240C                            		; DANGER! there is a missing 'movea.l	a5,a3' here, without which the
0007240C                            		; code is broken. It is dangerous to do a fade out when a GHZ waterfall
0007240C                            		; is playing its sound!
0007240C 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00072410 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get special voice pointer
00072414 6000                       		bra.s	@gotfmpointer
00072416                            ; ===========================================================================
00072416                            ; loc_72416:
00072416                            @getfmpointer:
00072416 5503                       		subq.b	#2,d3		; SFX only has FM3 and up
00072418 E50B                       		lsl.b	#2,d3
0007241A 41FA FEB0                  		lea	SFX_BGMChannelRAM(pc),a0
0007241E 264D                       		movea.l	a5,a3
00072420 2A70 3000                  		movea.l	(a0,d3.w),a5
00072424 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get music voice pointer
00072428                            ; loc_72428:
00072428                            @gotfmpointer:
00072428 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0007242C 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00072430 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00072434 4EBA 0000                  		jsr	SetVoice(pc)
00072438 2A4B                       		movea.l	a3,a5
0007243A 6000                       		bra.s	@nexttrack
0007243C                            ; ===========================================================================
0007243C                            ; loc_7243C:
0007243C                            @trackpsg:
0007243C 4EBA 0000                  		jsr	PSGNoteOff(pc)
00072440 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00072444 0C03 00E0                  		cmpi.b	#$E0,d3			; Is this a noise channel:
00072448 6700                       		beq.s	@gotpsgpointer		; Branch if yes
0007244A 0C03 00C0                  		cmpi.b	#$C0,d3			; Is this PSG 3?
0007244E 6700                       		beq.s	@gotpsgpointer		; Branch if yes
00072450 E60B                       		lsr.b	#3,d3
00072452 41FA FE78                  		lea	SFX_BGMChannelRAM(pc),a0
00072456 2070 3000                  		movea.l	(a0,d3.w),a0
0007245A                            ; loc_7245A:
0007245A                            @gotpsgpointer:
0007245A 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0007245E 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00072462 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise channel?
00072468 6600                       		bne.s	@nexttrack			; Branch if not
0007246A 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise type
00072472                            ; loc_72472:
00072472                            @nexttrack:
00072472 DAFC 0030                  		adda.w	#TrackSz,a5
00072476 51CF FF72                  		dbf	d7,@trackloop
0007247A                            

0007247A 4E75                       		rts	
0007247C                            ; End of function StopSFX
0007247C                            

0007247C                            

0007247C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007247C                            

0007247C                            ; Snd_FadeOut2: FadeOutSFX2: FadeOutSpecialSFX:
0007247C                            StopSpecialSFX:
0007247C 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00072480 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00072482 6A00                       		bpl.s	@fadedfm		; Branch if not
00072484 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00072488 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
0007248C 6600                       		bne.s	@fadedfm		; Branch if not
0007248E 4EBA 0000                  		jsr	SendFMNoteOff(pc)
00072492 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00072496 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
0007249A 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
0007249E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000724A0 6A00                       		bpl.s	@fadedfm		; Branch if not
000724A2 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
000724A6 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
000724AA 4EBA 0000                  		jsr	SetVoice(pc)
000724AE                            ; loc_724AE:
000724AE                            @fadedfm:
000724AE 4BEE 0370                  		lea	v_spcsfx_psg3_track(a6),a5
000724B2 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000724B4 6A00                       		bpl.s	@fadedpsg		; Branch if not
000724B6 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
000724BA 0815 0002                  		btst	#2,(a5)			; Is SFX overriding? (TrackPlaybackControl)
000724BE 6600                       		bne.s	@fadedpsg		; Return if not
000724C0 4EBA 0000                  		jsr	SendPSGNoteOff(pc)
000724C4 4BEE 01F0                  		lea	v_music_psg3_track(a6),a5
000724C8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
000724CC 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000724D0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000724D2 6A00                       		bpl.s	@fadedpsg		; Return if not
000724D4 0C2D 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a5)	; Is this a noise channel?
000724DA 6600                       		bne.s	@fadedpsg			; Return if not
000724DC 13ED 001F 00C0 0011        		move.b	TrackPSGNoise(a5),(psg_input).l ; Set noise type
000724E4                            ; locret_724E4:
000724E4                            @fadedpsg:
000724E4 4E75                       		rts	
000724E6                            ; End of function StopSpecialSFX
000724E6                            

000724E6                            ; ===========================================================================
000724E6                            ; ---------------------------------------------------------------------------
000724E6                            ; Fade out music
000724E6                            ; ---------------------------------------------------------------------------
000724E6                            ; Sound_E0:
000724E6                            FadeOutMusic:
000724E6 4EBA FEF8                  		jsr	StopSFX(pc)
000724EA 4EBA FF90                  		jsr	StopSpecialSFX(pc)
000724EE 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)			; Set fadeout delay to 3
000724F4 1D7C 0028 0004             		move.b	#$28,v_fadeout_counter(a6)		; Set fadeout counter
000724FA 422E 0040                  		clr.b	v_music_dac_track+TrackPlaybackControl(a6)	; Stop DAC track
000724FE 422E 002A                  		clr.b	f_speedup(a6)				; Disable speed shoes tempo
00072502 4E75                       		rts	
00072504                            

00072504                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072504                            

00072504                            ; sub_72504:
00072504                            DoFadeOut:
00072504 102E 0006                  		move.b	v_fadeout_delay(a6),d0	; Has fadeout delay expired?
00072508 6700                       		beq.s	@continuefade		; Branch if yes
0007250A 532E 0006                  		subq.b	#1,v_fadeout_delay(a6)
0007250E 4E75                       		rts	
00072510                            ; ===========================================================================
00072510                            ; loc_72510:
00072510                            @continuefade:
00072510 532E 0004                  		subq.b	#1,v_fadeout_counter(a6)	; Update fade counter
00072514 6700 0000                  		beq.w	StopAllSound			; Branch if fade is done
00072518 1D7C 0003 0006             		move.b	#3,v_fadeout_delay(a6)		; Reset fade delay
0007251E 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00072522 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00072524                            ; loc_72524:
00072524                            @fmloop:
00072524 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00072526 6A00                       		bpl.s	@nextfm			; Branch if not
00072528 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
0007252C 6A00                       		bpl.s	@sendfmtl		; Branch if still positive
0007252E 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00072532 6000                       		bra.s	@nextfm
00072534                            ; ===========================================================================
00072534                            ; loc_72534:
00072534                            @sendfmtl:
00072534 4EBA 0000                  		jsr	SendVoiceTL(pc)
00072538                            ; loc_72538:
00072538                            @nextfm:
00072538 DAFC 0030                  		adda.w	#TrackSz,a5
0007253C 51CF FFE6                  		dbf	d7,@fmloop
00072540                            

00072540 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00072542                            ; loc_72542:
00072542                            @psgloop:
00072542 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00072544 6A00                       		bpl.s	@nextpsg		; branch if not
00072546 522D 0009                  		addq.b	#1,TrackVolume(a5)	; Increase volume attenuation
0007254A 0C2D 0010 0009             		cmpi.b	#$10,TrackVolume(a5)	; Is it greater than $F?
00072550 6500                       		blo.s	@sendpsgvol		; Branch if not
00072552 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00072556 6000                       		bra.s	@nextpsg
00072558                            ; ===========================================================================
00072558                            ; loc_72558:
00072558                            @sendpsgvol:
00072558 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Store new volume attenuation
0007255C 4EBA 0000                  		jsr	SetPSGVolume(pc)
00072560                            ; loc_72560:
00072560                            @nextpsg:
00072560 DAFC 0030                  		adda.w	#TrackSz,a5
00072564 51CF FFDC                  		dbf	d7,@psgloop
00072568                            

00072568 4E75                       		rts	
0007256A                            ; End of function DoFadeOut
0007256A                            

0007256A                            

0007256A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007256A                            

0007256A                            ; sub_7256A:
0007256A                            FMSilenceAll:
0007256A 7602                       		moveq	#2,d3		; 3 FM channels for each YM2612 parts
0007256C 7028                       		moveq	#$28,d0		; FM key on/off register
0007256E                            ; loc_7256E:
0007256E                            @noteoffloop:
0007256E 1203                       		move.b	d3,d1
00072570 4EBA 0000                  		jsr	WriteFMI(pc)
00072574 5801                       		addq.b	#4,d1		; Move to YM2612 part 1
00072576 4EBA 0000                  		jsr	WriteFMI(pc)
0007257A 51CB FFF2                  		dbf	d3,@noteoffloop
0007257E                            

0007257E 7040                       		moveq	#$40,d0		; Set TL on FM channels...
00072580 727F                       		moveq	#$7F,d1		; ... to total attenuation...
00072582 7802                       		moveq	#2,d4		; ... for all 3 channels...
00072584                            ; loc_72584:
00072584                            @channelloop:
00072584 7603                       		moveq	#3,d3		; ... for all operators on each channel...
00072586                            ; loc_72586:
00072586                            @channeltlloop:
00072586 4EBA 0000                  		jsr	WriteFMI(pc)	; ... for part 0...
0007258A 4EBA 0000                  		jsr	WriteFMII(pc)	; ... and part 1.
0007258E 5840                       		addq.w	#4,d0		; Next TL operator
00072590 51CB FFF4                  		dbf	d3,@channeltlloop
00072594                            

00072594 0400 000F                  		subi.b	#$F,d0		; Move to TL operator 1 of next channel
00072598 51CC FFEA                  		dbf	d4,@channelloop
0007259C                            

0007259C 4E75                       		rts	
0007259E                            ; End of function FMSilenceAll
0007259E                            

0007259E                            ; ===========================================================================
0007259E                            ; ---------------------------------------------------------------------------
0007259E                            ; Stop music
0007259E                            ; ---------------------------------------------------------------------------
0007259E                            ; Sound_E4: StopSoundAndMusic:
0007259E                            StopAllSound:
0007259E 702B                       		moveq	#$2B,d0		; Enable/disable DAC
000725A0 123C 0080                  		move.b	#$80,d1		; Enable DAC
000725A4 4EBA 0000                  		jsr	WriteFMI(pc)
000725A8 7027                       		moveq	#$27,d0		; Timers, FM3/FM6 mode
000725AA 7200                       		moveq	#0,d1		; FM3/FM6 normal mode, disable timers
000725AC 4EBA 0000                  		jsr	WriteFMI(pc)
000725B0 204E                       		movea.l	a6,a0
000725B2                            		; DANGER! This should be clearing all variables and track data, but misses the last $10 bytes of v_spcsfx_psg3_track.
000725B2                            		; Remove the '-$10' to fix this.
000725B2 303C 00E3                  		move.w	#((v_spcsfx_track_ram_end-v_startofvariables-$10)/4)-1,d0	; Clear $390 bytes: all variables and most track data
000725B6                            ; loc_725B6:
000725B6                            @clearramloop:
000725B6 4298                       		clr.l	(a0)+
000725B8 51C8 FFFC                  		dbf	d0,@clearramloop
000725BC                            

000725BC 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
000725C2 4EBA FFA6                  		jsr	FMSilenceAll(pc)
000725C6 6000 0000                  		bra.w	PSGSilenceAll
000725CA                            

000725CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000725CA                            

000725CA                            ; sub_725CA:
000725CA                            InitMusicPlayback:
000725CA 204E                       		movea.l	a6,a0
000725CC                            		; Save several values
000725CC 122E 0000                  		move.b	v_sndprio(a6),d1
000725D0 142E 0027                  		move.b	f_1up_playing(a6),d2
000725D4 162E 002A                  		move.b	f_speedup(a6),d3
000725D8 182E 0026                  		move.b	v_fadein_counter(a6),d4
000725DC                            		; DANGER! Only v_soundqueue0 and v_soundqueue1 are backed up, once again breaking v_soundqueue2
000725DC 3A2E 000A                  		move.w	v_soundqueue0(a6),d5
000725E0 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; Clear $220 bytes: all variables and music track data
000725E4                            ; loc_725E4:
000725E4                            @clearramloop:
000725E4 4298                       		clr.l	(a0)+
000725E6 51C8 FFFC                  		dbf	d0,@clearramloop
000725EA                            

000725EA                            		; Restore the values saved above
000725EA 1D41 0000                  		move.b	d1,v_sndprio(a6)
000725EE 1D42 0027                  		move.b	d2,f_1up_playing(a6)
000725F2 1D43 002A                  		move.b	d3,f_speedup(a6)
000725F6 1D44 0026                  		move.b	d4,v_fadein_counter(a6)
000725FA 3D45 000A                  		move.w	d5,v_soundqueue0(a6)
000725FE 1D7C 0080 0009             		move.b	#$80,v_sound_id(a6)	; set music to $80 (silence)
00072604                            		; DANGER! This silences ALL channels, even the ones being used
00072604                            		; by SFX, and not music! @sendfmnoteoff does this already, and
00072604                            		; doesn't affect SFX channels, either.
00072604                            		; This should be replaced with an 'rts'.
00072604 4EBA FF64                  		jsr	FMSilenceAll(pc)
00072608 6000 0000                  		bra.w	PSGSilenceAll
0007260C                            		; DANGER! InitMusicPlayback, and Sound_PlayBGM for that matter,
0007260C                            		; don't do a very good job of setting up the music tracks.
0007260C                            		; Tracks that aren't defined in a music file's header don't have
0007260C                            		; their channels defined, meaning @sendfmnoteoff won't silence
0007260C                            		; hardware properly. In combination with removing the above
0007260C                            		; calls to FMSilenceAll/PSGSilenceAll, this will cause hanging
0007260C                            		; notes.
0007260C                            		; To fix this, I suggest using this code, instead of an 'rts':
0007260C                            		;lea	v_music_track_ram+TrackVoiceControl(a6),a1
0007260C                            		;lea	FMDACInitBytes(pc),a2
0007260C                            		;moveq	#((v_music_fmdac_tracks_end-v_music_fmdac_tracks)/TrackSz)-1,d1		; 7 DAC/FM tracks
0007260C                            		;bsr.s	@writeloop
0007260C                            		;lea	PSGInitBytes(pc),a2
0007260C                            		;moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d1	; 3 PSG tracks
0007260C                            

0007260C                            ;@writeloop:
0007260C                            		;move.b	(a2)+,(a1)		; Write track's channel byte
0007260C                            		;lea	TrackSz(a1),a1		; Next track
0007260C                            		;dbf	d1,@writeloop		; Loop for all DAC/FM/PSG tracks
0007260C                            

0007260C                            		;rts
0007260C                            	
0007260C                            ; End of function InitMusicPlayback
0007260C                            

0007260C                            

0007260C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007260C                            

0007260C                            ; sub_7260C:
0007260C                            TempoWait:
0007260C 1D6E 0002 0001             		move.b	v_main_tempo(a6),v_main_tempo_timeout(a6)	; Reset main tempo timeout
00072612 41EE 004E                  		lea	v_music_track_ram+TrackDurationTimeout(a6),a0	; note timeout
00072616 7030                       		moveq	#TrackSz,d0
00072618 7209                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d1		; 1 DAC + 6 FM + 3 PSG tracks
0007261A                            ; loc_7261A:
0007261A                            @tempoloop:
0007261A 5210                       		addq.b	#1,(a0)	; Delay note by 1 frame
0007261C D0C0                       		adda.w	d0,a0	; Advance to next track
0007261E 51C9 FFFA                  		dbf	d1,@tempoloop
00072622                            

00072622 4E75                       		rts	
00072624                            ; End of function TempoWait
00072624                            

00072624                            ; ===========================================================================
00072624                            ; ---------------------------------------------------------------------------
00072624                            ; Speed	up music
00072624                            ; ---------------------------------------------------------------------------
00072624                            ; Sound_E2:
00072624                            SpeedUpMusic:
00072624 4A2E 0027                  		tst.b	f_1up_playing(a6)
00072628 6600                       		bne.s	@speedup_1up
0007262A 1D6E 0029 0002             		move.b	v_speeduptempo(a6),v_main_tempo(a6)
00072630 1D6E 0029 0001             		move.b	v_speeduptempo(a6),v_main_tempo_timeout(a6)
00072636 1D7C 0080 002A             		move.b	#$80,f_speedup(a6)
0007263C 4E75                       		rts	
0007263E                            ; ===========================================================================
0007263E                            ; loc_7263E:
0007263E                            @speedup_1up:
0007263E 1D6E 03C9 03A2             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo(a6)
00072644 1D6E 03C9 03A1             		move.b	v_1up_ram_copy+v_speeduptempo(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
0007264A 1D7C 0080 03CA             		move.b	#$80,v_1up_ram_copy+f_speedup(a6)
00072650 4E75                       		rts	
00072652                            ; ===========================================================================
00072652                            ; ---------------------------------------------------------------------------
00072652                            ; Change music back to normal speed
00072652                            ; ---------------------------------------------------------------------------
00072652                            ; Sound_E3:
00072652                            SlowDownMusic:
00072652 4A2E 0027                  		tst.b	f_1up_playing(a6)
00072656 6600                       		bne.s	@slowdown_1up
00072658 1D6E 0028 0002             		move.b	v_tempo_mod(a6),v_main_tempo(a6)
0007265E 1D6E 0028 0001             		move.b	v_tempo_mod(a6),v_main_tempo_timeout(a6)
00072664 422E 002A                  		clr.b	f_speedup(a6)
00072668 4E75                       		rts	
0007266A                            ; ===========================================================================
0007266A                            ; loc_7266A:
0007266A                            @slowdown_1up:
0007266A 1D6E 03C8 03A2             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo(a6)
00072670 1D6E 03C8 03A1             		move.b	v_1up_ram_copy+v_tempo_mod(a6),v_1up_ram_copy+v_main_tempo_timeout(a6)
00072676 422E 03CA                  		clr.b	v_1up_ram_copy+f_speedup(a6)
0007267A 4E75                       		rts	
0007267C                            

0007267C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007267C                            

0007267C                            ; sub_7267C:
0007267C                            DoFadeIn:
0007267C 4A2E 0025                  		tst.b	v_fadein_delay(a6)	; Has fadein delay expired?
00072680 6700                       		beq.s	@continuefade		; Branch if yes
00072682 532E 0025                  		subq.b	#1,v_fadein_delay(a6)
00072686 4E75                       		rts	
00072688                            ; ===========================================================================
00072688                            ; loc_72688:
00072688                            @continuefade:
00072688 4A2E 0026                  		tst.b	v_fadein_counter(a6)	; Is fade done?
0007268C 6700                       		beq.s	@fadedone		; Branch if yes
0007268E 532E 0026                  		subq.b	#1,v_fadein_counter(a6)	; Update fade counter
00072692 1D7C 0002 0025             		move.b	#2,v_fadein_delay(a6)	; Reset fade delay
00072698 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
0007269C 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
0007269E                            ; loc_7269E:
0007269E                            @fmloop:
0007269E 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000726A0 6A00                       		bpl.s	@nextfm			; Branch if not
000726A2 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
000726A6 4EBA 0000                  		jsr	SendVoiceTL(pc)
000726AA                            ; loc_726AA:
000726AA                            @nextfm:
000726AA DAFC 0030                  		adda.w	#TrackSz,a5
000726AE 51CF FFEE                  		dbf	d7,@fmloop
000726B2 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7		; 3 PSG tracks
000726B4                            ; loc_726B4:
000726B4                            @psgloop:
000726B4 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
000726B6 6A00                       		bpl.s	@nextpsg		; Branch if not
000726B8 532D 0009                  		subq.b	#1,TrackVolume(a5)	; Reduce volume attenuation
000726BC 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get value
000726C0 0C06 0010                  		cmpi.b	#$10,d6			; Is it is < $10?
000726C4 6500                       		blo.s	@sendpsgvol		; Branch if yes
000726C6 7C0F                       		moveq	#$F,d6			; Limit to $F (maximum attenuation)
000726C8                            ; loc_726C8:
000726C8                            @sendpsgvol:
000726C8 4EBA 0000                  		jsr	SetPSGVolume(pc)
000726CC                            ; loc_726CC:
000726CC                            @nextpsg:
000726CC DAFC 0030                  		adda.w	#TrackSz,a5
000726D0 51CF FFE2                  		dbf	d7,@psgloop
000726D4 4E75                       		rts	
000726D6                            ; ===========================================================================
000726D6                            ; loc_726D6:
000726D6                            @fadedone:
000726D6 08AE 0002 0040             		bclr	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Clear 'SFX overriding' bit
000726DC 422E 0024                  		clr.b	f_fadein_flag(a6)				; Stop fadein
000726E0 4E75                       		rts	
000726E2                            ; End of function DoFadeIn
000726E2                            

000726E2                            ; ===========================================================================
000726E2                            ; loc_726E2:
000726E2                            FMNoteOn:
000726E2 0815 0001                  		btst	#1,(a5)		; Is track resting? (TrackPlaybackControl)
000726E6 6600                       		bne.s	@locret		; Return if so
000726E8 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
000726EC 6600                       		bne.s	@locret		; Return if so
000726EE 7028                       		moveq	#$28,d0		; Note on/off register
000726F0 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Get channel bits
000726F4 0001 00F0                  		ori.b	#$F0,d1		; Note on on all operators
000726F8 6000 0000                  		bra.w	WriteFMI
000726FC                            ; ===========================================================================
000726FC                            ; locret_726FC:
000726FC                            @locret:
000726FC 4E75                       		rts	
000726FE                            

000726FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000726FE                            

000726FE                            ; sub_726FE:
000726FE                            FMNoteOff:
000726FE 0815 0004                  		btst	#4,(a5)		; Is 'do not attack next note' set? (TrackPlaybackControl)
00072702 6600                       		bne.s	locret_72714	; Return if yes
00072704 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00072708 6600                       		bne.s	locret_72714	; Return if yes
0007270A                            ; loc_7270A:
0007270A                            SendFMNoteOff:
0007270A 7028                       		moveq	#$28,d0		; Note on/off register
0007270C 122D 0001                  		move.b	TrackVoiceControl(a5),d1 ; Note off to this channel
00072710 6000 0000                  		bra.w	WriteFMI
00072714                            ; ===========================================================================
00072714                            

00072714                            locret_72714:
00072714 4E75                       		rts	
00072716                            ; End of function FMNoteOff
00072716                            

00072716                            ; ===========================================================================
00072716                            ; loc_72716:
00072716                            WriteFMIorIIMain:
00072716 0815 0002                  		btst	#2,(a5)		; Is track being overriden by sfx? (TrackPlaybackControl)
0007271A 6600                       		bne.s	@locret		; Return if yes
0007271C 6000 0000                  		bra.w	WriteFMIorII
00072720                            ; ===========================================================================
00072720                            ; locret_72720:
00072720                            @locret:
00072720 4E75                       		rts	
00072722                            

00072722                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072722                            

00072722                            ; sub_72722:
00072722                            WriteFMIorII:
00072722 082D 0002 0001             		btst	#2,TrackVoiceControl(a5)	; Is this bound for part I or II?
00072728 6600                       		bne.s	WriteFMIIPart			; Branch if for part II
0007272A D02D 0001                  		add.b	TrackVoiceControl(a5),d0	; Add in voice control bits
0007272E                            ; End of function WriteFMIorII
0007272E                            

0007272E                            

0007272E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007272E                            

0007272E                            ; Strangely, despite this driver being SMPS 68k Type 1b,
0007272E                            ; WriteFMI and WriteFMII are the Type 1a versions.
0007272E                            ; In Sonic 1's prototype, they were the Type 1b versions.
0007272E                            ; I wonder why they were changed?
0007272E                            

0007272E                            ; sub_7272E:
0007272E                            WriteFMI:
0007272E 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00072734 0802 0007                  		btst	#7,d2		; Is FM busy?
00072738 66F4                       		bne.s	WriteFMI	; Loop if so
0007273A 13C0 00A0 4000             		move.b	d0,(ym2612_a0).l
00072740 4E71                       		nop	
00072742 4E71                       		nop	
00072744 4E71                       		nop	
00072746                            ; loc_72746:
00072746                            @waitloop:
00072746 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0007274C 0802 0007                  		btst	#7,d2		; Is FM busy?
00072750 66F4                       		bne.s	@waitloop	; Loop if so
00072752                            

00072752 13C1 00A0 4001             		move.b	d1,(ym2612_d0).l
00072758 4E75                       		rts	
0007275A                            ; End of function WriteFMI
0007275A                            

0007275A                            ; ===========================================================================
0007275A                            ; loc_7275A:
0007275A                            WriteFMIIPart:
0007275A 142D 0001                  		move.b	TrackVoiceControl(a5),d2 ; Get voice control bits
0007275E 0882 0002                  		bclr	#2,d2			; Clear chip toggle
00072762 D002                       		add.b	d2,d0			; Add in to destination register
00072764                            

00072764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072764                            

00072764                            ; sub_72764:
00072764                            WriteFMII:
00072764 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
0007276A 0802 0007                  		btst	#7,d2		; Is FM busy?
0007276E 66F4                       		bne.s	WriteFMII	; Loop if so
00072770 13C0 00A0 4002             		move.b	d0,(ym2612_a1).l
00072776 4E71                       		nop	
00072778 4E71                       		nop	
0007277A 4E71                       		nop	
0007277C                            ; loc_7277C:
0007277C                            @waitloop:
0007277C 1439 00A0 4000             		move.b	(ym2612_a0).l,d2
00072782 0802 0007                  		btst	#7,d2		; Is FM busy?
00072786 66F4                       		bne.s	@waitloop	; Loop if so
00072788                            

00072788 13C1 00A0 4003             		move.b	d1,(ym2612_d1).l
0007278E 4E75                       		rts	
00072790                            ; End of function WriteFMII
00072790                            

00072790                            ; ===========================================================================
00072790                            ; ---------------------------------------------------------------------------
00072790                            ; FM Note Values: b-0 to a#8
00072790                            ;
00072790                            ; Each row is an octave, starting with B and ending with A-sharp/B-flat.
00072790                            ; Notably, this differs from the PSG frequency table, which starts with C and
00072790                            ; ends with B. This is caused by 'FMSetFreq' subtracting $80 from the note
00072790                            ; instead of $81, meaning that the first frequency in the table ironically
00072790                            ; corresponds to the 'rest' note. The only way to use this frequency in a
00072790                            ; real note is to transpose the channel to a lower semitone.
00072790                            ;
00072790                            ; Rather than use a complete lookup table, other SMPS drivers such as
00072790                            ; Sonic 3's compute the octave, and only store a single octave's worth of
00072790                            ; notes in the table.
00072790                            ;
00072790                            ; Invalid transposition values will cause this table to be overflowed,
00072790                            ; resulting in garbage data being used as frequency values. In drivers that
00072790                            ; compute the octave instead, invalid transposition values merely cause the
00072790                            ; notes to wrap-around (the note below the lowest note will be the highest
00072790                            ; note). It's important to keep this in mind when porting buggy songs.
00072790                            ; ---------------------------------------------------------------------------
00072790                            ; word_72790: FM_Notes:
00072790                            FMFrequencies:
00072790 025E 0284 02AB 02D3 02FE+  		dc.w $025E,$0284,$02AB,$02D3,$02FE,$032D,$035C,$038F,$03C5,$03FF,$043C,$047C
000727A8 0A5E 0A84 0AAB 0AD3 0AFE+  		dc.w $0A5E,$0A84,$0AAB,$0AD3,$0AFE,$0B2D,$0B5C,$0B8F,$0BC5,$0BFF,$0C3C,$0C7C
000727C0 125E 1284 12AB 12D3 12FE+  		dc.w $125E,$1284,$12AB,$12D3,$12FE,$132D,$135C,$138F,$13C5,$13FF,$143C,$147C
000727D8 1A5E 1A84 1AAB 1AD3 1AFE+  		dc.w $1A5E,$1A84,$1AAB,$1AD3,$1AFE,$1B2D,$1B5C,$1B8F,$1BC5,$1BFF,$1C3C,$1C7C
000727F0 225E 2284 22AB 22D3 22FE+  		dc.w $225E,$2284,$22AB,$22D3,$22FE,$232D,$235C,$238F,$23C5,$23FF,$243C,$247C
00072808 2A5E 2A84 2AAB 2AD3 2AFE+  		dc.w $2A5E,$2A84,$2AAB,$2AD3,$2AFE,$2B2D,$2B5C,$2B8F,$2BC5,$2BFF,$2C3C,$2C7C
00072820 325E 3284 32AB 32D3 32FE+  		dc.w $325E,$3284,$32AB,$32D3,$32FE,$332D,$335C,$338F,$33C5,$33FF,$343C,$347C
00072838 3A5E 3A84 3AAB 3AD3 3AFE+  		dc.w $3A5E,$3A84,$3AAB,$3AD3,$3AFE,$3B2D,$3B5C,$3B8F,$3BC5,$3BFF,$3C3C,$3C7C
00072850                            

00072850                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072850                            

00072850                            ; sub_72850:
00072850                            PSGUpdateTrack:
00072850 532D 000E                  		subq.b	#1,TrackDurationTimeout(a5)	; Update note timeout
00072854 6600                       		bne.s	@notegoing
00072856 0895 0004                  		bclr	#4,(a5)				; Clear 'do not attack note' bit (TrackPlaybackControl)
0007285A 4EBA 0000                  		jsr	PSGDoNext(pc)
0007285E 4EBA 0000                  		jsr	PSGDoNoteOn(pc)
00072862 6000 0000                  		bra.w	PSGDoVolFX
00072866                            ; ===========================================================================
00072866                            ; loc_72866:
00072866                            @notegoing:
00072866 4EBA F536                  		jsr	NoteTimeoutUpdate(pc)
0007286A 4EBA 0000                  		jsr	PSGUpdateVolFX(pc)
0007286E 4EBA F556                  		jsr	DoModulation(pc)
00072872 4EBA 0000                  		jsr	PSGUpdateFreq(pc)	; It would be better if this were a jmp and the rts was removed
00072876 4E75                       		rts
00072878                            ; End of function PSGUpdateTrack
00072878                            

00072878                            

00072878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072878                            

00072878                            ; sub_72878:
00072878                            PSGDoNext:
00072878 0895 0001                  		bclr	#1,(a5)				; Clear 'track at rest' bit (TrackPlaybackControl)
0007287C 286D 0004                  		movea.l	TrackDataPointer(a5),a4	; Get track data pointer
00072880                            ; loc_72880:
00072880                            @noteloop:
00072880 7A00                       		moveq	#0,d5
00072882 1A1C                       		move.b	(a4)+,d5	; Get byte from track
00072884 0C05 00E0                  		cmpi.b	#$E0,d5		; Is it a coord. flag?
00072888 6500                       		blo.s	@gotnote	; Branch if not
0007288A 4EBA 0000                  		jsr	CoordFlag(pc)
0007288E 60F0                       		bra.s	@noteloop
00072890                            ; ===========================================================================
00072890                            ; loc_72890:
00072890                            @gotnote:
00072890 4A05                       		tst.b	d5		; Is it a note?
00072892 6A00                       		bpl.s	@gotduration	; Branch if not
00072894 4EBA 0000                  		jsr	PSGSetFreq(pc)
00072898 1A1C                       		move.b	(a4)+,d5	; Get another byte
0007289A 4A05                       		tst.b	d5		; Is it a duration?
0007289C 6A00                       		bpl.s	@gotduration	; Branch if yes
0007289E 534C                       		subq.w	#1,a4		; Put byte back
000728A0 6000 F4BE                  		bra.w	FinishTrackUpdate
000728A4                            ; ===========================================================================
000728A4                            ; loc_728A4:
000728A4                            @gotduration:
000728A4 4EBA F49A                  		jsr	SetDuration(pc)
000728A8 6000 F4B6                  		bra.w	FinishTrackUpdate
000728AC                            ; End of function PSGDoNext
000728AC                            

000728AC                            

000728AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000728AC                            

000728AC                            ; sub_728AC:
000728AC                            PSGSetFreq:
000728AC 0405 0081                  		subi.b	#$81,d5		; Convert to 0-based index
000728B0 6500                       		bcs.s	@restpsg	; If $80, put track at rest
000728B2 DA2D 0008                  		add.b	TrackTranspose(a5),d5 ; Add in channel transposition
000728B6 0245 007F                  		andi.w	#$7F,d5		; Clear high byte and sign bit
000728BA E34D                       		lsl.w	#1,d5
000728BC 41FA 0000                  		lea	PSGFrequencies(pc),a0
000728C0 3B70 5000 0010             		move.w	(a0,d5.w),TrackFreq(a5)	; Set new frequency
000728C6 6000 F498                  		bra.w	FinishTrackUpdate
000728CA                            ; ===========================================================================
000728CA                            ; loc_728CA:
000728CA                            @restpsg:
000728CA 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
000728CE 3B7C FFFF 0010             		move.w	#-1,TrackFreq(a5)	; Invalidate note frequency
000728D4 4EBA F48A                  		jsr	FinishTrackUpdate(pc)
000728D8 6000 0000                  		bra.w	PSGNoteOff
000728DC                            ; End of function PSGSetFreq
000728DC                            

000728DC                            

000728DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000728DC                            

000728DC                            ; sub_728DC:
000728DC                            PSGDoNoteOn:
000728DC 3C2D 0010                  		move.w	TrackFreq(a5),d6	; Get note frequency
000728E0 6B00                       		bmi.s	PSGSetRest		; If invalid, branch
000728E2                            ; End of function PSGDoNoteOn
000728E2                            

000728E2                            

000728E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000728E2                            

000728E2                            ; sub_728E2:
000728E2                            PSGUpdateFreq:
000728E2 102D 001E                  		move.b	TrackDetune(a5),d0	; Get detune value
000728E6 4880                       		ext.w	d0
000728E8 DC40                       		add.w	d0,d6		; Add to frequency
000728EA 0815 0002                  		btst	#2,(a5)		; Is track being overridden? (TrackPlaybackControl)
000728EE 6600                       		bne.s	@locret		; Return if yes
000728F0 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
000728F4 6600                       		bne.s	@locret		; Return if yes
000728F6 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get channel bits
000728FA 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it a noise channel?
000728FE 6600                       		bne.s	@notnoise	; Branch if not
00072900 103C 00C0                  		move.b	#$C0,d0		; Use PSG 3 channel bits
00072904                            ; loc_72904:
00072904                            @notnoise:
00072904 3206                       		move.w	d6,d1
00072906 0201 000F                  		andi.b	#$F,d1		; Low nibble of frequency
0007290A 8001                       		or.b	d1,d0		; Latch tone data to channel
0007290C E84E                       		lsr.w	#4,d6		; Get upper 6 bits of frequency
0007290E 0206 003F                  		andi.b	#$3F,d6		; Send to latched channel
00072912 13C0 00C0 0011             		move.b	d0,(psg_input).l
00072918 13C6 00C0 0011             		move.b	d6,(psg_input).l
0007291E                            ; locret_7291E:
0007291E                            @locret:
0007291E 4E75                       		rts	
00072920                            ; End of function PSGUpdateFreq
00072920                            

00072920                            ; ===========================================================================
00072920                            ; loc_72920:
00072920                            PSGSetRest:
00072920 08D5 0001                  		bset	#1,(a5)	; Set 'track at rest' bit (TrackPlaybackControl)
00072924 4E75                       		rts	
00072926                            

00072926                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072926                            

00072926                            ; sub_72926:
00072926                            PSGUpdateVolFX:
00072926 4A2D 000B                  		tst.b	TrackVoiceIndex(a5)	; Test PSG tone
0007292A 6700 0000                  		beq.w	locret_7298A		; Return if it is zero
0007292E                            ; loc_7292E:
0007292E                            PSGDoVolFX:	; This can actually be made a bit more efficient, see the comments for more
0007292E 1C2D 0009                  		move.b	TrackVolume(a5),d6	; Get volume
00072932 7000                       		moveq	#0,d0
00072934 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get PSG tone
00072938 6700                       		beq.s	SetPSGVolume
0007293A 2079 0007 19A4             		movea.l	(Go_PSGIndex).l,a0
00072940 5340                       		subq.w	#1,d0
00072942 E548                       		lsl.w	#2,d0
00072944 2070 0000                  		movea.l	(a0,d0.w),a0
00072948 102D 000C                  		move.b	TrackVolEnvIndex(a5),d0	; Get volume envelope index		; move.b	TrackVolEnvIndex(a5),d0
0007294C 1030 0000                  		move.b	(a0,d0.w),d0			; Volume envelope value			; addq.b	#1,TrackVolEnvIndex(a5)
00072950 522D 000C                  		addq.b	#1,TrackVolEnvIndex(a5)	; Increment volume envelope index	; move.b	(a0,d0.w),d0
00072954 0800 0007                  		btst	#7,d0				; Is volume envelope value negative?	; <-- makes this line redundant
00072958 6700                       		beq.s	@gotflutter			; Branch if not				; but you gotta make this one a bpl
0007295A 0C00 0080                  		cmpi.b	#$80,d0				; Is it the terminator?			; Since this is the only check, you can take the optimisation a step further:
0007295E 6700                       		beq.s	VolEnvHold			; If so, branch				; Change the previous beq (bpl) to a bmi and make it branch to VolEnvHold to make these last two lines redundant
00072960                            ; loc_72960:
00072960                            @gotflutter:
00072960 DC40                       		add.w	d0,d6		; Add volume envelope value to volume
00072962 0C06 0010                  		cmpi.b	#$10,d6		; Is volume $10 or higher?
00072966 6500                       		blo.s	SetPSGVolume	; Branch if not
00072968 7C0F                       		moveq	#$F,d6		; Limit to silence and fall through
0007296A                            ; End of function PSGUpdateVolFX
0007296A                            

0007296A                            

0007296A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007296A                            

0007296A                            ; sub_7296A:
0007296A                            SetPSGVolume:
0007296A 0815 0001                  		btst	#1,(a5)		; Is track at rest? (TrackPlaybackControl)
0007296E 6600                       		bne.s	locret_7298A	; Return if so
00072970 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00072974 6600                       		bne.s	locret_7298A	; Return if so
00072976 0815 0004                  		btst	#4,(a5)		; Is track set to not attack next note? (TrackPlaybackControl)
0007297A 6600                       		bne.s	PSGCheckNoteTimeout ; Branch if yes
0007297C                            ; loc_7297C:
0007297C                            PSGSendVolume:
0007297C 8C2D 0001                  		or.b	TrackVoiceControl(a5),d6 ; Add in track selector bits
00072980 0606 0010                  		addi.b	#$10,d6			; Mark it as a volume command
00072984 13C6 00C0 0011             		move.b	d6,(psg_input).l
0007298A                            

0007298A                            locret_7298A:
0007298A 4E75                       		rts	
0007298C                            ; ===========================================================================
0007298C                            ; loc_7298C: PSGCheckNoteFill:
0007298C                            PSGCheckNoteTimeout:
0007298C 4A2D 0013                  		tst.b	TrackNoteTimeoutMaster(a5)	; Is note timeout on?
00072990 67EA                       		beq.s	PSGSendVolume			; Branch if not
00072992 4A2D 0012                  		tst.b	TrackNoteTimeout(a5)		; Has note timeout expired?
00072996 66E4                       		bne.s	PSGSendVolume			; Branch if not
00072998 4E75                       		rts	
0007299A                            ; End of function SetPSGVolume
0007299A                            

0007299A                            ; ===========================================================================
0007299A                            ; loc_7299A: FlutterDone:
0007299A                            VolEnvHold:
0007299A 532D 000C                  		subq.b	#1,TrackVolEnvIndex(a5)	; Decrement volume envelope index
0007299E 4E75                       		rts	
000729A0                            

000729A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000729A0                            

000729A0                            ; sub_729A0:
000729A0                            PSGNoteOff:
000729A0 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
000729A4 6600                       		bne.s	locret_729B4	; Return if so
000729A6                            ; loc_729A6:
000729A6                            SendPSGNoteOff:
000729A6 102D 0001                  		move.b	TrackVoiceControl(a5),d0	; PSG channel to change
000729AA 0000 001F                  		ori.b	#$1F,d0				; Maximum volume attenuation
000729AE 13C0 00C0 0011             		move.b	d0,(psg_input).l
000729B4                            		; DANGER! If InitMusicPlayback doesn't silence all channels, there's the
000729B4                            		; risk of music accidentally playing noise because it can't detect if
000729B4                            		; the PSG4/noise channel needs muting on track initialisation.
000729B4                            		; S&K's driver fixes it by doing this:
000729B4                            		;cmpi.b	#$DF,d0				; Are stopping PSG3?
000729B4                            		;bne.s	locret_729B4
000729B4                            		;move.b	#$FF,(psg_input).l		; If so, stop noise channel while we're at it
000729B4                            

000729B4                            locret_729B4:
000729B4 4E75                       		rts	
000729B6                            ; End of function PSGNoteOff
000729B6                            

000729B6                            

000729B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000729B6                            

000729B6                            ; sub_729B6:
000729B6                            PSGSilenceAll:
000729B6 41F9 00C0 0011             		lea	(psg_input).l,a0
000729BC 10BC 009F                  		move.b	#$9F,(a0)	; Silence PSG 1
000729C0 10BC 00BF                  		move.b	#$BF,(a0)	; Silence PSG 2
000729C4 10BC 00DF                  		move.b	#$DF,(a0)	; Silence PSG 3
000729C8 10BC 00FF                  		move.b	#$FF,(a0)	; Silence noise channel
000729CC 4E75                       		rts	
000729CE                            ; End of function PSGSilenceAll
000729CE                            

000729CE                            ; ===========================================================================
000729CE                            ; ---------------------------------------------------------------------------
000729CE                            ; PSG Note Values: c-1 to a-6
000729CE                            ;
000729CE                            ; Each row is an octave, starting with C and ending with B. Sonic 3's driver
000729CE                            ; adds another octave at the start, as well as two more notes and the end to
000729CE                            ; complete the last octave. Notably, a-6 is changed from 0 to $10. These
000729CE                            ; changes need to be applied here in order for ports of songs from Sonic 3
000729CE                            ; and later to sound correct.
000729CE                            ;
000729CE                            ; Here is what Sonic 3's version of this table looks like:
000729CE                            ;	dc.w $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3FF, $3F7, $3BE, $388
000729CE                            ;	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A, $1FB, $1DF, $1C4
000729CE                            ;	dc.w $1AB, $193, $17D, $167, $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
000729CE                            ;	dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F,  $87,  $7F,  $78,  $71
000729CE                            ;	dc.w  $6B,  $65,  $5F,  $5A,  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
000729CE                            ;	dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24,  $22,  $20,  $1F,  $1D
000729CE                            ;	dc.w  $1B,  $1A,  $18,  $17,  $16,  $15,  $13,  $12,  $11,  $10,    0,    0
000729CE                            ; ---------------------------------------------------------------------------
000729CE                            ; word_729CE:
000729CE                            PSGFrequencies:
000729CE 0356 0326 02F9 02CE 02A5+  		dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A, $1FB, $1DF, $1C4
000729E6 01AB 0193 017D 0167 0153+  		dc.w $1AB, $193, $17D, $167, $153, $140, $12E, $11D, $10D,  $FE,  $EF,  $E2
000729FE 00D6 00C9 00BE 00B4 00A9+  		dc.w  $D6,  $C9,  $BE,  $B4,  $A9,  $A0,  $97,  $8F,  $87,  $7F,  $78,  $71
00072A16 006B 0065 005F 005A 0055+  		dc.w  $6B,  $65,  $5F,  $5A,  $55,  $50,  $4B,  $47,  $43,  $40,  $3C,  $39
00072A2E 0036 0033 0030 002D 002B+  		dc.w  $36,  $33,  $30,  $2D,  $2B,  $28,  $26,  $24,  $22,  $20,  $1F,  $1D
00072A46 001B 001A 0018 0017 0016+  		dc.w  $1B,  $1A,  $18,  $17,  $16,  $15,  $13,  $12,  $11,    0
00072A5A                            

00072A5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072A5A                            

00072A5A                            ; sub_72A5A:
00072A5A                            CoordFlag:
00072A5A 0445 00E0                  		subi.w	#$E0,d5
00072A5E E54D                       		lsl.w	#2,d5
00072A60 4EFB 5000                  		jmp	coordflagLookup(pc,d5.w)
00072A64                            ; End of function CoordFlag
00072A64                            

00072A64                            ; ===========================================================================
00072A64                            ; loc_72A64:
00072A64                            coordflagLookup:
00072A64 6000 0000                  		bra.w	cfPanningAMSFMS		; $E0
00072A68                            ; ===========================================================================
00072A68 6000 0000                  		bra.w	cfDetune		; $E1
00072A6C                            ; ===========================================================================
00072A6C 6000 0000                  		bra.w	cfSetCommunication	; $E2
00072A70                            ; ===========================================================================
00072A70 6000 0000                  		bra.w	cfJumpReturn		; $E3
00072A74                            ; ===========================================================================
00072A74 6000 0000                  		bra.w	cfFadeInToPrevious	; $E4
00072A78                            ; ===========================================================================
00072A78 6000 0000                  		bra.w	cfSetTempoDivider	; $E5
00072A7C                            ; ===========================================================================
00072A7C 6000 0000                  		bra.w	cfChangeFMVolume	; $E6
00072A80                            ; ===========================================================================
00072A80 6000 0000                  		bra.w	cfHoldNote		; $E7
00072A84                            ; ===========================================================================
00072A84 6000 0000                  		bra.w	cfNoteTimeout		; $E8
00072A88                            ; ===========================================================================
00072A88 6000 0000                  		bra.w	cfChangeTransposition	; $E9
00072A8C                            ; ===========================================================================
00072A8C 6000 0000                  		bra.w	cfSetTempo		; $EA
00072A90                            ; ===========================================================================
00072A90 6000 0000                  		bra.w	cfSetTempoDividerAll	; $EB
00072A94                            ; ===========================================================================
00072A94 6000 0000                  		bra.w	cfChangePSGVolume	; $EC
00072A98                            ; ===========================================================================
00072A98 6000 0000                  		bra.w	cfClearPush		; $ED
00072A9C                            ; ===========================================================================
00072A9C 6000 0000                  		bra.w	cfStopSpecialFM4	; $EE
00072AA0                            ; ===========================================================================
00072AA0 6000 0000                  		bra.w	cfSetVoice		; $EF
00072AA4                            ; ===========================================================================
00072AA4 6000 0000                  		bra.w	cfModulation		; $F0
00072AA8                            ; ===========================================================================
00072AA8 6000 0000                  		bra.w	cfEnableModulation	; $F1
00072AAC                            ; ===========================================================================
00072AAC 6000 0000                  		bra.w	cfStopTrack		; $F2
00072AB0                            ; ===========================================================================
00072AB0 6000 0000                  		bra.w	cfSetPSGNoise		; $F3
00072AB4                            ; ===========================================================================
00072AB4 6000 0000                  		bra.w	cfDisableModulation	; $F4
00072AB8                            ; ===========================================================================
00072AB8 6000 0000                  		bra.w	cfSetPSGTone		; $F5
00072ABC                            ; ===========================================================================
00072ABC 6000 0000                  		bra.w	cfJumpTo		; $F6
00072AC0                            ; ===========================================================================
00072AC0 6000 0000                  		bra.w	cfRepeatAtPos		; $F7
00072AC4                            ; ===========================================================================
00072AC4 6000 0000                  		bra.w	cfJumpToGosub		; $F8
00072AC8                            ; ===========================================================================
00072AC8 6000 0000                  		bra.w	cfOpF9			; $F9
00072ACC                            ; ===========================================================================
00072ACC                            ; loc_72ACC:
00072ACC                            cfPanningAMSFMS:
00072ACC 121C                       		move.b	(a4)+,d1		; New AMS/FMS/panning value
00072ACE 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00072AD2 6B00                       		bmi.s	locret_72AEA		; Return if yes
00072AD4 102D 000A                  		move.b	TrackAMSFMSPan(a5),d0	; Get current AMS/FMS/panning
00072AD8 0200 0037                  		andi.b	#$37,d0			; Retain bits 0-2, 3-4 if set
00072ADC 8200                       		or.b	d0,d1			; Mask in new value
00072ADE 1B41 000A                  		move.b	d1,TrackAMSFMSPan(a5)	; Store value
00072AE2 103C 00B4                  		move.b	#$B4,d0			; Command to set AMS/FMS/panning
00072AE6 6000 FC2E                  		bra.w	WriteFMIorIIMain
00072AEA                            ; ===========================================================================
00072AEA                            

00072AEA                            locret_72AEA:
00072AEA 4E75                       		rts	
00072AEC                            ; ===========================================================================
00072AEC                            ; loc_72AEC: cfAlterNotes:
00072AEC                            cfDetune:
00072AEC 1B5C 001E                  		move.b	(a4)+,TrackDetune(a5)	; Set detune value
00072AF0 4E75                       		rts	
00072AF2                            ; ===========================================================================
00072AF2                            ; loc_72AF2: cfUnknown1:
00072AF2                            cfSetCommunication:
00072AF2 1D5C 0007                  		move.b	(a4)+,v_communication_byte(a6)	; Set otherwise unused communication byte to parameter
00072AF6 4E75                       		rts	
00072AF8                            ; ===========================================================================
00072AF8                            ; loc_72AF8:
00072AF8                            cfJumpReturn:
00072AF8 7000                       		moveq	#0,d0
00072AFA 102D 000D                  		move.b	TrackStackPointer(a5),d0 ; Track stack pointer
00072AFE 2875 0000                  		movea.l	(a5,d0.w),a4		; Set track return address
00072B02 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)		; Set 'popped' value to zero
00072B0A 544C                       		addq.w	#2,a4			; Skip jump target address from gosub flag
00072B0C 5800                       		addq.b	#4,d0			; Actually 'pop' value
00072B0E 1B40 000D                  		move.b	d0,TrackStackPointer(a5) ; Set new stack pointer
00072B12 4E75                       		rts	
00072B14                            ; ===========================================================================
00072B14                            ; loc_72B14:
00072B14                            cfFadeInToPrevious:
00072B14 204E                       		movea.l	a6,a0
00072B16 43EE 03A0                  		lea	v_1up_ram_copy(a6),a1
00072B1A 303C 0087                  		move.w	#((v_music_track_ram_end-v_startofvariables)/4)-1,d0	; $220 bytes to restore: all variables and music track data
00072B1E                            ; loc_72B1E:
00072B1E                            @restoreramloop:
00072B1E 20D9                       		move.l	(a1)+,(a0)+
00072B20 51C8 FFFC                  		dbf	d0,@restoreramloop
00072B24                            

00072B24 08EE 0002 0040             		bset	#2,v_music_dac_track+TrackPlaybackControl(a6)	; Set 'SFX overriding' bit
00072B2A 264D                       		movea.l	a5,a3
00072B2C 1C3C 0028                  		move.b	#$28,d6
00072B30 9C2E 0026                  		sub.b	v_fadein_counter(a6),d6			; If fade already in progress, this adjusts track volume accordingly
00072B34 7E05                       		moveq	#((v_music_fm_tracks_end-v_music_fm_tracks)/TrackSz)-1,d7	; 6 FM tracks
00072B36 4BEE 0070                  		lea	v_music_fm_tracks(a6),a5
00072B3A                            ; loc_72B3A:
00072B3A                            @fmloop:
00072B3A 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00072B3E 6700                       		beq.s	@nextfm		; Branch if not
00072B40 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00072B44 DD2D 0009                  		add.b	d6,TrackVolume(a5) ; Apply current volume fade-in
00072B48 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00072B4C 6600                       		bne.s	@nextfm		; Branch if yes
00072B4E 7000                       		moveq	#0,d0
00072B50 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Get voice
00072B54 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00072B58 4EBA 0000                  		jsr	SetVoice(pc)
00072B5C                            ; loc_72B5C:
00072B5C                            @nextfm:
00072B5C DAFC 0030                  		adda.w	#TrackSz,a5
00072B60 51CF FFD8                  		dbf	d7,@fmloop
00072B64                            

00072B64 7E02                       		moveq	#((v_music_psg_tracks_end-v_music_psg_tracks)/TrackSz)-1,d7	; 3 PSG tracks
00072B66                            ; loc_72B66:
00072B66                            @psgloop:
00072B66 0815 0007                  		btst	#7,(a5)		; Is track playing? (TrackPlaybackControl)
00072B6A 6700                       		beq.s	@nextpsg	; Branch if not
00072B6C 08D5 0001                  		bset	#1,(a5)		; Set 'track at rest' bit (TrackPlaybackControl)
00072B70 4EBA FE2E                  		jsr	PSGNoteOff(pc)
00072B74 DD2D 0009                  		add.b	d6,TrackVolume(a5)	; Apply current volume fade-in
00072B78                            ; loc_72B78:
00072B78                            @nextpsg:
00072B78 DAFC 0030                  		adda.w	#TrackSz,a5
00072B7C 51CF FFE8                  		dbf	d7,@psgloop
00072B80                            		
00072B80 2A4B                       		movea.l	a3,a5
00072B82 1D7C 0080 0024             		move.b	#$80,f_fadein_flag(a6)		; Trigger fade-in
00072B88 1D7C 0028 0026             		move.b	#$28,v_fadein_counter(a6)	; Fade-in delay
00072B8E 422E 0027                  		clr.b	f_1up_playing(a6)
00072B92 33FC 0000 00A1 1100        		startZ80
00072B9A 504F                       		addq.w	#8,sp		; Tamper return value so we don't return to caller
00072B9C 4E75                       		rts	
00072B9E                            ; ===========================================================================
00072B9E                            ; loc_72B9E:
00072B9E                            cfSetTempoDivider:
00072B9E 1B5C 0002                  		move.b	(a4)+,TrackTempoDivider(a5)	; Set tempo divider on current track
00072BA2 4E75                       		rts	
00072BA4                            ; ===========================================================================
00072BA4                            ; loc_72BA4: cfSetVolume:
00072BA4                            cfChangeFMVolume:
00072BA4 101C                       		move.b	(a4)+,d0		; Get parameter
00072BA6 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Add to current volume
00072BAA 6000 0000                  		bra.w	SendVoiceTL
00072BAE                            ; ===========================================================================
00072BAE                            ; loc_72BAE: cfPreventAttack:
00072BAE                            cfHoldNote:
00072BAE 08D5 0004                  		bset	#4,(a5)		; Set 'do not attack next note' bit (TrackPlaybackControl)
00072BB2 4E75                       		rts	
00072BB4                            ; ===========================================================================
00072BB4                            ; loc_72BB4: cfNoteFill
00072BB4                            cfNoteTimeout:
00072BB4 1B54 0012                  		move.b	(a4),TrackNoteTimeout(a5)		; Note fill timeout
00072BB8 1B5C 0013                  		move.b	(a4)+,TrackNoteTimeoutMaster(a5)	; Note fill master
00072BBC 4E75                       		rts	
00072BBE                            ; ===========================================================================
00072BBE                            ; loc_72BBE: cfAddKey:
00072BBE                            cfChangeTransposition:
00072BBE 101C                       		move.b	(a4)+,d0		; Get parameter
00072BC0 D12D 0008                  		add.b	d0,TrackTranspose(a5)	; Add to transpose value
00072BC4 4E75                       		rts	
00072BC6                            ; ===========================================================================
00072BC6                            ; loc_72BC6:
00072BC6                            cfSetTempo:
00072BC6 1D54 0002                  		move.b	(a4),v_main_tempo(a6)		; Set main tempo
00072BCA 1D5C 0001                  		move.b	(a4)+,v_main_tempo_timeout(a6)	; And reset timeout (!)
00072BCE 4E75                       		rts	
00072BD0                            ; ===========================================================================
00072BD0                            ; loc_72BD0: cfSetTempoMod:
00072BD0                            cfSetTempoDividerAll:
00072BD0 41EE 0040                  		lea	v_music_track_ram(a6),a0
00072BD4 101C                       		move.b	(a4)+,d0			; Get new tempo divider
00072BD6 7230                       		moveq	#TrackSz,d1
00072BD8 7409                       		moveq	#((v_music_track_ram_end-v_music_track_ram)/TrackSz)-1,d2	; 1 DAC + 6 FM + 3 PSG tracks
00072BDA                            ; loc_72BDA:
00072BDA                            @trackloop:
00072BDA 1140 0002                  		move.b	d0,TrackTempoDivider(a0)	; Set track's tempo divider
00072BDE D0C1                       		adda.w	d1,a0
00072BE0 51CA FFF8                  		dbf	d2,@trackloop
00072BE4                            

00072BE4 4E75                       		rts	
00072BE6                            ; ===========================================================================
00072BE6                            ; loc_72BE6: cfChangeVolume:
00072BE6                            cfChangePSGVolume:
00072BE6 101C                       		move.b	(a4)+,d0		; Get volume change
00072BE8 D12D 0009                  		add.b	d0,TrackVolume(a5)	; Apply it
00072BEC 4E75                       		rts	
00072BEE                            ; ===========================================================================
00072BEE                            ; loc_72BEE:
00072BEE                            cfClearPush:
00072BEE 422E 002C                  		clr.b	f_push_playing(a6)	; Allow push sound to be played once more
00072BF2 4E75                       		rts	
00072BF4                            ; ===========================================================================
00072BF4                            ; loc_72BF4:
00072BF4                            cfStopSpecialFM4:
00072BF4 0895 0007                  		bclr	#7,(a5)		; Stop track (TrackPlaybackControl)
00072BF8 0895 0004                  		bclr	#4,(a5)		; Clear 'do not attack next note' bit (TrackPlaybackControl)
00072BFC 4EBA FB00                  		jsr	FMNoteOff(pc)
00072C00 4A2E 0250                  		tst.b	v_sfx_fm4_track+TrackPlaybackControl(a6)	; Is SFX using FM4?
00072C04 6B00                       		bmi.s	@locexit					; Branch if yes
00072C06 264D                       		movea.l	a5,a3
00072C08 4BEE 0100                  		lea	v_music_fm4_track(a6),a5
00072C0C 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00072C10 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX is overriding' bit (TrackPlaybackControl)
00072C14 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00072C18 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00072C1C 4EBA 0000                  		jsr	SetVoice(pc)
00072C20 2A4B                       		movea.l	a3,a5
00072C22                            ; loc_72C22:
00072C22                            @locexit:
00072C22 504F                       		addq.w	#8,sp		; Tamper with return value so we don't return to caller
00072C24 4E75                       		rts	
00072C26                            ; ===========================================================================
00072C26                            ; loc_72C26:
00072C26                            cfSetVoice:
00072C26 7000                       		moveq	#0,d0
00072C28 101C                       		move.b	(a4)+,d0		; Get new voice
00072C2A 1B40 000B                  		move.b	d0,TrackVoiceIndex(a5)	; Store it
00072C2E 0815 0002                  		btst	#2,(a5)			; Is SFX overriding this track? (TrackPlaybackControl)
00072C32 6600 0000                  		bne.w	locret_72CAA		; Return if yes
00072C36 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Music voice pointer
00072C3A 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a music track?
00072C3E 6700                       		beq.s	SetVoice		; If yes, branch
00072C40 226D 0020                  		movea.l	TrackVoicePtr(a5),a1	; SFX track voice pointer
00072C44 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating a SFX track?
00072C48 6B00                       		bmi.s	SetVoice		; If yes, branch
00072C4A 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1 ; Special SFX voice pointer
00072C4E                            

00072C4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072C4E                            

00072C4E                            ; sub_72C4E:
00072C4E                            SetVoice:
00072C4E 5340                       		subq.w	#1,d0
00072C50 6B00                       		bmi.s	@havevoiceptr
00072C52 323C 0019                  		move.w	#25,d1
00072C56                            ; loc_72C56:
00072C56                            @voicemultiply:
00072C56 D2C1                       		adda.w	d1,a1
00072C58 51C8 FFFC                  		dbf	d0,@voicemultiply
00072C5C                            ; loc_72C5C:
00072C5C                            @havevoiceptr:
00072C5C 1219                       		move.b	(a1)+,d1		; feedback/algorithm
00072C5E 1B41 001F                  		move.b	d1,TrackFeedbackAlgo(a5) ; Save it to track RAM
00072C62 1801                       		move.b	d1,d4
00072C64 103C 00B0                  		move.b	#$B0,d0			; Command to write feedback/algorithm
00072C68 4EBA FAB8                  		jsr	WriteFMIorII(pc)
00072C6C 45FA 0000                  		lea	FMInstrumentOperatorTable(pc),a2
00072C70 7600                       		moveq	#(FMInstrumentOperatorTable_End-FMInstrumentOperatorTable)-1,d3		; Don't want to send TL yet
00072C72                            ; loc_72C72:
00072C72                            @sendvoiceloop:
00072C72 101A                       		move.b	(a2)+,d0
00072C74 1219                       		move.b	(a1)+,d1
00072C76 4EBA FAAA                  		jsr	WriteFMIorII(pc)
00072C7A 51CB FFF6                  		dbf	d3,@sendvoiceloop
00072C7E                            

00072C7E 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00072C80 0244 0007                  		andi.w	#7,d4			; Get algorithm
00072C84 183B 4000                  		move.b	FMSlotMask(pc,d4.w),d4	; Get slot mask for algorithm
00072C88 162D 0009                  		move.b	TrackVolume(a5),d3	; Track volume attenuation
00072C8C                            ; loc_72C8C:
00072C8C                            @sendtlloop:
00072C8C 101A                       		move.b	(a2)+,d0
00072C8E 1219                       		move.b	(a1)+,d1
00072C90 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00072C92 6400                       		bcc.s	@sendtl		; Branch if not
00072C94 D203                       		add.b	d3,d1		; Include additional attenuation
00072C96                            ; loc_72C96:
00072C96                            @sendtl:
00072C96 4EBA FA8A                  		jsr	WriteFMIorII(pc)
00072C9A 51CD FFF0                  		dbf	d5,@sendtlloop
00072C9E                            		
00072C9E 103C 00B4                  		move.b	#$B4,d0			; Register for AMS/FMS/Panning
00072CA2 122D 000A                  		move.b	TrackAMSFMSPan(a5),d1	; Value to send
00072CA6 4EBA FA7A                  		jsr	WriteFMIorII(pc) 	; (It would be better if this were a jmp)
00072CAA                            

00072CAA                            locret_72CAA:
00072CAA 4E75                       		rts	
00072CAC                            ; End of function SetVoice
00072CAC                            

00072CAC                            ; ===========================================================================
00072CAC                            ; byte_72CAC:
00072CAC 0808 0808 0A0E 0E0F        FMSlotMask:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00072CB4                            

00072CB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072CB4                            

00072CB4                            ; sub_72CB4:
00072CB4                            SendVoiceTL:
00072CB4 0815 0002                  		btst	#2,(a5)		; Is SFX overriding? (TrackPlaybackControl)
00072CB8 6600                       		bne.s	@locret		; Return if so
00072CBA 7000                       		moveq	#0,d0
00072CBC 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00072CC0 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Voice pointer
00072CC4 4A2E 000E                  		tst.b	f_voice_selector(a6)
00072CC8 6700                       		beq.s	@gotvoiceptr
00072CCA                            		; DANGER! This uploads the wrong voice! It should have been a5 instead
00072CCA                            		; of a6!
00072CCA 226E 0020                  		movea.l	TrackVoicePtr(a6),a1
00072CCE 4A2E 000E                  		tst.b	f_voice_selector(a6)
00072CD2 6B00                       		bmi.s	@gotvoiceptr
00072CD4 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1
00072CD8                            ; loc_72CD8:
00072CD8                            @gotvoiceptr:
00072CD8 5340                       		subq.w	#1,d0
00072CDA 6B00                       		bmi.s	@gotvoice
00072CDC 323C 0019                  		move.w	#25,d1
00072CE0                            ; loc_72CE0:
00072CE0                            @voicemultiply:
00072CE0 D2C1                       		adda.w	d1,a1
00072CE2 51C8 FFFC                  		dbf	d0,@voicemultiply
00072CE6                            ; loc_72CE6:
00072CE6                            @gotvoice:
00072CE6 D2FC 0015                  		adda.w	#21,a1				; Want TL
00072CEA 45FA 0000                  		lea	FMInstrumentTLTable(pc),a2
00072CEE 102D 001F                  		move.b	TrackFeedbackAlgo(a5),d0	; Get feedback/algorithm
00072CF2 0240 0007                  		andi.w	#7,d0				; Want only algorithm
00072CF6 183B 00B4                  		move.b	FMSlotMask(pc,d0.w),d4		; Get slot mask
00072CFA 162D 0009                  		move.b	TrackVolume(a5),d3		; Get track volume attenuation
00072CFE 6B00                       		bmi.s	@locret				; If negative, stop
00072D00 7A00                       		moveq	#(FMInstrumentTLTable_End-FMInstrumentTLTable)-1,d5
00072D02                            ; loc_72D02:
00072D02                            @sendtlloop:
00072D02 101A                       		move.b	(a2)+,d0
00072D04 1219                       		move.b	(a1)+,d1
00072D06 E20C                       		lsr.b	#1,d4		; Is bit set for this operator in the mask?
00072D08 6400                       		bcc.s	@senttl		; Branch if not
00072D0A D203                       		add.b	d3,d1		; Include additional attenuation
00072D0C 6500                       		bcs.s	@senttl		; Branch on overflow
00072D0E 4EBA FA12                  		jsr	WriteFMIorII(pc)
00072D12                            ; loc_72D12:
00072D12                            @senttl:
00072D12 51CD FFEE                  		dbf	d5,@sendtlloop
00072D16                            ; locret_72D16:
00072D16                            @locret:
00072D16 4E75                       		rts	
00072D18                            ; End of function SendVoiceTL
00072D18                            

00072D18                            ; ===========================================================================
00072D18                            ; byte_72D18:
00072D18                            FMInstrumentOperatorTable:
00072D18 30                         		dc.b  $30		; Detune/multiple operator 1
00072D19 38                         		dc.b  $38		; Detune/multiple operator 3
00072D1A 34                         		dc.b  $34		; Detune/multiple operator 2
00072D1B 3C                         		dc.b  $3C		; Detune/multiple operator 4
00072D1C 50                         		dc.b  $50		; Rate scalling/attack rate operator 1
00072D1D 58                         		dc.b  $58		; Rate scalling/attack rate operator 3
00072D1E 54                         		dc.b  $54		; Rate scalling/attack rate operator 2
00072D1F 5C                         		dc.b  $5C		; Rate scalling/attack rate operator 4
00072D20 60                         		dc.b  $60		; Amplitude modulation/first decay rate operator 1
00072D21 68                         		dc.b  $68		; Amplitude modulation/first decay rate operator 3
00072D22 64                         		dc.b  $64		; Amplitude modulation/first decay rate operator 2
00072D23 6C                         		dc.b  $6C		; Amplitude modulation/first decay rate operator 4
00072D24 70                         		dc.b  $70		; Secondary decay rate operator 1
00072D25 78                         		dc.b  $78		; Secondary decay rate operator 3
00072D26 74                         		dc.b  $74		; Secondary decay rate operator 2
00072D27 7C                         		dc.b  $7C		; Secondary decay rate operator 4
00072D28 80                         		dc.b  $80		; Secondary amplitude/release rate operator 1
00072D29 88                         		dc.b  $88		; Secondary amplitude/release rate operator 3
00072D2A 84                         		dc.b  $84		; Secondary amplitude/release rate operator 2
00072D2B 8C                         		dc.b  $8C		; Secondary amplitude/release rate operator 4
00072D2C                            FMInstrumentOperatorTable_End
00072D2C                            ; byte_72D2C:
00072D2C                            FMInstrumentTLTable:
00072D2C 40                         		dc.b  $40		; Total level operator 1
00072D2D 48                         		dc.b  $48		; Total level operator 3
00072D2E 44                         		dc.b  $44		; Total level operator 2
00072D2F 4C                         		dc.b  $4C		; Total level operator 4
00072D30                            FMInstrumentTLTable_End
00072D30                            ; ===========================================================================
00072D30                            ; loc_72D30:
00072D30                            cfModulation:
00072D30 08D5 0003                  		bset	#3,(a5)				; Turn on modulation (TrackPlaybackControl)
00072D34 2B4C 0014                  		move.l	a4,TrackModulationPtr(a5)	; Save pointer to modulation data
00072D38 1B5C 0018                  		move.b	(a4)+,TrackModulationWait(a5)	; Modulation delay
00072D3C 1B5C 0019                  		move.b	(a4)+,TrackModulationSpeed(a5)	; Modulation speed
00072D40 1B5C 001A                  		move.b	(a4)+,TrackModulationDelta(a5)	; Modulation delta
00072D44 101C                       		move.b	(a4)+,d0			; Modulation steps...
00072D46 E208                       		lsr.b	#1,d0				; ... divided by 2...
00072D48 1B40 001B                  		move.b	d0,TrackModulationSteps(a5)	; ... before being stored
00072D4C 426D 001C                  		clr.w	TrackModulationVal(a5)		; Total accumulated modulation frequency change
00072D50 4E75                       		rts	
00072D52                            ; ===========================================================================
00072D52                            ; loc_72D52:
00072D52                            cfEnableModulation:
00072D52 08D5 0003                  		bset	#3,(a5)		; Turn on modulation (TrackPlaybackControl)
00072D56 4E75                       		rts	
00072D58                            ; ===========================================================================
00072D58                            ; loc_72D58:
00072D58                            cfStopTrack:
00072D58 0895 0007                  		bclr	#7,(a5)			; Stop track (TrackPlaybackControl)
00072D5C 0895 0004                  		bclr	#4,(a5)			; Clear 'do not attack next note' bit (TrackPlaybackControl)
00072D60 4A2D 0001                  		tst.b	TrackVoiceControl(a5)	; Is this a PSG track?
00072D64 6B00                       		bmi.s	@stoppsg		; Branch if yes
00072D66 4A2E 0008                  		tst.b	f_updating_dac(a6)	; Is this the DAC we are updating?
00072D6A 6B00 0000                  		bmi.w	@locexit		; Exit if yes
00072D6E 4EBA F98E                  		jsr	FMNoteOff(pc)
00072D72 6000                       		bra.s	@stoppedchannel
00072D74                            ; ===========================================================================
00072D74                            ; loc_72D74:
00072D74                            @stoppsg:
00072D74 4EBA FC2A                  		jsr	PSGNoteOff(pc)
00072D78                            ; loc_72D78:
00072D78                            @stoppedchannel:
00072D78 4A2E 000E                  		tst.b	f_voice_selector(a6)	; Are we updating SFX?
00072D7C 6A00 0000                  		bpl.w	@locexit		; Exit if not
00072D80 422E 0000                  		clr.b	v_sndprio(a6)		; Clear priority
00072D84 7000                       		moveq	#0,d0
00072D86 102D 0001                  		move.b	TrackVoiceControl(a5),d0 ; Get voice control bits
00072D8A 6B00                       		bmi.s	@getpsgptr		; Branch if PSG
00072D8C 41FA F53E                  		lea	SFX_BGMChannelRAM(pc),a0
00072D90 264D                       		movea.l	a5,a3
00072D92 0C00 0004                  		cmpi.b	#4,d0			; Is this FM4?
00072D96 6600                       		bne.s	@getpointer		; Branch if not
00072D98 4A2E 0340                  		tst.b	v_spcsfx_fm4_track+TrackPlaybackControl(a6)	; Is special SFX playing?
00072D9C 6A00                       		bpl.s	@getpointer		; Branch if not
00072D9E 4BEE 0340                  		lea	v_spcsfx_fm4_track(a6),a5
00072DA2 226E 0020                  		movea.l	v_special_voice_ptr(a6),a1	; Get voice pointer
00072DA6 6000                       		bra.s	@gotpointer
00072DA8                            ; ===========================================================================
00072DA8                            ; loc_72DA8:
00072DA8                            @getpointer:
00072DA8 5500                       		subq.b	#2,d0		; SFX can only use FM3 and up
00072DAA E508                       		lsl.b	#2,d0
00072DAC 2A70 0000                  		movea.l	(a0,d0.w),a5
00072DB0 4A15                       		tst.b	(a5)			; Is track playing? (TrackPlaybackControl)
00072DB2 6A00                       		bpl.s	@novoiceupd		; Branch if not
00072DB4 226E 0018                  		movea.l	v_voice_ptr(a6),a1	; Get voice pointer
00072DB8                            ; loc_72DB8:
00072DB8                            @gotpointer:
00072DB8 0895 0002                  		bclr	#2,(a5)			; Clear 'SFX overriding' bit (TrackPlaybackControl)
00072DBC 08D5 0001                  		bset	#1,(a5)			; Set 'track at rest' bit (TrackPlaybackControl)
00072DC0 102D 000B                  		move.b	TrackVoiceIndex(a5),d0	; Current voice
00072DC4 4EBA FE88                  		jsr	SetVoice(pc)
00072DC8                            ; loc_72DC8:
00072DC8                            @novoiceupd:
00072DC8 2A4B                       		movea.l	a3,a5
00072DCA 6000                       		bra.s	@locexit
00072DCC                            ; ===========================================================================
00072DCC                            ; loc_72DCC:
00072DCC                            @getpsgptr:
00072DCC 41EE 0370                  		lea	v_spcsfx_psg3_track(a6),a0
00072DD0 4A10                       		tst.b	(a0)		; Is track playing? (TrackPlaybackControl)
00072DD2 6A00                       		bpl.s	@getchannelptr	; Branch if not
00072DD4 0C00 00E0                  		cmpi.b	#$E0,d0		; Is it the noise channel?
00072DD8 6700                       		beq.s	@gotchannelptr	; Branch if yes
00072DDA 0C00 00C0                  		cmpi.b	#$C0,d0		; Is it PSG 3?
00072DDE 6700                       		beq.s	@gotchannelptr	; Branch if yes
00072DE0                            ; loc_72DE0:
00072DE0                            @getchannelptr:
00072DE0 41FA F4EA                  		lea	SFX_BGMChannelRAM(pc),a0
00072DE4 E608                       		lsr.b	#3,d0
00072DE6 2070 0000                  		movea.l	(a0,d0.w),a0
00072DEA                            ; loc_72DEA:
00072DEA                            @gotchannelptr:
00072DEA 0890 0002                  		bclr	#2,(a0)				; Clear 'SFX overriding' bit (TrackPlaybackControl)
00072DEE 08D0 0001                  		bset	#1,(a0)				; Set 'track at rest' bit (TrackPlaybackControl)
00072DF2 0C28 00E0 0001             		cmpi.b	#$E0,TrackVoiceControl(a0)	; Is this a noise pointer?
00072DF8 6600                       		bne.s	@locexit			; Branch if not
00072DFA 13E8 001F 00C0 0011        		move.b	TrackPSGNoise(a0),(psg_input).l ; Set noise tone
00072E02                            ; loc_72E02:
00072E02                            @locexit:
00072E02 504F                       		addq.w	#8,sp		; Tamper with return value so we don't go back to caller
00072E04 4E75                       		rts	
00072E06                            ; ===========================================================================
00072E06                            ; loc_72E06:
00072E06                            cfSetPSGNoise:
00072E06 1B7C 00E0 0001             		move.b	#$E0,TrackVoiceControl(a5)	; Turn channel into noise channel
00072E0C 1B5C 001F                  		move.b	(a4)+,TrackPSGNoise(a5)	; Save noise tone
00072E10 0815 0002                  		btst	#2,(a5)				; Is track being overridden? (TrackPlaybackControl)
00072E14 6600                       		bne.s	@locret				; Return if yes
00072E16 13EC FFFF 00C0 0011        		move.b	-1(a4),(psg_input).l		; Set tone
00072E1E                            ; locret_72E1E:
00072E1E                            @locret:
00072E1E 4E75                       		rts	
00072E20                            ; ===========================================================================
00072E20                            ; loc_72E20:
00072E20                            cfDisableModulation:
00072E20 0895 0003                  		bclr	#3,(a5)		; Disable modulation (TrackPlaybackControl)
00072E24 4E75                       		rts	
00072E26                            ; ===========================================================================
00072E26                            ; loc_72E26:
00072E26                            cfSetPSGTone:
00072E26 1B5C 000B                  		move.b	(a4)+,TrackVoiceIndex(a5)	; Set current PSG tone
00072E2A 4E75                       		rts	
00072E2C                            ; ===========================================================================
00072E2C                            ; loc_72E2C:
00072E2C                            cfJumpTo:
00072E2C 101C                       		move.b	(a4)+,d0	; High byte of offset
00072E2E E148                       		lsl.w	#8,d0		; Shift it into place
00072E30 101C                       		move.b	(a4)+,d0	; Low byte of offset
00072E32 D8C0                       		adda.w	d0,a4		; Add to current position
00072E34 534C                       		subq.w	#1,a4		; Put back one byte
00072E36 4E75                       		rts	
00072E38                            ; ===========================================================================
00072E38                            ; loc_72E38:
00072E38                            cfRepeatAtPos:
00072E38 7000                       		moveq	#0,d0
00072E3A 101C                       		move.b	(a4)+,d0			; Loop index
00072E3C 121C                       		move.b	(a4)+,d1			; Repeat count
00072E3E 4A35 0024                  		tst.b	TrackLoopCounters(a5,d0.w)	; Has this loop already started?
00072E42 6600                       		bne.s	@loopexists			; Branch if yes
00072E44 1B81 0024                  		move.b	d1,TrackLoopCounters(a5,d0.w)	; Initialize repeat count
00072E48                            ; loc_72E48:
00072E48                            @loopexists:
00072E48 5335 0024                  		subq.b	#1,TrackLoopCounters(a5,d0.w)	; Decrease loop's repeat count
00072E4C 66DE                       		bne.s	cfJumpTo			; If nonzero, branch to target
00072E4E 544C                       		addq.w	#2,a4				; Skip target address
00072E50 4E75                       		rts	
00072E52                            ; ===========================================================================
00072E52                            ; loc_72E52:
00072E52                            cfJumpToGosub:
00072E52 7000                       		moveq	#0,d0
00072E54 102D 000D                  		move.b	TrackStackPointer(a5),d0	; Current stack pointer
00072E58 5900                       		subq.b	#4,d0				; Add space for another target
00072E5A 2B8C 0000                  		move.l	a4,(a5,d0.w)			; Put in current address (*before* target for jump!)
00072E5E 1B40 000D                  		move.b	d0,TrackStackPointer(a5)	; Store new stack pointer
00072E62 60C8                       		bra.s	cfJumpTo
00072E64                            ; ===========================================================================
00072E64                            ; loc_72E64:
00072E64                            cfOpF9:
00072E64 103C 0088                  		move.b	#$88,d0		; D1L/RR of Operator 3
00072E68 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00072E6C 4EBA F8C0                  		jsr	WriteFMI(pc)
00072E70 103C 008C                  		move.b	#$8C,d0		; D1L/RR of Operator 4
00072E74 123C 000F                  		move.b	#$F,d1		; Loaded with fixed value (max RR, 1TL)
00072E78 6000 F8B4                  		bra.w	WriteFMI
00072E7C                            ; ===========================================================================
00072E7C                            ; ---------------------------------------------------------------------------
00072E7C                            ; DAC driver
00072E7C                            ; ---------------------------------------------------------------------------
00072E7C                            Kos_Z80:
00072E7C                            		; In this branch, the DAC driver is a binary blob. We do some
00072E7C                            		; hackery here to manually patch some of its pointers. In the
00072E7C                            		; AS branch, this driver is properly disassembled.
00072E7C                            		incbin	"sound\z80.bin", 0, $15
00072E91 00                         		dc.b ((SegaPCM&$FF8000)/$8000)&1						; Least bit of bank ID (bit 15 of address)
00072E92                            		incbin	"sound\z80.bin", $16, 6
00072E98 00                         		dc.b ((SegaPCM&$FF8000)/$8000)>>1						; ... the remaining bits of bank ID (bits 16-23)
00072E99                            		incbin	"sound\z80.bin", $1D, $93
00072F2C 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$7F00)>>8)|$80				; Pointer to Sega PCM, relative to start of ROM bank (i.e., little_endian($8000 + SegaPCM&$7FFF)
00072F2E                            		incbin	"sound\z80.bin", $B2, 1
00072F2F 0000                       		dc.w (((SegaPCM_End-SegaPCM)&$FF)<<8)+(((SegaPCM_End-SegaPCM)&$FF00)>>8)	; ... the size of the Sega PCM (little endian)
00072F31                            		incbin	"sound\z80.bin", $B5, $16AB
000745DC                            		even
000745DC                            

000745DC                            ; ---------------------------------------------------------------------------
000745DC                            ; Music data
000745DC                            ; ---------------------------------------------------------------------------
000745DC                            Music81:	incbin	"sound/music/Mus81 - GHZ.bin"
00074D44                            		even
00074D44                            Music82:	incbin	"sound/music/Mus82 - LZ.bin"
00075194                            		even
00075194                            Music83:	incbin	"sound/music/Mus83 - MZ.bin"
000755F2                            		even
000755F2                            Music84:	incbin	"sound/music/Mus84 - SLZ.bin"
00075A60                            		even
00075A60                            Music85:	incbin	"sound/music/Mus85 - SYZ.bin"
00075EAC                            		even
00075EAC                            Music86:	incbin	"sound/music/Mus86 - SBZ.bin"
000763FC                            		even
000763FC                            Music87:	incbin	"sound/music/Mus87 - Invincibility.bin"
000765E2                            		even
000765E2                            Music88:	incbin	"sound/music/Mus88 - Extra Life.bin"
000766D0                            		even
000766D0                            Music89:	incbin	"sound/music/Mus89 - Special Stage.bin"
000769FC                            		even
000769FC                            Music8A:	incbin	"sound/music/Mus8A - Title Screen.bin"
00076BA8                            		even
00076BA8                            Music8B:	incbin	"sound/music/Mus8B - Ending.bin"
00076E42                            		even
00076E42                            Music8C:	incbin	"sound/music/Mus8C - Boss.bin"
0007705E                            		even
0007705E                            Music8D:	incbin	"sound/music/Mus8D - FZ.bin"
0007727A                            		even
0007727A                            Music8E:	incbin	"sound/music/Mus8E - Sonic Got Through.bin"
000773D0                            		even
000773D0                            Music8F:	incbin	"sound/music/Mus8F - Game Over.bin"
00077520                            		even
00077520                            Music90:	incbin	"sound/music/Mus90 - Continue Screen.bin"
0007767E                            		even
0007767E                            Music91:	incbin	"sound/music/Mus91 - Credits.bin"
0007894C                            		even
0007894C                            Music92:	incbin	"sound/music/Mus92 - Drowning.bin"
00078A76                            		even
00078A76                            Music93:	incbin	"sound/music/Mus93 - Get Emerald.bin"
00078B44                            		even
00078B44                            

00078B44                            ; ---------------------------------------------------------------------------
00078B44                            ; Sound	effect pointers
00078B44                            ; ---------------------------------------------------------------------------
00078B44                            SoundIndex:
00078B44 0000 0000                  ptr_sndA0:	dc.l SoundA0
00078B48 0000 0000                  ptr_sndA1:	dc.l SoundA1
00078B4C 0000 0000                  ptr_sndA2:	dc.l SoundA2
00078B50 0000 0000                  ptr_sndA3:	dc.l SoundA3
00078B54 0000 0000                  ptr_sndA4:	dc.l SoundA4
00078B58 0000 0000                  ptr_sndA5:	dc.l SoundA5
00078B5C 0000 0000                  ptr_sndA6:	dc.l SoundA6
00078B60 0000 0000                  ptr_sndA7:	dc.l SoundA7
00078B64 0000 0000                  ptr_sndA8:	dc.l SoundA8
00078B68 0000 0000                  ptr_sndA9:	dc.l SoundA9
00078B6C 0000 0000                  ptr_sndAA:	dc.l SoundAA
00078B70 0000 0000                  ptr_sndAB:	dc.l SoundAB
00078B74 0000 0000                  ptr_sndAC:	dc.l SoundAC
00078B78 0000 0000                  ptr_sndAD:	dc.l SoundAD
00078B7C 0000 0000                  ptr_sndAE:	dc.l SoundAE
00078B80 0000 0000                  ptr_sndAF:	dc.l SoundAF
00078B84 0000 0000                  ptr_sndB0:	dc.l SoundB0
00078B88 0000 0000                  ptr_sndB1:	dc.l SoundB1
00078B8C 0000 0000                  ptr_sndB2:	dc.l SoundB2
00078B90 0000 0000                  ptr_sndB3:	dc.l SoundB3
00078B94 0000 0000                  ptr_sndB4:	dc.l SoundB4
00078B98 0000 0000                  ptr_sndB5:	dc.l SoundB5
00078B9C 0000 0000                  ptr_sndB6:	dc.l SoundB6
00078BA0 0000 0000                  ptr_sndB7:	dc.l SoundB7
00078BA4 0000 0000                  ptr_sndB8:	dc.l SoundB8
00078BA8 0000 0000                  ptr_sndB9:	dc.l SoundB9
00078BAC 0000 0000                  ptr_sndBA:	dc.l SoundBA
00078BB0 0000 0000                  ptr_sndBB:	dc.l SoundBB
00078BB4 0000 0000                  ptr_sndBC:	dc.l SoundBC
00078BB8 0000 0000                  ptr_sndBD:	dc.l SoundBD
00078BBC 0000 0000                  ptr_sndBE:	dc.l SoundBE
00078BC0 0000 0000                  ptr_sndBF:	dc.l SoundBF
00078BC4 0000 0000                  ptr_sndC0:	dc.l SoundC0
00078BC8 0000 0000                  ptr_sndC1:	dc.l SoundC1
00078BCC 0000 0000                  ptr_sndC2:	dc.l SoundC2
00078BD0 0000 0000                  ptr_sndC3:	dc.l SoundC3
00078BD4 0000 0000                  ptr_sndC4:	dc.l SoundC4
00078BD8 0000 0000                  ptr_sndC5:	dc.l SoundC5
00078BDC 0000 0000                  ptr_sndC6:	dc.l SoundC6
00078BE0 0000 0000                  ptr_sndC7:	dc.l SoundC7
00078BE4 0000 0000                  ptr_sndC8:	dc.l SoundC8
00078BE8 0000 0000                  ptr_sndC9:	dc.l SoundC9
00078BEC 0000 0000                  ptr_sndCA:	dc.l SoundCA
00078BF0 0000 0000                  ptr_sndCB:	dc.l SoundCB
00078BF4 0000 0000                  ptr_sndCC:	dc.l SoundCC
00078BF8 0000 0000                  ptr_sndCD:	dc.l SoundCD
00078BFC 0000 0000                  ptr_sndCE:	dc.l SoundCE
00078C00 0000 0000                  ptr_sndCF:	dc.l SoundCF
00078C04                            ptr_sndend
00078C04                            

00078C04                            ; ---------------------------------------------------------------------------
00078C04                            ; Special sound effect pointers
00078C04                            ; ---------------------------------------------------------------------------
00078C04                            SpecSoundIndex:
00078C04 0000 0000                  ptr_sndD0:	dc.l SoundD0
00078C08                            ptr_specend
00078C08                            

00078C08                            ; ---------------------------------------------------------------------------
00078C08                            ; Sound effect data
00078C08                            ; ---------------------------------------------------------------------------
00078C08                            SoundA0:	incbin	"sound/sfx/SndA0 - Jump.bin"
00078C1E                            		even
00078C1E                            SoundA1:	incbin	"sound/sfx/SndA1 - Lamppost.bin"
00078C48                            		even
00078C48                            SoundA2:	incbin	"sound/sfx/SndA2.bin"
00078C68                            		even
00078C68                            SoundA3:	incbin	"sound/sfx/SndA3 - Death.bin"
00078C9A                            		even
00078C9A                            SoundA4:	incbin	"sound/sfx/SndA4 - Skid.bin"
00078CD0                            		even
00078CD0                            SoundA5:	incbin	"sound/sfx/SndA5.bin"
00078CFC                            		even
00078CFC                            SoundA6:	incbin	"sound/sfx/SndA6 - Hit Spikes.bin"
00078D2C                            		even
00078D2C                            SoundA7:	incbin	"sound/sfx/SndA7 - Push Block.bin"
00078D5C                            		even
00078D5C                            SoundA8:	incbin	"sound/sfx/SndA8 - SS Goal.bin"
00078D90                            		even
00078D90                            SoundA9:	incbin	"sound/sfx/SndA9 - SS Item.bin"
00078DA2                            		even
00078DA2                            SoundAA:	incbin	"sound/sfx/SndAA - Splash.bin"
00078DE4                            		even
00078DE4                            SoundAB:	incbin	"sound/sfx/SndAB.bin"
00078E04                            		even
00078E04                            SoundAC:	incbin	"sound/sfx/SndAC - Hit Boss.bin"
00078E38                            		even
00078E38                            SoundAD:	incbin	"sound/sfx/SndAD - Get Bubble.bin"
00078E6E                            		even
00078E6E                            SoundAE:	incbin	"sound/sfx/SndAE - Fireball.bin"
00078EB8                            		even
00078EB8                            SoundAF:	incbin	"sound/sfx/SndAF - Shield.bin"
00078EE6                            		even
00078EE6                            SoundB0:	incbin	"sound/sfx/SndB0 - Saw.bin"
00078F18                            		even
00078F18                            SoundB1:	incbin	"sound/sfx/SndB1 - Electric.bin"
00078F44                            		even
00078F44                            SoundB2:	incbin	"sound/sfx/SndB2 - Drown Death.bin"
00078F94                            		even
00078F94                            SoundB3:	incbin	"sound/sfx/SndB3 - Flamethrower.bin"
00078FDE                            		even
00078FDE                            SoundB4:	incbin	"sound/sfx/SndB4 - Bumper.bin"
0007903A                            		even
0007903A                            SoundB5:	incbin	"sound/sfx/SndB5 - Ring.bin"
00079068                            		even
00079068                            SoundB6:	incbin	"sound/sfx/SndB6 - Spikes Move.bin"
00079086                            		even
00079086                            SoundB7:	incbin	"sound/sfx/SndB7 - Rumbling.bin"
000790C2                            		even
000790C2                            SoundB8:	incbin	"sound/sfx/SndB8.bin"
000790E0                            		even
000790E0                            SoundB9:	incbin	"sound/sfx/SndB9 - Collapse.bin"
00079144                            		even
00079144                            SoundBA:	incbin	"sound/sfx/SndBA - SS Glass.bin"
0007916C                            		even
0007916C                            SoundBB:	incbin	"sound/sfx/SndBB - Door.bin"
00079198                            		even
00079198                            SoundBC:	incbin	"sound/sfx/SndBC - Teleport.bin"
000791DA                            		even
000791DA                            SoundBD:	incbin	"sound/sfx/SndBD - ChainStomp.bin"
0007922E                            		even
0007922E                            SoundBE:	incbin	"sound/sfx/SndBE - Roll.bin"
00079268                            		even
00079268                            SoundBF:	incbin	"sound/sfx/SndBF - Get Continue.bin"
000792DA                            		even
000792DA                            SoundC0:	incbin	"sound/sfx/SndC0 - Basaran Flap.bin"
00079308                            		even
00079308                            SoundC1:	incbin	"sound/sfx/SndC1 - Break Item.bin"
00079342                            		even
00079342                            SoundC2:	incbin	"sound/sfx/SndC2 - Drown Warning.bin"
0007936C                            		even
0007936C                            SoundC3:	incbin	"sound/sfx/SndC3 - Giant Ring.bin"
000793E6                            		even
000793E6                            SoundC4:	incbin	"sound/sfx/SndC4 - Bomb.bin"
0007940E                            		even
0007940E                            SoundC5:	incbin	"sound/sfx/SndC5 - Cash Register.bin"
00079476                            		even
00079476                            SoundC6:	incbin	"sound/sfx/SndC6 - Ring Loss.bin"
000794B8                            		even
000794B8                            SoundC7:	incbin	"sound/sfx/SndC7 - Chain Rising.bin"
000794E6                            		even
000794E6                            SoundC8:	incbin	"sound/sfx/SndC8 - Burning.bin"
000794F8                            		even
000794F8                            SoundC9:	incbin	"sound/sfx/SndC9 - Hidden Bonus.bin"
00079526                            		even
00079526                            SoundCA:	incbin	"sound/sfx/SndCA - Enter SS.bin"
00079554                            		even
00079554                            SoundCB:	incbin	"sound/sfx/SndCB - Wall Smash.bin"
000795A0                            		even
000795A0                            SoundCC:	incbin	"sound/sfx/SndCC - Spring.bin"
000795DA                            		even
000795DA                            SoundCD:	incbin	"sound/sfx/SndCD - Switch.bin"
000795E8                            		even
000795E8                            SoundCE:	incbin	"sound/sfx/SndCE - Ring Left Speaker.bin"
00079616                            		even
00079616                            SoundCF:	incbin	"sound/sfx/SndCF - Signpost.bin"
0007964E                            		even
0007964E                            

0007964E                            ; ---------------------------------------------------------------------------
0007964E                            ; Special sound effect data
0007964E                            ; ---------------------------------------------------------------------------
0007964E                            SoundD0:	incbin	"sound/sfx/SndD0 - Waterfall.bin"
00079688                            		even
00079688                            

00079688                            ; ---------------------------------------------------------------------------
00079688                            ; 'Sega' chant PCM sample
00079688                            ; ---------------------------------------------------------------------------
00079688                            		; Don't let Sega sample cross $8000-byte boundary
00079688                            		; (DAC driver doesn't switch banks automatically)
00079688                            SegaPCM:	incbin	"sound/dac/sega.pcm"
00080000                            SegaPCM_End
00080000                            		even
00080000                            

00080000                            

00080000                            

00080000                            

00080000                            ; end of 'ROM'
00080000                            		even
00080000                            EndOfRom:
00080000                            

00080000                            

